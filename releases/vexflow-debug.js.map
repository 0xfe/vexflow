{"version":3,"sources":["../src/vex.js","../src/flow.js","../src/fraction.js","../src/tables.js","../src/fonts/vexflow_font.js","../src/glyph.js","../src/stave.js","../src/staveconnector.js","../src/tabstave.js","../src/tickcontext.js","../src/tickable.js","../src/note.js","../src/notehead.js","../src/stem.js","../src/stemmablenote.js","../src/stavenote.js","../src/tabnote.js","../src/ghostnote.js","../src/clefnote.js","../src/timesignote.js","../src/beam.js","../src/voice.js","../src/voicegroup.js","../src/modifier.js","../src/modifiercontext.js","../src/accidental.js","../src/dot.js","../src/formatter.js","../src/stavetie.js","../src/tabtie.js","../src/tabslide.js","../src/bend.js","../src/vibrato.js","../src/annotation.js","../src/articulation.js","../src/tuning.js","../src/stavemodifier.js","../src/keysignature.js","../src/timesignature.js","../src/clef.js","../src/music.js","../src/keymanager.js","../src/renderer.js","../src/raphaelcontext.js","../src/svgcontext.js","../src/canvascontext.js","../src/stavebarline.js","../src/stavehairpin.js","../src/stavevolta.js","../src/staverepetition.js","../src/stavesection.js","../src/stavetempo.js","../src/stavetext.js","../src/barnote.js","../src/tremolo.js","../src/tuplet.js","../src/boundingbox.js","../src/textnote.js","../src/frethandfinger.js","../src/stringnumber.js","../src/strokes.js","../src/curve.js","../src/staveline.js","../src/crescendo.js","../src/ornament.js","../src/pedalmarking.js","../src/textbracket.js","../src/textdynamics.js","../src/gracenote.js","../src/gracenotegroup.js"],"names":[],"mappings":"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AC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,KAAK,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI,KAAK,GAAG,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CA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","file":"vexflow-debug.js","sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n// ## JSHint Settings\n//\n/* global window: false */\n/* global document: false */\n\nif (typeof Vex === 'undefined') {\n  /* global Vex: true */\n  Vex = function() {};\n}\n\n// Default log function sends all arguments to console.\nVex.L = function(block, args) {\n  if (!args) return;\n  var line = Array.prototype.slice.call(args).join(\" \");\n  window.console.log(block + \": \" + line);\n};\n\n// Default runtime exception.\nVex.RuntimeError = function(code, message) {\n  this.code = code;\n  this.message = message;\n};\n\nVex.RuntimeError.prototype.toString = function() {\n  return \"RuntimeError: \" + this.message;\n};\n\n// Shortcut method for `RuntimeError`.\nVex.RERR = Vex.RuntimeError;\n\n// Merge `destination` hash with `source` hash, overwriting like keys\n// in `source` if necessary.\nVex.Merge = function(destination, source) {\n  for (var property in source)\n    destination[property] = source[property];\n  return destination;\n};\n\n// DEPRECATED. Use `Math.*`.\nVex.Min = Math.min;\nVex.Max = Math.max;\nVex.forEach = function(a, fn) {\n  for (var i=0; i<a.length; i++) {\n    fn(a[i],i);\n  }\n};\n\n// Round number to nearest fractional value (`.5`, `.25`, etc.)\nVex.RoundN = function(x, n) {\n  return (x % n) >= (n/2) ?\n    parseInt(x / n, 10) * n + n : parseInt(x / n, 10) * n;\n};\n\n// Locate the mid point between stave lines. Returns a fractional line if a space.\nVex.MidLine = function(a, b) {\n  var mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n};\n\n// Take `arr` and return a new list consisting of the sorted, unique,\n// contents of arr. Does not modify `arr`.\nVex.SortAndUnique = function(arr, cmp, eq) {\n  if (arr.length > 1) {\n    var newArr = [];\n    var last;\n    arr.sort(cmp);\n\n    for (var i = 0; i < arr.length; ++i) {\n      if (i === 0 || !eq(arr[i], last)) {\n        newArr.push(arr[i]);\n      }\n      last = arr[i];\n    }\n\n    return newArr;\n  } else {\n    return arr;\n  }\n};\n\n// Check if array `a` contains `obj`.\nVex.Contains = function(a, obj) {\n  var i = a.length;\n  while (i--) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Get the 2D Canvas context from DOM element `canvas_sel`.\nVex.getCanvasContext = function(canvas_sel) {\n  if (!canvas_sel)\n    throw new Vex.RERR(\"BadArgument\", \"Invalid canvas selector: \" + canvas_sel);\n\n  var canvas = document.getElementById(canvas_sel);\n  if (!(canvas && canvas.getContext)) {\n    throw new Vex.RERR(\"UnsupportedBrowserError\",\n        \"This browser does not support HTML5 Canvas\");\n  }\n\n  return canvas.getContext('2d');\n};\n\n// Draw a tiny dot marker on the specified canvas. A great debugging aid.\n//\n// `ctx`: Canvas context.\n// `x`, `y`: Dot coordinates.\nVex.drawDot = function(ctx, x, y, color) {\n  var c = color || \"#f55\";\n  ctx.save();\n  ctx.setFillStyle(c);\n\n  //draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI*2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n};\n\n// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\nVex.BM = function(s, f) {\n  var start_time = new Date().getTime();\n  f();\n  var elapsed = new Date().getTime() - start_time;\n  Vex.L(s + elapsed + \"ms\");\n};\n\n// Basic classical inheritance helper. Usage:\n// ```\n// // Vex.Inherit(Child, Parent, {\n// //   getName: function() {return this.name;},\n// //   setName: function(name) {this.name = name}\n// // });\n// //\n// // Returns 'Child'.\n// ```\nVex.Inherit = (function () {\n  var F = function () {};\n  // `C` is Child. `P` is parent. `O` is an object to\n  // to extend `C` with.\n  return function (C, P, O) {\n    F.prototype = P.prototype;\n    C.prototype = new F();\n    C.superclass = P.prototype;\n    C.prototype.constructor = C;\n    Vex.Merge(C.prototype, O);\n    return C;\n  };\n}());\n\n// Get stack trace.\nVex.StackTrace = function() {\n  var err = new Error();\n  return err.stack;\n};\n\n// Dump warning to console.\nVex.W = function() {\n  var line = Array.prototype.slice.call(arguments).join(\" \");\n  window.console.log(\"Warning: \", line, Vex.StackTrace());\n};\n\n// Used by various classes (e.g., SVGContext) to provide a\n// unique prefix to element names (or other keys in shared namespaces).\nVex.Prefix = function(text) {\n  return Vex.Prefix.prefix + text;\n};\nVex.Prefix.prefix = \"vf-\";\n\n// UMD to export Vex.\n//\n/* global require: false */\n/* global define: false */\n/* global module: false */\nif (typeof require == \"function\") {\n  try {\n    module.exports = Vex;\n  } catch (e) {}\n} else if (typeof define == \"function\" && define.amd) {\n  define(\"Vex\", [], function(){ return Vex; });\n} else {\n  (this || window)[\"Vex\"] = Vex;\n}\n","/**\n * Vex Flow - Mohit Muthanna <mohit@muthanna.com>\n */\n\n/**\n * New namespace.\n */\n\nif (typeof Vex.Flow === 'undefined') {\n  Vex.Flow = {\n    /**\n     * The resolution used for all the rhythm timing in this\n     * library.\n     *\n     * @const\n     * @type {number}\n     */\n    RESOLUTION: 16384,\n\n    /* Kerning (DEPRECATED) */\n    IsKerned: true\n  };\n}\n","// Fraction class that represents a rational number\n// @author zz85\n// @author incompleteopus (modifications)\n\nVex.Flow.Fraction = (function() {\n  function Fraction(numerator, denominator) {\n    this.set(numerator, denominator);\n  }\n\n  /**\n   * GCD: Find greatest common divisor using Euclidean algorithm\n   */\n  Fraction.GCD = function(a, b) {\n    if (typeof a !== \"number\" || typeof b !== \"number\") {\n      throw new Vex.RERR(\"BadArgument\", \"Invalid numbers: \" + a + \", \" + b);\n    }\n\n    var t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  };\n\n  /**\n   * LCM: Lowest common multiple\n   */\n  Fraction.LCM = function(a, b) {\n    return ((a * b) / Fraction.GCD(a, b));\n  };\n\n  /**\n   * LCMM: Lowest common multiple for more than two numbers\n   */\n  Fraction.LCMM = function(args) {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length == 1) {\n      return args[0];\n    } else if (args.length == 2) {\n      return Vex.Flow.Fraction.LCM(args[0], args[1]);\n    } else {\n      var arg0 = args[0];\n      args.shift();\n      return Fraction.LCM(arg0, Vex.Flow.Fraction.LCMM(args));\n    }\n  };\n\n  Fraction.prototype = {\n    set: function(numerator, denominator) {\n      this.numerator = numerator === undefined ? 1 : numerator;\n      this.denominator = denominator === undefined ? 1 : denominator;\n      return this;\n    },\n\n    value: function() {\n      return this.numerator / this.denominator;\n    },\n\n    simplify: function() {\n      var u = this.numerator;\n      var d = this.denominator;\n\n      var gcd = Vex.Flow.Fraction.GCD(u, d);\n      u /= gcd;\n      d /= gcd;\n\n      if (d < 0) {\n        d = -d;\n        u = -u;\n      }\n      return this.set(u, d);\n    },\n\n    add: function(param1, param2) {\n      var otherNumerator;\n      var otherDenominator;\n\n      if (param1 instanceof Vex.Flow.Fraction) {\n        otherNumerator = param1.numerator;\n        otherDenominator = param1.denominator;\n      } else {\n        if (param1 !== undefined) {\n          otherNumerator = param1;\n        } else {\n          otherNumerator = 0;\n        }\n\n        if (param2 !== undefined) {\n          otherDenominator = param2;\n        } else {\n          otherDenominator = 1;\n        }\n      }\n\n      var lcm = Vex.Flow.Fraction.LCM(this.denominator, otherDenominator);\n      var a = lcm / this.denominator;\n      var b = lcm / otherDenominator;\n\n      var u = this.numerator * a + otherNumerator * b;\n      return this.set(u, lcm);\n    },\n\n    subtract: function(param1, param2) {\n      var otherNumerator;\n      var otherDenominator;\n\n      if (param1 instanceof Vex.Flow.Fraction) {\n        otherNumerator = param1.numerator;\n        otherDenominator = param1.denominator;\n      } else {\n        if (param1 !== undefined) {\n          otherNumerator = param1;\n        } else {\n          otherNumerator = 0;\n        }\n\n        if (param2 !== undefined) {\n          otherDenominator = param2;\n        } else {\n          otherDenominator = 1;\n        }\n      }\n\n      var lcm = Vex.Flow.Fraction.LCM(this.denominator, otherDenominator);\n      var a = lcm / this.denominator;\n      var b = lcm / otherDenominator;\n\n      var u = this.numerator * a - otherNumerator * b;\n      return this.set(u, lcm);\n    },\n\n    multiply: function(param1, param2) {\n      var otherNumerator;\n      var otherDenominator;\n\n      if (param1 instanceof Vex.Flow.Fraction) {\n        otherNumerator = param1.numerator;\n        otherDenominator = param1.denominator;\n      } else {\n        if (param1 !== undefined) {\n          otherNumerator = param1;\n        } else {\n          otherNumerator = 1;\n        }\n\n        if (param2 !== undefined) {\n          otherDenominator = param2;\n        } else {\n          otherDenominator = 1;\n        }\n      }\n\n      return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    },\n\n    divide: function(param1, param2) {\n      var otherNumerator;\n      var otherDenominator;\n\n      if (param1 instanceof Vex.Flow.Fraction) {\n        otherNumerator = param1.numerator;\n        otherDenominator = param1.denominator;\n      } else {\n        if (param1 !== undefined) {\n          otherNumerator = param1;\n        } else {\n          otherNumerator = 1;\n        }\n\n        if (param2 !== undefined) {\n          otherDenominator = param2;\n        } else {\n          otherDenominator = 1;\n        }\n      }\n\n      return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    },\n\n\n    // Simplifies both sides and checks if they are equal.\n    equals: function(compare) {\n      var a = Vex.Flow.Fraction.__compareA.copy(compare).simplify();\n      var b = Vex.Flow.Fraction.__compareB.copy(this).simplify();\n\n      return (a.numerator === b.numerator) && (a.denominator === b.denominator);\n    },\n    \n    // Greater than operator.\n    greaterThan: function(compare) {\n      var a = Vex.Flow.Fraction.__compareB.copy(this);\n      a.subtract(compare);\n      return (a.numerator > 0);\n    },\n    \n    // Greater than or equals operator.\n    greaterThanEquals: function(compare) {\n      var a = Vex.Flow.Fraction.__compareB.copy(this);\n      a.subtract(compare);\n      return (a.numerator >= 0);\n    },\n\n    // Less than operator.\n    lessThan: function(compare) {\n      return !(this.greaterThanEquals(compare));  \n    },\n\n    // Less than or equals operator.\n    lessThanEquals: function(compare) {\n      return !(this.greaterThan(compare));  \n    },\n\n    // Creates a new copy with this current values.\n    clone: function() {\n      return new Vex.Flow.Fraction(this.numerator, this.denominator);\n    },\n\n    // Copies value of another Fraction into itself.\n    copy: function(copy) {\n      return this.set(copy.numerator, copy.denominator);\n    },\n\n    // Returns the integer component eg. (4/2) == 2\n    quotient: function() {\n      return Math.floor(this.numerator / this.denominator);\n    },\n\n    // Returns the fraction component when reduced to a mixed number\n    fraction: function() {\n      return this.numerator % this.denominator;\n    },\n\n    // Returns the absolute value\n    abs: function() {\n      this.denominator = Math.abs(this.denominator);\n      this.numerator = Math.abs(this.numerator);\n      return this;\n    },\n\n    // Returns a raw string representation\n    toString: function() {\n      return this.numerator + '/' + this.denominator;\n    },\n\n    // Returns a simplified string respresentation\n    toSimplifiedString: function() {\n      return Vex.Flow.Fraction.__tmp.copy(this).simplify().toString();\n    },\n\n    // Returns string representation in mixed form\n    toMixedString: function() {\n      var s = '';\n      var q = this.quotient();\n      var f = Vex.Flow.Fraction.__tmp.copy(this);\n\n      if (q < 0) {\n        f.abs().fraction();\n      } else {\n        f.fraction();\n      }\n\n      if (q !== 0) {\n        s += q;\n\n        if (f.numerator !== 0) {\n          s += ' ' + f.toSimplifiedString();\n        }\n      } else {\n        if (f.numerator === 0) {\n          s = '0';\n        } else {\n          s = f.toSimplifiedString();\n        }\n      }\n\n      return s;\n    },\n\n    // Parses a fraction string\n    parse: function(str) {\n      var i = str.split('/');\n      var n = parseInt(i[0], 10);\n      var d = (i[1]) ? parseInt(i[1], 10) : 1;\n\n      return this.set(n, d);\n    }\n  };\n\n  // Temporary cached objects\n  Fraction.__compareA = new Fraction();\n  Fraction.__compareB = new Fraction();\n  Fraction.__tmp = new Fraction();\n\n  return Fraction;\n}());\n\n","// Vex Flow Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n//\n// Requires vex.js.\n\nVex.Flow.STEM_WIDTH = 1.5;\nVex.Flow.STEM_HEIGHT = 32;\nVex.Flow.STAVE_LINE_THICKNESS = 2;\n\nVex.Flow.clefProperties = function(clef) {\n  if (!clef) throw new Vex.RERR(\"BadArgument\", \"Invalid clef: \" + clef);\n\n  var props = Vex.Flow.clefProperties.values[clef];\n  if (!props) throw new Vex.RERR(\"BadArgument\", \"Invalid clef: \" + clef);\n\n  return props;\n};\n\nVex.Flow.clefProperties.values = {\n  'treble':  { line_shift: 0 },\n  'bass':    { line_shift: 6 },\n  'tenor':   { line_shift: 4 },\n  'alto':    { line_shift: 3 },\n  'soprano': { line_shift: 1 },\n  'percussion': { line_shift: 0 },\n  'mezzo-soprano': { line_shift: 2 },\n  'baritone-c': { line_shift: 5 },\n  'baritone-f': { line_shift: 5 },\n  'subbass': { line_shift: 7 },\n  'french': { line_shift: -1 }\n};\n\n/*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n*/\nVex.Flow.keyProperties = function(key, clef, params) {\n  if (clef === undefined) {\n    clef = 'treble';\n  }\n  var options = {\n    octave_shift: 0\n  };\n  if (typeof params == \"object\") {\n    Vex.Merge(options, params);\n  }\n\n  var pieces = key.split(\"/\");\n\n  if (pieces.length < 2) {\n    throw new Vex.RERR(\"BadArguments\",\n        \"Key must have note + octave and an optional glyph: \" + key);\n  }\n\n  var k = pieces[0].toUpperCase();\n  var value = Vex.Flow.keyProperties.note_values[k];\n  if (!value) throw new Vex.RERR(\"BadArguments\", \"Invalid key name: \" + k);\n  if (value.octave) pieces[1] = value.octave;\n\n  var o = parseInt(pieces[1]);\n\n  // Octave_shift is the shift to compensate for clef 8va/8vb.\n  o += -1 * options.octave_shift;\n\n  var base_index = (o * 7) - (4 * 7);\n  var line = (base_index + value.index) / 2;\n  line += Vex.Flow.clefProperties(clef).line_shift;\n\n  var stroke = 0;\n\n  if (line <= 0 && (((line * 2) % 2) === 0)) stroke = 1;  // stroke up\n  if (line >= 6 && (((line * 2) % 2) === 0)) stroke = -1; // stroke down\n\n  // Integer value for note arithmetic.\n  var int_value = (typeof(value.int_val)!='undefined') ? (o * 12) +\n    value.int_val : null;\n\n  /* Check if the user specified a glyph. */\n  var code = value.code;\n  var shift_right = value.shift_right;\n  if ((pieces.length > 2) && (pieces[2])) {\n    var glyph_name = pieces[2].toUpperCase();\n    var note_glyph = Vex.Flow.keyProperties.note_glyph[glyph_name];\n    if (note_glyph) {\n      code = note_glyph.code;\n      shift_right = note_glyph.shift_right;\n    }\n  }\n\n  return {\n    key: k,\n    octave: o,\n    line: line,\n    int_value: int_value,\n    accidental: value.accidental,\n    code: code,\n    stroke: stroke,\n    shift_right: shift_right,\n    displaced: false\n  };\n};\n\nVex.Flow.keyProperties.note_values = {\n  'C':  { index: 0, int_val: 0, accidental: null },\n  'CN': { index: 0, int_val: 0, accidental: \"n\" },\n  'C#': { index: 0, int_val: 1, accidental: \"#\" },\n  'C##': { index: 0, int_val: 2, accidental: \"##\" },\n  'CB': { index: 0, int_val: -1, accidental: \"b\" },\n  'CBB': { index: 0, int_val: -2, accidental: \"bb\" },\n  'D':  { index: 1, int_val: 2, accidental: null },\n  'DN': { index: 1, int_val: 2, accidental: \"n\" },\n  'D#': { index: 1, int_val: 3, accidental: \"#\" },\n  'D##': { index: 1, int_val: 4, accidental: \"##\" },\n  'DB': { index: 1, int_val: 1, accidental: \"b\" },\n  'DBB': { index: 1, int_val: 0, accidental: \"bb\" },\n  'E':  { index: 2, int_val: 4, accidental: null },\n  'EN': { index: 2, int_val: 4, accidental: \"n\" },\n  'E#': { index: 2, int_val: 5, accidental: \"#\" },\n  'E##': { index: 2, int_val: 6, accidental: \"##\" },\n  'EB': { index: 2, int_val: 3, accidental: \"b\" },\n  'EBB': { index: 2, int_val: 2, accidental: \"bb\" },\n  'F':  { index: 3, int_val: 5, accidental: null },\n  'FN': { index: 3, int_val: 5, accidental: \"n\" },\n  'F#': { index: 3, int_val: 6, accidental: \"#\" },\n  'F##': { index: 3, int_val: 7, accidental: \"##\" },\n  'FB': { index: 3, int_val: 4, accidental: \"b\" },\n  'FBB': { index: 3, int_val: 3, accidental: \"bb\" },\n  'G':  { index: 4, int_val: 7, accidental: null },\n  'GN': { index: 4, int_val: 7, accidental: \"n\" },\n  'G#': { index: 4, int_val: 8, accidental: \"#\" },\n  'G##': { index: 4, int_val: 9, accidental: \"##\" },\n  'GB': { index: 4, int_val: 6, accidental: \"b\" },\n  'GBB': { index: 4, int_val: 5, accidental: \"bb\" },\n  'A':  { index: 5, int_val: 9, accidental: null },\n  'AN': { index: 5, int_val: 9, accidental: \"n\" },\n  'A#': { index: 5, int_val: 10, accidental: \"#\" },\n  'A##': { index: 5, int_val: 11, accidental: \"##\" },\n  'AB': { index: 5, int_val: 8, accidental: \"b\" },\n  'ABB': { index: 5, int_val: 7, accidental: \"bb\" },\n  'B':  { index: 6, int_val: 11, accidental: null },\n  'BN': { index: 6, int_val: 11, accidental: \"n\" },\n  'B#': { index: 6, int_val: 12, accidental: \"#\" },\n  'B##': { index: 6, int_val: 13, accidental: \"##\" },\n  'BB': { index: 6, int_val: 10, accidental: \"b\" },\n  'BBB': { index: 6, int_val: 9, accidental: \"bb\" },\n  'R': { index: 6, int_val: 9, rest: true }, // Rest\n  'X':  {\n    index: 6,\n    accidental: \"\",\n    octave: 4,\n    code: \"v3e\",\n    shift_right: 5.5\n  }\n};\n\nVex.Flow.keyProperties.note_glyph = {\n  /* Diamond */\n  'D0':  { code: \"v27\", shift_right: -0.5 },\n  'D1':  { code: \"v2d\", shift_right: -0.5 },\n  'D2':  { code: \"v22\", shift_right: -0.5 },\n  'D3':  { code: \"v70\", shift_right: -0.5 },\n\n  /* Triangle */\n  'T0':  { code: \"v49\", shift_right: -2 },\n  'T1':  { code: \"v93\", shift_right: 0.5 },\n  'T2':  { code: \"v40\", shift_right: 0.5 },\n  'T3':  { code: \"v7d\", shift_right: 0.5 },\n\n  /* Cross */\n  'X0':  { code: \"v92\", shift_right: -2 },\n  'X1':  { code: \"v95\", shift_right: -0.5 },\n  'X2':  { code: \"v7f\", shift_right: 0.5 },\n  'X3':  { code: \"v3b\", shift_right: -2 }\n};\n\nVex.Flow.integerToNote = function(integer) {\n  if (typeof(integer) == \"undefined\")\n    throw new Vex.RERR(\"BadArguments\", \"Undefined integer for integerToNote\");\n\n  if (integer < -2)\n    throw new Vex.RERR(\"BadArguments\",\n        \"integerToNote requires integer > -2: \" + integer);\n\n  var noteValue = Vex.Flow.integerToNote.table[integer];\n  if (!noteValue)\n    throw new Vex.RERR(\"BadArguments\", \"Unknown note value for integer: \" +\n        integer);\n\n  return noteValue;\n};\n\nVex.Flow.integerToNote.table = {\n  0: \"C\",\n  1: \"C#\",\n  2: \"D\",\n  3: \"D#\",\n  4: \"E\",\n  5: \"F\",\n  6: \"F#\",\n  7: \"G\",\n  8: \"G#\",\n  9: \"A\",\n  10: \"A#\",\n  11: \"B\"\n};\n\n\nVex.Flow.tabToGlyph = function(fret) {\n  var glyph = null;\n  var width = 0;\n  var shift_y = 0;\n\n  if (fret.toString().toUpperCase() == \"X\") {\n    glyph = \"v7f\";\n    width = 7;\n    shift_y = -4.5;\n  } else {\n    width = Vex.Flow.textWidth(fret.toString());\n  }\n\n  return {\n    text: fret,\n    code: glyph,\n    width: width,\n    shift_y: shift_y\n  };\n};\n\nVex.Flow.textWidth = function(text) {\n  return 6 * text.toString().length;\n};\n\nVex.Flow.articulationCodes = function(artic) {\n  return Vex.Flow.articulationCodes.articulations[artic];\n};\n\nVex.Flow.articulationCodes.articulations = {\n  \"a.\": {   // Staccato\n    code: \"v23\",\n    width: 4,\n    shift_right: -2,\n    shift_up: 8,\n    shift_down: 0,\n    between_lines: true\n  },\n  \"av\": {   // Staccatissimo\n    code: \"v28\",\n    width: 4,\n    shift_right: 0,\n    shift_up: 11,\n    shift_down: 5,\n    between_lines: true\n  },\n  \"a>\": {   // Accent\n    code: \"v42\",\n    width: 10,\n    shift_right: 5,\n    shift_up: 8,\n    shift_down: 1,\n    between_lines: true\n  },\n  \"a-\": {   // Tenuto\n    code: \"v25\",\n    width: 9,\n    shift_right: -4,\n    shift_up: 17,\n    shift_down: 10,\n    between_lines: true\n  },\n  \"a^\": {   // Marcato\n    code: \"va\",\n    width: 8,\n    shift_right: 0,\n    shift_up: -4,\n    shift_down: -2,\n    between_lines: false\n  },\n  \"a+\": {   // Left hand pizzicato\n    code: \"v8b\",\n    width: 9,\n    shift_right: -4,\n    shift_up: 12,\n    shift_down: 12,\n    between_lines: false\n  },\n  \"ao\": {   // Snap pizzicato\n    code: \"v94\",\n    width: 8,\n    shift_right: 0,\n    shift_up: -4,\n    shift_down: 6,\n    between_lines: false\n  },\n  \"ah\": {   // Natural harmonic or open note\n    code: \"vb9\",\n    width: 7,\n    shift_right: 0,\n    shift_up: -4,\n    shift_down: 4,\n    between_lines: false\n  },\n  \"a@a\": {   // Fermata above staff\n    code: \"v43\",\n    width: 25,\n    shift_right: 0,\n    shift_up: 8,\n    shift_down: 10,\n    between_lines: false\n  },\n  \"a@u\": {   // Fermata below staff\n    code: \"v5b\",\n    width: 25,\n    shift_right: 0,\n    shift_up: 0,\n    shift_down: -4,\n    between_lines: false\n  },\n  \"a|\": {   // Bow up - up stroke\n    code: \"v75\",\n    width: 8,\n    shift_right: 0,\n    shift_up: 8,\n    shift_down: 10,\n    between_lines: false\n  },\n  \"am\": {   // Bow down - down stroke\n    code: \"v97\",\n    width: 13,\n    shift_right: 0,\n    shift_up: 10,\n    shift_down: 12,\n    between_lines: false\n  },\n  \"a,\": {   // Choked\n    code: \"vb3\",\n    width: 6,\n    shift_right: 8,\n    shift_up: -4,\n    shift_down: 4,\n    between_lines: false\n  }\n};\n\nVex.Flow.accidentalCodes = function(acc) {\n  return Vex.Flow.accidentalCodes.accidentals[acc];\n};\n\nVex.Flow.accidentalCodes.accidentals = {\n  \"#\": {\n    code: \"v18\",\n    width: 10,\n    gracenote_width: 4.5,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"##\": {\n    code: \"v7f\",\n    width: 13,\n    gracenote_width: 6,\n    shift_right: -1,\n    shift_down: 0\n  },\n  \"b\": {\n    code: \"v44\",\n    width: 8,\n    gracenote_width: 4.5,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"bb\": {\n    code: \"v26\",\n    width: 14,\n    gracenote_width: 8,\n    shift_right: -3,\n    shift_down: 0\n  },\n  \"n\": {\n    code: \"v4e\",\n    width: 8,\n    gracenote_width: 4.5,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"{\": {   // Left paren for cautionary accidentals\n    code: \"v9c\",\n    width: 5,\n    shift_right: 2,\n    shift_down: 0\n  },\n  \"}\": {   // Right paren for cautionary accidentals\n    code: \"v84\",\n    width: 5,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"db\": {\n    code: \"v9e\",\n    width: 16,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"d\": {\n    code: \"vab\",\n    width: 10,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"bbs\": {\n    code: \"v90\",\n    width: 13,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"++\": {\n    code: \"v51\",\n    width: 13,\n    shift_right: 0,\n    shift_down: 0\n  },\n  \"+\": {\n    code: \"v78\",\n    width: 8,\n    shift_right: 0,\n    shift_down: 0\n  }\n};\n\nVex.Flow.accidentalColumnsTable = {\n  1 : { a : [1], b : [1]},\n  2 : { a : [1, 2] },\n  3 : { a : [1, 3, 2], b : [1, 2, 1], second_on_bottom : [1, 2, 3] },\n  4 : { a : [1, 3, 4, 2], b : [1, 2, 3, 1], spaced_out_tetrachord : [1, 2, 1, 2] },\n  5 : { a : [1, 3, 5, 4, 2], b : [1, 2, 4, 3, 1],\n        spaced_out_pentachord : [1, 2, 3, 2, 1],\n        very_spaced_out_pentachord : [1, 2, 1, 2, 1] },\n  6 : { a : [1, 3, 5, 6, 4, 2], b : [1, 2, 4, 5, 3, 1],\n        spaced_out_hexachord : [1, 3, 2, 1, 3, 2],\n        very_spaced_out_hexachord : [1, 2, 1, 2, 1, 2] }\n};\n\nVex.Flow.ornamentCodes = function(acc) {\n  return Vex.Flow.ornamentCodes.ornaments[acc];\n};\n\nVex.Flow.ornamentCodes.ornaments = {\n  \"mordent\": {\n    code: \"v1e\",\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 5,\n    width: 14,\n  },\n  \"mordent_inverted\": {\n    code: \"v45\",\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 5,\n    width: 14,\n  },\n  \"turn\": {\n    code: \"v72\",\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 5,\n    width: 20,\n  },\n  \"turn_inverted\": {\n    code: \"v33\",\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 6,\n    width: 20,\n  },\n  \"tr\": {\n    code: \"v1f\",\n    shift_right: 0,\n    shift_up: 5,\n    shift_down: 15,\n    width: 10,\n  },\n  \"upprall\": {\n    code: \"v60\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  \"downprall\": {\n    code: \"vb4\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  \"prallup\": {\n    code: \"v6d\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  \"pralldown\": {\n    code: \"v2c\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  \"upmordent\": {\n    code: \"v29\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  \"downmordent\": {\n    code: \"v68\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  \"lineprall\": {\n    code: \"v20\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  \"prallprall\": {\n    code: \"v86\",\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  }\n};\n\nVex.Flow.keySignature = function(spec) {\n  var keySpec = Vex.Flow.keySignature.keySpecs[spec];\n\n  if (!keySpec) {\n    throw new Vex.RERR(\"BadKeySignature\",\n        \"Bad key signature spec: '\" + spec + \"'\");\n  }\n\n  if (!keySpec.acc) {\n    return [];\n  }\n\n  var notes = Vex.Flow.keySignature.accidentalList(keySpec.acc);\n\n  var acc_list = [];\n  for (var i = 0; i < keySpec.num; ++i) {\n    var line = notes[i];\n    acc_list.push({type: keySpec.acc, line: line});\n  }\n\n  return acc_list;\n};\n\nVex.Flow.keySignature.keySpecs = {\n  \"C\": {acc: null, num: 0},\n  \"Am\": {acc: null, num: 0},\n  \"F\": {acc: \"b\", num: 1},\n  \"Dm\": {acc: \"b\", num: 1},\n  \"Bb\": {acc: \"b\", num: 2},\n  \"Gm\": {acc: \"b\", num: 2},\n  \"Eb\": {acc: \"b\", num: 3},\n  \"Cm\": {acc: \"b\", num: 3},\n  \"Ab\": {acc: \"b\", num: 4},\n  \"Fm\": {acc: \"b\", num: 4},\n  \"Db\": {acc: \"b\", num: 5},\n  \"Bbm\": {acc: \"b\", num: 5},\n  \"Gb\": {acc: \"b\", num: 6},\n  \"Ebm\": {acc: \"b\", num: 6},\n  \"Cb\": {acc: \"b\", num: 7},\n  \"Abm\": {acc: \"b\", num: 7},\n  \"G\": {acc: \"#\", num: 1},\n  \"Em\": {acc: \"#\", num: 1},\n  \"D\": {acc: \"#\", num: 2},\n  \"Bm\": {acc: \"#\", num: 2},\n  \"A\": {acc: \"#\", num: 3},\n  \"F#m\": {acc: \"#\", num: 3},\n  \"E\": {acc: \"#\", num: 4},\n  \"C#m\": {acc: \"#\", num: 4},\n  \"B\": {acc: \"#\", num: 5},\n  \"G#m\": {acc: \"#\", num: 5},\n  \"F#\": {acc: \"#\", num: 6},\n  \"D#m\": {acc: \"#\", num: 6},\n  \"C#\": {acc: \"#\", num: 7},\n  \"A#m\": {acc: \"#\", num: 7}\n};\n\nVex.Flow.unicode = {\n  // Unicode accidentals\n  \"sharp\": String.fromCharCode(parseInt('266F', 16)),\n  \"flat\" : String.fromCharCode(parseInt('266D', 16)),\n  \"natural\": String.fromCharCode(parseInt('266E', 16)),\n  // Major Chord\n  \"triangle\": String.fromCharCode(parseInt('25B3', 16)),\n  // half-diminished\n  \"o-with-slash\": String.fromCharCode(parseInt('00F8', 16)),\n   // Diminished\n  \"degrees\": String.fromCharCode(parseInt('00B0', 16)),\n  \"circle\": String.fromCharCode(parseInt('25CB', 16))\n};\n\nVex.Flow.keySignature.accidentalList = function(acc) {\n  if (acc == \"b\") {\n    return [2, 0.5, 2.5, 1, 3, 1.5, 3.5];\n  }\n  else if (acc == \"#\") {\n    return [0, 1.5, -0.5, 1, 2.5, 0.5, 2]; }\n};\n\nVex.Flow.parseNoteDurationString = function(durationString) {\n  if (typeof(durationString) !== \"string\") {\n    return null;\n  }\n\n  var regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n\n  var result = regexp.exec(durationString);\n  if (!result) {\n    return null;\n  }\n\n  var duration = result[1];\n  var dots = result[2].length;\n  var type = result[3];\n\n  if (type.length === 0) {\n    type = \"n\";\n  }\n\n  return {\n    duration: duration,\n    dots: dots,\n    type: type\n  };\n};\n\nVex.Flow.parseNoteData = function(noteData) {\n  var duration = noteData.duration;\n\n  // Preserve backwards-compatibility\n  var durationStringData = Vex.Flow.parseNoteDurationString(duration);\n  if (!durationStringData) {\n    return null;\n  }\n\n  var ticks = Vex.Flow.durationToTicks(durationStringData.duration);\n  if (ticks == null) {\n    return null;\n  }\n\n  var type = noteData.type;\n\n  if (type) {\n    if (!(type === \"n\" || type === \"r\" || type === \"h\" ||\n          type === \"m\" || type === \"s\")) {\n      return null;\n    }\n  } else {\n    type = durationStringData.type;\n    if (!type) {\n      type = \"n\";\n    }\n  }\n\n  var dots = 0;\n  if (noteData.dots) {\n    dots = noteData.dots;\n  } else {\n    dots = durationStringData.dots;\n  }\n\n  if (typeof(dots) !== \"number\") {\n    return null;\n  }\n\n  var currentTicks = ticks;\n\n  for (var i = 0; i < dots; i++) {\n    if (currentTicks <= 1) {\n      return null;\n    }\n\n    currentTicks = currentTicks / 2;\n    ticks += currentTicks;\n  }\n\n  return {\n    duration: durationStringData.duration,\n    type: type,\n    dots: dots,\n    ticks: ticks\n  };\n};\n\n// Used to convert duration aliases to the number based duration.\n// If the input isn't an alias, simply return the input.\n//\n// example: 'q' -> '4', '8' -> '8'\nVex.Flow.sanitizeDuration = function(duration) {\n  var alias = Vex.Flow.durationAliases[duration];\n  if (alias !== undefined) {\n    duration = alias;\n  }\n\n  if (Vex.Flow.durationToTicks.durations[duration] === undefined) {\n    throw new Vex.RERR('BadArguments',\n      'The provided duration is not valid');\n  }\n\n  return duration;\n};\n\n// Convert the `duration` to an fraction\nVex.Flow.durationToFraction = function(duration) {\n  return new Vex.Flow.Fraction().parse(Vex.Flow.sanitizeDuration(duration));\n};\n\n// Convert the `duration` to an number\nVex.Flow.durationToNumber = function(duration) {\n  return Vex.Flow.durationToFraction(duration).value();\n};\n\n// Convert the `duration` to total ticks\nVex.Flow.durationToTicks = function(duration) {\n  duration = Vex.Flow.sanitizeDuration(duration);\n\n  var ticks = Vex.Flow.durationToTicks.durations[duration];\n  if (ticks === undefined) {\n    return null;\n  }\n\n  return ticks;\n};\n\nVex.Flow.durationToTicks.durations = {\n  \"1/2\":  Vex.Flow.RESOLUTION * 2,\n  \"1\":    Vex.Flow.RESOLUTION / 1,\n  \"2\":    Vex.Flow.RESOLUTION / 2,\n  \"4\":    Vex.Flow.RESOLUTION / 4,\n  \"8\":    Vex.Flow.RESOLUTION / 8,\n  \"16\":   Vex.Flow.RESOLUTION / 16,\n  \"32\":   Vex.Flow.RESOLUTION / 32,\n  \"64\":   Vex.Flow.RESOLUTION / 64,\n  \"128\":  Vex.Flow.RESOLUTION / 128,\n  \"256\":  Vex.Flow.RESOLUTION / 256\n};\n\nVex.Flow.durationAliases = {\n  \"w\": \"1\",\n  \"h\": \"2\",\n  \"q\": \"4\",\n\n  // This is the default duration used to render bars (BarNote). Bars no longer\n  // consume ticks, so this should be a no-op.\n  //\n  // TODO(0xfe): This needs to be cleaned up.\n  \"b\": \"256\"\n};\n\nVex.Flow.durationToGlyph = function(duration, type) {\n  duration = Vex.Flow.sanitizeDuration(duration);\n\n  var code = Vex.Flow.durationToGlyph.duration_codes[duration];\n  if (code === undefined) {\n    return null;\n  }\n\n  if (!type) {\n    type = \"n\";\n  }\n\n  var glyphTypeProperties = code.type[type];\n  if (glyphTypeProperties === undefined) {\n    return null;\n  }\n\n  return Vex.Merge(Vex.Merge({}, code.common), glyphTypeProperties);\n};\n\nVex.Flow.durationToGlyph.duration_codes = {\n  \"1/2\": {\n    common: {\n      head_width: 22,\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Vex.Flow.STEM_HEIGHT,\n      stem_down_extension: -Vex.Flow.STEM_HEIGHT,\n      gracenote_stem_up_extension: -Vex.Flow.STEM_HEIGHT,\n      gracenote_stem_down_extension: -Vex.Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Vex.Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Vex.Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Breve note\n        code_head: \"v53\"\n      },\n      \"h\": { // Breve note harmonic\n        code_head: \"v59\"\n      },\n      \"m\": { // Breve note muted -\n        code_head: \"vf\",\n        stem_offset: 0\n      },\n      \"r\": { // Breve rest\n        code_head: \"v31\",\n        head_width: 24,\n        rest: true,\n        position: \"B/5\",\n        dot_shiftY: 0.5\n      },\n      \"s\": { // Breve note slash -\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: \"B/4\"\n      }\n    }\n  },\n  \"1\": {\n    common: {\n      head_width: 16,\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Vex.Flow.STEM_HEIGHT,\n      stem_down_extension: -Vex.Flow.STEM_HEIGHT,\n      gracenote_stem_up_extension: -Vex.Flow.STEM_HEIGHT,\n      gracenote_stem_down_extension: -Vex.Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Vex.Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Vex.Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Whole note\n        code_head: \"v1d\"\n      },\n      \"h\": { // Whole note harmonic\n        code_head: \"v46\"\n      },\n      \"m\": { // Whole note muted\n        code_head: \"v92\",\n        stem_offset: -3\n      },\n      \"r\": { // Whole rest\n        code_head: \"v5c\",\n        head_width: 12,\n        rest: true,\n        position: \"D/5\",\n        dot_shiftY: 0.5\n      },\n      \"s\": { // Whole note slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: \"B/4\"\n      }\n    }\n  },\n  \"2\": {\n    common: {\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Half note\n        code_head: \"v81\"\n      },\n      \"h\": { // Half note harmonic\n        code_head: \"v2d\"\n      },\n      \"m\": { // Half note muted\n        code_head: \"v95\",\n        stem_offset: -3\n      },\n      \"r\": { // Half rest\n        code_head: \"vc\",\n        head_width: 12,\n        stem: false,\n        rest: true,\n        position: \"B/4\",\n        dot_shiftY: -0.5\n      },\n      \"s\": { // Half note slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: \"B/4\"\n      }\n    }\n  },\n  \"4\": {\n    common: {\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Quarter note\n        code_head: \"vb\"\n      },\n      \"h\": { // Quarter harmonic\n        code_head: \"v22\"\n      },\n      \"m\": { // Quarter muted\n        code_head: \"v3e\",\n        stem_offset: -3\n      },\n      \"r\": { // Quarter rest\n        code_head: \"v7c\",\n        head_width: 8,\n        stem: false,\n        rest: true,\n        position: \"B/4\",\n        dot_shiftY: -0.5,\n        line_above: 1.5,\n        line_below: 1.5\n      },\n      \"s\": { // Quarter slash\n         // Drawn with canvas primitives\n         head_width: 15,\n         position: \"B/4\"\n      }\n    }\n  },\n  \"8\": {\n    common: {\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      beam_count: 1,\n      code_flag_upstem: \"v54\",\n      code_flag_downstem: \"v9a\",\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Eighth note\n        code_head: \"vb\"\n      },\n      \"h\": { // Eighth note harmonic\n        code_head: \"v22\"\n      },\n      \"m\": { // Eighth note muted\n        code_head: \"v3e\"\n      },\n      \"r\": { // Eighth rest\n        code_head: \"va5\",\n        stem: false,\n        flag: false,\n        rest: true,\n        position: \"B/4\",\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 1.0\n      },\n      \"s\": { // Eight slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: \"B/4\"\n      }\n    }\n  },\n  \"16\": {\n    common: {\n      beam_count: 2,\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: \"v3f\",\n      code_flag_downstem: \"v8f\",\n      stem_up_extension: 4,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Sixteenth note\n        code_head: \"vb\"\n      },\n      \"h\": { // Sixteenth note harmonic\n        code_head: \"v22\"\n      },\n      \"m\": { // Sixteenth note muted\n        code_head: \"v3e\"\n      },\n      \"r\": { // Sixteenth rest\n        code_head: \"v3c\",\n        head_width: 13,\n        stem: false,\n        flag: false,\n        rest: true,\n        position: \"B/4\",\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 2.0\n      },\n      \"s\": { // Sixteenth slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: \"B/4\"\n      }\n    }\n  },\n  \"32\": {\n    common: {\n      beam_count: 3,\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: \"v47\",\n      code_flag_downstem: \"v2a\",\n      stem_up_extension: 13,\n      stem_down_extension: 9,\n      gracenote_stem_up_extension: -12,\n      gracenote_stem_down_extension: -12,\n      tabnote_stem_up_extension: 9,\n      tabnote_stem_down_extension: 5,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Thirty-second note\n        code_head: \"vb\"\n      },\n      \"h\": { // Thirty-second harmonic\n        code_head: \"v22\"\n      },\n      \"m\": { // Thirty-second muted\n        code_head: \"v3e\"\n      },\n      \"r\": { // Thirty-second rest\n        code_head: \"v55\",\n        head_width: 16,\n        stem: false,\n        flag: false,\n        rest: true,\n        position: \"B/4\",\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 2.0\n      },\n      \"s\": { // Thirty-second slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: \"B/4\"\n      }\n    }\n  },\n  \"64\": {\n    common: {\n      beam_count: 4,\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: \"va9\",\n      code_flag_downstem: \"v58\",\n      stem_up_extension: 17,\n      stem_down_extension: 13,\n      gracenote_stem_up_extension: -10,\n      gracenote_stem_down_extension: -10,\n      tabnote_stem_up_extension: 13,\n      tabnote_stem_down_extension: 9,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0\n    },\n    type: {\n      \"n\": { // Sixty-fourth note\n        code_head: \"vb\"\n      },\n      \"h\": { // Sixty-fourth harmonic\n        code_head: \"v22\"\n      },\n      \"m\": { // Sixty-fourth muted\n        code_head: \"v3e\"\n      },\n      \"r\": { // Sixty-fourth rest\n        code_head: \"v38\",\n        head_width: 18,\n        stem: false,\n        flag: false,\n        rest: true,\n        position: \"B/4\",\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 3.0\n      },\n      \"s\": { // Sixty-fourth slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: \"B/4\"\n      }\n    }\n  },\n  \"128\": {\n      common: {\n          beam_count: 5,\n          head_width: 10,\n          stem: true,\n          stem_offset:0,\n          flag: true,\n          code_flag_upstem: \"v9b\",\n          code_flag_downstem: \"v30\",\n          stem_up_extension: 26,\n          stem_down_extension: 22,\n          gracenote_stem_up_extension: -8,\n          gracenote_stem_down_extension: -8,\n          tabnote_stem_up_extension: 22,\n          tabnote_stem_down_extension: 18,\n          dot_shiftY: 0,\n          line_above: 0,\n          line_below: 0\n      },\n      type: {\n          \"n\": {  // Hundred-twenty-eight note\n              code_head: \"vb\"\n          },\n          \"h\": { // Hundred-twenty-eight harmonic\n              code_head: \"v22\"\n          },\n          \"m\": { // Hundred-twenty-eight muted\n              code_head: \"v3e\"\n          },\n          \"r\": {  // Hundred-twenty-eight rest\n              code_head: \"vaa\",\n              head_width: 20,\n              stem: false,\n              flag: false,\n              rest: true,\n              position: \"B/4\",\n              dot_shiftY: 1.5,\n              line_above: 3.0,\n              line_below: 3.0\n          },\n          \"s\": { // Hundred-twenty-eight rest\n              // Drawn with canvas primitives\n              head_width: 15,\n              position: \"B/4\"\n          }\n      }\n  }\n};\n\n// Some defaults\nVex.Flow.TIME4_4 = {\n  num_beats: 4,\n  beat_value: 4,\n  resolution: Vex.Flow.RESOLUTION\n};\n","Vex.Flow.Font = {\"glyphs\":{\"v0\":{\"x_min\":0,\"x_max\":514.5,\"ha\":525,\"o\":\"m 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 \"},\"v1\":{\"x_min\":-1.359375,\"x_max\":344.359375,\"ha\":351,\"o\":\"m 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 \"},\"v2\":{\"x_min\":-1.359375,\"x_max\":458.6875,\"ha\":468,\"o\":\"m 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 \"},\"v3\":{\"x_min\":-1.359375,\"x_max\":409.6875,\"ha\":418,\"o\":\"m 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 \"},\"v4\":{\"x_min\":0,\"x_max\":468.21875,\"ha\":478,\"o\":\"m 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 \"},\"v5\":{\"x_min\":0,\"x_max\":409.6875,\"ha\":418,\"o\":\"m 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 \"},\"v6\":{\"x_min\":0,\"x_max\":475.03125,\"ha\":485,\"o\":\"m 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 \"},\"v7\":{\"x_min\":0,\"x_max\":442.359375,\"ha\":451,\"o\":\"m 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 \"},\"v8\":{\"x_min\":0,\"x_max\":488.640625,\"ha\":499,\"o\":\"m 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 \"},\"v9\":{\"x_min\":0,\"x_max\":475.03125,\"ha\":485,\"o\":\"m 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 \"},\"va\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 \"},\"vb\":{\"x_min\":0,\"x_max\":428.75,\"ha\":438,\"o\":\"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 \"},\"vc\":{\"x_min\":0,\"x_max\":447.8125,\"ha\":457,\"o\":\"m 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 \"},\"vf\":{\"x_min\":0,\"x_max\":370.21875,\"ha\":378,\"o\":\"m 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 \"},\"v10\":{\"x_min\":0,\"x_max\":559.421875,\"ha\":571,\"o\":\"m 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 \"},\"v11\":{\"x_min\":-155.171875,\"x_max\":153.8125,\"ha\":157,\"o\":\"m -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 \"},\"v18\":{\"x_min\":0,\"x_max\":323.9375,\"ha\":331,\"o\":\"m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 \"},\"v1b\":{\"x_min\":0,\"x_max\":559.421875,\"ha\":571,\"o\":\"m 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 \"},\"v1d\":{\"x_min\":0,\"x_max\":619.3125,\"ha\":632,\"o\":\"m 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 \"},\"v1e\":{\"x_min\":-402.890625,\"x_max\":401.53125,\"ha\":410,\"o\":\"m -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 \"},\"v1f\":{\"x_min\":-340.28125,\"x_max\":338.921875,\"ha\":346,\"o\":\"m -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 \"},\"v20\":{\"x_min\":-571.671875,\"x_max\":570.3125,\"ha\":582,\"o\":\"m -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 \"},\"v22\":{\"x_min\":0,\"x_max\":432.828125,\"ha\":442,\"o\":\"m 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 \"},\"v23\":{\"x_min\":0,\"x_max\":133.390625,\"ha\":136,\"o\":\"m 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 \"},\"v25\":{\"x_min\":0,\"x_max\":318.5,\"ha\":325,\"o\":\"m 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 \"},\"v26\":{\"x_min\":-21.78125,\"x_max\":483.1875,\"ha\":493,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 \"},\"v27\":{\"x_min\":0,\"x_max\":432.828125,\"ha\":442,\"o\":\"m 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 \"},\"v28\":{\"x_min\":-73.5,\"x_max\":72.140625,\"ha\":74,\"o\":\"m -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 \"},\"v29\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 \"},\"v2a\":{\"x_min\":-21.78125,\"x_max\":366.140625,\"ha\":374,\"o\":\"m 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 \"},\"v2c\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 \"},\"v2d\":{\"x_min\":0,\"x_max\":438.28125,\"ha\":447,\"o\":\"m 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 \"},\"v2f\":{\"x_min\":-1.359375,\"x_max\":680.5625,\"ha\":694,\"o\":\"m 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 \"},\"v30\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 \"},\"v31\":{\"x_min\":0,\"x_max\":386.5625,\"ha\":394,\"o\":\"m 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 \"},\"v33\":{\"x_min\":-423.3125,\"x_max\":421.9375,\"ha\":431,\"o\":\"m -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 \"},\"v34\":{\"x_min\":0,\"x_max\":622.03125,\"ha\":635,\"o\":\"m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 \"},\"v36\":{\"x_min\":-1.359375,\"x_max\":1064.390625,\"ha\":1086,\"o\":\"m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 \"},\"v38\":{\"x_min\":-1.359375,\"x_max\":651.96875,\"ha\":665,\"o\":\"m 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 \"},\"v3b\":{\"x_min\":0,\"x_max\":484.5625,\"ha\":494,\"o\":\"m 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 \"},\"v3c\":{\"x_min\":0,\"x_max\":450.53125,\"ha\":460,\"o\":\"m 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 \"},\"v3e\":{\"x_min\":0,\"x_max\":406.96875,\"ha\":415,\"o\":\"m 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 \"},\"v3f\":{\"x_min\":-24.5,\"x_max\":317.140625,\"ha\":324,\"o\":\"m -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 \"},\"v40\":{\"x_min\":-1.359375,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 \"},\"v41\":{\"x_min\":-1.359375,\"x_max\":556.6875,\"ha\":568,\"o\":\"m 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 \"},\"v42\":{\"x_min\":-348.4375,\"x_max\":24.5,\"ha\":25,\"o\":\"m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 \"},\"v43\":{\"x_min\":-442.359375,\"x_max\":441,\"ha\":450,\"o\":\"m -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 \"},\"v44\":{\"x_min\":-21.78125,\"x_max\":251.8125,\"ha\":257,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 \"},\"v45\":{\"x_min\":-402.890625,\"x_max\":401.53125,\"ha\":410,\"o\":\"m -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 \"},\"v46\":{\"x_min\":0,\"x_max\":627.46875,\"ha\":640,\"o\":\"m 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 \"},\"v47\":{\"x_min\":-24.5,\"x_max\":315.78125,\"ha\":322,\"o\":\"m -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 \"},\"v49\":{\"x_min\":0,\"x_max\":630.203125,\"ha\":643,\"o\":\"m 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 \"},\"v4a\":{\"x_min\":70.78125,\"x_max\":378.390625,\"ha\":315,\"o\":\"m 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 \"},\"v4b\":{\"x_min\":0,\"x_max\":503.609375,\"ha\":514,\"o\":\"m 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 \"},\"v4d\":{\"x_min\":-311.6875,\"x_max\":310.328125,\"ha\":317,\"o\":\"m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 \"},\"v4e\":{\"x_min\":0,\"x_max\":239.5625,\"ha\":244,\"o\":\"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 \"},\"v51\":{\"x_min\":-1.359375,\"x_max\":455.96875,\"ha\":465,\"o\":\"m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 \"},\"v52\":{\"x_min\":-10.890625,\"x_max\":298.078125,\"ha\":294,\"o\":\"m 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 \"},\"v53\":{\"x_min\":0,\"x_max\":902.421875,\"ha\":921,\"o\":\"m 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 \"},\"v54\":{\"x_min\":-24.5,\"x_max\":317.140625,\"ha\":324,\"o\":\"m -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 \"},\"v55\":{\"x_min\":0,\"x_max\":551.25,\"ha\":563,\"o\":\"m 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 \"},\"v58\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 \"},\"v59\":{\"x_min\":0,\"x_max\":464.140625,\"ha\":474,\"o\":\"m 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 \"},\"v5a\":{\"x_min\":-171.5,\"x_max\":170.140625,\"ha\":174,\"o\":\"m -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 \"},\"v5b\":{\"x_min\":-441,\"x_max\":439.640625,\"ha\":449,\"o\":\"m -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 \"},\"v5c\":{\"x_min\":0,\"x_max\":447.8125,\"ha\":457,\"o\":\"m 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 \"},\"v5d\":{\"x_min\":-1.359375,\"x_max\":592.078125,\"ha\":604,\"o\":\"m 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 \"},\"v60\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 \"},\"v62\":{\"x_min\":46.28125,\"x_max\":669.671875,\"ha\":563,\"o\":\"m 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 \"},\"v68\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 \"},\"v6c\":{\"x_min\":-1.359375,\"x_max\":193.28125,\"ha\":197,\"o\":\"m 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 \"},\"v6d\":{\"x_min\":-590.71875,\"x_max\":589.359375,\"ha\":601,\"o\":\"m 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 \"},\"v6f\":{\"x_min\":-80.3125,\"x_max\":78.9375,\"ha\":81,\"o\":\"m 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 \"},\"v70\":{\"x_min\":0,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 \"},\"v72\":{\"x_min\":-423.3125,\"x_max\":421.9375,\"ha\":431,\"o\":\"m -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 \"},\"v74\":{\"x_min\":-206.890625,\"x_max\":428.75,\"ha\":438,\"o\":\"m 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 \"},\"v75\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 \"},\"v78\":{\"x_min\":0,\"x_max\":193.28125,\"ha\":197,\"o\":\"m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 \"},\"v79\":{\"x_min\":-1.359375,\"x_max\":899.703125,\"ha\":918,\"o\":\"m 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 \"},\"v7c\":{\"x_min\":0,\"x_max\":300.8125,\"ha\":307,\"o\":\"m 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 \"},\"v7d\":{\"x_min\":-1.359375,\"x_max\":436.921875,\"ha\":446,\"o\":\"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 \"},\"v7f\":{\"x_min\":0,\"x_max\":367.5,\"ha\":375,\"o\":\"m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 \"},\"v80\":{\"x_min\":29.9375,\"x_max\":420.578125,\"ha\":371,\"o\":\"m 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 \"},\"v81\":{\"x_min\":0,\"x_max\":428.75,\"ha\":438,\"o\":\"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 \"},\"v83\":{\"x_min\":-1.359375,\"x_max\":847.96875,\"ha\":865,\"o\":\"m 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 \"},\"v84\":{\"x_min\":25.859375,\"x_max\":164.6875,\"ha\":168,\"o\":\"m 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 \"},\"v86\":{\"x_min\":-571.671875,\"x_max\":570.3125,\"ha\":582,\"o\":\"m -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 \"},\"v8a\":{\"x_min\":-170.140625,\"x_max\":168.78125,\"ha\":172,\"o\":\"m -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 \"},\"v8b\":{\"x_min\":0,\"x_max\":319.859375,\"ha\":326,\"o\":\"m 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 \"},\"v8c\":{\"x_min\":-330.75,\"x_max\":329.390625,\"ha\":336,\"o\":\"m -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 \"},\"v8f\":{\"x_min\":-21.78125,\"x_max\":362.0625,\"ha\":369,\"o\":\"m 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 \"},\"v90\":{\"x_min\":-171.5,\"x_max\":483.1875,\"ha\":493,\"o\":\"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 \"},\"v92\":{\"x_min\":0,\"x_max\":598.890625,\"ha\":611,\"o\":\"m 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 \"},\"v93\":{\"x_min\":0,\"x_max\":438.28125,\"ha\":447,\"o\":\"m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 \"},\"v94\":{\"x_min\":-149.71875,\"x_max\":148.359375,\"ha\":151,\"o\":\"m -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 \"},\"v95\":{\"x_min\":0,\"x_max\":406.96875,\"ha\":415,\"o\":\"m 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 \"},\"v97\":{\"x_min\":-228.671875,\"x_max\":227.3125,\"ha\":232,\"o\":\"m -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 \"},\"v9a\":{\"x_min\":-21.78125,\"x_max\":367.5,\"ha\":375,\"o\":\"m 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 \"},\"v9b\":{\"x_min\":-24.5,\"x_max\":313.0625,\"ha\":319,\"o\":\"m -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 \"},\"v9c\":{\"x_min\":-166.0625,\"x_max\":-25.859375,\"ha\":0,\"o\":\"m -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 \"},\"v9e\":{\"x_min\":0,\"x_max\":607.0625,\"ha\":619,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 \"},\"va3\":{\"x_min\":58.53125,\"x_max\":228.671875,\"ha\":294,\"o\":\"m 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 \"},\"va5\":{\"x_min\":0,\"x_max\":349.8125,\"ha\":357,\"o\":\"m 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 \"},\"va9\":{\"x_min\":-24.5,\"x_max\":314.421875,\"ha\":321,\"o\":\"m -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 \"},\"vaa\":{\"x_min\":-1.359375,\"x_max\":752.703125,\"ha\":768,\"o\":\"m 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 \"},\"vab\":{\"x_min\":0,\"x_max\":272.21875,\"ha\":278,\"o\":\"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 \"},\"vad\":{\"x_min\":0,\"x_max\":873.828125,\"ha\":892,\"o\":\"m 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 \"},\"vb1\":{\"x_min\":78.9375,\"x_max\":485.921875,\"ha\":417,\"o\":\"m 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 \"},\"vb3\":{\"x_min\":0,\"x_max\":227.3125,\"ha\":232,\"o\":\"m 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 \"},\"vb4\":{\"x_min\":-597.53125,\"x_max\":596.171875,\"ha\":608,\"o\":\"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 \"},\"vb6\":{\"x_min\":0,\"x_max\":556.6875,\"ha\":568,\"o\":\"m 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 \"},\"vb9\":{\"x_min\":-122.5,\"x_max\":121.140625,\"ha\":124,\"o\":\"m -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 \"},\"vba\":{\"x_min\":-118.421875,\"x_max\":597.53125,\"ha\":381,\"o\":\"m 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 \"},\"vbf\":{\"x_min\":-53.078125,\"x_max\":513.140625,\"ha\":485,\"o\":\"m 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 \"},\"vc3\":{\"x_min\":-10.890625,\"x_max\":299.4375,\"ha\":294,\"o\":\"m 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 \"}},\"cssFontWeight\":\"normal\",\"ascender\":1903,\"underlinePosition\":-125,\"cssFontStyle\":\"normal\",\"boundingBox\":{\"yMin\":-2065.375,\"xMin\":-695.53125,\"yMax\":1901.578125,\"xMax\":1159.671875},\"resolution\":1000,\"descender\":-2066,\"familyName\":\"VexFlow-18\",\"lineHeight\":4093,\"underlineThickness\":50};","// Vex Flow\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n//\n// Requires a glyph font to be loaded and Vex.Flow.Font to be set.\n\n/**\n * A quick and dirty static glyph renderer. Renders glyphs from the default\n * font defined in Vex.Flow.Font.\n *\n * @param {!Object} ctx The canvas context.\n * @param {number} x_pos X coordinate.\n * @param {number} y_pos Y coordinate.\n * @param {number} point The point size to use.\n * @param {string} val The glyph code in Vex.Flow.Font.\n * @param {boolean} nocache If set, disables caching of font outline.\n */\nVex.Flow.renderGlyph = function(ctx, x_pos, y_pos, point, val, nocache) {\n  var scale = point * 72.0 / (Vex.Flow.Font.resolution * 100.0);\n  var metrics = Vex.Flow.Glyph.loadMetrics(Vex.Flow.Font, val, !nocache);\n  Vex.Flow.Glyph.renderOutline(ctx, metrics.outline, scale, x_pos, y_pos);\n};\n\n/**\n * @constructor\n */\nVex.Flow.Glyph = (function() {\n  function Glyph(code, point, options) {\n    this.code = code;\n    this.point = point;\n    this.context = null;\n    this.options = {\n      cache: true,\n      font: Vex.Flow.Font\n    };\n\n    this.width = null;\n    this.metrics = null;\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    if (options) this.setOptions(options); else this.reset();\n  }\n\n  Glyph.prototype = {\n    setOptions: function(options) {\n      Vex.Merge(this.options, options);\n      this.reset();\n    },\n\n    setPoint: function(point) { this.point = point; return this; },\n    setStave: function(stave) { this.stave = stave; return this; },\n    setXShift: function(x_shift) { this.x_shift = x_shift; return this; },\n    setYShift: function(y_shift) { this.y_shift = y_shift; return this; },\n    setContext: function(context) { this.context = context; return this; },\n    getContext: function() { return this.context; },\n\n    reset: function() {\n      this.metrics = Vex.Flow.Glyph.loadMetrics(this.options.font, this.code,\n          this.options.cache);\n      this.scale = this.point * 72 / (this.options.font.resolution * 100);\n    },\n\n    setWidth: function(width) {\n      this.width =  width;\n      return this;\n    },\n\n    getMetrics: function() {\n      if (!this.metrics) throw new Vex.RuntimeError(\"BadGlyph\", \"Glyph \" +\n          this.code + \" is not initialized.\");\n      return {\n        x_min: this.metrics.x_min * this.scale,\n        x_max: this.metrics.x_max * this.scale,\n        width: this.width || (this.metrics.x_max - this.metrics.x_min) * this.scale,\n        height: this.metrics.ha * this.scale\n      };\n    },\n\n    render: function(ctx, x_pos, y_pos) {\n      if (!this.metrics) throw new Vex.RuntimeError(\"BadGlyph\", \"Glyph \" +\n          this.code + \" is not initialized.\");\n\n      var outline = this.metrics.outline;\n      var scale = this.scale;\n\n      Glyph.renderOutline(ctx, outline, scale, x_pos, y_pos);\n    },\n\n    renderToStave: function(x) {\n      if (!this.metrics) throw new Vex.RuntimeError(\"BadGlyph\", \"Glyph \" +\n          this.code + \" is not initialized.\");\n      if (!this.stave) throw new Vex.RuntimeError(\"GlyphError\", \"No valid stave\");\n      if (!this.context) throw new Vex.RERR(\"GlyphError\", \"No valid context\");\n\n      var outline = this.metrics.outline;\n      var scale = this.scale;\n\n      Glyph.renderOutline(this.context, outline, scale,\n          x + this.x_shift, this.stave.getYForGlyphs() + this.y_shift);\n    }\n  };\n\n  /* Static methods used to implement loading / unloading of glyphs */\n  Glyph.loadMetrics = function(font, code, cache) {\n    var glyph = font.glyphs[code];\n    if (!glyph) throw new Vex.RuntimeError(\"BadGlyph\", \"Glyph \" + code +\n        \" does not exist in font.\");\n\n    var x_min = glyph.x_min;\n    var x_max = glyph.x_max;\n    var ha = glyph.ha;\n\n    var outline;\n\n    if (glyph.o) {\n      if (cache) {\n        if (glyph.cached_outline) {\n          outline = glyph.cached_outline;\n        } else {\n          outline = glyph.o.split(' ');\n          glyph.cached_outline = outline;\n        }\n      } else {\n        if (glyph.cached_outline) delete glyph.cached_outline;\n        outline = glyph.o.split(' ');\n      }\n\n      return {\n        x_min: x_min,\n        x_max: x_max,\n        ha: ha,\n        outline: outline\n      };\n    } else {\n      throw new Vex.RuntimeError(\"BadGlyph\", \"Glyph \" + this.code +\n          \" has no outline defined.\");\n    }\n  };\n\n  Glyph.renderOutline = function(ctx, outline, scale, x_pos, y_pos) {\n    var outlineLength = outline.length;\n\n    ctx.beginPath();\n\n    ctx.moveTo(x_pos, y_pos);\n\n    for (var i = 0; i < outlineLength; ) {\n      var action = outline[i++];\n\n      switch(action) {\n        case 'm':\n          ctx.moveTo(x_pos + outline[i++] * scale,\n                     y_pos + outline[i++] * -scale);\n          break;\n        case 'l':\n          ctx.lineTo(x_pos + outline[i++] * scale,\n                     y_pos + outline[i++] * -scale);\n          break;\n\n        case 'q':\n          var cpx = x_pos + outline[i++] * scale;\n          var cpy = y_pos + outline[i++] * -scale;\n\n          ctx.quadraticCurveTo(\n              x_pos + outline[i++] * scale,\n              y_pos + outline[i++] * -scale, cpx, cpy);\n          break;\n\n        case 'b':\n          var x = x_pos + outline[i++] * scale;\n          var y = y_pos + outline[i++] * -scale;\n\n          ctx.bezierCurveTo(\n              x_pos + outline[i++] * scale, y_pos + outline[i++] * -scale,\n              x_pos + outline[i++] * scale, y_pos + outline[i++] * -scale,\n              x, y);\n          break;\n      }\n    }\n    ctx.fill();\n  };\n\n  return Glyph;\n}());\n","// Vex Flow\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Cheppudira 2010\n\n/** @constructor */\nVex.Flow.Stave = (function() {\n  function Stave(x, y, width, options) {\n    if (arguments.length > 0) this.init(x, y, width, options);\n  }\n\n  var THICKNESS = (Vex.Flow.STAVE_LINE_THICKNESS > 1 ?\n        Vex.Flow.STAVE_LINE_THICKNESS : 0);\n  Stave.prototype = {\n    init: function(x, y, width, options) {\n      this.x = x;\n      this.y = y;\n      this.width = width;\n      this.formatted = false;\n      this.start_x = x + 5;\n      this.end_x = x + width;\n      this.context = null;\n      this.modifiers = [];  // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n      this.measure = 0;\n      this.clef = \"treble\";\n      this.font = {\n        family: \"sans-serif\",\n        size: 8,\n        weight: \"\"\n      };\n      this.options = {\n        vertical_bar_width: 10,       // Width around vertical bar end-marker\n        glyph_spacing_px: 10,\n        num_lines: 5,\n        fill_style: \"#999999\",\n        left_bar: true,               // draw vertical bar on left\n        right_bar: true,               // draw vertical bar on right\n        spacing_between_lines_px: 10, // in pixels\n        space_above_staff_ln: 4,      // in staff lines\n        space_below_staff_ln: 4,      // in staff lines\n        top_text_position: 1          // in staff lines\n      };\n      this.bounds = {x: this.x, y: this.y, w: this.width, h: 0};\n      Vex.Merge(this.options, options);\n\n      this.resetLines();\n\n      var BARTYPE = Vex.Flow.Barline.type;\n      this.addModifier(new Vex.Flow.Barline(this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));  // beg bar\n      this.addEndModifier(new Vex.Flow.Barline(this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE)); // end bar\n    },\n\n    resetLines: function() {\n      this.options.line_config = [];\n      for (var i = 0; i < this.options.num_lines; i++) {\n        this.options.line_config.push({visible: true});\n      }\n      this.height = (this.options.num_lines + this.options.space_above_staff_ln) *\n         this.options.spacing_between_lines_px;\n      this.options.bottom_text_position = this.options.num_lines + 1;\n    },\n\n    getOptions: function() { return this.options; },\n\n    setNoteStartX: function(x) {\n      if (!this.formatted) this.format();\n\n      this.start_x = x;\n      return this;\n    },\n    getNoteStartX: function() {\n      if (!this.formatted) this.format();\n\n      return this.start_x;\n    },\n\n    getNoteEndX: function() {\n      if (!this.formatted) this.format();\n\n      return this.end_x;\n    },\n    getTieStartX: function() { return this.start_x; },\n    getTieEndX: function() { return this.x + this.width; },\n    setContext: function(context) { this.context = context; return this; },\n    getContext: function() { return this.context; },\n    getX: function() { return this.x; },\n    getNumLines: function() { return this.options.num_lines; },\n    setNumLines: function(lines) {\n      this.options.num_lines = parseInt(lines, 10);\n      this.resetLines();\n      return this;\n    },\n    setY: function(y) { this.y = y; return this; },\n\n    setX: function(x){\n      var shift = x - this.x;\n      this.formatted = false;\n      this.x = x;\n      this.start_x += shift;\n      this.end_x += shift;\n      for(var i=0; i<this.modifiers.length; i++) {\n      \tvar mod = this.modifiers[i];\n        if (mod.x !== undefined) {\n          mod.x += shift;\n      \t}\n      }\n      return this;\n    },\n\n    setWidth: function(width) {\n      this.formatted = false;\n      this.width = width;\n      this.end_x = this.x + width;\n\n      // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n      // this.modifiers[1].setX(this.end_x);\n      return this;\n    },\n\n    getWidth: function() {\n      return this.width;\n    },\n\n    setMeasure: function(measure) { this.measure = measure; return this; },\n\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift: function(index) {\n      if (typeof index !== 'number') new Vex.RERR(\"InvalidIndex\",\n        \"Must be of number type\");\n\n      if (!this.formatted) this.format();\n\n      if (this.getModifiers(Vex.Flow.StaveModifier.Position.BEGIN).length === 1) {\n        return 0;\n      }\n\n      var start_x = this.start_x - this.x;\n      var begBarline = this.modifiers[0];\n      if (begBarline.getType() === Vex.Flow.Barline.type.REPEAT_BEGIN &&\n          start_x > begBarline.getWidth()) {\n        start_x -= begBarline.getWidth();\n      }\n\n      return start_x;\n    },\n\n    // Coda & Segno Symbol functions\n    setRepetitionTypeLeft: function(type, y) {\n      this.modifiers.push(new Vex.Flow.Repetition(type, this.x, y));\n      return this;\n    },\n\n    setRepetitionTypeRight: function(type, y) {\n      this.modifiers.push(new Vex.Flow.Repetition(type, this.x, y) );\n      return this;\n    },\n\n    // Volta functions\n    setVoltaType: function(type, number_t, y) {\n      this.modifiers.push(new Vex.Flow.Volta(type, number_t, this.x, y));\n      return this;\n    },\n\n    // Section functions\n    setSection: function(section, y) {\n      this.modifiers.push(new Vex.Flow.StaveSection(section, this.x, y));\n      return this;\n    },\n\n    // Tempo functions\n    setTempo: function(tempo, y) {\n      this.modifiers.push(new Vex.Flow.StaveTempo(tempo, this.x, y));\n      return this;\n    },\n\n    // Text functions\n    setText: function(text, position, options) {\n      this.modifiers.push(new Vex.Flow.StaveText(text, position, options));\n      return this;\n    },\n\n    getHeight: function() {\n      return this.height;\n    },\n\n    getSpacingBetweenLines: function() {\n      return this.options.spacing_between_lines_px;\n    },\n\n    getBoundingBox: function() {\n      return new Vex.Flow.BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n      // body...\n    },\n\n    getBottomY: function() {\n      var options = this.options;\n      var spacing = options.spacing_between_lines_px;\n      var score_bottom = this.getYForLine(options.num_lines) +\n         (options.space_below_staff_ln * spacing);\n\n      return score_bottom;\n    },\n\n    getBottomLineY: function() {\n      return this.getYForLine(this.options.num_lines);\n    },\n\n    getYForLine: function(line) {\n      var options = this.options;\n      var spacing = options.spacing_between_lines_px;\n      var headroom = options.space_above_staff_ln;\n\n      var y = this.y + ((line * spacing) + (headroom * spacing)) -\n        (THICKNESS / 2);\n\n      return y;\n    },\n\n    getLineForY: function(y){\n      //Does the revers of getYForLine - somewhat dumb and just calls getYForLine until the right value is reaches\n\n      var options = this.options;\n      var spacing = options.spacing_between_lines_px;\n      var headroom = options.space_above_staff_ln;\n      return ((y - this.y + (THICKNESS / 2)) / spacing) - headroom;\n    },\n\n    getYForTopText: function(line) {\n      var l = line || 0;\n      return this.getYForLine(-l - this.options.top_text_position);\n    },\n\n    getYForBottomText: function(line) {\n      var l = line || 0;\n      return this.getYForLine(this.options.bottom_text_position + l);\n    },\n\n    getYForNote: function(line) {\n      var options = this.options;\n      var spacing = options.spacing_between_lines_px;\n      var headroom = options.space_above_staff_ln;\n      var y = this.y + (headroom * spacing) + (5 * spacing) - (line * spacing);\n\n      return y;\n    },\n\n    getYForGlyphs: function() {\n      return this.getYForLine(3);\n    },\n\n    addModifier: function(modifier, position) {\n      if (position !== undefined) {\n        modifier.setPosition(position);\n      }\n\n      modifier.setStave(this);\n      this.formatted = false;\n      this.modifiers.push(modifier);\n      return this;\n    },\n\n    addEndModifier: function(modifier) {\n      this.addModifier(modifier, Vex.Flow.StaveModifier.Position.END);\n      return this;\n    },\n\n    // Bar Line functions\n    setBegBarType: function(type) {\n      // Only valid bar types at beginning of stave is none, single or begin repeat\n      if (type == Vex.Flow.Barline.type.SINGLE ||\n          type == Vex.Flow.Barline.type.REPEAT_BEGIN ||\n          type == Vex.Flow.Barline.type.NONE) {\n          this.modifiers[0].setType(type);\n          this.formatted = false;\n      }\n      return this;\n    },\n\n    setEndBarType: function(type) {\n      // Repeat end not valid at end of stave\n      if (type != Vex.Flow.Barline.type.REPEAT_BEGIN) {\n        this.modifiers[1].setType(type);\n        this.formatted = false;\n      }\n      return this;\n    },\n\n    setClef: function(clefSpec, size, annotation, position) {\n      if (position === undefined) {\n        position = Vex.Flow.StaveModifier.Position.BEGIN;\n      }\n\n      this.clef = clefSpec;\n      var clefs = this.getModifiers(position, Vex.Flow.Clef.category);\n      if (clefs.length === 0) {\n        this.addClef(clefSpec, size, annotation, position);\n      } else {\n        clefs[0].setType(clefSpec, size, annotation);\n      }\n\n      return this;\n    },\n\n    setEndClef: function(clefSpec, size, annotation) {\n      this.setClef(clefSpec, size, annotation, Vex.Flow.StaveModifier.Position.END);\n      return this;\n    },\n\n    setKeySignature: function(keySpec, cancelKeySpec, position) {\n      if (position === undefined) {\n        position = Vex.Flow.StaveModifier.Position.BEGIN;\n      }\n\n      var keySignatures = this.getModifiers(position, Vex.Flow.KeySignature.category);\n      if (keySignatures.length === 0) {\n        this.addKeySignature(keySpec, cancelKeySpec, position);\n      } else {\n        keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n      }\n\n      return this;\n    },\n\n    setEndKeySignature: function(keySpec, cancelKeySpec) {\n      this.setKeySignature(keySpec, cancelKeySpec, Vex.Flow.StaveModifier.Position.END);\n      return this;\n    },\n\n    setTimeSignature: function(timeSpec, customPadding, position) {\n      if (position === undefined) {\n        position = Vex.Flow.StaveModifier.Position.BEGIN;\n      }\n\n      var timeSignatures = this.getModifiers(position, Vex.Flow.TimeSignature.category);\n      if (timeSignatures.length === 0) {\n        this.addTimeSignature(timeSpec, customPadding, position);\n      } else {\n        timeSignatures[0].setTimeSig(timeSpec);\n      }\n\n      return this;\n    },\n\n    setEndTimeSignature: function(timeSpec, customPadding) {\n      this.setTimeSignature(timeSpec, customPadding, Vex.Flow.StaveModifier.Position.END);\n      return this;\n    },\n\n    addKeySignature: function(keySpec, cancelKeySpec, position) {\n      this.addModifier(new Vex.Flow.KeySignature(keySpec, cancelKeySpec), position);\n      return this;\n    },\n\n    addClef: function(clef, size, annotation, position) {\n      if (position === undefined ||\n          position === Vex.Flow.StaveModifier.Position.BEGIN) {\n        this.clef = clef;\n      }\n\n      this.addModifier(new Vex.Flow.Clef(clef, size, annotation), position);\n      return this;\n    },\n\n    addEndClef: function(clef, size, annotation) {\n      this.addClef(clef, size, annotation, Vex.Flow.StaveModifier.Position.END);\n      return this;\n    },\n\n    addTimeSignature: function(timeSpec, customPadding, position) {\n      this.addModifier(new Vex.Flow.TimeSignature(timeSpec, customPadding), position);\n      return this;\n    },\n\n    addEndTimeSignature: function(timeSpec, customPadding) {\n      this.addTimeSignature(timeSpec, customPadding, Vex.Flow.StaveModifier.Position.END);\n      return this;\n    },\n\n    // Deprecated\n    addTrebleGlyph: function() {\n      this.addClef('treble');\n      return this;\n    },\n\n    getModifiers: function(position, category) {\n      if (position === undefined) return this.modifiers;\n\n      return this.modifiers.filter(function(modifier) {\n        return position === modifier.getPosition() &&\n          (category === undefined || category === modifier.getCategory());\n      });\n    },\n\n    sortByCategory: function(items, order) {\n      for (var i = items.length - 1; i >= 0; i--) {\n        for (var j = 0; j < i; j++) {\n          if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n            var temp = items[j];\n            items[j] = items[j + 1];\n            items[j + 1] = temp;\n          }\n        }\n      }\n    },\n\n    format: function() {\n      var Barline = Vex.Flow.Barline;\n      var begBarline = this.modifiers[0];\n      var endBarline = this.modifiers[1];\n\n      var begModifiers = this.getModifiers(Vex.Flow.StaveModifier.Position.BEGIN);\n      var endModifiers = this.getModifiers(Vex.Flow.StaveModifier.Position.END);\n\n      this.sortByCategory(begModifiers, {\n        barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3\n      });\n\n      this.sortByCategory(endModifiers, {\n        timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3\n      });\n\n      if (begModifiers.length > 1 &&\n          begBarline.getType() === Barline.type.REPEAT_BEGIN) {\n        begModifiers.push(begModifiers.splice(0, 1)[0]);\n        begModifiers.splice(0, 0, new Barline(Barline.type.SINGLE));\n      }\n\n      if (endModifiers.indexOf(endBarline) > 0) {\n        endModifiers.splice(0, 0, new Barline(Barline.type.NONE));\n      }\n\n      var width;\n      var padding;\n      var modifier;\n      var offset = 0;\n      var x = this.x;\n      for (var i = 0; i < begModifiers.length; i++) {\n        modifier = begModifiers[i];\n        padding = modifier.getPadding(i + offset);\n        width = modifier.getWidth();\n\n        x += padding;\n        modifier.setX(x);\n        x += width;\n\n        if (padding + width === 0) offset--;\n      }\n\n      this.start_x = x;\n      x = this.x + this.width;\n\n      for (i = 0; i < endModifiers.length; i++) {\n        modifier = endModifiers[i];\n        x -= modifier.getPadding(i);\n        if (i !== 0)\n          x -= modifier.getWidth();\n\n        modifier.setX(x);\n\n        if (i === 0)\n          x -= modifier.getWidth();\n      }\n\n      this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n      this.formatted = true;\n    },\n\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n\n      if (!this.formatted) this.format();\n\n      var num_lines = this.options.num_lines;\n      var width = this.width;\n      var x = this.x;\n      var y;\n\n      // Render lines\n      for (var line=0; line < num_lines; line++) {\n        y = this.getYForLine(line);\n\n        this.context.save();\n        this.context.setFillStyle(this.options.fill_style);\n        this.context.setStrokeStyle(this.options.fill_style);\n        if (this.options.line_config[line].visible) {\n          this.context.fillRect(x, y, width, Vex.Flow.STAVE_LINE_THICKNESS);\n        }\n        this.context.restore();\n      }\n\n      // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n      for (var i = 0; i < this.modifiers.length; i++) {\n        // Only draw modifier if it has a draw function\n        if (typeof this.modifiers[i].draw == \"function\")\n          this.modifiers[i].draw(this, this.getModifierXShift());\n      }\n\n      // Render measure numbers\n      if (this.measure > 0) {\n        this.context.save();\n        this.context.setFont(this.font.family, this.font.size, this.font.weight);\n        var text_width = this.context.measureText(\"\" + this.measure).width;\n        y = this.getYForTopText(0) + 3;\n        this.context.fillText(\"\" + this.measure, this.x - text_width / 2, y);\n        this.context.restore();\n      }\n\n      return this;\n    },\n\n    // Draw Simple barlines for backward compatability\n    // Do not delete - draws the beginning bar of the stave\n    drawVertical: function(x, isDouble) {\n      this.drawVerticalFixed(this.x + x, isDouble);\n    },\n\n    drawVerticalFixed: function(x, isDouble) {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n\n      var top_line = this.getYForLine(0);\n      var bottom_line = this.getYForLine(this.options.num_lines - 1);\n      if (isDouble)\n        this.context.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);\n      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n    },\n\n    drawVerticalBar: function(x) {\n      this.drawVerticalBarFixed(this.x + x, false);\n    },\n\n    drawVerticalBarFixed: function(x) {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n\n      var top_line = this.getYForLine(0);\n      var bottom_line = this.getYForLine(this.options.num_lines - 1);\n      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n    },\n\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines: function() {\n      return this.options.line_config;\n    },\n\n    /**\n     * Configure properties of the lines in the Stave\n     * @param line_number The index of the line to configure.\n     * @param line_config An configuration object for the specified line.\n     * @throws Vex.RERR \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine: function(line_number, line_config) {\n      if (line_number >= this.options.num_lines || line_number < 0) {\n        throw new Vex.RERR(\"StaveConfigError\",\n          \"The line number must be within the range of the number of lines in the Stave.\");\n      }\n      if (!line_config.hasOwnProperty('visible')) {\n        throw new Vex.RERR(\"StaveConfigError\",\n          \"The line configuration object is missing the 'visible' property.\");\n      }\n      if (typeof(line_config.visible) !== 'boolean') {\n        throw new Vex.RERR(\"StaveConfigError\",\n          \"The line configuration objects 'visible' property must be true or false.\");\n      }\n\n      this.options.line_config[line_number] = line_config;\n\n      return this;\n    },\n\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param lines_configuration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws Vex.RERR \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the num_lines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines: function(lines_configuration) {\n      if (lines_configuration.length !== this.options.num_lines) {\n        throw new Vex.RERR(\"StaveConfigError\",\n          \"The length of the lines configuration array must match the number of lines in the Stave\");\n      }\n\n      // Make sure the defaults are present in case an incomplete set of\n      //  configuration options were supplied.\n      for (var line_config in lines_configuration) {\n        // Allow 'null' to be used if the caller just wants the default for a particular node.\n        if (!lines_configuration[line_config]) {\n          lines_configuration[line_config] = this.options.line_config[line_config];\n        }\n        Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);\n      }\n\n      this.options.line_config = lines_configuration;\n\n      return this;\n    }\n  };\n\n  return Stave;\n}());\n","// Vex Flow Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n//\n// Requires vex.js.\n\n/** @constructor */\nVex.Flow.StaveConnector = (function() {\n  function StaveConnector(top_stave, bottom_stave) {\n    this.init(top_stave, bottom_stave);\n  }\n\n  // SINGLE_LEFT and SINGLE are the same value for compatibility\n  // with older versions of vexflow which didn't have right sided\n  // stave connectors\n  StaveConnector.type = {\n    SINGLE_RIGHT : 0,\n    SINGLE_LEFT : 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8\n  };\n\n  StaveConnector.prototype = {\n    init: function(top_stave, bottom_stave) {\n      this.thickness = Vex.Flow.STAVE_LINE_THICKNESS;\n      this.width = 3;\n      this.top_stave = top_stave;\n      this.bottom_stave = bottom_stave;\n      this.type = StaveConnector.type.DOUBLE;\n      this.font = {\n        family: \"times\",\n        size: 16,\n        weight: \"normal\"\n      };\n      // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n      // 2. Offset BRACE type not to overlap with another StaveConnector\n      this.x_shift = 0;\n      this.texts = [];\n    },\n\n    setContext: function(ctx) {\n      this.ctx = ctx;\n      return this;\n    },\n\n    setType: function(type) {\n      if (type >= StaveConnector.type.SINGLE_RIGHT &&\n          type <= StaveConnector.type.NONE)\n        this.type = type;\n      return this;\n    },\n\n    setText: function(text, options) {\n      this.texts.push({\n        content: text,\n        options: Vex.Merge({ shift_x: 0, shift_y: 0 }, options)\n      });\n      return this;\n    },\n\n    setFont: function(font) {\n      Vex.Merge(this.font, font);\n    },\n\n    setXShift: function(x_shift){\n      if (typeof x_shift !== 'number') {\n        throw Vex.RERR(\"InvalidType\", \"x_shift must be a Number\");\n      }\n\n      this.x_shift = x_shift;\n      return this;\n    },\n\n    draw: function() {\n      if (!this.ctx) throw new Vex.RERR(\n          \"NoContext\", \"Can't draw without a context.\");\n      var topY = this.top_stave.getYForLine(0);\n      var botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) +\n        this.thickness;\n      var width = this.width;\n      var topX = this.top_stave.getX();\n\n      var isRightSidedConnector = (\n        this.type === StaveConnector.type.SINGLE_RIGHT ||\n        this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n        this.type === StaveConnector.type.THIN_DOUBLE\n      );\n\n      if (isRightSidedConnector){\n        topX = this.top_stave.getX() + this.top_stave.width;\n      }\n\n      var attachment_height = botY - topY;\n      switch (this.type) {\n        case StaveConnector.type.SINGLE:\n          width = 1;\n          break;\n        case StaveConnector.type.SINGLE_LEFT:\n          width = 1;\n          break;\n        case StaveConnector.type.SINGLE_RIGHT:\n          width = 1;\n          break;\n        case StaveConnector.type.DOUBLE:\n          topX -= (this.width + 2);\n          break;\n        case StaveConnector.type.BRACE:\n          width = 12;\n          // May need additional code to draw brace\n          var x1 = this.top_stave.getX() - 2 + this.x_shift;\n          var y1 = topY;\n          var x3 = x1;\n          var y3 = botY;\n          var x2 = x1 - width;\n          var y2 = y1 + attachment_height/2.0;\n          var cpx1 = x2 - (0.90 * width);\n          var cpy1 = y1 + (0.2 * attachment_height);\n          var cpx2 = x1 + (1.10 * width);\n          var cpy2 = y2 - (0.135 * attachment_height);\n          var cpx3 = cpx2;\n          var cpy3 = y2 + (0.135 * attachment_height);\n          var cpx4 = cpx1;\n          var cpy4 = y3 - (0.2 * attachment_height);\n          var cpx5 = x2 - width;\n          var cpy5 = cpy4;\n          var cpx6 = x1 + (0.40 * width);\n          var cpy6 = y2 + (0.135 * attachment_height);\n          var cpx7 = cpx6;\n          var cpy7 = y2 - (0.135 * attachment_height);\n          var cpx8 = cpx5;\n          var cpy8 = cpy1;\n          this.ctx.beginPath();\n          this.ctx.moveTo(x1, y1);\n          this.ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n          this.ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n          this.ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n          this.ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n          this.ctx.fill();\n          this.ctx.stroke();\n          break;\n        case StaveConnector.type.BRACKET:\n          topY -= 4;\n          botY += 4;\n          attachment_height = botY - topY;\n          Vex.Flow.renderGlyph(this.ctx, topX - 5, topY - 3, 40, \"v1b\", true);\n          Vex.Flow.renderGlyph(this.ctx, topX - 5, botY + 3, 40, \"v10\", true);\n          topX -= (this.width + 2);\n          break;\n        case StaveConnector.type.BOLD_DOUBLE_LEFT:\n          drawBoldDoubleLine(this.ctx, this.type, topX + this.x_shift, topY, botY);\n          break;\n        case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n          drawBoldDoubleLine(this.ctx, this.type, topX, topY, botY);\n          break;\n        case StaveConnector.type.THIN_DOUBLE:\n          width = 1;\n          break;\n        case StaveConnector.type.NONE:\n          break;\n      }\n\n      if (this.type !== StaveConnector.type.BRACE &&\n        this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n        this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n        this.type !== StaveConnector.type.NONE) {\n        this.ctx.fillRect(topX , topY, width, attachment_height);\n      }\n\n      // If the connector is a thin double barline, draw the paralell line\n      if (this.type === StaveConnector.type.THIN_DOUBLE) {\n        this.ctx.fillRect(topX - 3, topY, width, attachment_height);\n      }\n\n      this.ctx.save();\n      this.ctx.lineWidth = 2;\n      this.ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      // Add stave connector text\n      for (var i = 0; i < this.texts.length; i++) {\n        var text = this.texts[i];\n        var text_width = this.ctx.measureText(\"\" + text.content).width;\n        var x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n        var y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 +\n          text.options.shift_y;\n\n        this.ctx.fillText(\"\" + text.content, x, y + 4);\n      }\n      this.ctx.restore();\n    }\n  };\n\n  function drawBoldDoubleLine(ctx, type, topX, topY, botY){\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n        type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n      throw Vex.RERR(\"InvalidConnector\",\n        \"A REPEAT_BEGIN or REPEAT_END type must be provided.\");\n    }\n\n    var x_shift = 3;\n    var variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    var thickLineOffset = 2; // For aesthetics\n\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n      x_shift = -5; // Flips the side of the thin line\n      variableWidth = 3;\n    }\n\n    // Thin line\n    ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n  }\n\n  return StaveConnector;\n}());\n","// Vex Flow\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Cheppudira 2010\n\n/** @constructor */\nVex.Flow.TabStave = (function() {\n  function TabStave(x, y, width, options) {\n    if (arguments.length > 0) this.init(x, y, width, options);\n  }\n\n  Vex.Inherit(TabStave, Vex.Flow.Stave, {\n    init: function(x, y, width, options) {\n      var tab_options = {\n        spacing_between_lines_px: 13,\n        num_lines: 6,\n        top_text_position: 1\n      };\n\n      Vex.Merge(tab_options, options);\n      TabStave.superclass.init.call(this, x, y, width, tab_options);\n    },\n\n    getYForGlyphs: function() {\n      return this.getYForLine(2.5);\n    },\n\n    // Deprecated\n    addTabGlyph: function() {\n      this.addClef('tab');\n      return this;\n    }\n  });\n\n  return TabStave;\n}());\n","// Vex Flow\n// Copyright Mohit Cheppudira <mohit@muthanna.com>\n//\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\n/** @constructor */\nVex.Flow.TickContext = (function() {\n  function TickContext() {\n    this.init();\n  }\n\n  TickContext.prototype = {\n    init: function() {\n      this.currentTick = new Vex.Flow.Fraction(0, 1);\n      this.maxTicks = new Vex.Flow.Fraction(0, 1);\n      this.minTicks = null;\n      this.width = 0;\n      this.padding = 3;     // padding on each side (width += padding * 2)\n      this.pixelsUsed = 0;\n      this.x = 0;\n      this.tickables = [];   // Notes, tabs, chords, lyrics.\n      this.notePx = 0;       // width of widest note in this context\n      this.extraLeftPx = 0;  // Extra left pixels for modifers & displace notes\n      this.extraRightPx = 0; // Extra right pixels for modifers & displace notes\n      this.align_center = false;\n\n      this.tContexts = [];   // Parent array of tick contexts\n\n      // Ignore this tick context for formatting and justification\n      this.ignore_ticks = true;\n      this.preFormatted = false;\n      this.postFormatted = false;\n      this.context = null; // Rendering context\n    },\n\n    setContext: function(context) { this.context = context; return this; },\n    getContext: function() { return this.context; },\n    shouldIgnoreTicks: function() { return this.ignore_ticks; },\n    getWidth: function() { return this.width + (this.padding * 2); },\n    getX: function() { return this.x; },\n    setX: function(x) { this.x = x; return this; },\n    getPixelsUsed: function() { return this.pixelsUsed; },\n    setPixelsUsed: function(pixelsUsed) { this.pixelsUsed = pixelsUsed; return this; },\n    setPadding: function(padding) { this.padding = padding; return this; },\n    getMaxTicks: function() { return this.maxTicks; },\n    getMinTicks: function() { return this.minTicks; },\n    getTickables: function() { return this.tickables; },\n\n    getCenterAlignedTickables: function() {\n      return this.tickables.filter(function(tickable) {\n        return tickable.isCenterAligned();\n      });\n    },\n\n    // Get widths context, note and left/right modifiers for formatting\n    getMetrics: function() {\n      return { width: this.width, notePx: this.notePx,\n               extraLeftPx: this.extraLeftPx, extraRightPx: this.extraRightPx };\n    },\n\n    getCurrentTick: function() { return this.currentTick; },\n    setCurrentTick: function(tick) {\n      this.currentTick = tick;\n      this.preFormatted = false;\n    },\n\n    // Get left & right pixels used for modifiers\n    getExtraPx: function() {\n      var left_shift = 0;\n      var right_shift = 0;\n      var extraLeftPx = 0;\n      var extraRightPx = 0;\n      for (var i = 0; i < this.tickables.length; i++) {\n        extraLeftPx = Math.max(this.tickables[i].extraLeftPx, extraLeftPx);\n        extraRightPx = Math.max(this.tickables[i].extraRightPx, extraRightPx);\n        var mContext = this.tickables[i].modifierContext;\n        if (mContext && mContext != null) {\n          left_shift = Math.max( left_shift, mContext.state.left_shift);\n          right_shift = Math.max( right_shift, mContext.state.right_shift);\n        }\n      }\n      return { left: left_shift, right: right_shift,\n               extraLeft: extraLeftPx, extraRight: extraRightPx };\n    },\n\n    addTickable: function(tickable) {\n      if (!tickable) {\n        throw new Vex.RERR(\"BadArgument\", \"Invalid tickable added.\");\n      }\n\n      if (!tickable.shouldIgnoreTicks()) {\n        this.ignore_ticks = false;\n\n        var ticks = tickable.getTicks();\n\n        if (ticks.greaterThan(this.maxTicks)) {\n          this.maxTicks = ticks.clone();\n        }\n\n        if (this.minTicks == null) {\n          this.minTicks = ticks.clone();\n        } else if (ticks.lessThan(this.minTicks)) {\n          this.minTicks = ticks.clone();\n        }\n      }\n\n      tickable.setTickContext(this);\n      this.tickables.push(tickable);\n      this.preFormatted = false;\n      return this;\n    },\n\n    preFormat: function() {\n      if (this.preFormatted) return;\n\n      for (var i = 0; i < this.tickables.length; ++i) {\n        var tickable = this.tickables[i];\n        tickable.preFormat();\n        var metrics = tickable.getMetrics();\n\n        // Maintain max extra pixels from all tickables in the context\n        this.extraLeftPx = Math.max(this.extraLeftPx,\n                                    metrics.extraLeftPx + metrics.modLeftPx);\n        this.extraRightPx = Math.max(this.extraRightPx,\n                                     metrics.extraRightPx + metrics.modRightPx);\n\n        // Maintain the widest note for all tickables in the context\n        this.notePx = Math.max(this.notePx, metrics.noteWidth);\n\n        // Recalculate the tick context total width\n        this.width = this.notePx +\n                     this.extraLeftPx +\n                     this.extraRightPx;\n      }\n\n      return this;\n    },\n\n    postFormat: function() {\n      if (this.postFormatted) return this;\n      this.postFormatted = true;\n      return this;\n    }\n  };\n\n  TickContext.getNextContext = function(tContext) {\n    var contexts = tContext.tContexts;\n    var index = contexts.indexOf(tContext);\n\n    return contexts[index+1];\n  };\n\n  return TickContext;\n}());\n","// Vex Flow\n// Copyright Mohit Cheppudira <mohit@muthanna.com>\n//\n// The tickable interface. Tickables are things that sit on a score and\n// have a duration, i.e., they occupy space in the musical rendering dimension.\n\n/** @constructor */\nVex.Flow.Tickable = (function() {\n  function Tickable() {\n    this.init();\n  }\n\n  Tickable.prototype = {\n    init: function() {\n      this.intrinsicTicks = 0;\n      this.tickMultiplier = new Vex.Flow.Fraction(1, 1);\n      this.ticks = new Vex.Flow.Fraction(0, 1);\n      this.width = 0;\n      this.x_shift = 0; // Shift from tick context\n      this.voice = null;\n      this.tickContext = null;\n      this.modifierContext = null;\n      this.modifiers = [];\n      this.preFormatted = false;\n      this.postFormatted = false;\n      this.tuplet = null;\n\n      // For interactivity\n      this.id = null;\n      this.elem = null;\n\n      this.align_center = false;\n      this.center_x_shift = 0; // Shift from tick context if center aligned\n\n      // This flag tells the formatter to ignore this tickable during\n      // formatting and justification. It is set by tickables such as BarNote.\n      this.ignore_ticks = false;\n      this.context = null;\n    },\n\n    setContext: function(context) { this.context = context; },\n\n    // Set the DOM ID of the element. Must be called before draw(). TODO: Update\n    // ID of element if has already been rendered.\n    setId: function(id) { this.id = id; },\n    getId: function() { return this.id; },\n    getElem: function() { return this.elem; },\n    getBoundingBox: function() { return null; },\n    getTicks: function() { return this.ticks; },\n    shouldIgnoreTicks: function() { return this.ignore_ticks; },\n    getWidth: function() { return this.width; },\n    setXShift: function(x) { this.x_shift = x; },\n    getCenterXShift: function() {\n      if (this.isCenterAligned()) {\n        return this.center_x_shift;\n      }\n\n      return 0;\n    },\n\n    isCenterAligned: function() { return this.align_center; },\n    setCenterAlignment: function(align_center) {\n      this.align_center = align_center;\n      return this;\n    },\n\n    // Every tickable must be associated with a voice. This allows formatters\n    // and preFormatter to associate them with the right modifierContexts.\n    getVoice: function() {\n      if (!this.voice) throw new Vex.RERR(\"NoVoice\", \"Tickable has no voice.\");\n      return this.voice;\n    },\n    setVoice: function(voice) { this.voice = voice; },\n\n    getTuplet: function() { return this.tuplet; },\n    setTuplet: function(tuplet) {\n      // Detach from previous tuplet\n      var noteCount, beatsOccupied;\n\n      if (this.tuplet) {\n        noteCount = this.tuplet.getNoteCount();\n        beatsOccupied = this.tuplet.getBeatsOccupied();\n\n        // Revert old multiplier\n        this.applyTickMultiplier(noteCount, beatsOccupied);\n      }\n\n      // Attach to new tuplet\n      if (tuplet) {\n        noteCount = tuplet.getNoteCount();\n        beatsOccupied = tuplet.getBeatsOccupied();\n\n        this.applyTickMultiplier(beatsOccupied, noteCount);\n      }\n\n      this.tuplet = tuplet;\n\n      return this;\n    },\n\n    /** optional, if tickable has modifiers **/\n    addToModifierContext: function(mc) {\n      this.modifierContext = mc;\n      // Add modifiers to modifier context (if any)\n      this.preFormatted = false;\n    },\n\n    /** optional, if tickable has modifiers **/\n    addModifier: function(mod) {\n      this.modifiers.push(mod);\n      this.preFormatted = false;\n      return this;\n    },\n\n    setTickContext: function(tc) {\n      this.tickContext = tc;\n      this.preFormatted = false;\n    },\n\n    preFormat: function() {\n      if (this.preFormatted) return;\n\n      this.width = 0;\n      if (this.modifierContext) {\n        this.modifierContext.preFormat();\n        this.width += this.modifierContext.getWidth();\n      }\n    },\n    postFormat: function() {\n      if (this.postFormatted) return;\n      this.postFormatted = true;\n      return this;\n    },\n    getIntrinsicTicks: function() {\n      return this.intrinsicTicks;\n    },\n    setIntrinsicTicks: function(intrinsicTicks) {\n      this.intrinsicTicks = intrinsicTicks;\n      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    },\n    getTickMultiplier: function() {\n      return this.tickMultiplier;\n    },\n    applyTickMultiplier: function(numerator, denominator) {\n      this.tickMultiplier.multiply(numerator, denominator);\n      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    },\n    setDuration: function(duration) {\n      var ticks = duration.numerator * (Vex.Flow.RESOLUTION / duration.denominator);\n      this.ticks = this.tickMultiplier.clone().multiply(ticks);\n      this.intrinsicTicks = this.ticks.value();\n    }\n  };\n\n  return Tickable;\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements an abstract interface for notes and chords that\n// are rendered on a stave. Notes have some common properties: All of them\n// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n//\n// Some notes have stems, heads, dots, etc. Most notational elements that\n// surround a note are called *modifiers*, and every note has an associated\n// array of them. All notes also have a rendering context and belong to a stave.\n\nVex.Flow.Note = (function() {\n  // To create a new note you need to provide a `note_struct`, which consists\n  // of the following fields:\n  //\n  // `type`: The note type (e.g., `r` for rest, `s` for slash notes, etc.)\n  // `dots`: The number of dots, which affects the duration.\n  // `duration`: The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.)\n  //\n  // The range of values for these parameters are available in `src/tables.js`.\n  function Note(note_struct) {\n    if (arguments.length > 0) this.init(note_struct);\n  }\n  Note.CATEGORY = \"note\";\n\n  // Debug helper. Displays various note metrics for the given\n  // note.\n  Note.plotMetrics = function(ctx, note, yPos) {\n    var metrics = note.getMetrics();\n    var w = metrics.width;\n    var xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;\n    var xPre1 = note.getAbsoluteX() - metrics.extraLeftPx;\n    var xAbs = note.getAbsoluteX();\n    var xPost1 = note.getAbsoluteX() + metrics.noteWidth;\n    var xPost2 = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx;\n    var xEnd = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx + metrics.modRightPx;\n\n    var xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont(\"Arial\", 8, \"\");\n    ctx.fillText(Math.round(xWidth) + \"px\", xStart + note.getXShift(), yPos);\n\n    var y = (yPos + 7);\n    function stroke(x1, x2, color) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), y);\n      ctx.lineTo(x2 + note.getXShift(), y);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, \"red\");\n    stroke(xPre1, xAbs, \"#999\");\n    stroke(xAbs, xPost1, \"green\");\n    stroke(xPost1, xPost2, \"#999\");\n    stroke(xPost2, xEnd, \"red\");\n    stroke(xStart - note.getXShift(), xStart, \"#DDD\"); // Shift\n    Vex.drawDot(ctx, xAbs + note.getXShift(), y, \"blue\");\n    ctx.restore();\n  };\n\n  // ## Prototype Methods\n  //\n  // Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n  // positioning and layout.\n  Vex.Inherit(Note, Vex.Flow.Tickable, {\n    // See constructor above for how to create a note.\n    init: function(note_struct) {\n      Note.superclass.init.call(this);\n\n      if (!note_struct) {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Note must have valid initialization data to identify \" +\n            \"duration and type.\");\n      }\n\n      // Parse `note_struct` and get note properties.\n      var initData = Vex.Flow.parseNoteData(note_struct);\n      if (!initData) {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Invalid note initialization object: \" + JSON.stringify(note_struct));\n      }\n\n      // Set note properties from parameters.\n      this.duration = initData.duration;\n      this.dots = initData.dots;\n      this.noteType = initData.type;\n\n      if (note_struct.duration_override) {\n        // Custom duration\n        this.setDuration(note_struct.duration_override);\n      } else {\n        // Default duration\n        this.setIntrinsicTicks(initData.ticks);\n      }\n\n      this.modifiers = [];\n\n      // Get the glyph code for this note from the font.\n      this.glyph = Vex.Flow.durationToGlyph(this.duration, this.noteType);\n\n      if (this.positions &&\n          (typeof(this.positions) != \"object\" || !this.positions.length)) {\n        throw new Vex.RuntimeError(\n          \"BadArguments\", \"Note keys must be array type.\");\n      }\n\n      // Note to play for audio players.\n      this.playNote = null;\n\n      // Positioning contexts used by the Formatter.\n      this.tickContext = null;    // The current tick context.\n      this.modifierContext = null;\n      this.ignore_ticks = false;\n\n      // Positioning variables\n      this.width = 0;             // Width in pixels calculated after preFormat\n      this.extraLeftPx = 0;       // Extra room on left for offset note head\n      this.extraRightPx = 0;      // Extra room on right for offset note head\n      this.x_shift = 0;           // X shift from tick context X\n      this.left_modPx = 0;        // Max width of left modifiers\n      this.right_modPx = 0;       // Max width of right modifiers\n      this.voice = null;          // The voice that this note is in\n      this.preFormatted = false;  // Is this note preFormatted?\n      this.ys = [];               // list of y coordinates for each note\n                                  // we need to hold on to these for ties and beams.\n\n      if (note_struct.align_center) {\n        this.setCenterAlignment(note_struct.align_center);\n      }\n\n      // The render surface.\n      this.context = null;\n      this.stave = null;\n      this.render_options = {\n        annotation_spacing: 5,\n        stave_padding: 12\n      };\n    },\n\n    // Get and set the play note, which is arbitrary data that can be used by an\n    // audio player.\n    getPlayNote: function() { return this.playNote; },\n    setPlayNote: function(note) { this.playNote = note; return this; },\n\n    // Don't play notes by default, call them rests. This is also used by things like\n    // beams and dots for positioning.\n    isRest: function() { return false; },\n\n    // TODO(0xfe): Why is this method here?\n    addStroke: function(index, stroke) {\n      stroke.setNote(this);\n      stroke.setIndex(index);\n      this.modifiers.push(stroke);\n      this.setPreFormatted(false);\n      return this;\n    },\n\n    // Get and set the target stave.\n    getStave: function() { return this.stave; },\n    setStave: function(stave) {\n      this.stave = stave;\n      this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n      this.context = this.stave.context;\n      return this;\n    },\n\n\n    // `Note` is not really a modifier, but is used in\n    // a `ModifierContext`.\n    getCategory: function() { return this.constructor.CATEGORY; },\n\n    // Set the rendering context for the note.\n    setContext: function(context) { this.context = context; return this; },\n\n    // Get and set spacing to the left and right of the notes.\n    getExtraLeftPx: function() { return this.extraLeftPx; },\n    getExtraRightPx: function() { return this.extraRightPx; },\n    setExtraLeftPx: function(x) { this.extraLeftPx = x; return this; },\n    setExtraRightPx: function(x) { this.extraRightPx = x; return this; },\n\n    // Returns true if this note has no duration (e.g., bar notes, spacers, etc.)\n    shouldIgnoreTicks: function() { return this.ignore_ticks; },\n\n    // Get the stave line number for the note.\n    getLineNumber: function() { return 0; },\n\n    // Get the stave line number for rest.\n    getLineForRest: function() { return 0; },\n\n    // Get the glyph associated with this note.\n    getGlyph: function() { return this.glyph; },\n\n    // Set and get Y positions for this note. Each Y value is associated with\n    // an individual pitch/key within the note/chord.\n    setYs: function(ys) { this.ys = ys; return this; },\n    getYs: function() {\n      if (this.ys.length === 0) throw new Vex.RERR(\"NoYValues\",\n          \"No Y-values calculated for this note.\");\n      return this.ys;\n    },\n\n    // Get the Y position of the space above the stave onto which text can\n    // be rendered.\n    getYForTopText: function(text_line) {\n      if (!this.stave) throw new Vex.RERR(\"NoStave\",\n          \"No stave attached to this note.\");\n      return this.stave.getYForTopText(text_line);\n    },\n\n    // Get a `BoundingBox` for this note.\n    getBoundingBox: function() { return null; },\n\n    // Returns the voice that this note belongs in.\n    getVoice: function() {\n      if (!this.voice) throw new Vex.RERR(\"NoVoice\", \"Note has no voice.\");\n      return this.voice;\n    },\n\n    // Attach this note to `voice`.\n    setVoice: function(voice) {\n      this.voice = voice;\n      this.preFormatted = false;\n      return this;\n    },\n\n    // Get and set the `TickContext` for this note.\n    getTickContext: function() { return this.tickContext; },\n    setTickContext: function(tc) {\n      this.tickContext = tc;\n      this.preFormatted = false;\n      return this;\n    },\n\n    // Accessors for the note type.\n    getDuration: function() { return this.duration; },\n    isDotted: function() { return (this.dots > 0); },\n    hasStem: function() { return false; },\n    getDots: function() { return this.dots; },\n    getNoteType: function() { return this.noteType; },\n    setBeam: function() { return this; }, // ignore parameters\n\n    // Attach this note to a modifier context.\n    setModifierContext: function(mc) { this.modifierContext = mc; return this; },\n\n    // Attach a modifier to this note.\n    addModifier: function(modifier, index) {\n      modifier.setNote(this);\n      modifier.setIndex(index || 0);\n      this.modifiers.push(modifier);\n      this.setPreFormatted(false);\n      return this;\n    },\n\n    // Get the coordinates for where modifiers begin.\n    getModifierStartXY: function() {\n      if (!this.preFormatted) throw new Vex.RERR(\"UnformattedNote\",\n          \"Can't call GetModifierStartXY on an unformatted note\");\n      return {x: this.getAbsoluteX(), y: this.ys[0]};\n    },\n\n    // Get bounds and metrics for this note.\n    //\n    // Returns a struct with fields:\n    // `width`: The total width of the note (including modifiers.)\n    // `noteWidth`: The width of the note head only.\n    // `left_shift`: The horizontal displacement of the note.\n    // `modLeftPx`: Start `X` for left modifiers.\n    // `modRightPx`: Start `X` for right modifiers.\n    // `extraLeftPx`: Extra space on left of note.\n    // `extraRightPx`: Extra space on right of note.\n    getMetrics: function() {\n      if (!this.preFormatted) throw new Vex.RERR(\"UnformattedNote\",\n          \"Can't call getMetrics on an unformatted note.\");\n      var modLeftPx = 0;\n      var modRightPx = 0;\n      if (this.modifierContext != null) {\n        modLeftPx = this.modifierContext.state.left_shift;\n        modRightPx = this.modifierContext.state.right_shift;\n      }\n\n      var width = this.getWidth();\n      return { width: width,\n               noteWidth: width -\n                          modLeftPx - modRightPx -\n                          this.extraLeftPx - this.extraRightPx,\n               left_shift: this.x_shift, // TODO(0xfe): Make style consistent\n\n\n               // Modifiers, accidentals etc.\n               modLeftPx: modLeftPx,\n               modRightPx: modRightPx,\n\n               // Displaced note head on left or right.\n               extraLeftPx: this.extraLeftPx,\n               extraRightPx: this.extraRightPx };\n    },\n\n    // Get and set width of note. Used by the formatter for positioning.\n    setWidth: function(width) { this.width = width; },\n    getWidth: function() {\n      if (!this.preFormatted) throw new Vex.RERR(\"UnformattedNote\",\n          \"Can't call GetWidth on an unformatted note.\");\n      return this.width +\n        (this.modifierContext ?  this.modifierContext.getWidth() : 0);\n    },\n\n    // Displace note by `x` pixels. Used by the formatter.\n    setXShift: function(x) { this.x_shift = x; return this; },\n    getXShift: function() { return this.x_shift; },\n\n    // Get `X` position of this tick context.\n    getX: function() {\n      if (!this.tickContext) throw new Vex.RERR(\"NoTickContext\",\n          \"Note needs a TickContext assigned for an X-Value\");\n      return this.tickContext.getX() + this.x_shift;\n    },\n\n    // Get the absolute `X` position of this note's tick context. This\n    // excludes x_shift, so you'll need to factor it in if you're\n    // looking for the post-formatted x-position.\n    getAbsoluteX: function() {\n      if (!this.tickContext) throw new Vex.RERR(\"NoTickContext\",\n          \"Note needs a TickContext assigned for an X-Value\");\n\n      // Position note to left edge of tick context.\n      var x = this.tickContext.getX();\n      if (this.stave) {\n        x += this.stave.getNoteStartX() + this.render_options.stave_padding;\n      }\n\n      if (this.isCenterAligned()){\n        x += this.getCenterXShift();\n      }\n\n      return x;\n    },\n\n    setPreFormatted: function(value) {\n      this.preFormatted = value;\n\n      // Maintain the width of left and right modifiers in pixels.\n      if (this.preFormatted) {\n        var extra = this.tickContext.getExtraPx();\n        this.left_modPx = Math.max(this.left_modPx, extra.left);\n        this.right_modPx = Math.max(this.right_modPx, extra.right);\n      }\n    }\n  });\n\n  return Note;\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated\n// directly, but used internally in `StaveNote`.\n//\n// See `tests/notehead_tests.js` for usage examples.\nVex.Flow.NoteHead = (function() {\n  var NoteHead = function(head_options) {\n    if (arguments.length > 0) this.init(head_options);\n  };\n\n  // To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.\n  function L() { if (NoteHead.DEBUG) Vex.L(\"Vex.Flow.NoteHead\", arguments); }\n\n\n  // Draw slashnote head manually. No glyph exists for this.\n  //\n  // Parameters:\n  // * `ctx`: the Canvas context\n  // * `duration`: the duration of the note. ex: \"4\"\n  // * `x`: the x coordinate to draw at\n  // * `y`: the y coordinate to draw at\n  // * `stem_direction`: the direction of the stem\n  function drawSlashNoteHead(ctx, duration, x, y, stem_direction) {\n    var width = 15 + (Vex.Flow.STEM_WIDTH / 2);\n    ctx.save();\n    ctx.setLineWidth(Vex.Flow.STEM_WIDTH);\n\n    var fill = false;\n\n    if (Vex.Flow.durationToNumber(duration) > 2) {\n      fill = true;\n    }\n\n    if (!fill) x -= (Vex.Flow.STEM_WIDTH / 2) * stem_direction;\n\n    ctx.beginPath();\n    ctx.moveTo(x, y + 11);\n    ctx.lineTo(x, y + 1);\n    ctx.lineTo(x + width, y - 10);\n    ctx.lineTo(x + width, y);\n    ctx.lineTo(x, y + 11);\n    ctx.closePath();\n\n    if (fill) {\n       ctx.fill();\n    } else {\n       ctx.stroke();\n    }\n\n    if (Vex.Flow.durationToFraction(duration).equals(0.5)) {\n      var breve_lines = [-3, -1, width + 1, width + 3];\n      for(var i=0; i<breve_lines.length; i++){\n          ctx.beginPath();\n          ctx.moveTo(x + breve_lines[i], y - 10);\n          ctx.lineTo(x + breve_lines[i], y + 11);\n          ctx.stroke();\n      }\n    }\n\n    ctx.restore();\n  }\n\n  // ## Prototype Methods\n  Vex.Inherit(NoteHead, Vex.Flow.Note, {\n    init: function(head_options) {\n      NoteHead.superclass.init.call(this, head_options);\n      this.index = head_options.index;\n      this.x = head_options.x || 0;\n      this.y = head_options.y || 0;\n      this.note_type = head_options.note_type;\n      this.duration = head_options.duration;\n      this.displaced = head_options.displaced || false;\n      this.stem_direction = head_options.stem_direction || Vex.Flow.StaveNote.STEM_UP;\n      this.line = head_options.line;\n\n      // Get glyph code based on duration and note type. This could be\n      // regular notes, rests, or other custom codes.\n      this.glyph = Vex.Flow.durationToGlyph(this.duration, this.note_type);\n      if (!this.glyph) {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"No glyph found for duration '\" + this.duration +\n            \"' and type '\" + this.note_type + \"'\");\n      }\n\n      this.glyph_code = this.glyph.code_head;\n      this.x_shift = head_options.x_shift;\n      if (head_options.custom_glyph_code) {\n        this.custom_glyph = true;\n        this.glyph_code = head_options.custom_glyph_code;\n      }\n\n      this.context = null;\n      this.style = head_options.style;\n      this.slashed = head_options.slashed;\n\n      Vex.Merge(this.render_options, {\n        glyph_font_scale: 35, // font size for note heads\n        stroke_px: 3         // number of stroke px to the left and right of head\n      });\n\n      if (head_options.glyph_font_scale) {\n        this.render_options.glyph_font_scale = head_options.glyph_font_scale;\n      }\n\n      this.setWidth(this.glyph.head_width);\n    },\n\n    // Get the `ModifierContext` category\n    getCategory: function() { return \"notehead\"; },\n\n    // Set the Cavnas context for drawing\n    setContext: function(context) { this.context = context; return this;},\n\n    // Get the width of the notehead\n    getWidth: function() { return this.width; },\n\n    // Determine if the notehead is displaced\n    isDisplaced: function() { return this.displaced === true; },\n\n    // Get/set the notehead's style\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    getStyle: function() { return this.style; },\n    setStyle: function(style) { this.style = style; return this; },\n\n    // Get the glyph data\n    getGlyph: function(){ return this.glyph; },\n\n    // Set the X coordinate\n    setX: function(x){ this.x = x; return this; },\n\n    // get/set the Y coordinate\n    getY: function() { return this.y; },\n    setY: function(y) { this.y = y;  return this; },\n\n    // Get/set the stave line the notehead is placed on\n    getLine: function() { return this.line; },\n    setLine: function(line) { this.line = line; return this; },\n\n    // Get the canvas `x` coordinate position of the notehead.\n    getAbsoluteX: function() {\n      var getAbsoluteX = NoteHead.superclass.getAbsoluteX;\n\n      // If the note has not been preformatted, then get the static x value\n      // Otherwise, it's been formatted and we should use it's x value relative\n      // to its tick context\n      var x = !this.preFormatted ? this.x : getAbsoluteX.call(this);\n\n      return x + (this.displaced ? this.width * this.stem_direction : 0);\n    },\n\n    // Get the `BoundingBox` for the `NoteHead`\n    getBoundingBox: function() {\n      if (!this.preFormatted) throw new Vex.RERR(\"UnformattedNote\",\n          \"Can't call getBoundingBox on an unformatted note.\");\n\n      var spacing = this.stave.getSpacingBetweenLines();\n      var half_spacing = spacing/2;\n      var min_y = this.y - half_spacing;\n\n      return new Vex.Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n    },\n\n    // Apply current style to Canvas `context`\n    applyStyle: function(context) {\n      var style = this.getStyle();\n      if (style.shadowColor) context.setShadowColor(style.shadowColor);\n      if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n      if (style.fillStyle) context.setFillStyle(style.fillStyle);\n      if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n      return this;\n    },\n\n    // Set notehead to a provided `stave`\n    setStave: function(stave){\n      var line = this.getLine();\n\n      this.stave = stave;\n      this.setY(stave.getYForNote(line));\n      this.context = this.stave.context;\n      return this;\n    },\n\n    // Pre-render formatting\n    preFormat: function() {\n      if (this.preFormatted) return this;\n\n      var glyph = this.getGlyph();\n      var width = glyph.head_width + this.extraLeftPx + this.extraRightPx;\n\n      this.setWidth(width);\n      this.setPreFormatted(true);\n      return this;\n    },\n\n    // Draw the notehead\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n\n      var ctx = this.context;\n      var head_x = this.getAbsoluteX();\n      var y = this.y;\n\n      L(\"Drawing note head '\", this.note_type, this.duration, \"' at\", head_x, y);\n\n      // Begin and end positions for head.\n      var stem_direction = this.stem_direction;\n      var glyph_font_scale = this.render_options.glyph_font_scale;\n\n      var line = this.line;\n\n      // If note above/below the staff, draw the small staff\n      if (line <= 0 || line >= 6) {\n        var line_y = y;\n        var floor = Math.floor(line);\n        if (line < 0 && floor - line == -0.5)\n          line_y -= 5;\n        else if (line > 6 &&  floor - line == -0.5)\n          line_y += 5;\n        if (this.note_type != 'r') {\n          ctx.fillRect(\n            head_x - this.render_options.stroke_px, line_y,\n            (this.getGlyph().head_width) +\n            (this.render_options.stroke_px * 2), 1);\n        }\n      }\n\n      if (this.note_type == \"s\") {\n        drawSlashNoteHead(ctx, this.duration,\n          head_x, y, stem_direction);\n      } else {\n        if (this.style) {\n          ctx.save();\n          this.applyStyle(ctx);\n          Vex.Flow.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);\n          ctx.restore();\n        } else {\n          Vex.Flow.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);\n        }\n      }\n    }\n  });\n\n  return NoteHead;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n//\nVex.Flow.Stem = (function() {\n  var Stem = function(options) {\n    if (arguments.length > 0) this.init(options);\n  };\n\n  // To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\n  function L() { if (Stem.DEBUG) Vex.L(\"Vex.Flow.Stem\", arguments); }\n\n  // Stem directions\n  Stem.UP = 1;\n  Stem.DOWN = -1;\n\n  // Theme\n  Stem.WIDTH = Vex.Flow.STEM_WIDTH;\n  Stem.HEIGHT = Vex.Flow.STEM_HEIGHT;\n\n  // ## Prototype Methods\n  Stem.prototype = {\n    init: function(options) {\n      // Default notehead x bounds\n      this.x_begin = options.x_begin || 0;\n      this.x_end = options.x_end || 0;\n\n      // Y bounds for top/bottom most notehead\n      this.y_top = options.y_top || 0;\n      this.y_bottom = options.y_bottom || 0;\n\n      // Stem base extension\n      this.y_extend = options.y_extend || 0;\n      // Stem top extension\n      this.stem_extension = options.stem_extension || 0;\n\n      // Direction of the stem\n      this.stem_direction = options.stem_direction || 0;\n\n      // Flag to override all draw calls\n      this.hide = false;\n    },\n\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds: function(x_begin, x_end) {\n      this.x_begin = x_begin;\n      this.x_end = x_end;\n      return this;\n    },\n\n    // Set the direction of the stem in relation to the noteheads\n    setDirection: function(direction){ this.stem_direction = direction; },\n\n    // Set the extension for the stem, generally for flags or beams\n    setExtension: function(ext) { this.stem_extension = ext; },\n\n    // The the y bounds for the top and bottom noteheads\n    setYBounds: function(y_top, y_bottom) {\n      this.y_top = y_top;\n      this.y_bottom = y_bottom;\n    },\n\n    // The category of the object\n    getCategory: function() { return \"stem\"; },\n\n    // Set the canvas context to render on\n    setContext: function(context) { this.context = context; return this;},\n\n    // Gets the entire height for the stem\n    getHeight: function() {\n      return ((this.y_bottom - this.y_top) * this.stem_direction) +\n             ((Stem.HEIGHT + this.stem_extension) * this.stem_direction);\n    },\n\n    getBoundingBox: function() {\n      throw new Vex.RERR(\"NotImplemented\", \"getBoundingBox() not implemented.\");\n    },\n\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents: function() {\n      var ys = [this.y_top, this.y_bottom];\n\n      var top_pixel = this.y_top;\n      var base_pixel = this.y_bottom;\n      var stem_height = Stem.HEIGHT + this.stem_extension;\n\n      for (var i = 0; i < ys.length; ++i) {\n        var stem_top = ys[i] + (stem_height * -this.stem_direction);\n\n        if (this.stem_direction == Stem.DOWN) {\n          top_pixel = Math.max(top_pixel, stem_top);\n          base_pixel = Math.min(base_pixel, ys[i]);\n        } else {\n          top_pixel = Math.min(top_pixel, stem_top);\n          base_pixel = Math.max(base_pixel, ys[i]);\n        }\n      }\n\n      return { topY: top_pixel, baseY: base_pixel };\n    },\n\n    // set the draw style of a stem:\n    setStyle: function(style) { this.style = style; return this; },\n    getStyle: function() { return this.style; },\n\n    // Apply current style to Canvas `context`\n    applyStyle: function(context) {\n      var style = this.getStyle();\n      if(style) {\n        if (style.shadowColor) context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n        if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n      }\n      return this;\n    },\n\n    // Render the stem onto the canvas\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n\n      if (this.hide) return;\n\n      var ctx = this.context;\n      var stem_x, stem_y;\n      var stem_direction = this.stem_direction;\n\n      if (stem_direction == Stem.DOWN) {\n        // Down stems are rendered to the left of the head.\n        stem_x = this.x_begin + (Stem.WIDTH / 2);\n        stem_y = this.y_top + 2;\n      } else {\n        // Up stems are rendered to the right of the head.\n        stem_x = this.x_end + (Stem.WIDTH / 2);\n        stem_y = this.y_bottom - 2;\n      }\n\n      stem_y += this.y_extend * stem_direction;\n\n      L(\"Rendering stem - \", \"Top Y: \", this.y_top, \"Bottom Y: \", this.y_bottom);\n\n      // Draw the stem\n      ctx.save();\n      this.applyStyle(ctx);\n      ctx.beginPath();\n      ctx.setLineWidth(Stem.WIDTH);\n      ctx.moveTo(stem_x, stem_y);\n      ctx.lineTo(stem_x, stem_y - this.getHeight());\n      ctx.stroke();\n      ctx.restore();\n    }\n  };\n\n  return Stem;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nVex.Flow.StemmableNote = (function(){\n  var StemmableNote = function(note_struct) {\n    if (arguments.length > 0) this.init(note_struct);\n  };\n\n  // To enable logging for this class. Set `Vex.Flow.StemmableNote.DEBUG` to `true`.\n  function L() { if (StemmableNote.DEBUG) Vex.L(\"Vex.Flow.StemmableNote\", arguments); }\n\n  var Stem = Vex.Flow.Stem;\n\n  Vex.Inherit(StemmableNote, Vex.Flow.Note, {\n    init: function(note_struct){\n      StemmableNote.superclass.init.call(this, note_struct);\n\n      this.stem = null;\n      this.stem_extension_override = null;\n      this.beam = null;\n    },\n\n    // Get and set the note's `Stem`\n    getStem: function() {return this.stem; },\n    setStem: function(stem) { this.stem = stem; return this; },\n\n    // Builds and sets a new stem\n    buildStem: function() {\n      var stem = new Stem();\n      this.setStem(stem);\n      return this;\n    },\n\n    // Get the full length of stem\n    getStemLength: function() {\n      return Stem.HEIGHT + this.getStemExtension();\n    },\n\n    // Get the number of beams for this duration\n    getBeamCount: function(){\n      var glyph = this.getGlyph();\n\n      if (glyph) {\n        return glyph.beam_count;\n      } else {\n        return 0;\n      }\n    },\n\n    // Get the minimum length of stem\n    getStemMinumumLength: function() {\n      var frac = Vex.Flow.durationToFraction(this.duration);\n      var length = (frac.value() <= 1) ? 0 : 20;\n      // if note is flagged, cannot shorten beam\n      switch (this.duration) {\n       case \"8\":\n         if (this.beam == null) length = 35;\n         break;\n       case \"16\":\n         if (this.beam == null)\n           length = 35;\n         else\n           length = 25;\n         break;\n       case \"32\":\n         if (this.beam == null)\n           length = 45;\n         else\n           length = 35;\n         break;\n       case \"64\":\n         if (this.beam == null)\n           length = 50;\n         else\n           length = 40;\n         break;\n       case \"128\":\n         if (this.beam == null)\n           length = 55;\n         else\n           length = 45;\n      }\n      return length;\n    },\n\n    // Get/set the direction of the stem\n    getStemDirection: function() { return this.stem_direction; },\n    setStemDirection: function(direction) {\n      if (!direction) direction = Stem.UP;\n      if (direction != Stem.UP &&\n          direction != Stem.DOWN) {\n        throw new Vex.RERR(\"BadArgument\", \"Invalid stem direction: \" +\n            direction);\n      }\n\n      this.stem_direction = direction;\n      if (this.stem) {\n        this.stem.setDirection(direction);\n        this.stem.setExtension(this.getStemExtension());\n      }\n\n      this.beam = null;\n      if (this.preFormatted) {\n        this.preFormat();\n      }\n      return this;\n    },\n\n    // Get the `x` coordinate of the stem\n    getStemX: function() {\n      var x_begin = this.getAbsoluteX() + this.x_shift;\n      var x_end = this.getAbsoluteX() + this.x_shift + this.glyph.head_width;\n\n      var stem_x = this.stem_direction == Stem.DOWN ?\n        x_begin : x_end;\n\n      stem_x -= ((Stem.WIDTH / 2) * this.stem_direction);\n\n      return stem_x;\n    },\n\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX: function(){\n      return this.getAbsoluteX() + this.x_shift + (this.glyph.head_width / 2);\n    },\n\n    // Get the stem extension for the current duration\n    getStemExtension: function(){\n      var glyph = this.getGlyph();\n\n      if (this.stem_extension_override != null) {\n        return this.stem_extension_override;\n      }\n\n      if (glyph) {\n        return this.getStemDirection() === 1 ? glyph.stem_up_extension :\n          glyph.stem_down_extension;\n      }\n\n      return 0;\n    },\n\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength: function(height) {\n      this.stem_extension_override = (height - Stem.HEIGHT);\n      return this;\n    },\n\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents: function() {\n      if (!this.ys || this.ys.length === 0) throw new Vex.RERR(\"NoYValues\",\n          \"Can't get top stem Y when note has no Y values.\");\n\n      var top_pixel = this.ys[0];\n      var base_pixel = this.ys[0];\n      var stem_height = Stem.HEIGHT + this.getStemExtension();\n\n      for (var i = 0; i < this.ys.length; ++i) {\n        var stem_top = this.ys[i] + (stem_height * -this.stem_direction);\n\n        if (this.stem_direction == Stem.DOWN) {\n          top_pixel = Math.max(top_pixel, stem_top);\n          base_pixel = Math.min(base_pixel, this.ys[i]);\n        } else {\n          top_pixel = Math.min(top_pixel, stem_top);\n          base_pixel = Math.max(base_pixel, this.ys[i]);\n        }\n\n        if(this.noteType == \"s\" || this.noteType == 'x') {\n          top_pixel -= this.stem_direction * 7;\n          base_pixel -= this.stem_direction * 7;\n        }\n      }\n\n      L(\"Stem extents: \", top_pixel, base_pixel);\n      return { topY: top_pixel, baseY: base_pixel };\n    },\n\n    // Sets the current note's beam\n    setBeam: function(beam) { this.beam = beam; return this; },\n\n    // Get the `y` value for the top/bottom modifiers at a specific `text_line`\n    getYForTopText: function(text_line) {\n      var extents = this.getStemExtents();\n      if (this.hasStem()) {\n        return Vex.Min(this.stave.getYForTopText(text_line),\n            extents.topY - (this.render_options.annotation_spacing * (text_line + 1)));\n      } else {\n        return this.stave.getYForTopText(text_line);\n      }\n    },\n\n    getYForBottomText: function(text_line) {\n      var extents = this.getStemExtents();\n      if (this.hasStem()) {\n        return Vex.Max(this.stave.getYForTopText(text_line),\n          extents.baseY + (this.render_options.annotation_spacing * (text_line)));\n      } else {\n        return this.stave.getYForBottomText(text_line);\n      }\n    },\n\n    hasFlag: function() {\n      return Vex.Flow.durationToGlyph(this.duration).flag;\n    },\n\n    // Post format the note\n    postFormat: function() {\n      if (this.beam) {\n        this.beam.postFormat();\n      }\n      this.postFormatted = true;\n      return this;\n    },\n\n    // Render the stem onto the canvas\n    drawStem: function(stem_struct){\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n\n      this.setStem(new Stem(stem_struct));\n      this.stem.setContext(this.context).draw();\n    }\n  });\n\n  return StemmableNote;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.js` for usage examples.\nVex.Flow.StaveNote = (function() {\n  var StaveNote = function(note_struct) {\n    if (arguments.length > 0) this.init(note_struct);\n  };\n  StaveNote.CATEGORY = \"stavenotes\";\n\n  // To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n  function L() { if (StaveNote.DEBUG) Vex.L(\"Vex.Flow.StaveNote\", arguments); }\n\n  var Stem = Vex.Flow.Stem;\n  var NoteHead = Vex.Flow.NoteHead;\n\n  // Stem directions\n  StaveNote.STEM_UP = Stem.UP;\n  StaveNote.STEM_DOWN = Stem.DOWN;\n\n  // Helper methods for rest positioning in ModifierContext.\n  var shiftRestVertical = function(rest, note, dir) {\n    var delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n    rest.line += delta;\n    rest.max_line += delta;\n    rest.min_line += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + (delta));\n  };\n\n  // Called from formatNotes :: center a rest between two notes\n  var centerRest = function(rest, noteU, noteL) {\n    var delta = rest.line - Vex.MidLine(noteU.min_line, noteL.max_line);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.max_line -= delta;\n    rest.min_line -= delta;\n  };\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  StaveNote.format = function(notes, state) {\n    if (!notes || notes.length < 2) return false;\n\n    if (notes[0].getStave() != null) return StaveNote.formatByY(notes, state);\n\n    var notes_list= [];\n\n    for (var i = 0; i < notes.length; i++) {\n      var props = notes[i].getKeyProps();\n      var line = props[0].line;\n      var minL = props[props.length -1].line;\n      var stem_dir = notes[i].getStemDirection();\n      var stem_max = notes[i].getStemLength() / 10;\n      var stem_min = notes[i].getStemMinumumLength() / 10;\n\n      var maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stem_dir == 1 ? props[props.length -1].line + stem_max\n             : props[props.length -1].line;\n        minL = stem_dir == 1 ? props[0].line\n             : props[0].line - stem_max;\n      }\n      notes_list.push(\n        {line: props[0].line,         // note/rest base line\n         max_line: maxL,              // note/rest upper bounds line\n         min_line: minL,              // note/rest lower bounds line\n         isrest: notes[i].isRest(),\n         stem_dir: stem_dir,\n         stem_max: stem_max,          // Maximum (default) note stem length;\n         stem_min: stem_min,          // minimum note stem length\n         voice_shift: notes[i].getVoiceShiftWidth(),\n         is_displaced: notes[i].isDisplaced(),   // note manually displaced\n         note: notes[i]});\n    }\n\n    var voices = notes_list.length;\n\n    var noteU = notes_list[0];\n    var noteM = voices > 2 ? notes_list[1] : null;\n    var noteL = voices > 2 ? notes_list[2] : notes_list[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices == 2 && noteU.stem_dir == -1 && noteL.stem_dir == 1) {\n      noteU = notes_list[1];\n      noteL = notes_list[0];\n    }\n\n    var voice_x_shift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    var x_shift = 0;\n    var stem_delta;\n\n    // Test for two voice note intersection\n    if (voices == 2) {\n      var line_spacing = noteU.stem_dir == noteL.stem_dir ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stem_dir == noteL.stem_dir &&\n          noteU.min_line <= noteL.max_line) {\n        if (!noteU.isrest) {\n          stem_delta = Math.abs(noteU.line - (noteL.max_line + 0.5));\n          stem_delta = Math.max(stem_delta, noteU.stem_min);\n          noteU.min_line = noteU.line - stem_delta;\n          noteU.note.setStemLength(stem_delta * 10);\n        }\n      }\n      if (noteU.min_line <= noteL.max_line + line_spacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          x_shift = voice_x_shift;\n          if (noteU.stem_dir == noteL.stem_dir)\n            // upper voice is middle voice, so shift it right\n            noteU.note.setXShift(x_shift + 3);\n          else\n            // shift lower voice right\n            noteL.note.setXShift(x_shift);\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM != null && noteM.min_line < noteL.max_line + 0.5) {\n      if (!noteM.isrest) {\n        stem_delta = Math.abs(noteM.line - (noteL.max_line + 0.5));\n        stem_delta = Math.max(stem_delta, noteM.stem_min);\n        noteM.min_line = noteM.line - stem_delta;\n        noteM.note.setStemLength(stem_delta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.min_line <= noteM.max_line ||\n          noteM.min_line <= noteL.max_line) {\n         var rest_height = noteM.max_line - noteM.min_line;\n         var space = noteU.min_line - noteL.max_line;\n         if (rest_height < space)\n           // center middle voice rest between the upper and lower voices\n           centerRest(noteM, noteU, noteL);\n         else {\n           x_shift = voice_x_shift + 3;    // shift middle rest right\n           noteM.note.setXShift(x_shift);\n         }\n         // format complete\n         return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.min_line <= noteL.max_line)\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    if (noteM.isrest && noteL.isrest && noteU.min_line <= noteM.max_line)\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    if (noteU.isrest && noteU.min_line <= noteM.max_line)\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    if (noteL.isrest && noteM.min_line <= noteL.max_line)\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n\n    // If middle voice intersects upper or lower voice\n    if ((!noteU.isrest && !noteM.isrest && noteU.min_line <= noteM.max_line + 0.5) ||\n        (!noteM.isrest && !noteL.isrest && noteM.min_line <= noteL.max_line)) {\n      x_shift = voice_x_shift + 3;      // shift middle note right\n      noteM.note.setXShift(x_shift);\n    }\n\n    return true;\n  };\n\n  StaveNote.formatByY = function(notes, state) {\n    // NOTE: this function does not support more than two voices per stave\n    //       use with care.\n    var hasStave = true;\n    var i;\n\n    for (i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != null;\n    }\n\n    if (!hasStave) throw new Vex.RERR(\"Stave Missing\",\n      \"All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!\");\n\n    var x_shift = 0;\n\n    for (i = 0; i < notes.length - 1; i++) {\n      var top_note = notes[i];\n      var bottom_note = notes[i + 1];\n\n      if (top_note.getStemDirection() == Vex.Flow.StaveNote.STEM_DOWN) {\n        top_note = notes[i + 1];\n        bottom_note = notes[i];\n      }\n\n      var top_keys = top_note.getKeyProps();\n      var bottom_keys = bottom_note.getKeyProps();\n\n      var topY = top_note.getStave().getYForLine(top_keys[0].line);\n      var bottomY = bottom_note.getStave().getYForLine(bottom_keys[bottom_keys.length - 1].line);\n\n      var line_space = top_note.getStave().options.spacing_between_lines_px;\n      if (Math.abs(topY - bottomY) == line_space / 2) {\n        x_shift = top_note.getVoiceShiftWidth();\n        bottom_note.setXShift(x_shift);\n      }\n    }\n\n    state.right_shift += x_shift;\n  };\n\n  StaveNote.postFormat = function(notes) {\n    if (!notes) return false;\n\n    notes.forEach(function(note) {\n      note.postFormat();\n    });\n\n    return true;\n  };\n\n  // ## Prototype Methods\n  //\n  Vex.Inherit(StaveNote, Vex.Flow.StemmableNote, {\n    init: function(note_struct) {\n      StaveNote.superclass.init.call(this, note_struct);\n\n      this.keys = note_struct.keys;\n      this.clef = note_struct.clef;\n      this.octave_shift = note_struct.octave_shift;\n      this.beam = null;\n\n      // Pull note rendering properties\n      this.glyph = Vex.Flow.durationToGlyph(this.duration, this.noteType);\n      if (!this.glyph) {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Invalid note initialization data (No glyph found): \" +\n            JSON.stringify(note_struct));\n      }\n\n      // if true, displace note to right\n      this.displaced = false;\n      this.dot_shiftY = 0;\n      // per-pitch properties\n      this.keyProps = [];\n      // for displaced ledger lines\n      this.use_default_head_x = false;\n\n      // Drawing\n      this.note_heads = [];\n      this.modifiers = [];\n\n      Vex.Merge(this.render_options, {\n        // font size for note heads and rests\n        glyph_font_scale: 35,\n        // number of stroke px to the left and right of head\n        stroke_px: 3\n      });\n\n      this.calculateKeyProps();\n\n      this.buildStem();\n\n      // Set the stem direction\n      if (note_struct.auto_stem) {\n        this.autoStem();\n      } else {\n        this.setStemDirection(note_struct.stem_direction);\n      }\n\n      this.buildNoteHeads();\n\n      // Calculate left/right padding\n      this.calcExtraPx();\n    },\n\n    // Builds a `Stem` for the note\n    buildStem: function() {\n      var glyph = this.getGlyph();\n\n      var y_extend = 0;\n      if (glyph.code_head == \"v95\" || glyph.code_head == \"v3e\") {\n         y_extend = -4;\n      }\n\n      var stem = new Stem({\n        y_extend: y_extend\n      });\n\n      if (this.isRest()) {\n        stem.hide = true;\n      }\n\n      this.setStem(stem);\n    },\n\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads: function() {\n      var stem_direction = this.getStemDirection();\n\n      var keys = this.getKeys();\n\n      var last_line = null;\n      var line_diff = null;\n      var displaced = false;\n\n      // Draw notes from bottom to top.\n      var start_i = 0;\n      var end_i = keys.length;\n      var step_i = 1;\n\n      // For down-stem notes, we draw from top to bottom.\n      if (stem_direction === Stem.DOWN) {\n        start_i = keys.length - 1;\n        end_i = -1;\n        step_i = -1;\n      }\n\n      for (var i = start_i; i != end_i; i += step_i) {\n        var note_props = this.keyProps[i];\n\n        var line = note_props.line;\n\n        // Keep track of last line with a note head, so that consecutive heads\n        // are correctly displaced.\n        if (last_line === null) {\n          last_line = line;\n        } else {\n          line_diff = Math.abs(last_line - line);\n          if (line_diff === 0 || line_diff === 0.5) {\n            displaced = !displaced;\n          } else {\n            displaced = false;\n            this.use_default_head_x = true;\n          }\n        }\n        last_line = line;\n\n        var note_head = new NoteHead({\n          duration: this.duration,\n          note_type: this.noteType,\n          displaced: displaced,\n          stem_direction: stem_direction,\n          custom_glyph_code: note_props.code,\n          glyph_font_scale: this.render_options.glyph_font_scale,\n          x_shift: note_props.shift_right,\n          line: note_props.line\n        });\n\n        this.note_heads[i] = note_head;\n      }\n    },\n\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem: function() {\n      var auto_stem_direction;\n\n      // Figure out optimal stem direction based on given notes\n      this.min_line = this.keyProps[0].line;\n      this.max_line = this.keyProps[this.keyProps.length - 1].line;\n      var decider = (this.min_line + this.max_line) / 2;\n\n      if (decider < 3) {\n        auto_stem_direction = 1;\n      } else {\n        auto_stem_direction = -1;\n      }\n\n      this.setStemDirection(auto_stem_direction);\n    },\n\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps: function() {\n      var last_line = null;\n      for (var i = 0; i < this.keys.length; ++i) {\n        var key = this.keys[i];\n\n        // All rests use the same position on the line.\n        // if (this.glyph.rest) key = this.glyph.position;\n        if (this.glyph.rest) this.glyph.position = key;\n        var options = { octave_shift: this.octave_shift || 0 };\n        var props = Vex.Flow.keyProperties(key, this.clef, options);\n        if (!props) {\n          throw new Vex.RuntimeError(\"BadArguments\",\n              \"Invalid key for note properties: \" + key);\n        }\n\n        // Override line placement for default rests\n        if (props.key === \"R\") {\n          if (this.duration === \"1\" || this.duration === \"w\") {\n            props.line = 4;\n          } else {\n            props.line = 3;\n          }\n        }\n\n        // Calculate displacement of this note\n        var line = props.line;\n        if (last_line === null) {\n          last_line = line;\n        } else {\n          if (Math.abs(last_line - line) == 0.5) {\n            this.displaced = true;\n            props.displaced = true;\n\n            // Have to mark the previous note as\n            // displaced as well, for modifier placement\n            if (this.keyProps.length > 0) {\n                this.keyProps[i-1].displaced = true;\n            }\n          }\n        }\n\n        last_line = line;\n        this.keyProps.push(props);\n      }\n\n      // Sort the notes from lowest line to highest line\n      var sorted = true;\n      var lastLine = -1000;\n      var that = this;\n      this.keyProps.forEach(function(key) {\n        if (key.line < lastLine) {\n          Vex.W(\"Unsorted keys in note will be sorted. \" +\n            \"See https://github.com/0xfe/vexflow/issues/104 for details.\");\n        }\n        lastLine = key.line;\n      });\n      this.keyProps.sort(function(a, b) { return a.line - b.line; });\n    },\n\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox: function() {\n      if (!this.preFormatted) throw new Vex.RERR(\"UnformattedNote\",\n          \"Can't call getBoundingBox on an unformatted note.\");\n\n      var metrics = this.getMetrics();\n\n      var w = metrics.width;\n      var x = this.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;\n\n      var min_y = 0;\n      var max_y = 0;\n      var half_line_spacing = this.getStave().getSpacingBetweenLines() / 2;\n      var line_spacing = half_line_spacing * 2;\n\n      if (this.isRest()) {\n        var y = this.ys[0];\n        var frac = Vex.Flow.durationToFraction(this.duration);\n        if (frac.equals(1) || frac.equals(2)) {\n          min_y = y - half_line_spacing;\n          max_y = y + half_line_spacing;\n        } else {\n          min_y = y - (this.glyph.line_above * line_spacing);\n          max_y = y + (this.glyph.line_below * line_spacing);\n        }\n      } else if (this.glyph.stem) {\n        var ys = this.getStemExtents();\n        ys.baseY += half_line_spacing * this.stem_direction;\n        min_y = Vex.Min(ys.topY, ys.baseY);\n        max_y = Vex.Max(ys.topY, ys.baseY);\n      } else {\n        min_y = null;\n        max_y = null;\n\n        for (var i=0; i < this.ys.length; ++i) {\n          var yy = this.ys[i];\n          if (i === 0) {\n            min_y = yy;\n            max_y = yy;\n          } else {\n            min_y = Vex.Min(yy, min_y);\n            max_y = Vex.Max(yy, max_y);\n          }\n          min_y -= half_line_spacing;\n          max_y += half_line_spacing;\n        }\n      }\n\n      return new Vex.Flow.BoundingBox(x, min_y, w, max_y - min_y);\n    },\n\n    // Gets the line number of the top or bottom note in the chord.\n    // If `is_top_note` is `true` then get the top note\n    getLineNumber: function(is_top_note) {\n      if(!this.keyProps.length) throw new Vex.RERR(\"NoKeyProps\",\n          \"Can't get bottom note line, because note is not initialized properly.\");\n      var result_line = this.keyProps[0].line;\n\n      // No precondition assumed for sortedness of keyProps array\n      for (var i=0; i<this.keyProps.length; i++) {\n        var this_line = this.keyProps[i].line;\n        if (is_top_note) {\n          if (this_line > result_line) result_line = this_line;\n        } else {\n          if (this_line < result_line) result_line = this_line;\n        }\n      }\n\n      return result_line;\n    },\n\n    // Determine if current note is a rest\n    isRest: function() { return this.glyph.rest; },\n\n    // Determine if the current note is a chord\n    isChord: function() { return !this.isRest() && this.keys.length > 1; },\n\n    // Determine if the `StaveNote` has a stem\n    hasStem: function() { return this.glyph.stem; },\n\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `text_line`\n    getYForTopText: function(text_line) {\n      var extents = this.getStemExtents();\n      return Vex.Min(this.stave.getYForTopText(text_line),\n          extents.topY - (this.render_options.annotation_spacing * (text_line + 1)));\n    },\n    getYForBottomText: function(text_line) {\n      var extents = this.getStemExtents();\n      return Vex.Max(this.stave.getYForTopText(text_line),\n          extents.baseY + (this.render_options.annotation_spacing * (text_line)));\n    },\n\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave: function(stave) {\n      var superclass = Vex.Flow.StaveNote.superclass;\n      superclass.setStave.call(this, stave);\n\n      var ys = this.note_heads.map(function(note_head) {\n        note_head.setStave(stave);\n        return note_head.getY();\n      });\n\n      this.setYs(ys);\n\n      var bounds = this.getNoteHeadBounds();\n\t    if (this.hasStem()) {\n        this.stem.setYBounds(bounds.y_top, bounds.y_bottom);\n      }\n\n      return this;\n    },\n\n    // Get the pitches in the note\n    getKeys: function() { return this.keys; },\n\n    // Get the properties for all the keys in the note\n    getKeyProps: function() {\n      return this.keyProps;\n    },\n\n    // Check if note is shifted to the right\n    isDisplaced: function() {\n      return this.displaced;\n    },\n\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced: function(displaced) {\n      this.displaced = displaced;\n      return this;\n    },\n\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX: function() {\n      var tieStartX = this.getAbsoluteX();\n      tieStartX += this.glyph.head_width + this.x_shift + this.extraRightPx;\n      if (this.modifierContext) tieStartX += this.modifierContext.getExtraRightPx();\n      return tieStartX;\n    },\n\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX: function() {\n      var tieEndX = this.getAbsoluteX();\n      tieEndX += this.x_shift - this.extraLeftPx;\n      return tieEndX;\n    },\n\n    // Get the stave line on which to place a rest\n    getLineForRest: function() {\n      var rest_line = this.keyProps[0].line;\n      if (this.keyProps.length > 1) {\n        var last_line  = this.keyProps[this.keyProps.length - 1].line;\n        var top = Vex.Max(rest_line, last_line);\n        var bot = Vex.Min(rest_line, last_line);\n        rest_line = Vex.MidLine(top, bot);\n      }\n\n      return rest_line;\n    },\n\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY: function(position, index) {\n      if (!this.preFormatted) throw new Vex.RERR(\"UnformattedNote\",\n          \"Can't call GetModifierStartXY on an unformatted note\");\n\n      if (this.ys.length === 0) throw new Vex.RERR(\"NoYValues\",\n          \"No Y-Values calculated for this note.\");\n\n      var x = 0;\n      if (position == Vex.Flow.Modifier.Position.LEFT) {\n        // extra_left_px\n        x = -1 * 2;\n      } else if (position == Vex.Flow.Modifier.Position.RIGHT) {\n        // extra_right_px\n        x = this.glyph.head_width + this.x_shift + 2;\n      } else if (position == Vex.Flow.Modifier.Position.BELOW ||\n                 position == Vex.Flow.Modifier.Position.ABOVE) {\n        x = this.glyph.head_width / 2;\n      }\n\n      return { x: this.getAbsoluteX() + x, y: this.ys[index] };\n    },\n\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle: function(style) {\n      this.note_heads.forEach(function(notehead) {\n        notehead.setStyle(style);\n      }, this);\n      this.stem.setStyle(style);\n    },\n\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle: function(index, style) {\n      this.note_heads[index].setStyle(style);\n      return this;\n    },\n\n    setKeyLine: function(index, line) {\n      this.keyProps[index].line = line;\n      this.note_heads[index].setLine(line);\n      return this;\n    },\n\n    getKeyLine: function(index) {\n      return this.keyProps[index].line;\n    },\n\n    // Add self to modifier context. `mContext` is the `ModifierContext`\n    // to be added to.\n    addToModifierContext: function(mContext) {\n      this.setModifierContext(mContext);\n      for (var i = 0; i < this.modifiers.length; ++i) {\n        this.modifierContext.addModifier(this.modifiers[i]);\n      }\n      this.modifierContext.addModifier(this);\n      this.setPreFormatted(false);\n      return this;\n    },\n\n    // Generic function to add modifiers to a note\n    //\n    // Parameters:\n    // * `index`: The index of the key that we're modifying\n    // * `modifier`: The modifier to add\n    addModifier: function(index, modifier) {\n      modifier.setNote(this);\n      modifier.setIndex(index);\n      this.modifiers.push(modifier);\n      this.setPreFormatted(false);\n      return this;\n    },\n\n    // Helper function to add an accidental to a key\n    addAccidental: function(index, accidental) {\n      return this.addModifier(index, accidental);\n    },\n\n    // Helper function to add an articulation to a key\n    addArticulation: function(index, articulation) {\n      return this.addModifier(index, articulation);\n    },\n\n    // Helper function to add an annotation to a key\n    addAnnotation: function(index, annotation) {\n      return this.addModifier(index, annotation);\n    },\n\n    // Helper function to add a dot on a specific key\n    addDot: function(index) {\n      var dot = new Vex.Flow.Dot();\n      dot.setDotShiftY(this.glyph.dot_shiftY);\n      this.dots++;\n      return this.addModifier(index, dot);\n    },\n\n    // Convenience method to add dot to all keys in note\n    addDotToAll: function() {\n      for (var i = 0; i < this.keys.length; ++i)\n        this.addDot(i);\n      return this;\n    },\n\n    // Get all accidentals in the `ModifierContext`\n    getAccidentals: function() {\n      return this.modifierContext.getModifiers(\"accidentals\");\n    },\n\n    // Get all dots in the `ModifierContext`\n    getDots: function() {\n      return this.modifierContext.getModifiers(\"dots\");\n    },\n\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth: function() {\n      // TODO: may need to accomodate for dot here.\n      return this.glyph.head_width * (this.displaced ? 2 : 1);\n    },\n\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcExtraPx: function() {\n      this.setExtraLeftPx((this.displaced && this.stem_direction == -1) ?\n          this.glyph.head_width : 0);\n\n      // For upstems with flags, the extra space is unnecessary, since it's taken\n      // up by the flag.\n      this.setExtraRightPx((!this.hasFlag() && this.displaced && this.stem_direction == 1) ?\n          this.glyph.head_width : 0);\n    },\n\n    // Pre-render formatting\n    preFormat: function() {\n      if (this.preFormatted) return;\n      if (this.modifierContext) this.modifierContext.preFormat();\n\n      var width = this.glyph.head_width + this.extraLeftPx + this.extraRightPx;\n\n      // For upward flagged notes, the width of the flag needs to be added\n      if (this.glyph.flag && this.beam === null && this.stem_direction == 1) {\n        width += this.glyph.head_width;\n      }\n\n      this.setWidth(width);\n      this.setPreFormatted(true);\n    },\n\n    // Gets the staff line and y value for the highest and lowest noteheads\n    getNoteHeadBounds: function() {\n      // Top and bottom Y values for stem.\n      var y_top = null;\n      var y_bottom = null;\n\n      var highest_line = this.stave.getNumLines();\n      var lowest_line = 1;\n\n      this.note_heads.forEach(function(note_head) {\n        var line = note_head.getLine();\n        var y = note_head.getY();\n\n        if (y_top === null || y < y_top)  {\n          y_top = y;\n        }\n\n        if (y_bottom === null || y > y_bottom) {\n          y_bottom = y;\n        }\n\n        highest_line = line > highest_line ? line : highest_line;\n        lowest_line = line < lowest_line ? line : lowest_line;\n\n      }, this);\n\n      return {\n        y_top: y_top,\n        y_bottom: y_bottom,\n        highest_line: highest_line,\n        lowest_line: lowest_line\n      };\n    },\n\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX: function(){\n      return this.getAbsoluteX() + this.x_shift;\n    },\n\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX: function(){\n      var x_begin = this.getNoteHeadBeginX();\n      return x_begin + this.glyph.head_width - (Vex.Flow.STEM_WIDTH / 2);\n    },\n\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines: function(){\n      if (this.isRest()) { return; }\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n      var ctx = this.context;\n\n      var bounds = this.getNoteHeadBounds();\n      var highest_line = bounds.highest_line;\n      var lowest_line = bounds.lowest_line;\n      var head_x = this.note_heads[0].getAbsoluteX();\n\n      var that = this;\n      function stroke(y) {\n        if (that.use_default_head_x === true)  {\n          head_x = that.getAbsoluteX() + that.x_shift;\n        }\n        var x = head_x - that.render_options.stroke_px;\n        var length = ((head_x + that.glyph.head_width) - head_x) +\n          (that.render_options.stroke_px * 2);\n\n        ctx.fillRect(x, y, length, 1);\n      }\n\n      var line; // iterator\n      for (line = 6; line <= highest_line; ++line) {\n        stroke(this.stave.getYForNote(line));\n      }\n\n      for (line = 0; line >= lowest_line; --line) {\n        stroke(this.stave.getYForNote(line));\n      }\n    },\n\n    // Draw all key modifiers\n    drawModifiers: function(){\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n      var ctx = this.context;\n      ctx.openGroup(\"modifiers\");\n      for (var i = 0; i < this.modifiers.length; i++) {\n        var mod = this.modifiers[i];\n        var note_head = this.note_heads[mod.getIndex()];\n        var key_style = note_head.getStyle();\n        if(key_style) {\n            ctx.save();\n            note_head.applyStyle(ctx);\n        }\n        mod.setContext(ctx);\n        mod.draw();\n        if(key_style) {\n            ctx.restore();\n        }\n      }\n      ctx.closeGroup();\n    },\n\n    // Draw the flag for the note\n    drawFlag: function(){\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n      var ctx = this.context;\n      var glyph = this.getGlyph();\n      var render_flag = this.beam === null;\n      var bounds = this.getNoteHeadBounds();\n\n      var x_begin = this.getNoteHeadBeginX();\n      var x_end = this.getNoteHeadEndX();\n\n      if (glyph.flag && render_flag) {\n        var note_stem_height = this.stem.getHeight();\n        var flag_x, flag_y, flag_code;\n\n        if (this.getStemDirection() === Stem.DOWN) {\n          // Down stems have flags on the left.\n          flag_x = x_begin + 1;\n          flag_y = bounds.y_top - note_stem_height + 2;\n          flag_code = glyph.code_flag_downstem;\n\n        } else {\n          // Up stems have flags on the left.\n          flag_x = x_end + 1;\n          flag_y = bounds.y_bottom - note_stem_height - 2;\n          flag_code = glyph.code_flag_upstem;\n        }\n\n        // Draw the Flag\n        this.context.openGroup(\"flag\", null, {pointerBBox: true});\n        Vex.Flow.renderGlyph(ctx, flag_x, flag_y,\n            this.render_options.glyph_font_scale, flag_code);\n        this.context.closeGroup();\n      }\n    },\n\n    // Draw the NoteHeads\n    drawNoteHeads: function(){\n      var that = this;\n      this.note_heads.forEach(function(note_head) {\n        that.context.openGroup(\"notehead\", null, {pointerBBox: true});\n        note_head.setContext(that.context).draw();\n        that.context.closeGroup();\n      }, this);\n    },\n\n    // Render the stem onto the canvas\n    drawStem: function(stem_struct){\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n\n      if (stem_struct) {\n        this.setStem(new Stem(stem_struct));\n      }\n\n      this.context.openGroup(\"stem\", null, {pointerBBox: true});\n      this.stem.setContext(this.context).draw();\n      this.context.closeGroup();\n    },\n\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n      if (!this.stave) throw new Vex.RERR(\"NoStave\",\n          \"Can't draw without a stave.\");\n      if (this.ys.length === 0) throw new Vex.RERR(\"NoYValues\",\n          \"Can't draw note without Y values.\");\n\n      var x_begin = this.getNoteHeadBeginX();\n      var x_end = this.getNoteHeadEndX();\n\n      var render_stem = this.hasStem() && !this.beam;\n\n      // Format note head x positions\n      this.note_heads.forEach(function(note_head) {\n        note_head.setX(x_begin);\n      }, this);\n\n      // Format stem x positions\n      this.stem.setNoteHeadXBounds(x_begin, x_end);\n\n      L(\"Rendering \", this.isChord() ? \"chord :\" : \"note :\", this.keys);\n\n      // Draw each part of the note\n      this.drawLedgerLines();\n\n      this.elem = this.context.openGroup(\"stavenote\", this.id);\n      this.context.openGroup(\"note\", null, {pointerBBox: true});\n        if (render_stem) this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n      this.context.closeGroup();\n      this.drawModifiers();\n      this.context.closeGroup();\n    }\n  });\n\n  return StaveNote;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.js` for usage examples\nVex.Flow.TabNote = (function() {\n  function TabNote(tab_struct, draw_stem) {\n    if (arguments.length > 0) this.init(tab_struct, draw_stem);\n  }\n\n  var Stem = Vex.Flow.Stem;\n\n  // ## Prototype Methods\n  Vex.Inherit(TabNote, Vex.Flow.StemmableNote, {\n    // Initialize the TabNote with a `tab_struct` full of properties\n    // and whether to `draw_stem` when rendering the note\n    init: function(tab_struct, draw_stem) {\n      var superclass = Vex.Flow.TabNote.superclass;\n      superclass.init.call(this, tab_struct);\n\n      this.ghost = false; // Renders parenthesis around notes\n      // Note properties\n      //\n      // The fret positions in the note. An array of `{ str: X, fret: X }`\n      this.positions = tab_struct.positions;\n\n      // Render Options\n      Vex.Merge(this.render_options, {\n        // font size for note heads and rests\n        glyph_font_scale: 30,\n        // Flag to draw a stem\n        draw_stem: draw_stem,\n        // Flag to draw dot modifiers\n        draw_dots: draw_stem,\n        // Flag to extend the main stem through the stave and fret positions\n        draw_stem_through_stave: false\n      });\n\n      this.glyph =\n        Vex.Flow.durationToGlyph(this.duration, this.noteType);\n      if (!this.glyph) {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Invalid note initialization data (No glyph found): \" +\n            JSON.stringify(tab_struct));\n      }\n\n      this.buildStem();\n\n      if (tab_struct.stem_direction){\n        this.setStemDirection(tab_struct.stem_direction);\n      } else {\n        this.setStemDirection(Stem.UP);\n      }\n\n      // Renders parenthesis around notes\n      this.ghost = false;\n      this.updateWidth();\n    },\n\n    // The ModifierContext category\n    getCategory: function() { return \"tabnotes\"; },\n\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost: function(ghost) {\n      this.ghost = ghost;\n      this.updateWidth();\n      return this;\n    },\n\n    // Determine if the note has a stem\n    hasStem: function() { return this.render_options.draw_stem; },\n\n    // Get the default stem extension for the note\n    getStemExtension: function(){\n      var glyph = this.getGlyph();\n\n      if (this.stem_extension_override != null) {\n        return this.stem_extension_override;\n      }\n\n      if (glyph) {\n        return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension :\n          glyph.tabnote_stem_down_extension;\n      }\n\n      return 0;\n    },\n\n    // Add a dot to the note\n    addDot: function() {\n      var dot = new Vex.Flow.Dot();\n      this.dots++;\n      return this.addModifier(dot, 0);\n    },\n\n    // Calculate and store the width of the note\n    updateWidth: function() {\n      this.glyphs = [];\n      this.width = 0;\n      for (var i = 0; i < this.positions.length; ++i) {\n        var fret = this.positions[i].fret;\n        if (this.ghost) fret = \"(\" + fret + \")\";\n        var glyph = Vex.Flow.tabToGlyph(fret);\n        this.glyphs.push(glyph);\n        this.width = (glyph.width > this.width) ? glyph.width : this.width;\n      }\n    },\n\n    // Set the `stave` to the note\n    setStave: function(stave) {\n      var superclass = Vex.Flow.TabNote.superclass;\n      superclass.setStave.call(this, stave);\n      this.context = stave.context;\n      this.width = 0;\n\n      // Calculate the fret number width based on font used\n      var i;\n      if (this.context) {\n        for (i = 0; i < this.glyphs.length; ++i) {\n          var text = \"\" + this.glyphs[i].text;\n          if (text.toUpperCase() != \"X\")\n            this.glyphs[i].width = this.context.measureText(text).width;\n          this.width = (this.glyphs[i].width > this.width) ?\n            this.glyphs[i].width : this.width;\n        }\n      }\n\n      var ys = [];\n\n      // Setup y coordinates for score.\n      for (i = 0; i < this.positions.length; ++i) {\n        var line = this.positions[i].str;\n        ys.push(this.stave.getYForLine(line - 1));\n      }\n\n      return this.setYs(ys);\n    },\n\n    // Get the fret positions for the note\n    getPositions: function() { return this.positions; },\n\n    // Add self to the provided modifier context `mc`\n    addToModifierContext: function(mc) {\n      this.setModifierContext(mc);\n      for (var i = 0; i < this.modifiers.length; ++i) {\n        this.modifierContext.addModifier(this.modifiers[i]);\n      }\n      this.modifierContext.addModifier(this);\n      this.preFormatted = false;\n      return this;\n    },\n\n    // Get the `x` coordinate to the right of the note\n    getTieRightX: function() {\n      var tieStartX = this.getAbsoluteX();\n      var note_glyph_width = this.glyph.head_width;\n      tieStartX += (note_glyph_width / 2);\n      tieStartX += ((-this.width / 2) + this.width + 2);\n\n      return tieStartX;\n    },\n\n    // Get the `x` coordinate to the left of the note\n    getTieLeftX: function() {\n      var tieEndX = this.getAbsoluteX();\n      var note_glyph_width = this.glyph.head_width;\n      tieEndX += (note_glyph_width / 2);\n      tieEndX -= ((this.width / 2) + 2);\n\n      return tieEndX;\n    },\n\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY: function(position, index) {\n      if (!this.preFormatted) throw new Vex.RERR(\"UnformattedNote\",\n          \"Can't call GetModifierStartXY on an unformatted note\");\n\n      if (this.ys.length === 0) throw new Vex.RERR(\"NoYValues\",\n          \"No Y-Values calculated for this note.\");\n\n      var x = 0;\n      if (position == Vex.Flow.Modifier.Position.LEFT) {\n        x = -1 * 2;  // extra_left_px\n      } else if (position == Vex.Flow.Modifier.Position.RIGHT) {\n        x = this.width + 2; // extra_right_px\n      } else if (position == Vex.Flow.Modifier.Position.BELOW ||\n                 position == Vex.Flow.Modifier.Position.ABOVE) {\n          var note_glyph_width = this.glyph.head_width;\n          x = note_glyph_width / 2;\n      }\n\n      return {x: this.getAbsoluteX() + x, y: this.ys[index]};\n    },\n\n    // Get the default line for rest\n    getLineForRest: function() { return this.positions[0].str; },\n\n    // Pre-render formatting\n    preFormat: function() {\n      if (this.preFormatted) return;\n      if (this.modifierContext) this.modifierContext.preFormat();\n      // width is already set during init()\n      this.setPreFormatted(true);\n    },\n\n    // Get the x position for the stem\n    getStemX: function() { return this.getCenterGlyphX(); },\n\n    // Get the y position for the stem\n    getStemY: function(){\n      var num_lines = this.stave.getNumLines();\n\n      // The decimal staff line amounts provide optimal spacing between the\n      // fret number and the stem\n      var stemUpLine = -0.5;\n      var stemDownLine = num_lines - 0.5;\n      var stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n      return this.stave.getYForLine(stemStartLine);\n    },\n\n    // Get the stem extents for the tabnote\n    getStemExtents: function() {\n      var stem_base_y = this.getStemY();\n      var stem_top_y = stem_base_y + (Stem.HEIGHT * -this.stem_direction);\n\n      return { topY: stem_top_y , baseY: stem_base_y};\n    },\n\n    // Draw the fal onto the context\n    drawFlag: function() {\n      var render_stem = this.beam == null && this.render_options.draw_stem;\n      var render_flag = this.beam == null && render_stem;\n\n      // Now it's the flag's turn.\n      if (this.glyph.flag && render_flag) {\n        var flag_x = this.getStemX() + 1 ;\n        var flag_y = this.getStemY() - (this.stem.getHeight());\n        var flag_code;\n\n        if (this.stem_direction == Stem.DOWN) {\n          // Down stems have flags on the left.\n          flag_code = this.glyph.code_flag_downstem;\n        } else {\n          // Up stems have flags on the left.\n          flag_code = this.glyph.code_flag_upstem;\n        }\n\n        // Draw the Flag\n        Vex.Flow.renderGlyph(this.context, flag_x, flag_y,\n            this.render_options.glyph_font_scale, flag_code);\n      }\n    },\n\n    // Render the modifiers onto the context\n    drawModifiers: function() {\n      // Draw the modifiers\n      this.modifiers.forEach(function(modifier) {\n        // Only draw the dots if enabled\n        if (modifier.getCategory() === 'dots' && !this.render_options.draw_dots) return;\n\n        modifier.setContext(this.context);\n        modifier.draw();\n      }, this);\n    },\n\n    // Render the stem extension through the fret positions\n    drawStemThrough: function() {\n      var stem_x = this.getStemX();\n      var stem_y = this.getStemY();\n      var ctx = this.context;\n\n      var stem_through = this.render_options.draw_stem_through_stave;\n      var draw_stem = this.render_options.draw_stem;\n      if (draw_stem && stem_through) {\n        var total_lines = this.stave.getNumLines();\n        var strings_used = this.positions.map(function(position) {\n          return position.str;\n        });\n\n        var unused_strings = getUnusedStringGroups(total_lines, strings_used);\n        var stem_lines = getPartialStemLines(stem_y, unused_strings,\n                              this.getStave(), this.getStemDirection());\n\n        // Fine tune x position to match default stem\n        if (!this.beam || this.getStemDirection() === 1) {\n          stem_x += (Stem.WIDTH / 2);\n        }\n\n        ctx.save();\n        ctx.setLineWidth(Stem.WIDTH);\n        stem_lines.forEach(function(bounds) {\n          if (bounds.length === 0) return;\n\n          ctx.beginPath();\n          ctx.moveTo(stem_x, bounds[0]);\n          ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n          ctx.stroke();\n          ctx.closePath();\n        });\n        ctx.restore();\n      }\n    },\n\n    // Render the fret positions onto the context\n    drawPositions: function() {\n      var ctx = this.context;\n      var x = this.getAbsoluteX();\n      var ys = this.ys;\n      var y;\n\n      for (var i = 0; i < this.positions.length; ++i) {\n        y = ys[i];\n\n        var glyph = this.glyphs[i];\n\n        // Center the fret text beneath the notation note head\n        var note_glyph_width = this.glyph.head_width;\n        var tab_x = x + (note_glyph_width / 2) - (glyph.width / 2);\n\n        ctx.clearRect(tab_x - 2, y - 3, glyph.width + 4, 6);\n\n        if (glyph.code) {\n          Vex.Flow.renderGlyph(ctx, tab_x, y + 5 + glyph.shift_y,\n              this.render_options.glyph_font_scale, glyph.code);\n        } else {\n          var text = glyph.text.toString();\n          ctx.fillText(text, tab_x, y + 5);\n        }\n      }\n    },\n\n    // The main rendering function for the entire note\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n      if (!this.stave) throw new Vex.RERR(\"NoStave\", \"Can't draw without a stave.\");\n      if (this.ys.length === 0) throw new Vex.RERR(\"NoYValues\",\n          \"Can't draw note without Y values.\");\n\n      var render_stem = this.beam == null && this.render_options.draw_stem;\n\n      this.drawPositions();\n      this.drawStemThrough();\n\n      var stem_x = this.getStemX();\n      var stem_y = this.getStemY();\n      if (render_stem) {\n        this.drawStem({\n          x_begin: stem_x,\n          x_end: stem_x,\n          y_top: stem_y,\n          y_bottom: stem_y,\n          y_extend: 0,\n          stem_extension: this.getStemExtension(),\n          stem_direction: this.stem_direction\n        });\n      }\n\n      this.drawFlag();\n      this.drawModifiers();\n    }\n  });\n\n  // ## Private Helpers\n  //\n  // Gets the unused strings grouped together if consecutive.\n  //\n  // Parameters:\n  // * num_lines - The number of lines\n  // * strings_used - An array of numbers representing which strings have fret positions\n  function getUnusedStringGroups(num_lines, strings_used) {\n    var stem_through = [];\n    var group = [];\n    for (var string = 1; string <= num_lines ; string++) {\n      var is_used = strings_used.indexOf(string) > -1;\n\n      if (!is_used) {\n        group.push(string);\n      } else {\n        stem_through.push(group);\n        group = [];\n      }\n    }\n    if (group.length > 0) stem_through.push(group);\n\n    return stem_through;\n  }\n\n  // Gets groups of points that outline the partial stem lines\n  // between fret positions\n  //\n  // Parameters:\n  // * stem_Y - The `y` coordinate the stem is located on\n  // * unused_strings - An array of groups of unused strings\n  // * stave - The stave to use for reference\n  // * stem_direction - The direction of the stem\n  function getPartialStemLines (stem_y, unused_strings, stave, stem_direction) {\n    var up_stem = stem_direction !== 1;\n    var down_stem = stem_direction !== -1;\n\n    var line_spacing = stave.getSpacingBetweenLines();\n    var total_lines = stave.getNumLines();\n\n    var stem_lines = [];\n\n    unused_strings.forEach(function(strings) {\n      var containsLastString = strings.indexOf(total_lines) > -1;\n      var containsFirstString =  strings.indexOf(1) > -1;\n\n      if ((up_stem && containsFirstString) ||\n         (down_stem && containsLastString)) {\n        return;\n      }\n\n      // If there's only one string in the group, push a duplicate value.\n      // We do this because we need 2 strings to convert into upper/lower y\n      // values.\n      if (strings.length === 1) {\n        strings.push(strings[0]);\n      }\n\n      var line_ys = [];\n      // Iterate through each group string and store it's y position\n      strings.forEach(function(string, index, strings) {\n        var isTopBound = string === 1;\n        var isBottomBound = string === total_lines;\n\n        // Get the y value for the appropriate staff line,\n        // we adjust for a 0 index array, since string numbers are index 1\n        var y = stave.getYForLine(string - 1);\n\n        // Unless the string is the first or last, add padding to each side\n        // of the line\n        if (index === 0 && !isTopBound) {\n          y -= line_spacing/2 - 1;\n        } else if (index === strings.length - 1 && !isBottomBound){\n          y += line_spacing/2 - 1;\n        }\n\n        // Store the y value\n        line_ys.push(y);\n\n        // Store a subsequent y value connecting this group to the main\n        // stem above/below the stave if it's the top/bottom string\n        if (stem_direction === 1 && isTopBound) {\n          line_ys.push(stem_y - 2);\n        } else if (stem_direction === -1 && isBottomBound) {\n          line_ys.push(stem_y + 2);\n        }\n      });\n\n      // Add the sorted y values to the\n      stem_lines.push(line_ys.sort(function(a, b) {\n        return a - b;\n      }));\n    });\n\n    return stem_lines;\n  }\n\n  return TabNote;\n}());\n","// Vex Flow Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n//\n// Requires vex.js.\n\n/** @constructor */\nVex.Flow.GhostNote = (function() {\n  function GhostNote(duration) {\n    if (arguments.length > 0) this.init(duration);\n  }\n\n  Vex.Inherit(GhostNote, Vex.Flow.StemmableNote, {\n    init: function(parameter) {\n      // Sanity check\n      if (!parameter) {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Ghost note must have valid initialization data to identify \" +\n            \"duration.\");\n      }\n\n      var note_struct;\n\n      // Preserve backwards-compatibility\n      if (typeof(parameter) === \"string\") {\n        note_struct = { duration: parameter };\n      } else if (typeof(parameter) === \"object\") {\n        note_struct = parameter;\n      } else {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Ghost note must have valid initialization data to identify \" +\n            \"duration.\");\n      }\n\n      GhostNote.superclass.init.call(this, note_struct);\n\n      // Note properties\n      this.setWidth(0);\n    },\n\n    isRest: function() { return true; },\n\n    setStave: function(stave) { GhostNote.superclass.setStave.call(this, stave); },\n\n    addToModifierContext: function()\n      { /* intentionally overridden */ return this; },\n\n    preFormat: function() {\n      this.setPreFormatted(true);\n      return this;\n    },\n\n    draw: function() {\n      if (!this.stave) throw new Vex.RERR(\"NoStave\", \"Can't draw without a stave.\");\n\n      // Draw the modifiers\n      for (var i = 0; i < this.modifiers.length; ++i) {\n        var modifier = this.modifiers[i];\n        modifier.setContext(this.context);\n        modifier.draw();\n      }\n    }\n  });\n\n  return GhostNote;\n}());\n","// Vex Flow Notation\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\n/** @constructor */\nVex.Flow.ClefNote = (function() {\n  function ClefNote(type, size, annotation) { this.init(type, size, annotation); }\n\n  Vex.Inherit(ClefNote, Vex.Flow.Note, {\n    init: function(type, size, annotation) {\n      ClefNote.superclass.init.call(this, {duration: \"b\"});\n\n      this.setType(type, size, annotation);\n\n      // Note properties\n      this.ignore_ticks = true;\n    },\n\n    setType: function(type, size, annotation) {\n      this.type = type;\n      this.clef_obj = new Vex.Flow.Clef(type, size, annotation);\n      this.clef = this.clef_obj.clef;\n      this.glyph = new Vex.Flow.Glyph(this.clef.code, this.clef.point);\n      this.setWidth(this.glyph.getMetrics().width);\n      return this;\n    },\n\n    getClef: function() {\n      return this.clef;\n    },\n\n    setContext: function(context){\n      this.context = context;\n      this.glyph.setContext(this.context);\n      return this;\n    },\n\n    setStave: function(stave) {\n      var superclass = Vex.Flow.ClefNote.superclass;\n      superclass.setStave.call(this, stave);\n    },\n\n    getBoundingBox: function() {\n      return new Vex.Flow.BoundingBox(0, 0, 0, 0);\n    },\n\n    addToModifierContext: function() {\n      /* overridden to ignore */\n      return this;\n    },\n\n    getCategory: function() {\n      return \"clefnote\";\n    },\n\n    preFormat: function() {\n      this.setPreFormatted(true);\n      return this;\n    },\n\n    draw: function() {\n      if (!this.stave) throw new Vex.RERR(\"NoStave\", \"Can't draw without a stave.\");\n\n      if (!this.glyph.getContext()) {\n        this.glyph.setContext(this.context);\n      }\n      var abs_x = this.getAbsoluteX();\n\n      this.glyph.setStave(this.stave);\n      this.glyph.setYShift(\n        this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());\n      this.glyph.renderToStave(abs_x);\n\n      // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n      if (this.clef_obj.annotation !== undefined) {\n        var attachment = new Vex.Flow.Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n        if (!attachment.getContext()) {\n            attachment.setContext(this.context);\n        }\n        attachment.setStave(this.stave);\n        attachment.setYShift(\n          this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());\n        attachment.setXShift(this.clef_obj.annotation.x_shift);\n        attachment.renderToStave(abs_x);\n      }\n\n    }\n  });\n\n  return ClefNote;\n}());\n","// Vex Flow Notation\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\n/** @constructor */\nVex.Flow.TimeSigNote = (function() {\n  function TimeSigNote(timeSpec, customPadding) {\n    if (arguments.length > 0) this.init(timeSpec, customPadding);\n  }\n\n  Vex.Inherit(TimeSigNote, Vex.Flow.Note, {\n    init: function(timeSpec, customPadding) {\n      TimeSigNote.superclass.init.call(this, {duration: \"b\"});\n\n      var timeSignature = new Vex.Flow.TimeSignature(timeSpec, customPadding);\n      this.timeSig = timeSignature.getTimeSig();\n      this.setWidth(this.timeSig.glyph.getMetrics().width);\n\n      // Note properties\n      this.ignore_ticks = true;\n    },\n\n    setStave: function(stave) {\n      var superclass = Vex.Flow.TimeSigNote.superclass;\n      superclass.setStave.call(this, stave);\n    },\n\n    getBoundingBox: function() {\n      return new Vex.Flow.BoundingBox(0, 0, 0, 0);\n    },\n\n    addToModifierContext: function() {\n      /* overridden to ignore */\n      return this;\n    },\n\n    preFormat: function() {\n      this.setPreFormatted(true);\n      return this;\n    },\n\n    draw: function() {\n      if (!this.stave) throw new Vex.RERR(\"NoStave\", \"Can't draw without a stave.\");\n      \n      if (!this.timeSig.glyph.getContext()) {\n        this.timeSig.glyph.setContext(this.context);\n      }\n\n      this.timeSig.glyph.setStave(this.stave);\n      this.timeSig.glyph.setYShift(\n        this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs());\n      this.timeSig.glyph.renderToStave(this.getAbsoluteX());\n    }\n  });\n\n  return TimeSigNote;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `Beams` that span over a set of `StemmableNotes`.\n//\n// Requires: vex.js, vexmusic.js, note.js\nVex.Flow.Beam = (function() {\n  function Beam(notes, auto_stem) {\n    if (arguments.length > 0) this.init(notes, auto_stem);\n  }\n\n  var Stem = Vex.Flow.Stem;\n\n  // ## Prototype Methods\n  Beam.prototype = {\n    init: function(notes, auto_stem) {\n      if (!notes || notes == []) {\n        throw new Vex.RuntimeError(\"BadArguments\", \"No notes provided for beam.\");\n      }\n\n      if (notes.length == 1) {\n        throw new Vex.RuntimeError(\"BadArguments\", \"Too few notes for beam.\");\n      }\n\n      // Validate beam line, direction and ticks.\n      this.ticks = notes[0].getIntrinsicTicks();\n\n      if (this.ticks >= Vex.Flow.durationToTicks(\"4\")) {\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Beams can only be applied to notes shorter than a quarter note.\");\n      }\n\n      var i; // shared iterator\n      var note;\n\n      this.stem_direction = Stem.UP;\n\n      for (i = 0; i < notes.length; ++i) {\n        note = notes[i];\n        if (note.hasStem()) {\n          this.stem_direction = note.getStemDirection();\n          break;\n        }\n      }\n\n      var stem_direction = this.stem_direction;\n      // Figure out optimal stem direction based on given notes\n      if (auto_stem && notes[0].getCategory() === 'stavenotes')  {\n        stem_direction = calculateStemDirection(notes);\n      } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {\n        // Auto Stem TabNotes\n        var stem_weight = notes.reduce(function(memo, note) {\n          return memo + note.stem_direction;\n        }, 0);\n\n        stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n      }\n\n      // Apply stem directions and attach beam to notes\n      for (i = 0; i < notes.length; ++i) {\n        note = notes[i];\n        if (auto_stem) {\n          note.setStemDirection(stem_direction);\n          this.stem_direction = stem_direction;\n        }\n        note.setBeam(this);\n      }\n\n      this.postFormatted = false;\n      this.notes = notes;\n      this.beam_count = this.getBeamCount();\n      this.break_on_indices = [];\n      this.render_options = {\n        beam_width: 5,\n        max_slope: 0.25,\n        min_slope: -0.25,\n        slope_iterations: 20,\n        slope_cost: 100,\n        show_stemlets: false,\n        stemlet_extension: 7,\n        partial_beam_length: 10,\n        flat_beams: false,\n        min_flat_beam_offset: 15\n      };\n    },\n\n    // The the rendering `context`\n    setContext: function(context) { this.context = context; return this; },\n\n    // Get the notes in this beam\n    getNotes: function() { return this.notes; },\n\n    // Get the max number of beams in the set of notes\n    getBeamCount: function(){\n      var beamCounts =  this.notes.map(function(note) {\n        return note.getGlyph().beam_count;\n      });\n\n      var maxBeamCount =  beamCounts.reduce(function(max, beamCount) {\n          return beamCount > max ? beamCount : max;\n      });\n\n      return maxBeamCount;\n    },\n\n    // Set which note `indices` to break the secondary beam at\n    breakSecondaryAt: function(indices) {\n      this.break_on_indices = indices;\n      return this;\n    },\n\n    // Return the y coordinate for linear function\n    getSlopeY: function(x, first_x_px, first_y_px, slope) {\n      return first_y_px + ((x - first_x_px) * slope);\n    },\n\n    // Calculate the best possible slope for the provided notes\n    calculateSlope: function() {\n      var first_note = this.notes[0];\n      var first_y_px = first_note.getStemExtents().topY;\n      var first_x_px = first_note.getStemX();\n\n      var inc = (this.render_options.max_slope - this.render_options.min_slope) /\n          this.render_options.slope_iterations;\n      var min_cost = Number.MAX_VALUE;\n      var best_slope = 0;\n      var y_shift = 0;\n\n      // iterate through slope values to find best weighted fit\n      for (var slope = this.render_options.min_slope;\n           slope <= this.render_options.max_slope;\n           slope += inc) {\n        var total_stem_extension = 0;\n        var y_shift_tmp = 0;\n\n        // iterate through notes, calculating y shift and stem extension\n        for (var i = 1; i < this.notes.length; ++i) {\n          var note = this.notes[i];\n\n          var x_px = note.getStemX();\n          var y_px = note.getStemExtents().topY;\n          var slope_y_px = this.getSlopeY(x_px, first_x_px, first_y_px, slope) + y_shift_tmp;\n\n          // beam needs to be shifted up to accommodate note\n          if (y_px * this.stem_direction < slope_y_px * this.stem_direction) {\n            var diff =  Math.abs(y_px - slope_y_px);\n            y_shift_tmp += diff * -this.stem_direction;\n            total_stem_extension += (diff * i);\n          } else { // beam overshoots note, account for the difference\n            total_stem_extension += (y_px - slope_y_px) * this.stem_direction;\n          }\n\n        }\n\n        var last_note = this.notes[this.notes.length - 1];\n        var first_last_slope = ((last_note.getStemExtents().topY - first_y_px) /\n                (last_note.getStemX() - first_x_px));\n        // most engraving books suggest aiming for a slope about half the angle of the\n        // difference between the first and last notes' stem length;\n        var ideal_slope = first_last_slope / 2;\n        var distance_from_ideal = Math.abs(ideal_slope - slope);\n\n        // This tries to align most beams to something closer to the ideal_slope, but\n        // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n        var cost = this.render_options.slope_cost * distance_from_ideal +\n            Math.abs(total_stem_extension);\n\n        // update state when a more ideal slope is found\n        if (cost < min_cost) {\n          min_cost = cost;\n          best_slope = slope;\n          y_shift = y_shift_tmp;\n        }\n      }\n\n      this.slope = best_slope;\n      this.y_shift = y_shift;\n    },\n\n    // Calculate a slope and y-shift for flat beams\n    calculateFlatSlope: function() {\n\n      // If a flat beam offset has not yet been supplied or calculated,\n      // generate one based on the notes in this particular note group\n      var total = 0;\n      var extreme_y = 0;  // Store the highest or lowest note here\n      var extreme_beam_count = 0;  // The beam count of the extreme note\n      var current_extreme = 0;\n      for (var i = 0; i < this.notes.length; i++) {\n\n        // Total up all of the offsets so we can average them out later\n        var note = this.notes[i];\n        var top_y = note.getStemExtents().topY;\n        total += top_y;\n\n        // Store the highest (stems-up) or lowest (stems-down) note so the\n        //  offset can be adjusted in case the average isn't enough\n        if (this.stem_direction === Stem.DOWN && current_extreme < top_y) {\n          current_extreme = top_y;\n          extreme_y = note.getNoteHeadBounds().y_bottom;\n          extreme_beam_count = note.getBeamCount();\n        } else if (this.stem_direction === Stem.UP && (current_extreme === 0 || current_extreme > top_y)) {\n          current_extreme = top_y;\n          extreme_y = note.getNoteHeadBounds().y_top;\n          extreme_beam_count = note.getBeamCount();\n        }\n      }\n\n      // Average the offsets to try and come up with a reasonable one that\n      //  works for all of the notes in the beam group.\n      var offset = total / this.notes.length;\n\n      // In case the average isn't long enough, add or subtract some more\n      //  based on the highest or lowest note (again, based on the stem\n      //  direction). This also takes into account the added height due to\n      //  the width of the beams.\n      var beam_width = this.render_options.beam_width * 1.5;\n      var extreme_test = this.render_options.min_flat_beam_offset + (extreme_beam_count * beam_width);\n      var new_offset = extreme_y + (extreme_test * -this.stem_direction);\n      if (this.stem_direction === Stem.DOWN && offset < new_offset) {\n        offset = extreme_y + extreme_test;\n      } else if (this.stem_direction === Stem.UP && offset > new_offset) {\n        offset = extreme_y - extreme_test;\n      }\n      if (!this.render_options.flat_beam_offset) {\n\n        // Set the offset for the group based on the calculations above.\n        this.render_options.flat_beam_offset = offset;\n      } else if (this.stem_direction === Stem.DOWN && offset > this.render_options.flat_beam_offset) {\n        this.render_options.flat_beam_offset = offset;\n      } else if (this.stem_direction === Stem.UP && offset < this.render_options.flat_beam_offset) {\n        this.render_options.flat_beam_offset = offset;\n      }\n\n      // for flat beams, the slope and y_shift are simply 0\n      this.slope = 0;\n      this.y_shift = 0;\n    },\n\n    // Create new stems for the notes in the beam, so that each stem\n    // extends into the beams.\n    applyStemExtensions: function(){\n      var first_note = this.notes[0];\n      var first_y_px = first_note.getStemExtents().topY;\n\n      // If rendering flat beams, and an offset exists, set the y-coordinate to\n      //  the offset so the stems all end at the beam offset.\n      if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n        first_y_px = this.render_options.flat_beam_offset;\n      }\n      var first_x_px = first_note.getStemX();\n\n      for (var i = 0; i < this.notes.length; ++i) {\n        var note = this.notes[i];\n\n        var x_px = note.getStemX();\n        var y_extents = note.getStemExtents();\n        var base_y_px = y_extents.baseY;\n        var top_y_px = y_extents.topY;\n\n        // If flat beams, set the top of the stem to the offset, rather than\n        //  relying on the topY value from above.\n        if (this.render_options.flat_beams) {\n          top_y_px = first_y_px;\n        }\n\n        // For harmonic note heads, shorten stem length by 3 pixels\n        base_y_px += this.stem_direction * note.glyph.stem_offset;\n\n        // Don't go all the way to the top (for thicker stems)\n        var y_displacement = Vex.Flow.STEM_WIDTH;\n\n        if (!note.hasStem()) {\n          if (note.isRest() && this.render_options.show_stemlets) {\n            var centerGlyphX = note.getCenterGlyphX();\n\n            var width = this.render_options.beam_width;\n            var total_width = ((this.beam_count - 1)* width * 1.5) + width;\n\n            var stemlet_height = (total_width - y_displacement +\n              this.render_options.stemlet_extension);\n\n            var beam_y = this.getSlopeY(centerGlyphX, first_x_px,\n                            first_y_px, this.slope) + this.y_shift;\n            var start_y = beam_y + (Vex.Flow.Stem.HEIGHT * this.stem_direction);\n            var end_y = beam_y + (stemlet_height * this.stem_direction);\n\n            // Draw Stemlet\n            note.setStem(new Vex.Flow.Stem({\n              x_begin: centerGlyphX,\n              x_end: centerGlyphX,\n              y_bottom: this.stem_direction === Stem.UP ? end_y : start_y,\n              y_top: this.stem_direction === Stem.UP ? start_y : end_y,\n              y_extend: y_displacement,\n              stem_extension: -1, // To avoid protruding through the beam\n              stem_direction: this.stem_direction\n            }));\n          }\n\n          continue;\n        }\n\n        var slope_y = this.getSlopeY(x_px, first_x_px, first_y_px,\n                        this.slope) + this.y_shift;\n\n        note.setStem(new Vex.Flow.Stem({\n          x_begin: x_px - (Vex.Flow.STEM_WIDTH/2),\n          x_end: x_px,\n          y_top: this.stem_direction === Stem.UP ? top_y_px : base_y_px,\n          y_bottom: this.stem_direction === Stem.UP ? base_y_px :  top_y_px,\n          y_extend: y_displacement,\n          stem_extension: Math.abs(top_y_px - slope_y) - Stem.HEIGHT - 1,\n          stem_direction: this.stem_direction\n        }));\n      }\n    },\n\n    // Get the x coordinates for the beam lines of specific `duration`\n    getBeamLines: function(duration) {\n      var beam_lines = [];\n      var beam_started = false;\n      var current_beam = null;\n      var partial_beam_length = this.render_options.partial_beam_length;\n      var previous_should_break = false;\n      var tick_tally = 0;\n      for (var i = 0; i < this.notes.length; ++i) {\n        var note = this.notes[i];\n\n        // See if we need to break secondary beams on this note.\n        var ticks = note.getIntrinsicTicks();\n        tick_tally += ticks;\n        var should_break = false;\n\n        // 8th note beams are always drawn.\n        if (parseInt(duration) >= 8) {\n\n          // First, check to see if any indices were set up through breakSecondaryAt()\n          should_break = this.break_on_indices.indexOf(i) !== -1;\n\n          // If the secondary breaks were auto-configured in the render options,\n          //  handle that as well.\n          if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n            tick_tally = 0;\n            should_break = true;\n          }\n        }\n        var note_gets_beam = ticks < Vex.Flow.durationToTicks(duration);\n        var stem_x = note.isRest() ? note.getCenterGlyphX() : note.getStemX();\n\n        // Check to see if the next note in the group will get a beam at this\n        //  level. This will help to inform the partial beam logic below.\n        var next_note = this.notes[i + 1];\n        var beam_next = next_note && next_note.getIntrinsicTicks() < Vex.Flow.durationToTicks(duration);\n        if (note_gets_beam) {\n\n          // This note gets a beam at the current level\n          if (beam_started) {\n\n            // We're currently in the middle of a beam. Just continue it on to\n            //  the stem X of the current note.\n            current_beam = beam_lines[beam_lines.length - 1];\n            current_beam.end = stem_x;\n\n            // If a secondary beam break is set up, end the beam right now.\n            if (should_break) {\n              beam_started = false;\n              if (next_note && !beam_next && current_beam.end === null) {\n\n                // This note gets a beam,.but the next one does not. This means\n                //  we need a partial pointing right.\n                current_beam.end = current_beam.start - partial_beam_length;\n              }\n            }\n          } else {\n\n            // No beam started yet. Start a new one.\n            current_beam = { start: stem_x, end: null };\n            beam_started = true;\n            if (!beam_next) {\n\n              // The next note doesn't get a beam. Draw a partial.\n              if((previous_should_break || i === 0) && next_note) {\n\n                // This is the first note (but not the last one), or it is\n                //  following a secondary break. Draw a partial to the right.\n                current_beam.end = current_beam.start + partial_beam_length;\n              } else {\n\n                // By default, draw a partial to the left.\n                current_beam.end = current_beam.start - partial_beam_length;\n              }\n            } else if (should_break) {\n\n              // This note should have a secondary break after it. Even though\n              //  we just started a beam, it needs to end immediately.\n              current_beam.end = current_beam.start - partial_beam_length;\n              beam_started = false;\n            }\n            beam_lines.push(current_beam);\n          }\n        } else {\n\n          // The current note does not get a beam.\n          beam_started = false;\n        }\n\n        // Store the secondary break flag to inform the partial beam logic in\n        //  the next iteration of the loop.\n        previous_should_break = should_break;\n      }\n\n      // Add a partial beam pointing left if this is the last note in the group\n      var last_beam = beam_lines[beam_lines.length - 1];\n      if (last_beam && last_beam.end === null) {\n        last_beam.end = last_beam.start - partial_beam_length;\n      }\n      return beam_lines;\n    },\n\n    // Render the stems for each notes\n    drawStems: function() {\n      this.notes.forEach(function(note) {\n        if (note.getStem()) {\n          note.getStem().setContext(this.context).draw();\n        }\n      }, this);\n    },\n\n    // Render the beam lines\n    drawBeamLines: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n\n      var valid_beam_durations = [\"4\", \"8\", \"16\", \"32\", \"64\"];\n\n      var first_note = this.notes[0];\n      var last_note = this.notes[this.notes.length - 1];\n\n      var first_y_px = first_note.getStemExtents().topY;\n      var last_y_px = last_note.getStemExtents().topY;\n\n      // For flat beams, set the first and last Y to the offset, rather than\n      //  using the note's stem extents.\n      if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n        first_y_px = this.render_options.flat_beam_offset;\n        last_y_px = this.render_options.flat_beam_offset;\n      }\n\n      var first_x_px = first_note.getStemX();\n\n      var beam_width = this.render_options.beam_width * this.stem_direction;\n\n      // Draw the beams.\n      for (var i = 0; i < valid_beam_durations.length; ++i) {\n        var duration = valid_beam_durations[i];\n        var beam_lines = this.getBeamLines(duration);\n\n        for (var j = 0; j < beam_lines.length; ++j) {\n          var beam_line = beam_lines[j];\n          var first_x = beam_line.start - (this.stem_direction == Stem.DOWN ? Vex.Flow.STEM_WIDTH/2:0);\n          var first_y = this.getSlopeY(first_x, first_x_px, first_y_px, this.slope);\n\n          var last_x = beam_line.end +\n            (this.stem_direction == 1 ? (Vex.Flow.STEM_WIDTH/3):(-Vex.Flow.STEM_WIDTH/3));\n          var last_y = this.getSlopeY(last_x, first_x_px, first_y_px, this.slope);\n\n          this.context.beginPath();\n          this.context.moveTo(first_x, first_y + this.y_shift);\n          this.context.lineTo(first_x, first_y + beam_width + this.y_shift);\n          this.context.lineTo(last_x + 1, last_y + beam_width + this.y_shift);\n          this.context.lineTo(last_x + 1, last_y + this.y_shift);\n          this.context.closePath();\n          this.context.fill();\n        }\n\n        first_y_px += beam_width * 1.5;\n        last_y_px += beam_width * 1.5;\n      }\n    },\n\n    // Pre-format the beam\n    preFormat: function() { return this; },\n\n    // Post-format the beam. This can only be called after\n    // the notes in the beam have both `x` and `y` values. ie: they've\n    // been formatted and have staves\n    postFormat: function() {\n      if (this.postFormatted) return;\n\n      // Calculate a smart slope if we're not forcing the beams to be flat.\n      if(this.render_options.flat_beams) {\n        this.calculateFlatSlope();\n      } else {\n        this.calculateSlope();\n      }\n      this.applyStemExtensions();\n\n      this.postFormatted = true;\n    },\n\n    // Render the beam to the canvas context\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n\n      if (this.unbeamable) return;\n\n      if (!this.postFormatted) {\n        this.postFormat();\n      }\n\n      this.drawStems();\n      this.drawBeamLines();\n\n      return true;\n    }\n  };\n\n  function calculateStemDirection(notes) {\n    var lineSum = 0;\n    notes.forEach(function(note) {\n      if (note.keyProps) {\n        note.keyProps.forEach(function(keyProp){\n          lineSum += (keyProp.line - 3);\n        });\n      }\n    });\n\n    if (lineSum >= 0)\n      return Stem.DOWN;\n    return Stem.UP;\n  }\n\n  // ## Static Methods\n  //\n  // Gets the default beam groups for a provided time signature.\n  // Attempts to guess if the time signature is not found in table.\n  // Currently this is fairly naive.\n  Beam.getDefaultBeamGroups = function(time_sig){\n    if (!time_sig || time_sig == \"c\") time_sig = \"4/4\";\n\n    var defaults = {\n      '1/2' :  ['1/2'],\n      '2/2' :  ['1/2'],\n      '3/2' :  ['1/2'],\n      '4/2' :  ['1/2'],\n\n      '1/4' :  ['1/4'],\n      '2/4' :  ['1/4'],\n      '3/4' :  ['1/4'],\n      '4/4' :  ['1/4'],\n\n      '1/8' :  ['1/8'],\n      '2/8' :  ['2/8'],\n      '3/8' :  ['3/8'],\n      '4/8' :  ['2/8'],\n\n      '1/16' : ['1/16'],\n      '2/16' : ['2/16'],\n      '3/16' : ['3/16'],\n      '4/16' : ['2/16']\n    };\n\n    var Fraction = Vex.Flow.Fraction;\n    var groups = defaults[time_sig];\n\n    if (!groups) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      var beatTotal = parseInt(time_sig.split('/')[0], 10);\n      var beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      var tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    } else {\n      return groups.map(function(group) {\n        return new Fraction().parse(group);\n      });\n    }\n  };\n\n  // A helper function to automatically build basic beams for a voice. For more\n  // complex auto-beaming use `Beam.generateBeams()`.\n  //\n  // Parameters:\n  // * `voice` - The voice to generate the beams for\n  // * `stem_direction` - A stem direction to apply to the entire voice\n  // * `groups` - An array of `Fraction` representing beat groupings for the beam\n  Beam.applyAndGetBeams = function(voice, stem_direction, groups) {\n    return Beam.generateBeams(voice.getTickables(), {\n      groups: groups,\n      stem_direction: stem_direction\n    });\n  };\n\n  // A helper function to autimatically build beams for a voice with\n  // configuration options.\n  //\n  // Example configuration object:\n  //\n  // ```\n  // config = {\n  //   groups: [new Vex.Flow.Fraction(2, 8)],\n  //   stem_direction: -1,\n  //   beam_rests: true,\n  //   beam_middle_only: true,\n  //   show_stemlets: false\n  // };\n  // ```\n  //\n  // Parameters:\n  // * `notes` - An array of notes to create the beams for\n  // * `config` - The configuration object\n  //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes\n  //    * `stem_direction` - Set to apply the same direction to all notes\n  //    * `beam_rests` - Set to `true` to include rests in the beams\n  //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat\n  //    * `show_stemlets` - Set to `true` to draw stemlets for rests\n  //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions\n  //\n  Beam.generateBeams = function(notes, config) {\n\n    if (!config) config = {};\n\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Vex.Flow.Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    var tickGroups = config.groups.map(function(group) {\n      if (!group.multiply) {\n        throw new Vex.RuntimeError(\"InvalidBeamGroups\",\n          \"The beam groups must be an array of Vex.Flow.Fractions\");\n      }\n      return group.clone().multiply(Vex.Flow.RESOLUTION, 1);\n    });\n\n    var unprocessedNotes = notes;\n    var currentTickGroup = 0;\n    var noteGroups       = [];\n    var currentGroup     = [];\n\n    function getTotalTicks(vf_notes){\n      return vf_notes.reduce(function(memo,note){\n        return note.getTicks().clone().add(memo);\n      }, new Vex.Flow.Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups(){\n      var nextGroup = [];\n\n      unprocessedNotes.forEach(function(unprocessedNote){\n        nextGroup    = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n\n        currentGroup.push(unprocessedNote);\n        var ticksPerGroup = tickGroups[currentTickGroup].clone();\n        var totalTicks = getTotalTicks(currentGroup);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        var unbeamable = Vex.Flow.durationToNumber(unprocessedNote.duration) < 8;\n        if (unbeamable && unprocessedNote.tuplet) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            nextGroup.push(currentGroup.pop());\n          }\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes\n      if (currentGroup.length > 0)\n        noteGroups.push(currentGroup);\n    }\n\n    function getBeamGroups() {\n      return noteGroups.filter(function(group){\n          if (group.length > 1) {\n            var beamable = true;\n            group.forEach(function(note) {\n              if (note.getIntrinsicTicks() >= Vex.Flow.durationToTicks(\"4\")) {\n                beamable = false;\n              }\n            });\n            return beamable;\n          }\n          return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      var sanitizedGroups = [];\n      noteGroups.forEach(function(group) {\n        var tempGroup = [];\n        group.forEach(function(note, index, group) {\n          var isFirstOrLast = index === 0 || index === group.length - 1;\n          var prevNote = group[index-1];\n\n          var breaksOnEachRest = !config.beam_rests && note.isRest();\n          var breaksOnFirstOrLastRest = (config.beam_rests &&\n            config.beam_middle_only && note.isRest() && isFirstOrLast);\n\n          var breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote &&\n              !note.isRest() && !prevNote.isRest()) {\n            var prevDirection = prevNote.getStemDirection();\n            var currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          var isUnbeamableDuration = parseInt(note.duration, 10) < 8;\n\n          // Determine if the group should be broken at this note\n          var shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest ||\n                            breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach(function(group){\n        var stemDirection;\n        if (config.maintain_stem_directions) {\n          var note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction){\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group) {\n      for (var i = 0; i < group.length; i++) {\n        var note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group, direction) {\n      group.forEach(function(note){\n        note.setStemDirection(direction);\n      });\n    }\n\n    function getTupletGroups() {\n      return noteGroups.filter(function(group){\n        if (group[0]) return group[0].tuplet;\n      });\n    }\n\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    var beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    var tupletGroups = getTupletGroups();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    var beams = [];\n    beamedNoteGroups.forEach(function(group){\n      var beam = new Vex.Flow.Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Vex.Flow.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    tupletGroups.forEach(function(group){\n      var firstNote = group[0];\n      for (var i=0; i<group.length; ++i) {\n        if (group[i].hasStem()) {\n          firstNote = group[i];\n          break;\n        }\n      }\n\n      var tuplet = firstNote.tuplet;\n\n      if (firstNote.beam) tuplet.setBracketed(false);\n      if (firstNote.stem_direction == Stem.DOWN) {\n        tuplet.setTupletLocation(Vex.Flow.Tuplet.LOCATION_BOTTOM);\n      }\n    });\n\n    return beams;\n  };\n\n  return Beam;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the main Voice class. It's mainly a container\n// object to group `Tickables` for formatting.\nVex.Flow.Voice = (function() {\n  function Voice(time) {\n    if (arguments.length > 0) this.init(time);\n  }\n\n  // Modes allow the addition of ticks in three different ways:\n  //\n  // STRICT: This is the default. Ticks must fill the voice.\n  // SOFT:   Ticks can be added without restrictions.\n  // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum\n  //         tick length.\n  Voice.Mode = {\n    STRICT: 1,\n    SOFT:   2,\n    FULL:   3\n  };\n\n  // ## Prototype Methods\n  Voice.prototype = {\n    init: function(time) {\n      this.time = Vex.Merge({\n        num_beats: 4,\n        beat_value: 4,\n        resolution: Vex.Flow.RESOLUTION\n      }, time);\n\n      // Recalculate total ticks.\n      this.totalTicks = new Vex.Flow.Fraction(\n        this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n\n      this.resolutionMultiplier = 1;\n\n      // Set defaults\n      this.tickables = [];\n      this.ticksUsed = new Vex.Flow.Fraction(0, 1);\n      this.smallestTickCount = this.totalTicks.clone();\n      this.largestTickWidth = 0;\n      this.stave = null;\n      this.boundingBox = null;\n      // Do we care about strictly timed notes\n      this.mode = Vex.Flow.Voice.Mode.STRICT;\n\n      // This must belong to a VoiceGroup\n      this.voiceGroup = null;\n    },\n\n    // Get the total ticks in the voice\n    getTotalTicks: function() { return this.totalTicks; },\n\n    // Get the total ticks used in the voice by all the tickables\n    getTicksUsed: function() { return this.ticksUsed; },\n\n    // Get the largest width of all the tickables\n    getLargestTickWidth: function() { return this.largestTickWidth; },\n\n    // Get the tick count for the shortest tickable\n    getSmallestTickCount: function() { return this.smallestTickCount; },\n\n    // Get the tickables in the voice\n    getTickables: function() { return this.tickables; },\n\n    // Get/set the voice mode, use a value from `Voice.Mode`\n    getMode: function() { return this.mode; },\n    setMode: function(mode) { this.mode = mode; return this; },\n\n    // Get the resolution multiplier for the voice\n    getResolutionMultiplier: function() { return this.resolutionMultiplier; },\n\n    // Get the actual tick resolution for the voice\n    getActualResolution: function() { return this.resolutionMultiplier * this.time.resolution; },\n\n    // Set the voice's stave\n    setStave: function(stave) {\n      this.stave = stave;\n      this.boundingBox = null; // Reset bounding box so we can reformat\n      return this;\n    },\n\n    // Get the bounding box for the voice\n    getBoundingBox: function() {\n      var stave, boundingBox, bb, i;\n\n      if (!this.boundingBox) {\n        if (!this.stave) throw Vex.RERR(\"NoStave\", \"Can't get bounding box without stave.\");\n        stave = this.stave;\n        boundingBox = null;\n\n        for (i = 0; i < this.tickables.length; ++i) {\n          this.tickables[i].setStave(stave);\n\n          bb = this.tickables[i].getBoundingBox();\n          if (!bb) continue;\n\n          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n        }\n\n        this.boundingBox = boundingBox;\n      }\n      return this.boundingBox;\n    },\n\n    // Every tickable must be associated with a voiceGroup. This allows formatters\n    // and preformatters to associate them with the right modifierContexts.\n    getVoiceGroup: function() {\n      if (!this.voiceGroup)\n        throw new Vex.RERR(\"NoVoiceGroup\", \"No voice group for voice.\");\n      return this.voiceGroup;\n    },\n\n    // Set the voice group\n    setVoiceGroup: function(g) { this.voiceGroup = g; return this; },\n\n    // Set the voice mode to strict or soft \n    setStrict: function(strict) {\n      this.mode = strict ? Vex.Flow.Voice.Mode.STRICT : Vex.Flow.Voice.Mode.SOFT;\n      return this;\n    },\n\n    // Determine if the voice is complete according to the voice mode\n    isComplete: function() {\n      if (this.mode == Vex.Flow.Voice.Mode.STRICT ||\n          this.mode == Vex.Flow.Voice.Mode.FULL) {\n        return this.ticksUsed.equals(this.totalTicks);\n      } else {\n        return true;\n      }\n    },\n\n    // Add a tickable to the voice\n    addTickable: function(tickable) {\n      if (!tickable.shouldIgnoreTicks()) {\n        var ticks = tickable.getTicks();\n\n        // Update the total ticks for this line.\n        this.ticksUsed.add(ticks);\n\n        if ((this.mode == Vex.Flow.Voice.Mode.STRICT ||\n             this.mode == Vex.Flow.Voice.Mode.FULL) &&\n             this.ticksUsed.greaterThan(this.totalTicks)) {\n          this.totalTicks.subtract(ticks);\n          throw new Vex.RERR(\"BadArgument\", \"Too many ticks.\");\n        }\n\n        // Track the smallest tickable for formatting.\n        if (ticks.lessThan(this.smallestTickCount)) {\n          this.smallestTickCount = ticks.clone();\n        }\n\n        this.resolutionMultiplier = this.ticksUsed.denominator;\n\n        // Expand total ticks using denominator from ticks used.\n        this.totalTicks.add(0, this.ticksUsed.denominator);\n      }\n\n      // Add the tickable to the line.\n      this.tickables.push(tickable);\n      tickable.setVoice(this);\n      return this;\n    },\n\n    // Add an array of tickables to the voice.\n    addTickables: function(tickables) {\n      for (var i = 0; i < tickables.length; ++i) {\n        this.addTickable(tickables[i]);\n      }\n\n      return this;\n    },\n\n    // Preformats the voice by applying the voice's stave to each note.\n    preFormat: function(){\n      if (this.preFormatted) return;\n\n      this.tickables.forEach(function(tickable) {\n        if (!tickable.getStave()) {\n          tickable.setStave(this.stave);\n        }\n      }, this);\n\n      this.preFormatted = true;\n      return this;\n    },\n\n    // Render the voice onto the canvas `context` and an optional `stave`.\n    // If `stave` is omitted, it is expected that the notes have staves\n    // already set.\n    draw: function(context, stave) {\n      var boundingBox = null;\n      for (var i = 0; i < this.tickables.length; ++i) {\n        var tickable = this.tickables[i];\n\n        // Set the stave if provided\n        if (stave) tickable.setStave(stave);\n\n        if (!tickable.getStave()) {\n          throw new Vex.RuntimeError(\"MissingStave\",\n            \"The voice cannot draw tickables without staves.\");\n        }\n\n        if (i === 0) boundingBox = tickable.getBoundingBox();\n\n        if (i > 0 && boundingBox) {\n          var tickable_bb = tickable.getBoundingBox();\n          if (tickable_bb) boundingBox.mergeWith(tickable_bb);\n        }\n\n       tickable.setContext(context);\n       tickable.draw();\n      }\n\n      this.boundingBox = boundingBox;\n    }\n  };\n\n  return Voice;\n}());","// Vex Music Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n\n/** @constructor */\nVex.Flow.VoiceGroup = (function() {\n  function VoiceGroup() {\n    this.init();\n  }\n\n  VoiceGroup.prototype = {\n    init: function() {\n      this.voices = [];\n      this.modifierContexts = [];\n    },\n\n    // Every tickable must be associated with a voiceGroup. This allows formatters\n    // and preformatters to associate them with the right modifierContexts.\n    getVoices: function() { return this.voices; },\n    getModifierContexts: function() { return this.modifierContexts; },\n\n    addVoice: function(voice) {\n      if (!voice) throw new Vex.RERR(\"BadArguments\", \"Voice cannot be null.\");\n      this.voices.push(voice);\n      voice.setVoiceGroup(this);\n    }\n  };\n\n  return VoiceGroup;\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// `Modifier` is an abstract interface for notational elements that modify\n// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n//\n// For a `Modifier` instance to be positioned correctly, it must be part of\n// a `ModifierContext`. All modifiers in the same context are rendered relative to\n// one another.\n//\n// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n// `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n\nVex.Flow.Modifier = (function() {\n  function Modifier() {\n    this.constructor = Modifier;\n    this.init();\n  }\n  Modifier.CATEGORY = \"none\";\n\n    // To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n  function L() { if (Modifier.DEBUG) Vex.L(\"Vex.Flow.Modifier\", arguments); }\n\n  // Modifiers can be positioned almost anywhere, relative to a note.\n  Modifier.Position = {\n    LEFT: 1,\n    RIGHT: 2,\n    ABOVE: 3,\n    BELOW: 4\n  };\n\n  // ## Prototype Methods\n  Modifier.prototype = {\n\n    // The constructor sets initial widths and constants.\n    init: function() {\n      this.width = 0;\n      this.context = null;\n\n      // Modifiers are attached to a note and an index. An index is a\n      // specific head in a chord.\n      this.note = null;\n      this.index = null;\n\n      // The `text_line` is reserved space above or below a stave.\n      this.text_line = 0;\n      this.position = Modifier.Position.LEFT;\n      this.modifier_context = null;\n      this.x_shift = 0;\n      this.y_shift = 0;\n      this.spacingFromNextModifier = 0;\n      L(\"Created new modifier\");\n    },\n\n    // Every modifier has a category. The `ModifierContext` uses this to determine\n    // the type and order of the modifiers.\n    getCategory: function() { return this.constructor.CATEGORY; },\n\n    // Get and set modifier widths.\n    getWidth: function() { return this.width; },\n    setWidth: function(width) { this.width = width; return this; },\n\n    // Get and set attached note (`StaveNote`, `TabNote`, etc.)\n    getNote: function() { return this.note; },\n    setNote: function(note) { this.note = note; return this; },\n\n    // Get and set note index, which is a specific note in a chord.\n    getIndex: function() { return this.index; },\n    setIndex: function(index) { this.index = index; return this; },\n\n    // Get and set rendering context.\n    getContext: function() { return this.context; },\n    setContext: function(context) { this.context = context; return this; },\n\n    // Every modifier must be part of a `ModifierContext`.\n    getModifierContext: function() { return this.modifier_context; },\n    setModifierContext: function(c) { this.modifier_context = c; return this; },\n\n    // Get and set articulation position.\n    getPosition: function() { return this.position; },\n    setPosition: function(position) { this.position = position; return this; },\n\n    // Set the `text_line` for the modifier.\n    setTextLine: function(line) { this.text_line = line; return this; },\n\n    // Shift modifier down `y` pixels. Negative values shift up.\n    setYShift: function(y) { this.y_shift = y; return this; },\n\n    setSpacingFromNextModifier: function(x) {\n      this.spacingFromNextModifier = x;\n    },\n\n    getSpacingFromNextModifier: function() {return this.spacingFromNextModifier; },\n\n    // Shift modifier `x` pixels in the direction of the modifier. Negative values\n    // shift reverse.\n    setXShift: function(x) {\n      this.x_shift = 0;\n      if (this.position == Modifier.Position.LEFT) {\n        this.x_shift -= x;\n      } else {\n        this.x_shift += x;\n      }\n    },\n    getXShift: function() {return this.x_shift;},\n\n    // Render the modifier onto the canvas.\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n      throw new Vex.RERR(\"MethodNotImplemented\",\n          \"Draw() not implemented for this modifier.\");\n    }\n  };\n\n  return Modifier;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of modifiers to notes (e.g. bends,\n// fingering positions etc.)\n\nVex.Flow.ModifierContext = (function() {\n  function ModifierContext() {\n    // Current modifiers\n    this.modifiers = {};\n\n    // Formatting data.\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0\n    };\n\n    // Add new modifiers to this array. The ordering is significant -- lower\n    // modifiers are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      Vex.Flow.StaveNote,\n      Vex.Flow.Dot,\n      Vex.Flow.FretHandFinger,\n      Vex.Flow.Accidental,\n      Vex.Flow.GraceNoteGroup,\n      Vex.Flow.Stroke,\n      Vex.Flow.StringNumber,\n      Vex.Flow.Articulation,\n      Vex.Flow.Ornament,\n      Vex.Flow.Annotation,\n      Vex.Flow.Bend,\n      Vex.Flow.Vibrato\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [ Vex.Flow.StaveNote ];\n  }\n\n  // To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n  function L() { if (ModifierContext.DEBUG) Vex.L(\"Vex.Flow.ModifierContext\", arguments); }\n\n  ModifierContext.prototype = {\n    addModifier: function(modifier) {\n      var type = modifier.getCategory();\n      if (!this.modifiers[type]) this.modifiers[type] = [];\n      this.modifiers[type].push(modifier);\n      modifier.setModifierContext(this);\n      this.preFormatted = false;\n      return this;\n    },\n\n    getModifiers: function(type) { return this.modifiers[type]; },\n    getWidth: function() { return this.width; },\n    getExtraLeftPx: function() { return this.state.left_shift; },\n    getExtraRightPx: function() { return this.state.right_shift; },\n    getState: function() { return this.state; },\n\n    getMetrics: function() {\n      if (!this.formatted) throw new Vex.RERR(\"UnformattedModifier\",\n          \"Unformatted modifier has no metrics.\");\n\n      return {\n        width: this.state.left_shift + this.state.right_shift + this.spacing,\n        spacing: this.spacing,\n        extra_left_px: this.state.left_shift,\n        extra_right_px: this.state.right_shift\n      };\n    },\n\n    preFormat: function() {\n      if (this.preFormatted) return;\n      this.PREFORMAT.forEach(function(modifier) {\n        L(\"Preformatting ModifierContext: \", modifier.CATEGORY);\n        modifier.format(this.getModifiers(modifier.CATEGORY), this.state, this);\n      }, this);\n\n      // Update width of this modifier context\n      this.width = this.state.left_shift + this.state.right_shift;\n      this.preFormatted = true;\n    },\n\n    postFormat: function() {\n      if (this.postFormatted) return;\n      this.POSTFORMAT.forEach(function(modifier) {\n        L(\"Postformatting ModifierContext: \", modifier.CATEGORY);\n        modifier.postFormat(this.getModifiers(modifier.CATEGORY), this);\n      }, this);\n    }\n  };\n\n  return ModifierContext;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n//\n// ## Description\n//\n// This file implements accidentals as modifiers that can be attached to\n// notes. Support is included for both western and microtonal accidentals.\n//\n// See `tests/accidental_tests.js` for usage examples.\n\nVex.Flow.Accidental = (function(){\n  function Accidental(type) {\n    if (arguments.length > 0) this.init(type);\n  }\n  Accidental.CATEGORY = \"accidentals\";\n\n  // To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.\n  function L() { if (Accidental.DEBUG) Vex.L(\"Vex.Flow.Accidental\", arguments); }\n\n  var Modifier = Vex.Flow.Modifier;\n\n  // ## Static Methods\n  //\n  // Arrange accidentals inside a ModifierContext.\n  Accidental.format = function(accidentals, state) {\n    var left_shift = state.left_shift;\n    var accidental_spacing = 2;\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return false;\n\n    var acc_list = [];\n    var hasStave = false;\n    var prev_note = null;\n    var shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    var i, acc, props_tmp;\n    for (i = 0; i < accidentals.length; ++i) {\n      acc = accidentals[i];\n      var note = acc.getNote();\n      var stave = note.getStave();\n      var props = note.getKeyProps()[acc.getIndex()];\n      if (note != prev_note) {\n         // Iterate through all notes to get the displaced pixels\n         for (var n = 0; n < note.keys.length; ++n) {\n            props_tmp = note.getKeyProps()[n];\n            shiftL = (props_tmp.displaced ? note.getExtraLeftPx() : shiftL);\n          }\n          prev_note = note;\n      }\n      if (stave !== null) {\n        hasStave = true;\n        var line_space = stave.options.spacing_between_lines_px;\n        var y = stave.getYForLine(props.line);\n        var acc_line = Math.round(y / line_space * 2)/2;\n        acc_list.push({ y: y, line: acc_line, shift: shiftL, acc: acc, lineSpace: line_space });\n      } else {\n        acc_list.push({ line: props.line, shift: shiftL, acc: acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    acc_list.sort(function(a, b) { return (b.line - a.line); });\n\n    // Create an array of unique line numbers (line_list) from acc_list\n    var line_list = []; // an array of unique line numbers\n    var acc_shift = 0; // amount by which all accidentals must be shifted right or left for stem flipping, notehead shifting concerns.\n    var previous_line = null;\n\n    for(i = 0; i<acc_list.length; i++) {\n      acc = acc_list[i];\n\n      // if this is the first line, or a new line, add a line_list\n      if( (previous_line === null) || (previous_line != acc.line) ) {\n        line_list.push({line : acc.line, flat_line : true, dbl_sharp_line: true, num_acc : 0, width : 0});\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      if( (acc.acc.type != \"b\") && (acc.acc.type !=\"bb\") ) {\n        line_list[line_list.length - 1].flat_line = false;\n      }\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if( acc.acc.type != \"##\")\n        line_list[line_list.length - 1].dbl_sharp_line = false;\n\n      // Track how many accidentals are on this line:\n      line_list[line_list.length - 1].num_acc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      //width = accidental width + universal spacing between accidentals\n      line_list[line_list.length - 1].width += acc.acc.getWidth() + accidental_spacing;\n\n      // if this acc_shift is larger, use it to keep first column accidentals in the same line\n      acc_shift = ( (acc.shift > acc_shift) ? acc.shift : acc_shift);\n\n      previous_line = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical colission rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    var total_columns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for(i = 0; i<line_list.length; i++) {\n      var no_further_conflicts = false;\n      var group_start = i;\n      var group_end = i;\n\n      group_check_while : while( (group_end+1 < line_list.length) && (!no_further_conflicts) ) {\n        // if this note conflicts with the next:\n        if(this.checkCollision(line_list[group_end], line_list[group_end + 1])) {\n        // include the next note in the group:\n          group_end++;\n        }\n        else no_further_conflicts = true;\n      }\n\n      // Set columns for the lines in this group:\n      var group_length = group_end - group_start + 1;\n\n      // Set the accidental column for each line of the group\n      var end_case = (this.checkCollision(line_list[group_start], line_list[group_end])) ? \"a\" : \"b\";\n\n\n        var checkCollision = this.checkCollision;\n        switch(group_length) {\n          case 3:\n            if( (end_case == \"a\") &&\n                (line_list[group_start+1].line - line_list[group_start+2].line == 0.5) &&\n                (line_list[group_start].line - line_list[group_start + 1].line != 0.5) )\n              end_case = \"second_on_bottom\";\n              break;\n          case 4:\n            if( (!checkCollision(line_list[group_start], line_list[group_start+2])) &&\n                (!checkCollision(line_list[group_start+1], line_list[group_start+3])) )\n              end_case = \"spaced_out_tetrachord\";\n              break;\n          case 5:\n            if( (end_case == \"b\") &&\n                (!checkCollision(line_list[group_start+1], line_list[group_start+3])) )\n              end_case = \"spaced_out_pentachord\";\n            if( (end_case == \"spaced_out_pentachord\") &&\n                (!checkCollision(line_list[group_start], line_list[group_start+2])) &&\n                (!checkCollision(line_list[group_start+2], line_list[group_start+4])) )\n              end_case = \"very_spaced_out_pentachord\";\n              break;\n          case 6:\n            if( (!checkCollision(line_list[group_start], line_list[group_start+3])) &&\n                (!checkCollision(line_list[group_start+1], line_list[group_start+4])) &&\n                (!checkCollision(line_list[group_start+2], line_list[group_start+5])) )\n              end_case = \"spaced_out_hexachord\";\n            if( (!checkCollision(line_list[group_start], line_list[group_start+2])) &&\n                (!checkCollision(line_list[group_start+2], line_list[group_start+4])) &&\n                (!checkCollision(line_list[group_start+1], line_list[group_start+3])) &&\n                (!checkCollision(line_list[group_start+3], line_list[group_start+5])) )\n              end_case = \"very_spaced_out_hexachord\";\n              break;\n        }\n\n      var group_member;\n      var column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (group_length>=7) {\n        // First, determine how many columns to use:\n        var pattern_length = 2;\n        var colission_detected = true;\n        while(colission_detected === true) {\n          colission_detected = false;\n          colission_detecter : for(var line = 0; line + pattern_length < line_list.length; line++) {\n            if(this.checkCollision(line_list[line], line_list[line+pattern_length])) {\n              colission_detected = true;\n              pattern_length++;\n              break colission_detecter;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for(group_member = i; group_member <= group_end; group_member++) {\n          column = ((group_member-i) % pattern_length) + 1;\n          line_list[group_member].column = column;\n          total_columns = (total_columns > column) ? total_columns : column;\n        }\n\n      // Otherwise, if the group contains fewer than seven members, use the layouts from\n      // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for(group_member = i; group_member <= group_end; group_member++) {\n          column = Vex.Flow.accidentalColumnsTable[group_length][end_case][group_member-i];\n          line_list[group_member].column = column;\n          total_columns = (total_columns > column) ? total_columns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = group_end;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    var column_widths = [];\n    var column_x_offsets = [];\n    for(i=0; i<=total_columns; i++) {\n      column_widths[i] = 0;\n      column_x_offsets[i] = 0;\n    }\n\n    column_widths[0] = acc_shift + left_shift;\n    column_x_offsets[0] = acc_shift + left_shift;\n\n    // Fill column_widths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    line_list.forEach(function(line) {\n      if(line.width > column_widths[line.column]) column_widths[line.column] = line.width;\n    });\n\n    for(i=1; i<column_widths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      column_x_offsets[i] = column_widths[i] + column_x_offsets[i-1];\n    }\n\n    var total_shift = column_x_offsets[column_x_offsets.length-1];\n    // Set the x_shift for each accidental according to column offsets:\n    var acc_count = 0;\n    line_list.forEach(function(line) {\n      var line_width = 0;\n      var last_acc_on_line = acc_count + line.num_acc;\n      // handle all of the accidentals on a given line:\n      for(acc_count; acc_count<last_acc_on_line; acc_count++) {\n        var x_shift = (column_x_offsets[line.column-1] + line_width);\n        acc_list[acc_count].acc.setXShift(x_shift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        line_width += acc_list[acc_count].acc.getWidth() + accidental_spacing;\n        L(\"Line, acc_count, shift: \", line.line, acc_count, x_shift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += total_shift;\n  };\n\n  // Helper function to determine whether two lines of accidentals collide vertically\n  Accidental.checkCollision = function(line_1, line_2) {\n    var clearance = line_2.line - line_1.line;\n    var clearance_required = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if(clearance>0) { // then line 2 is on top\n      clearance_required = (line_2.flat_line || line_2.dbl_sharp_line) ? 2.5 : 3.0;\n      if(line_1.dbl_sharp_line) clearance -= 0.5;\n    } else { // line 1 is on top\n      clearance_required = (line_1.flat_line || line_1.dbl_sharp_line) ? 2.5 : 3.0;\n      if(line_2.dbl_sharp_line) clearance -= 0.5;\n    }\n    var colission = (Math.abs(clearance) < clearance_required);\n    L(\"Line_1, Line_2, Collision: \", line_1.line, line_2.line, colission);\n    return(colission);\n  };\n\n  // ## Prototype Methods\n  //\n  // An `Accidental` inherits from `Modifier`, and is formatted within a\n  // `ModifierContext`.\n  Vex.Inherit(Accidental, Modifier, {\n    // Create accidental. `type` can be a value from the\n    // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For\n    // example: `#`, `##`, `b`, `n`, etc.\n    init: function(type) {\n      Accidental.superclass.init.call(this);\n      L(\"New accidental: \", type);\n\n      this.note = null;\n      // The `index` points to a specific note in a chord.\n      this.index = null;\n      this.type = type;\n      this.position = Modifier.Position.LEFT;\n\n      this.render_options = {\n        // Font size for glyphs\n        font_scale: 38,\n\n        // Length of stroke across heads above or below the stave.\n        stroke_px: 3\n      };\n\n      this.accidental = Vex.Flow.accidentalCodes(this.type);\n      if (!this.accidental) throw new Vex.RERR(\"ArgumentError\", \"Unknown accidental type: \" + type);\n\n      // Cautionary accidentals have parentheses around them\n      this.cautionary = false;\n      this.paren_left = null;\n      this.paren_right = null;\n\n      // Initial width is set from table.\n      this.setWidth(this.accidental.width);\n    },\n\n    // Attach this accidental to `note`, which must be a `StaveNote`.\n    setNote: function(note){\n      if (!note) throw new Vex.RERR(\"ArgumentError\", \"Bad note value: \" + note);\n      this.note = note;\n\n      // Accidentals attached to grace notes are rendered smaller.\n      if (this.note.getCategory() === 'gracenotes') {\n        this.render_options.font_scale = 25;\n        this.setWidth(this.accidental.gracenote_width);\n      }\n    },\n\n    // If called, draws parenthesis around accidental.\n    setAsCautionary: function() {\n      this.cautionary = true;\n      this.render_options.font_scale = 28;\n      this.paren_left = Vex.Flow.accidentalCodes(\"{\");\n      this.paren_right = Vex.Flow.accidentalCodes(\"}\");\n      var width_adjust = (this.type == \"##\" || this.type == \"bb\") ? 6 : 4;\n\n      // Make sure `width` accomodates for parentheses.\n      this.setWidth(this.paren_left.width + this.accidental.width + this.paren_right.width - width_adjust);\n      return this;\n    },\n\n    // Render accidental onto canvas.\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw accidental without a context.\");\n      if (!(this.note && (this.index != null))) throw new Vex.RERR(\"NoAttachedNote\",\n        \"Can't draw accidental without a note and index.\");\n\n      // Figure out the start `x` and `y` coordinates for this note and index.\n      var start = this.note.getModifierStartXY(this.position, this.index);\n      var acc_x = ((start.x + this.x_shift) - this.width);\n      var acc_y = start.y + this.y_shift;\n      L(\"Rendering: \", this.type, acc_x, acc_y);\n\n      if (!this.cautionary) {\n        // Render the accidental alone.\n        Vex.Flow.renderGlyph(this.context, acc_x, acc_y,\n                             this.render_options.font_scale, this.accidental.code);\n      } else {\n        // Render the accidental in parentheses.\n        acc_x += 3;\n        Vex.Flow.renderGlyph(this.context, acc_x, acc_y,\n                             this.render_options.font_scale, this.paren_left.code);\n        acc_x += 2;\n        Vex.Flow.renderGlyph(this.context, acc_x, acc_y,\n                             this.render_options.font_scale, this.accidental.code);\n        acc_x += this.accidental.width - 2;\n        if (this.type == \"##\" || this.type == \"bb\") acc_x -= 2;\n        Vex.Flow.renderGlyph(this.context, acc_x, acc_y,\n                             this.render_options.font_scale, this.paren_right.code);\n      }\n    }\n  });\n\n  // ## Static Methods\n  //\n  // Use this method to automatically apply accidentals to a set of `voices`.\n  // The accidentals will be remembered between all the voices provided.\n  // Optionally, you can also provide an initial `keySignature`.\n  Accidental.applyAccidentals = function(voices, keySignature) {\n    var tickPositions = [];\n    var tickNoteMap = {};\n\n    // Sort the tickables in each voice by their tick position in the voice\n    voices.forEach(function(voice) {\n      var tickPosition = new Vex.Flow.Fraction(0, 1);\n      var notes = voice.getTickables();\n      notes.forEach(function(note) {\n        var notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [note];\n        } else {\n          notesAtPosition.push(note);\n        }\n\n        tickPosition.add(note.getTicks());\n      });\n    });\n\n    var music = new Vex.Flow.Music();\n\n    // Default key signature is C major\n    if (!keySignature) keySignature = \"C\";\n\n    // Get the scale map, which represents the current state of each pitch\n    var scaleMap = music.createScaleMap(keySignature);\n\n    tickPositions.forEach(function(tick) {\n      var notes = tickNoteMap[tick];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      var modifiedPitches = [];\n\n      notes.forEach(function(note) {\n          if (note.isRest()) return;\n\n          // Go through each key and determine if an accidental should be\n          // applied\n          note.keys.forEach(function(keyString, keyIndex) {\n              var key = music.getNoteParts(keyString.split('/')[0]);\n\n              // Force a natural for every key without an accidental\n              var accidentalString = key.accidental || \"n\";\n              var pitch = key.root + accidentalString;\n\n              // Determine if the current pitch has the same accidental\n              // as the scale state\n              var sameAccidental = scaleMap[key.root] === pitch;\n\n              // Determine if an identical pitch in the chord already\n              // modified the accidental state\n              var previouslyModified = modifiedPitches.indexOf(pitch) > -1;\n\n              // Add the accidental to the StaveNote\n              if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                  // Modify the scale map so that the root pitch has an\n                  // updated state\n                  scaleMap[key.root] = pitch;\n\n                  // Create the accidental\n                  var accidental = new Vex.Flow.Accidental(accidentalString);\n\n                  // Attach the accidental to the StaveNote\n                  note.addAccidental(keyIndex, accidental);\n\n                  // Add the pitch to list of pitches that modified accidentals\n                  modifiedPitches.push(pitch);\n              }\n          });\n      });\n    });\n  };\n\n  return Accidental;\n}());\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n//\r\n// This class implements dot modifiers for notes.\r\n\r\n/**\r\n * @constructor\r\n */\r\nVex.Flow.Dot = (function() {\r\n  function Dot() {\r\n    this.init();\r\n  }\r\n\r\n  Dot.CATEGORY = \"dots\";\r\n\r\n  var Modifier = Vex.Flow.Modifier;\r\n\r\n  // Arrange dots inside a ModifierContext.\r\n  Dot.format = function(dots, state) {\r\n    var right_shift = state.right_shift;\r\n    var dot_spacing = 1;\r\n\r\n    if (!dots || dots.length === 0) return false;\r\n\r\n    var i, dot, note, shift;\r\n    var dot_list = [];\r\n    for (i = 0; i < dots.length; ++i) {\r\n      dot = dots[i];\r\n      note = dot.getNote();\r\n\r\n      var props;\r\n      // Only StaveNote has .getKeyProps()\r\n      if (typeof note.getKeyProps === 'function') {\r\n        props = note.getKeyProps()[dot.getIndex()];\r\n        shift = (props.displaced ? note.getExtraRightPx() : 0);\r\n      } else { // Else it's a TabNote\r\n        props = { line: 0.5 }; // Shim key props for dot placement\r\n        shift = 0;\r\n      }\r\n\r\n      dot_list.push({ line: props.line, shift: shift, note: note, dot: dot });\r\n    }\r\n\r\n    // Sort dots by line number.\r\n    dot_list.sort(function(a, b) { return (b.line - a.line); });\r\n\r\n    var dot_shift = right_shift;\r\n    var x_width = 0;\r\n    var last_line = null;\r\n    var last_note = null;\r\n    var prev_dotted_space = null;\r\n    var half_shiftY = 0;\r\n\r\n    for (i = 0; i < dot_list.length; ++i) {\r\n      dot = dot_list[i].dot;\r\n      note = dot_list[i].note;\r\n      shift = dot_list[i].shift;\r\n      var line = dot_list[i].line;\r\n\r\n      // Reset the position of the dot every line.\r\n      if (line != last_line || note != last_note) {\r\n        dot_shift = shift;\r\n      }\r\n\r\n      if (!note.isRest() && line != last_line) {\r\n        if (Math.abs(line % 1) == 0.5) {\r\n          // note is on a space, so no dot shift\r\n          half_shiftY = 0;\r\n        } else if (!note.isRest()) {\r\n          // note is on a line, so shift dot to space above the line\r\n          half_shiftY = 0.5;\r\n          if (last_note != null &&\r\n              !last_note.isRest() && last_line - line == 0.5) {\r\n            // previous note on a space, so shift dot to space below the line\r\n            half_shiftY = -0.5;\r\n          } else if (line + half_shiftY == prev_dotted_space) {\r\n            // previous space is dotted, so shift dot to space below the line\r\n             half_shiftY = -0.5;\r\n          }\r\n        }\r\n      }\r\n\r\n      // convert half_shiftY to a multiplier for dots.draw()\r\n      dot.dot_shiftY = (-half_shiftY);\r\n      prev_dotted_space = line + half_shiftY;\r\n\r\n      dot.setXShift(dot_shift);\r\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\r\n      x_width = (dot_shift > x_width) ? dot_shift : x_width;\r\n      last_line = line;\r\n      last_note = note;\r\n    }\r\n\r\n    // Update state.\r\n    state.right_shift += x_width;\r\n  };\r\n\r\n  Vex.Inherit(Dot, Modifier, {\r\n    init: function() {\r\n      Dot.superclass.init.call(this);\r\n\r\n      this.note = null;\r\n      this.index = null;\r\n      this.position = Modifier.Position.RIGHT;\r\n\r\n      this.radius = 2;\r\n      this.setWidth(5);\r\n      this.dot_shiftY = 0;\r\n    },\r\n\r\n    setNote: function(note){\r\n      this.note = note;\r\n\r\n      if (this.note.getCategory() === 'gracenotes') {\r\n        this.radius *= 0.50;\r\n        this.setWidth(3);\r\n      }\r\n    },\r\n\r\n    setDotShiftY: function(y) { this.dot_shiftY = y; return this; },\r\n\r\n    draw: function() {\r\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\r\n        \"Can't draw dot without a context.\");\r\n      if (!(this.note && (this.index != null))) throw new Vex.RERR(\"NoAttachedNote\",\r\n        \"Can't draw dot without a note and index.\");\r\n\r\n      var line_space = this.note.stave.options.spacing_between_lines_px;\r\n\r\n      var start = this.note.getModifierStartXY(this.position, this.index);\r\n\r\n      // Set the starting y coordinate to the base of the stem for TabNotes\r\n      if (this.note.getCategory() === 'tabnotes') {\r\n        start.y = this.note.getStemExtents().baseY;\r\n      }\r\n\r\n      var dot_x = (start.x + this.x_shift) + this.width - this.radius;\r\n      var dot_y = start.y + this.y_shift + (this.dot_shiftY * line_space);\r\n      var ctx = this.context;\r\n\r\n      ctx.beginPath();\r\n      ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\r\n      ctx.fill();\r\n    }\r\n  });\r\n\r\n  return Dot;\r\n}());\r\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the formatting and layout algorithms that are used\n// to position notes in a voice. The algorithm can align multiple voices both\n// within a stave, and across multiple staves.\n//\n// To do this, the formatter breaks up voices into a grid of rational-valued\n// `ticks`, to which each note is assigned. Then, minimum widths are assigned\n// to each tick based on the widths of the notes and modifiers in that tick. This\n// establishes the smallest amount of space required for each tick.\n//\n// Finally, the formatter distributes the left over space proportionally to\n// all the ticks, setting the `x` values of the notes in each tick.\n//\n// See `tests/formatter_tests.js` for usage examples. The helper functions included\n// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n\nVex.Flow.Formatter = (function() {\n  function Formatter() {\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // The suggested amount of space for each tick.\n    this.pixelsPerTick = 0;\n\n    // Total number of ticks in the voice.\n    this.totalTicks = new Vex.Flow.Fraction(0, 1);\n\n    // Arrays of tick and modifier contexts.\n    this.tContexts = null;\n    this.mContexts = null;\n  }\n\n  // To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\n  function L() { if (Formatter.DEBUG) Vex.L(\"Vex.Flow.Formatter\", arguments); }\n\n  // ## Private Helpers\n  //\n  // Helper function to locate the next non-rest note(s).\n  function lookAhead(notes, rest_line, i, compare) {\n    // If no valid next note group, next_rest_line is same as current.\n    var next_rest_line = rest_line;\n\n    // Get the rest line for next valid non-rest note group.\n    i++;\n    while (i < notes.length) {\n      if (!notes[i].isRest() && !notes[i].shouldIgnoreTicks()) {\n        next_rest_line = notes[i].getLineForRest();\n        break;\n      }\n      i++;\n    }\n\n    // Locate the mid point between two lines.\n    if (compare && rest_line != next_rest_line) {\n      var top = Vex.Max(rest_line, next_rest_line);\n      var bot = Vex.Min(rest_line, next_rest_line);\n      next_rest_line = Vex.MidLine(top, bot);\n    }\n    return next_rest_line;\n  }\n\n  // Take an array of `voices` and place aligned tickables in the same context. Returns\n  // a mapping from `tick` to `context_type`, a list of `tick`s, and the resolution\n  // multiplier.\n  //\n  // Params:\n  // * `voices`: Array of `Voice` instances.\n  // * `context_type`: A context class (e.g., `ModifierContext`, `TickContext`)\n  // * `add_fn`: Function to add tickable to context.\n  function createContexts(voices, context_type, add_fn) {\n    if (!voices || !voices.length) throw new Vex.RERR(\"BadArgument\",\n        \"No voices to format\");\n\n    // Initialize tick maps.\n    var totalTicks = voices[0].getTotalTicks();\n    var tickToContextMap = {};\n    var tickList = [];\n    var contexts = [];\n\n    var resolutionMultiplier = 1;\n\n    // Find out highest common multiple of resolution multipliers.\n    // The purpose of this is to find out a common denominator\n    // for all fractional tick values in all tickables of all voices,\n    // so that the values can be expanded and the numerator used\n    // as an integer tick value.\n    var i; // shared iterator\n    var voice;\n    for (i = 0; i < voices.length; ++i) {\n      voice = voices[i];\n      if (!(voice.getTotalTicks().equals(totalTicks))) {\n        throw new Vex.RERR(\"TickMismatch\",\n            \"Voices should have same total note duration in ticks.\");\n      }\n\n      if (voice.getMode() == Vex.Flow.Voice.Mode.STRICT && !voice.isComplete())\n        throw new Vex.RERR(\"IncompleteVoice\",\n          \"Voice does not have enough notes.\");\n\n      var lcm = Vex.Flow.Fraction.LCM(resolutionMultiplier,\n          voice.getResolutionMultiplier());\n      if (resolutionMultiplier < lcm) {\n        resolutionMultiplier = lcm;\n      }\n    }\n\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    for (i = 0; i < voices.length; ++i) {\n      voice = voices[i];\n\n      var tickables = voice.getTickables();\n\n      // Use resolution multiplier as denominator to expand ticks\n      // to suitable integer values, so that no additional expansion\n      // of fractional tick values is needed.\n      var ticksUsed = new Vex.Flow.Fraction(0, resolutionMultiplier);\n\n      for (var j = 0; j < tickables.length; ++j) {\n        var tickable = tickables[j];\n        var integerTicks = ticksUsed.numerator;\n\n        // If we have no tick context for this tick, create one.\n        if (!tickToContextMap[integerTicks]) {\n          var newContext = new context_type();\n          contexts.push(newContext);\n          tickToContextMap[integerTicks] = newContext;\n        }\n\n        // Add this tickable to the TickContext.\n        add_fn(tickable, tickToContextMap[integerTicks]);\n\n        // Maintain a sorted list of tick contexts.\n        tickList.push(integerTicks);\n        ticksUsed.add(tickable.getTicks());\n      }\n    }\n\n    return {\n      map: tickToContextMap,\n      array: contexts,\n      list: Vex.SortAndUnique(tickList, function(a, b) { return a - b; },\n          function(a, b) { return a === b; } ),\n      resolutionMultiplier: resolutionMultiplier\n    };\n  }\n\n\n  // ## Static Methods\n  //\n  // Helper function to format and draw a single voice. Returns a bounding\n  // box for the notation.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `stave` - The stave to which to draw (`Stave` or `TabStave`)\n  // * `notes` - Array of `Note` instances (`StaveNote`, `TextNote`, `TabNote`, etc.)\n  // * `params` - One of below:\n  //    * Setting `autobeam` only `(context, stave, notes, true)` or `(ctx, stave, notes, {autobeam: true})`\n  //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n  //    * Setting both a struct is needed `(context, stave, notes, {autobeam: true, align_rests: true})`\n  //\n  // `autobeam` automatically generates beams for the notes.\n  // `align_rests` aligns rests with nearby notes.\n  Formatter.FormatAndDraw = function(ctx, stave, notes, params) {\n    var opts = {\n      auto_beam: false,\n      align_rests: false\n    };\n\n    if (typeof params == \"object\") {\n      Vex.Merge(opts, params);\n    } else if (typeof params == \"boolean\") {\n      opts.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    var voice = new Vex.Flow.Voice(Vex.Flow.TIME4_4).\n      setMode(Vex.Flow.Voice.Mode.SOFT);\n    voice.addTickables(notes);\n\n    // Then create beams, if requested.\n    var beams = null;\n    if (opts.auto_beam) {\n      beams = Vex.Flow.Beam.applyAndGetBeams(voice);\n    }\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter().\n      joinVoices([voice], {align_rests: opts.align_rests}).\n      formatToStave([voice], stave, {align_rests: opts.align_rests});\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave);\n    voice.draw(ctx, stave);\n    if (beams != null) {\n      for (var i=0; i<beams.length; ++i) {\n        beams[i].setContext(ctx).draw();\n      }\n    }\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  };\n\n  // Helper function to format and draw aligned tab and stave notes in two\n  // separate staves.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.\n  // * `stave` - A `Stave` instance on which to render `Note`s.\n  // * `notes` - Array of `Note` instances for the stave (`StaveNote`, `BarNote`, etc.)\n  // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n  // * `autobeam` - Automatically generate beams.\n  // * `params` - A configuration object:\n  //    * `autobeam` automatically generates beams for the notes.\n  //    * `align_rests` aligns rests with nearby notes.\n  Formatter.FormatAndDrawTab = function(ctx,\n      tabstave, stave, tabnotes, notes, autobeam, params) {\n    var opts = {\n      auto_beam: autobeam,\n      align_rests: false\n    };\n\n    if (typeof params == \"object\") {\n      Vex.Merge(opts, params);\n    } else if (typeof params == \"boolean\") {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    var notevoice = new Vex.Flow.Voice(Vex.Flow.TIME4_4).\n      setMode(Vex.Flow.Voice.Mode.SOFT);\n    notevoice.addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    var tabvoice = new Vex.Flow.Voice(Vex.Flow.TIME4_4).\n      setMode(Vex.Flow.Voice.Mode.SOFT);\n    tabvoice.addTickables(tabnotes);\n\n    // Generate beams if requested.\n    var beams = null;\n    if (opts.auto_beam) {\n      beams = Vex.Flow.Beam.applyAndGetBeams(notevoice);\n    }\n\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter().\n      joinVoices([notevoice], {align_rests: opts.align_rests}).\n      joinVoices([tabvoice]).\n      formatToStave([notevoice,tabvoice], stave, {align_rests: opts.align_rests});\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    if (beams != null) {\n      for (var i=0; i<beams.length; ++i) {\n        beams[i].setContext(ctx).draw();\n      }\n    }\n\n    // Draw a connector between tab and note staves.\n    (new Vex.Flow.StaveConnector(stave, tabstave)).setContext(ctx).draw();\n  };\n\n  // Auto position rests based on previous/next note positions.\n  //\n  // Params:\n  // * `notes`: An array of notes.\n  // * `align_all_notes`: If set to false, only aligns non-beamed notes.\n  // * `align_tuplets`: If set to false, ignores tuplets.\n  Formatter.AlignRestsToNotes = function(notes, align_all_notes, align_tuplets) {\n    for (var i = 0; i < notes.length; ++i) {\n      if (notes[i] instanceof Vex.Flow.StaveNote && notes[i].isRest()) {\n        var note = notes[i];\n\n        if (note.tuplet && !align_tuplets) continue;\n\n        // If activated rests not on default can be rendered as specified.\n        var position = note.getGlyph().position.toUpperCase();\n        if (position != \"R/4\" && position != \"B/4\") {\n          continue;\n        }\n\n        if (align_all_notes || note.beam != null) {\n          // Align rests with previous/next notes.\n          var props = note.getKeyProps()[0];\n          if (i === 0) {\n            props.line = lookAhead(notes, props.line, i, false);\n            note.setKeyLine(0, props.line);\n          } else if (i > 0 && i < notes.length) {\n            // If previous note is a rest, use its line number.\n            var rest_line;\n            if (notes[i-1].isRest()) {\n              rest_line = notes[i-1].getKeyProps()[0].line;\n              props.line = rest_line;\n            } else {\n              rest_line = notes[i-1].getLineForRest();\n              // Get the rest line for next valid non-rest note group.\n              props.line = lookAhead(notes, rest_line, i, true);\n            }\n            note.setKeyLine(0, props.line);\n          }\n        }\n      }\n    }\n\n    return this;\n  };\n\n  // ## Prototype Methods\n  Formatter.prototype = {\n    // Find all the rests in each of the `voices` and align them\n    // to neighboring notes. If `align_all_notes` is `false`, then only\n    // align non-beamed notes.\n    alignRests: function(voices, align_all_notes) {\n      if (!voices || !voices.length) throw new Vex.RERR(\"BadArgument\",\n          \"No voices to format rests\");\n      for (var i = 0; i < voices.length; i++) {\n        new Formatter.AlignRestsToNotes(voices[i].tickables, align_all_notes);\n      }\n    },\n\n    // Calculate the minimum width required to align and format `voices`.\n    preCalculateMinTotalWidth: function(voices) {\n      // Cache results.\n      if (this.hasMinTotalWidth) return;\n\n      // Create tick contexts if not already created.\n      if (!this.tContexts) {\n        if (!voices) {\n          throw new Vex.RERR(\"BadArgument\",\n                             \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n      }\n\n      var contexts = this.tContexts;\n      var contextList = contexts.list;\n      var contextMap = contexts.map;\n\n      this.minTotalWidth = 0;\n\n      // Go through each tick context and calculate total width.\n      for (var i = 0; i < contextList.length; ++i) {\n        var context = contextMap[contextList[i]];\n\n        // `preFormat` gets them to descend down to their tickables and modifier\n        // contexts, and calculate their widths.\n        context.preFormat();\n        this.minTotalWidth += context.getWidth();\n      }\n\n      this.hasMinTotalWidth = true;\n\n      return this.minTotalWidth;\n    },\n\n    // Get minimum width required to render all voices. Either `format` or\n    // `preCalculateMinTotalWidth` must be called before this method.\n    getMinTotalWidth: function() {\n      if (!this.hasMinTotalWidth) {\n        throw new Vex.RERR(\"NoMinTotalWidth\",\n            \"Need to call 'preCalculateMinTotalWidth' or 'preFormat' before\" +\n            \" calling 'getMinTotalWidth'\");\n      }\n\n      return this.minTotalWidth;\n    },\n\n    // Create `ModifierContext`s for each tick in `voices`.\n    createModifierContexts: function(voices) {\n      var contexts = createContexts(voices,\n          Vex.Flow.ModifierContext,\n          function(tickable, context) {\n            tickable.addToModifierContext(context);\n          });\n      this.mContexts = contexts;\n      return contexts;\n    },\n\n    // Create `TickContext`s for each tick in `voices`. Also calculate the\n    // total number of ticks in voices.\n    createTickContexts: function(voices) {\n      var contexts = createContexts(voices,\n          Vex.Flow.TickContext,\n          function(tickable, context) { context.addTickable(tickable); });\n\n      contexts.array.forEach(function(context) {\n        context.tContexts = contexts.array;\n      });\n\n      this.totalTicks = voices[0].getTicksUsed().clone();\n      this.tContexts = contexts;\n      return contexts;\n    },\n\n    // This is the core formatter logic. Format voices and justify them\n    // to `justifyWidth` pixels. `rendering_context` is required to justify elements\n    // that can't retreive widths without a canvas. This method sets the `x` positions\n    // of all the tickables/notes in the formatter.\n    preFormat: function(justifyWidth, rendering_context, voices, stave) {\n      // Initialize context maps.\n      var contexts = this.tContexts;\n      var contextList = contexts.list;\n      var contextMap = contexts.map;\n\n      // If voices and a stave were provided, set the Stave for each voice\n      // and preFormat to apply Y values to the notes;\n      if (voices && stave) {\n        voices.forEach(function(voice) {\n          voice.setStave(stave);\n          voice.preFormat();\n        });\n      }\n\n      // Figure out how many pixels to allocate per tick.\n      if (!justifyWidth) {\n        justifyWidth = 0;\n        this.pixelsPerTick = 0;\n      } else {\n        this.pixelsPerTick = justifyWidth / (this.totalTicks.value() * contexts.resolutionMultiplier);\n      }\n\n      // Now distribute the ticks to each tick context, and assign them their\n      // own X positions.\n      var x = 0;\n      var center_x = justifyWidth / 2;\n      var white_space = 0; // White space to right of previous note\n      var tick_space = 0;  // Pixels from prev note x-pos to curent note x-pos\n      var prev_tick = 0;\n      var prev_width = 0;\n      var lastMetrics = null;\n      var initial_justify_width = justifyWidth;\n      this.minTotalWidth = 0;\n\n      var i, tick, context;\n\n      // Pass 1: Give each note maximum width requested by context.\n      for (i = 0; i < contextList.length; ++i) {\n        tick = contextList[i];\n        context = contextMap[tick];\n        if (rendering_context) context.setContext(rendering_context);\n\n        // Make sure that all tickables in this context have calculated their\n        // space requirements.\n        context.preFormat();\n\n        var thisMetrics = context.getMetrics();\n        var width = context.getWidth();\n        this.minTotalWidth += width;\n        var min_x = 0;\n        var pixels_used = width;\n\n        // Calculate space between last note and next note.\n        tick_space = Math.min((tick - prev_tick) * this.pixelsPerTick, pixels_used);\n\n        // Shift next note up `tick_space` pixels.\n        var set_x = x + tick_space;\n\n        // Calculate the minimum next note position to allow for right modifiers.\n        if (lastMetrics != null) {\n          min_x = x + prev_width - lastMetrics.extraLeftPx;\n        }\n\n        // Determine the space required for the previous tick.\n        // The `shouldIgnoreTicks` bool is true for elements in the stave\n        // that don't consume ticks (bar lines, key and time signatures, etc.)\n        set_x = context.shouldIgnoreTicks() ?\n            (min_x + context.getWidth()) : Math.max(set_x, min_x);\n\n        if (context.shouldIgnoreTicks() && justifyWidth) {\n            // This note stole room... recalculate with new justification width.\n            justifyWidth -= context.getWidth();\n            this.pixelsPerTick = justifyWidth /\n              (this.totalTicks.value() * contexts.resolutionMultiplier);\n        }\n\n        // Determine pixels needed for left modifiers.\n        var left_px = thisMetrics.extraLeftPx;\n\n        // Determine white space to right of previous tick (from right modifiers.)\n        if (lastMetrics != null) {\n          white_space = (set_x - x) - (prev_width -\n                                       lastMetrics.extraLeftPx);\n        }\n\n        // Deduct pixels from white space quota.\n        if (i > 0) {\n          if (white_space > 0) {\n            if (white_space >= left_px) {\n              // Have enough white space for left modifiers - no offset needed.\n              left_px = 0;\n            } else {\n              // Decrease left modifier offset by amount of white space.\n              left_px -= white_space;\n            }\n          }\n        }\n\n        // Adjust the tick x position with the left modifier offset.\n        set_x += left_px;\n\n        // Set the `x` value for the context, which sets the `x` value for all\n        // tickables in this context.\n        context.setX(set_x);\n        context.setPixelsUsed(pixels_used);  // ??? Remove this if nothing breaks\n\n        lastMetrics = thisMetrics;\n        prev_width = width;\n        prev_tick = tick;\n        x = set_x;\n      }\n\n      this.hasMinTotalWidth = true;\n      if (justifyWidth > 0) {\n        // Pass 2: Take leftover width, and distribute it to proportionately to\n        // all notes.\n        var remaining_x = initial_justify_width - (x + prev_width);\n        var leftover_pixels_per_tick = remaining_x / (this.totalTicks.value() * contexts.resolutionMultiplier);\n        var accumulated_space = 0;\n        prev_tick = 0;\n\n        for (i = 0; i < contextList.length; ++i) {\n          tick = contextList[i];\n          context = contextMap[tick];\n          tick_space = (tick - prev_tick) * leftover_pixels_per_tick;\n          accumulated_space = accumulated_space + tick_space;\n          context.setX(context.getX() + accumulated_space);\n          prev_tick = tick;\n\n          // Move center aligned tickables to middle\n          var centeredTickables = context.getCenterAlignedTickables();\n\n          /*jshint -W083 */\n          centeredTickables.forEach(function(tickable) {\n            tickable.center_x_shift = center_x - context.getX();\n          });\n        }\n      }\n    },\n\n    // This is the top-level call for all formatting logic completed\n    // after `x` *and* `y` values have been computed for the notes\n    // in the voices.\n    postFormat: function() {\n      // Postformat modifier contexts\n      this.mContexts.list.forEach(function(mContext) {\n        this.mContexts.map[mContext].postFormat();\n      }, this);\n\n      // Postformat tick contexts\n      this.tContexts.list.forEach(function(tContext) {\n        this.tContexts.map[tContext].postFormat();\n      }, this);\n\n      return this;\n    },\n\n    // Take all `voices` and create `ModifierContext`s out of them. This tells\n    // the formatters that the voices belong on a single stave.\n    joinVoices: function(voices) {\n      this.createModifierContexts(voices);\n      this.hasMinTotalWidth = false;\n      return this;\n    },\n\n    // Align rests in voices, justify the contexts, and position the notes\n    // so voices are aligned and ready to render onto the stave. This method\n    // mutates the `x` positions of all tickables in `voices`.\n    //\n    // Voices are full justified to fit in `justifyWidth` pixels.\n    //\n    // Set `options.context` to the rendering context. Set `options.align_rests`\n    // to true to enable rest alignment.\n    format: function(voices, justifyWidth, options) {\n      var opts = {\n        align_rests: false,\n        context: null,\n        stave: null\n      };\n\n      Vex.Merge(opts, options);\n      this.alignRests(voices, opts.align_rests);\n      this.createTickContexts(voices);\n      this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n      // Only postFormat if a stave was supplied for y value formatting\n      if (opts.stave) this.postFormat();\n\n      return this;\n    },\n\n    // This method is just like `format` except that the `justifyWidth` is inferred\n    // from the `stave`.\n    formatToStave: function(voices, stave, options) {\n      var justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - 10;\n      L(\"Formatting voices to width: \", justifyWidth);\n      var opts = {context: stave.getContext()};\n      Vex.Merge(opts, options);\n      return this.format(voices, justifyWidth, opts);\n    }\n  };\n\n  return Formatter;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\n/**\n * Create a new tie from the specified notes. The notes must\n * be part of the same line, and have the same duration (in ticks).\n *\n * @constructor\n * @param {!Object} context The canvas context.\n * @param {!Object} notes The notes to tie up.\n * @param {!Object} Options\n */\nVex.Flow.StaveTie = (function() {\n  function StaveTie(notes, text) {\n    if (arguments.length > 0) this.init(notes, text);\n  }\n\n  StaveTie.prototype = {\n    init: function(notes, text) {\n      /**\n       * Notes is a struct that has:\n       *\n       *  {\n       *    first_note: Note,\n       *    last_note: Note,\n       *    first_indices: [n1, n2, n3],\n       *    last_indices: [n1, n2, n3]\n       *  }\n       *\n       **/\n      this.notes = notes;\n      this.context = null;\n      this.text = text;\n      this.direction = null;\n\n      this.render_options = {\n        cp1: 8,      // Curve control point 1\n        cp2: 12,      // Curve control point 2\n        text_shift_x: 0,\n        first_x_shift: 0,\n        last_x_shift: 0,\n        y_shift: 7,\n        tie_spacing: 0,\n        font: { family: \"Arial\", size: 10, style: \"\" }\n      };\n\n      this.font = this.render_options.font;\n      this.setNotes(notes);\n    },\n\n    setContext: function(context) { this.context = context; return this; },\n    setFont: function(font) { this.font = font; return this; },\n    setDirection: function(direction) { this.direction = direction; return this; },\n\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes: function(notes) {\n      if (!notes.first_note && !notes.last_note)\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Tie needs to have either first_note or last_note set.\");\n\n      if (!notes.first_indices) notes.first_indices = [0];\n      if (!notes.last_indices) notes.last_indices = [0];\n\n      if (notes.first_indices.length != notes.last_indices.length)\n        throw new Vex.RuntimeError(\"BadArguments\", \"Tied notes must have similar\" +\n        \" index sizes\");\n\n      // Success. Lets grab 'em notes.\n      this.first_note = notes.first_note;\n      this.first_indices = notes.first_indices;\n      this.last_note = notes.last_note;\n      this.last_indices = notes.last_indices;\n      return this;\n    },\n\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial: function() {\n      return (!this.first_note || !this.last_note);\n    },\n\n    renderTie: function(params) {\n      if (params.first_ys.length === 0 || params.last_ys.length === 0)\n        throw new Vex.RERR(\"BadArguments\", \"No Y-values to render\");\n\n      var ctx = this.context;\n      var cp1 = this.render_options.cp1;\n      var cp2 = this.render_options.cp2;\n\n      if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n        cp1 = 2; cp2 = 8;\n      }\n\n      var first_x_shift = this.render_options.first_x_shift;\n      var last_x_shift = this.render_options.last_x_shift;\n      var y_shift = this.render_options.y_shift * params.direction;\n\n      for (var i = 0; i < this.first_indices.length; ++i) {\n        var cp_x = ((params.last_x_px + last_x_shift) +\n            (params.first_x_px + first_x_shift)) / 2;\n        var first_y_px = params.first_ys[this.first_indices[i]] + y_shift;\n        var last_y_px = params.last_ys[this.last_indices[i]] + y_shift;\n\n        if (isNaN(first_y_px) || isNaN(last_y_px))\n          throw new Vex.RERR(\"BadArguments\", \"Bad indices for tie rendering.\");\n\n        var top_cp_y = ((first_y_px + last_y_px) / 2) + (cp1 * params.direction);\n        var bottom_cp_y = ((first_y_px + last_y_px) / 2) + (cp2 * params.direction);\n\n        ctx.beginPath();\n        ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n        ctx.quadraticCurveTo(cp_x, top_cp_y,\n            params.last_x_px + last_x_shift, last_y_px);\n        ctx.quadraticCurveTo(cp_x, bottom_cp_y,\n            params.first_x_px + first_x_shift, first_y_px);\n\n        ctx.closePath();\n        ctx.fill();\n      }\n    },\n\n    renderText: function(first_x_px, last_x_px) {\n      if (!this.text) return;\n      var center_x = (first_x_px + last_x_px) / 2;\n      center_x -= this.context.measureText(this.text).width / 2;\n\n      this.context.save();\n      this.context.setFont(this.font.family, this.font.size, this.font.style);\n      this.context.fillText(\n          this.text, center_x + this.render_options.text_shift_x,\n          (this.first_note || this.last_note).getStave().getYForTopText() - 1);\n      this.context.restore();\n    },\n\n    draw: function() {\n      if (!this.context)\n        throw new Vex.RERR(\"NoContext\", \"No context to render tie.\");\n      var first_note = this.first_note;\n      var last_note = this.last_note;\n      var first_x_px, last_x_px, first_ys, last_ys, stem_direction;\n\n      if (first_note) {\n        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n        stem_direction = first_note.getStemDirection();\n        first_ys = first_note.getYs();\n      } else {\n        first_x_px = last_note.getStave().getTieStartX();\n        first_ys = last_note.getYs();\n        this.first_indices = this.last_indices;\n      }\n\n      if (last_note) {\n        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n        stem_direction = last_note.getStemDirection();\n        last_ys = last_note.getYs();\n      } else {\n        last_x_px = first_note.getStave().getTieEndX();\n        last_ys = first_note.getYs();\n        this.last_indices = this.first_indices;\n      }\n\n      if(this.direction){\n        stem_direction = this.direction;\n      }\n\n      this.renderTie({\n        first_x_px: first_x_px,\n        last_x_px: last_x_px,\n        first_ys: first_ys,\n        last_ys: last_ys,\n        direction: stem_direction\n      });\n\n      this.renderText(first_x_px, last_x_px);\n      return true;\n    }\n  };\n\n  return StaveTie;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\n/**\n * Create a new tie from the specified notes. The notes must\n * be part of the same line, and have the same duration (in ticks).\n *\n * @constructor\n * @param {!Object} context The canvas context.\n * @param {!Object} notes The notes to tie up.\n * @param {!Object} Options\n */\nVex.Flow.TabTie = (function() {\n  function TabTie(notes, text) {\n    if (arguments.length > 0) this.init(notes, text);\n  }\n\n  TabTie.createHammeron = function(notes) {\n    return new TabTie(notes, \"H\");\n  };\n\n  TabTie.createPulloff = function(notes) {\n    return new TabTie(notes, \"P\");\n  };\n\n  Vex.Inherit(TabTie, Vex.Flow.StaveTie, {\n    init: function(notes, text) {\n      /**\n       * Notes is a struct that has:\n       *\n       *  {\n       *    first_note: Note,\n       *    last_note: Note,\n       *    first_indices: [n1, n2, n3],\n       *    last_indices: [n1, n2, n3]\n       *  }\n       *\n       **/\n      TabTie.superclass.init.call(this, notes, text);\n      this.render_options.cp1 = 9;\n      this.render_options.cp2 = 11;\n      this.render_options.y_shift = 3;\n\n      this.setNotes(notes);\n    },\n\n    draw: function() {\n      if (!this.context)\n        throw new Vex.RERR(\"NoContext\", \"No context to render tie.\");\n      var first_note = this.first_note;\n      var last_note = this.last_note;\n      var first_x_px, last_x_px, first_ys, last_ys;\n\n      if (first_note) {\n        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n        first_ys = first_note.getYs();\n      } else {\n        first_x_px = last_note.getStave().getTieStartX();\n        first_ys = last_note.getYs();\n        this.first_indices = this.last_indices;\n      }\n\n      if (last_note) {\n        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n        last_ys = last_note.getYs();\n      } else {\n        last_x_px = first_note.getStave().getTieEndX();\n        last_ys = first_note.getYs();\n        this.last_indices = this.first_indices;\n      }\n\n      this.renderTie({\n        first_x_px: first_x_px,\n        last_x_px: last_x_px,\n        first_ys: first_ys,\n        last_ys: last_ys,\n        direction: -1           // Tab tie's are always face up.\n      });\n\n      this.renderText(first_x_px, last_x_px);\n      return true;\n    }\n  });\n\n  return TabTie;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\n/**\n * Create a new tie from the specified notes. The notes must\n * be part of the same line, and have the same duration (in ticks).\n *\n * @constructor\n * @param {!Object} context The canvas context.\n * @param {!Object} notes The notes to tie up.\n * @param {!Object} Options\n */\nVex.Flow.TabSlide = (function() {\n  function TabSlide(notes, direction) {\n    if (arguments.length > 0) this.init(notes, direction);\n  }\n\n  TabSlide.SLIDE_UP = 1;\n  TabSlide.SLIDE_DOWN = -1;\n\n  TabSlide.createSlideUp = function(notes) {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  };\n\n  TabSlide.createSlideDown = function(notes) {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  };\n\n  Vex.Inherit(TabSlide, Vex.Flow.TabTie, {\n    init: function(notes, direction) {\n      /**\n       * Notes is a struct that has:\n       *\n       *  {\n       *    first_note: Note,\n       *    last_note: Note,\n       *    first_indices: [n1, n2, n3],\n       *    last_indices: [n1, n2, n3]\n       *  }\n       *\n       **/\n      TabSlide.superclass.init.call(this, notes, \"sl.\");\n      if (!direction) {\n        var first_fret = notes.first_note.getPositions()[0].fret;\n        var last_fret = notes.last_note.getPositions()[0].fret;\n\n        direction = ((parseInt(first_fret, 10) > parseInt(last_fret, 10)) ?\n          TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP);\n      }\n\n      this.slide_direction = direction;\n      this.render_options.cp1 = 11;\n      this.render_options.cp2 = 14;\n      this.render_options.y_shift = 0.5;\n\n      this.setFont({font: \"Times\", size: 10, style: \"bold italic\"});\n      this.setNotes(notes);\n    },\n\n    renderTie: function(params) {\n      if (params.first_ys.length === 0 || params.last_ys.length === 0)\n        throw new Vex.RERR(\"BadArguments\", \"No Y-values to render\");\n\n      var ctx = this.context;\n      var first_x_px = params.first_x_px;\n      var first_ys = params.first_ys;\n      var last_x_px = params.last_x_px;\n\n      var direction = this.slide_direction;\n      if (direction != TabSlide.SLIDE_UP &&\n          direction != TabSlide.SLIDE_DOWN) {\n        throw new Vex.RERR(\"BadSlide\", \"Invalid slide direction\");\n      }\n\n      for (var i = 0; i < this.first_indices.length; ++i) {\n        var slide_y = first_ys[this.first_indices[i]] +\n          this.render_options.y_shift;\n\n        if (isNaN(slide_y))\n          throw new Vex.RERR(\"BadArguments\", \"Bad indices for slide rendering.\");\n\n        ctx.beginPath();\n        ctx.moveTo(first_x_px, slide_y + (3 * direction));\n        ctx.lineTo(last_x_px, slide_y - (3 * direction));\n        ctx.closePath();\n        ctx.stroke();\n      }\n    }\n  });\n\n  return TabSlide;\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements tablature bends.\n\n/**\n   @param text Text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   @param release If true, render a release. (DEPRECATED)\n   @param phrase If set, ignore \"text\" and \"release\", and use the more\n                 sophisticated phrase specified.\n\n   Example of a phrase:\n\n     [{\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"half\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"1 1/2\"\n       width: 8;\n     }]\n */\nVex.Flow.Bend = (function() {\n  function Bend(text, release, phrase) {\n    if (arguments.length > 0) this.init(text, release, phrase);\n  }\n  Bend.CATEGORY = \"bends\";\n\n  Bend.UP = 0;\n  Bend.DOWN = 1;\n\n  var Modifier = Vex.Flow.Modifier;\n\n  // ## Static Methods\n  // Arrange bends in `ModifierContext`\n  Bend.format = function(bends, state) {\n    if (!bends || bends.length === 0) return false;\n\n    var last_width = 0;\n    // Bends are always on top.\n    var text_line = state.top_text_line;\n\n    // Format Bends\n    for (var i = 0; i < bends.length; ++i) {\n      var bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  };\n\n  // ## Prototype Methods\n  Vex.Inherit(Bend, Modifier, {\n    init: function(text, release, phrase) {\n      var superclass = Vex.Flow.Bend.superclass;\n      superclass.init.call(this);\n\n      this.text = text;\n      this.x_shift = 0;\n      this.release = release || false;\n      this.font = \"10pt Arial\";\n      this.render_options = {\n        line_width: 1.5,\n        line_style: \"#777777\",\n        bend_width: 8,\n        release_width: 8\n      };\n\n      if (phrase) {\n        this.phrase = phrase;\n      } else {\n        // Backward compatibility\n        this.phrase = [{type: Bend.UP, text: this.text}];\n        if (this.release) this.phrase.push({type: Bend.DOWN, text: \"\"});\n      }\n\n      this.updateWidth();\n    },\n\n    setXShift: function(value) {\n      this.x_shift = value;\n      this.updateWidth();\n    },\n\n    setFont: function(font) { this.font = font; return this; },\n\n    getText: function() { return this.text; },\n\n    updateWidth: function() {\n      var that = this;\n\n      function measure_text(text) {\n        var text_width;\n        if (that.context) {\n          text_width = that.context.measureText(text).width;\n        } else {\n          text_width = Vex.Flow.textWidth(text);\n        }\n\n        return text_width;\n      }\n\n      var total_width = 0;\n      for (var i=0; i<this.phrase.length; ++i) {\n        var bend = this.phrase[i];\n        if ('width' in bend) {\n          total_width += bend.width;\n        } else {\n          var additional_width = (bend.type == Bend.UP) ?\n            this.render_options.bend_width : this.render_options.release_width;\n\n          bend.width = Vex.Max(additional_width, measure_text(bend.text)) + 3;\n          bend.draw_width = bend.width / 2;\n          total_width += bend.width;\n        }\n      }\n\n      this.setWidth(total_width + this.x_shift);\n      return this;\n    },\n\n    draw: function() {\n        if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw bend without a context.\");\n      if (!(this.note && (this.index != null))) throw new Vex.RERR(\"NoNoteForBend\",\n        \"Can't draw bend without a note or index.\");\n\n      var start = this.note.getModifierStartXY(Modifier.Position.RIGHT,\n          this.index);\n      start.x += 3;\n      start.y += 0.5;\n      var x_shift = this.x_shift;\n\n      var ctx = this.context;\n      var bend_height = this.note.getStave().getYForTopText(this.text_line) + 3;\n      var annotation_y = this.note.getStave().getYForTopText(this.text_line) - 1;\n      var that = this;\n\n      function renderBend(x, y, width, height) {\n        var cp_x = x + width;\n        var cp_y = y;\n\n        ctx.save();\n        ctx.beginPath();\n        ctx.setLineWidth(that.render_options.line_width);\n        ctx.setStrokeStyle(that.render_options.line_style);\n        ctx.setFillStyle(that.render_options.line_style);\n        ctx.moveTo(x, y);\n        ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      function renderRelease(x, y, width, height) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.setLineWidth(that.render_options.line_width);\n        ctx.setStrokeStyle(that.render_options.line_style);\n        ctx.setFillStyle(that.render_options.line_style);\n        ctx.moveTo(x, height);\n        ctx.quadraticCurveTo(\n            x + width, height,\n            x + width, y);\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      function renderArrowHead(x, y, direction) {\n        var width = 4;\n        var dir = direction || 1;\n\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(x - width, y + width * dir);\n        ctx.lineTo(x + width, y + width * dir);\n        ctx.closePath();\n        ctx.fill();\n      }\n\n      function renderText(x, text) {\n        ctx.save();\n        ctx.setRawFont(that.font);\n        var render_x = x - (ctx.measureText(text).width / 2);\n        ctx.fillText(text, render_x, annotation_y);\n        ctx.restore();\n      }\n\n      var last_bend = null;\n      var last_drawn_width = 0;\n      for (var i=0; i<this.phrase.length; ++i) {\n        var bend = this.phrase[i];\n        if (i === 0) bend.draw_width += x_shift;\n\n        last_drawn_width = bend.draw_width + (last_bend?last_bend.draw_width:0) - (i==1?x_shift:0);\n        if (bend.type == Bend.UP) {\n          if (last_bend && last_bend.type == Bend.UP) {\n            renderArrowHead(start.x, bend_height);\n          }\n\n          renderBend(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (bend.type == Bend.DOWN) {\n          if (last_bend && last_bend.type == Bend.UP) {\n            renderRelease(start.x, start.y, last_drawn_width, bend_height);\n          }\n\n          if (last_bend && last_bend.type == Bend.DOWN) {\n            renderArrowHead(start.x, start.y, -1);\n            renderRelease(start.x, start.y, last_drawn_width, bend_height);\n          }\n\n          if (last_bend == null) {\n            last_drawn_width = bend.draw_width;\n            renderRelease(start.x, start.y, last_drawn_width, bend_height);\n          }\n        }\n\n        renderText(start.x + last_drawn_width, bend.text);\n        last_bend = bend;\n        last_bend.x = start.x;\n\n        start.x += last_drawn_width;\n      }\n\n      // Final arrowhead and text\n      if (last_bend.type == Bend.UP) {\n        renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n      } else if (last_bend.type == Bend.DOWN) {\n        renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n      }\n    }\n  });\n\n  return Bend;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements vibratos.\n\nVex.Flow.Vibrato = (function() {\n  function Vibrato() { this.init(); }\n  Vibrato.CATEGORY = \"vibratos\";\n\n  var Modifier = Vex.Flow.Modifier;\n\n  // ## Static Methods\n  // Arrange vibratos inside a `ModifierContext`.\n  Vibrato.format = function(vibratos, state, context) {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    var text_line = state.top_text_line;\n    var width = 0;\n    var shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    var bends = context.getModifiers(Vex.Flow.Bend.CATEGORY);\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (var i = 0; i < vibratos.length; ++i) {\n      var vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  };\n\n  // ## Prototype Methods\n  Vex.Inherit(Vibrato, Modifier, {\n    init: function() {\n      var superclass = Vex.Flow.Vibrato.superclass;\n      superclass.init.call(this);\n\n      this.harsh = false;\n      this.position = Vex.Flow.Modifier.Position.RIGHT;\n      this.render_options = {\n        vibrato_width: 20,\n        wave_height: 6,\n        wave_width: 4,\n        wave_girth: 2\n      };\n\n      this.setVibratoWidth(this.render_options.vibrato_width);\n    },\n\n    setHarsh: function(harsh) { this.harsh = harsh; return this; },\n    setVibratoWidth: function(width) {\n      this.vibrato_width = width;\n      this.setWidth(this.vibrato_width);\n      return this;\n    },\n\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw vibrato without a context.\");\n      if (!this.note) throw new Vex.RERR(\"NoNoteForVibrato\",\n        \"Can't draw vibrato without an attached note.\");\n\n      var start = this.note.getModifierStartXY(Vex.Flow.Modifier.Position.RIGHT,\n          this.index);\n\n      var ctx = this.context;\n      var that = this;\n      var vibrato_width = this.vibrato_width;\n\n      function renderVibrato(x, y) {\n        var wave_width = that.render_options.wave_width;\n        var wave_girth = that.render_options.wave_girth;\n        var wave_height = that.render_options.wave_height;\n        var num_waves = vibrato_width / wave_width;\n\n        ctx.beginPath();\n\n        var i;\n        if (that.harsh) {\n          ctx.moveTo(x, y + wave_girth + 1);\n          for (i = 0; i < num_waves / 2; ++i) {\n            ctx.lineTo(x + wave_width, y - (wave_height / 2));\n            x += wave_width;\n            ctx.lineTo(x + wave_width, y + (wave_height / 2));\n            x += wave_width;\n          }\n          for (i = 0; i < num_waves / 2; ++i) {\n            ctx.lineTo(x - wave_width, (y - (wave_height / 2)) + wave_girth + 1);\n            x -= wave_width;\n            ctx.lineTo(x - wave_width, (y + (wave_height / 2)) + wave_girth + 1);\n            x -= wave_width;\n          }\n          ctx.fill();\n        } else {\n          ctx.moveTo(x, y + wave_girth);\n          for (i = 0; i < num_waves / 2; ++i) {\n            ctx.quadraticCurveTo(x + (wave_width / 2), y - (wave_height / 2),\n              x + wave_width, y);\n            x += wave_width;\n            ctx.quadraticCurveTo(x + (wave_width / 2), y + (wave_height / 2),\n              x + wave_width, y);\n            x += wave_width;\n          }\n\n          for (i = 0; i < num_waves / 2; ++i) {\n            ctx.quadraticCurveTo(\n                x - (wave_width / 2),\n                (y + (wave_height / 2)) + wave_girth,\n                x - wave_width, y + wave_girth);\n            x -= wave_width;\n            ctx.quadraticCurveTo(\n                x - (wave_width / 2),\n                (y - (wave_height / 2)) + wave_girth,\n                x - wave_width, y + wave_girth);\n            x -= wave_width;\n          }\n          ctx.fill();\n        }\n      }\n\n      var vx = start.x + this.x_shift;\n      var vy = this.note.getYForTopText(this.text_line) + 2;\n\n      renderVibrato(vx, vy);\n    }\n  });\n\n  return Vibrato;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements text annotations as modifiers that can be attached to\n// notes.\n//\n// See `tests/annotation_tests.js` for usage examples.\n\nVex.Flow.Annotation = (function() {\n  function Annotation(text) {\n    if (arguments.length > 0) this.init(text);\n  }\n\n  Annotation.CATEGORY = \"annotations\";\n  var Modifier = Vex.Flow.Modifier;\n\n  // To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.\n  function L() { if (Annotation.DEBUG) Vex.L(\"Vex.Flow.Annotation\", arguments); }\n\n  // Text annotations can be positioned and justified relative to the note.\n  Annotation.Justify = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n    CENTER_STEM: 4\n  };\n\n  Annotation.VerticalJustify = {\n    TOP: 1,\n    CENTER: 2,\n    BOTTOM: 3,\n    CENTER_STEM: 4\n  };\n\n  // Arrange annotations within a `ModifierContext`\n  Annotation.format = function(annotations, state) {\n    if (!annotations || annotations.length === 0) return false;\n\n    var width = 0;\n    for (var i = 0; i < annotations.length; ++i) {\n      var annotation = annotations[i];\n      width = Math.max(annotation.getWidth(), width);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line++;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line++;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  };\n\n  // ## Prototype Methods\n  //\n  // Annotations inherit from `Modifier` and is positioned correctly when\n  // in a `ModifierContext`.\n  Vex.Inherit(Annotation, Modifier, {\n    // Create a new `Annotation` with the string `text`.\n    init: function(text) {\n      Annotation.superclass.init.call(this);\n\n      this.note = null;\n      this.index = null;\n      this.text = text;\n      this.justification = Annotation.Justify.CENTER;\n      this.vert_justification = Annotation.VerticalJustify.TOP;\n      this.font = {\n        family: \"Arial\",\n        size: 10,\n        weight: \"\"\n      };\n\n      // The default width is calculated from the text.\n      this.setWidth(Vex.Flow.textWidth(text));\n    },\n\n    // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n    setFont: function(family, size, weight) {\n      this.font = { family: family, size: size, weight: weight };\n      return this;\n    },\n\n    // Set vertical position of text (above or below stave). `just` must be\n    // a value in `Annotation.VerticalJustify`.\n    setVerticalJustification: function(just) {\n      this.vert_justification = just;\n      return this;\n    },\n\n    // Get and set horizontal justification. `justification` is a value in\n    // `Annotation.Justify`.\n    getJustification: function() { return this.justification; },\n    setJustification: function(justification) {\n      this.justification = justification; return this; },\n\n    // Render text beside the note.\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw text annotation without a context.\");\n      if (!this.note) throw new Vex.RERR(\"NoNoteForAnnotation\",\n        \"Can't draw text annotation without an attached note.\");\n\n      var start = this.note.getModifierStartXY(Modifier.Position.ABOVE,\n          this.index);\n\n      // We're changing context parameters. Save current state.\n      this.context.save();\n      this.context.setFont(this.font.family, this.font.size, this.font.weight);\n      var text_width = this.context.measureText(this.text).width;\n\n      // Estimate text height to be the same as the width of an 'm'.\n      //\n      // This is a hack to work around the inability to measure text height\n      // in HTML5 Canvas (and SVG).\n      var text_height = this.context.measureText(\"m\").width;\n      var x, y;\n\n      if (this.justification == Annotation.Justify.LEFT) {\n        x = start.x;\n      } else if (this.justification == Annotation.Justify.RIGHT) {\n        x = start.x - text_width;\n      } else if (this.justification == Annotation.Justify.CENTER) {\n        x = start.x - text_width / 2;\n      } else /* CENTER_STEM */ {\n        x = this.note.getStemX() - text_width / 2;\n      }\n\n      var stem_ext, spacing;\n      var has_stem = this.note.hasStem();\n      var stave = this.note.getStave();\n\n      // The position of the text varies based on whether or not the note\n      // has a stem.\n      if (has_stem) {\n        stem_ext = this.note.getStem().getExtents();\n        spacing = stave.getSpacingBetweenLines();\n      }\n\n      if (this.vert_justification == Annotation.VerticalJustify.BOTTOM) {\n        y = stave.getYForBottomText(this.text_line);\n        if (has_stem) {\n          var stem_base = (this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY);\n          y = Math.max(y, stem_base + (spacing * (this.text_line + 2)));\n        }\n      } else if (this.vert_justification ==\n                 Annotation.VerticalJustify.CENTER) {\n        var yt = this.note.getYForTopText(this.text_line) - 1;\n        var yb = stave.getYForBottomText(this.text_line);\n        y = yt + ( yb - yt ) / 2 + text_height / 2;\n      } else if (this.vert_justification ==\n                 Annotation.VerticalJustify.TOP) {\n        y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);\n        if (has_stem) {\n          y = Math.min(y, (stem_ext.topY - 5) - (spacing * this.text_line));\n        }\n      } else /* CENTER_STEM */{\n        var extents = this.note.getStemExtents();\n        y = extents.topY + (extents.baseY - extents.topY) / 2 +\n          text_height / 2;\n      }\n\n      L(\"Rendering annotation: \", this.text, x, y);\n      this.context.fillText(this.text, x, y);\n      this.context.restore();\n    }\n  });\n\n  return Annotation;\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n//\n// ## Description\n//\n// This file implements articulations and accents as modifiers that can be\n// attached to notes. The complete list of articulations is available in\n// `tables.js` under `Vex.Flow.articulationCodes`.\n//\n// See `tests/articulation_tests.js` for usage examples.\n\nVex.Flow.Articulation = (function() {\n  function Articulation(type) {\n    if (arguments.length > 0) this.init(type);\n  }\n  Articulation.CATEGORY = \"articulations\";\n\n  // To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.\n  function L() { if (Articulation.DEBUG) Vex.L(\"Vex.Flow.Articulation\", arguments); }\n\n  var Modifier = Vex.Flow.Modifier;\n\n  // ## Static Methods\n  // Arrange articulations inside `ModifierContext`\n  Articulation.format = function(articulations, state) {\n    if (!articulations || articulations.length === 0) return false;\n\n    var width = 0;\n    for (var i = 0; i < articulations.length; ++i) {\n      var increment = 1;\n      var articulation = articulations[i];\n      width = Math.max(articulation.getWidth(), width);\n\n      var type = Vex.Flow.articulationCodes(articulation.type);\n\n      if (!type.between_lines) increment += 1.5;\n\n      if (articulation.getPosition() === Modifier.Position.ABOVE) {\n        articulation.setTextLine(state.top_text_line);\n        state.top_text_line += increment;\n      } else {\n        articulation.setTextLine(state.text_line);\n        state.text_line += increment;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  };\n\n  // ## Prototype Methods\n  Vex.Inherit(Articulation, Modifier, {\n    // Create a new articulation of type `type`, which is an entry in\n    // `Vex.Flow.articulationCodes` in `tables.js`.\n    init: function(type) {\n      Articulation.superclass.init.call(this);\n\n      this.note = null;\n      this.index = null;\n      this.type = type;\n      this.position = Modifier.Position.BELOW;\n\n      this.render_options = {\n        font_scale: 38\n      };\n\n      this.articulation = Vex.Flow.articulationCodes(this.type);\n      if (!this.articulation) throw new Vex.RERR(\"ArgumentError\",\n         \"Articulation not found: '\" + this.type + \"'\");\n\n      // Default width comes from articulation table.\n      this.setWidth(this.articulation.width);\n    },\n\n    // Render articulation in position next to note.\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw Articulation without a context.\");\n      if (!(this.note && (this.index !== null))) throw new Vex.RERR(\"NoAttachedNote\",\n        \"Can't draw Articulation without a note and index.\");\n\n      var stem_direction = this.note.getStemDirection();\n      var stave = this.note.getStave();\n\n      var is_on_head = (this.position === Modifier.Position.ABOVE &&\n                        stem_direction === Vex.Flow.StaveNote.STEM_DOWN) ||\n                       (this.position === Modifier.Position.BELOW &&\n                        stem_direction === Vex.Flow.StaveNote.STEM_UP);\n\n      var needsLineAdjustment = function(articulation, note_line, line_spacing) {\n        var offset_direction = (articulation.position === Modifier.Position.ABOVE) ? 1 : -1;\n        var duration = articulation.getNote().getDuration();\n        if(!is_on_head && Vex.Flow.durationToNumber(duration) <= 1){\n          // Add stem length, unless it's on a whole note.\n          note_line += offset_direction * 3.5;\n        }\n\n        var articulation_line = note_line + (offset_direction * line_spacing);\n\n        if(articulation_line >= 1 &&\n           articulation_line <= 5 &&\n           articulation_line % 1 === 0){\n          return true;\n        }\n\n        return false;\n      };\n\n      // Articulations are centered over/under the note head.\n      var start = this.note.getModifierStartXY(this.position, this.index);\n      var glyph_y = start.y;\n      var shiftY = 0;\n      var line_spacing = 1;\n      var spacing = stave.getSpacingBetweenLines();\n      var is_tabnote = this.note.getCategory() === 'tabnotes';\n      var stem_ext = this.note.getStem().getExtents();\n\n      var top = stem_ext.topY;\n      var bottom = stem_ext.baseY;\n\n      if (stem_direction === Vex.Flow.StaveNote.STEM_DOWN) {\n        top = stem_ext.baseY;\n        bottom = stem_ext.topY;\n      }\n\n      // TabNotes don't have stems attached to them. Tab stems are rendered\n      // outside the stave.\n      if (is_tabnote) {\n        if (this.note.hasStem()){\n          if (stem_direction === Vex.Flow.StaveNote.STEM_UP) {\n            bottom = stave.getYForBottomText(this.text_line - 2);\n          } else if (stem_direction === Vex.Flow.StaveNote.STEM_DOWN ) {\n            top = stave.getYForTopText(this.text_line - 1.5);\n          }\n        } else { // Without a stem\n          top = stave.getYForTopText(this.text_line - 1);\n          bottom = stave.getYForBottomText(this.text_line - 2);\n        }\n      }\n\n      var is_above = (this.position === Modifier.Position.ABOVE) ? true : false;\n      var note_line = this.note.getLineNumber(is_above);\n\n      // Beamed stems are longer than quarter note stems.\n      if (!is_on_head && this.note.beam) line_spacing += 0.5;\n\n      // If articulation will overlap a line, reposition it.\n      if (needsLineAdjustment(this, note_line, line_spacing)) line_spacing += 0.5;\n\n      var glyph_y_between_lines;\n      if (this.position === Modifier.Position.ABOVE) {\n        shiftY = this.articulation.shift_up;\n        glyph_y_between_lines = (top - 7) - (spacing * (this.text_line + line_spacing));\n\n        if (this.articulation.between_lines) {\n          glyph_y = glyph_y_between_lines;\n        } else {\n          glyph_y = Math.min(stave.getYForTopText(this.text_line) - 3, glyph_y_between_lines);\n        }\n      } else {\n        shiftY = this.articulation.shift_down - 10;\n\n        glyph_y_between_lines = bottom + 10 + spacing * (this.text_line + line_spacing);\n        if (this.articulation.between_lines) {\n          glyph_y = glyph_y_between_lines;\n        } else {\n          glyph_y = Math.max(stave.getYForBottomText(this.text_line), glyph_y_between_lines);\n        }\n      }\n\n      var glyph_x = start.x + this.articulation.shift_right;\n      glyph_y += shiftY + this.y_shift;\n\n      L(\"Rendering articulation: \", this.articulation, glyph_x, glyph_y);\n      Vex.Flow.renderGlyph(this.context, glyph_x, glyph_y,\n                           this.render_options.font_scale, this.articulation.code);\n    }\n  });\n\n  return Articulation;\n}());","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements varies types of tunings for tablature.\n\n/**\n * @constructor\n */\nVex.Flow.Tuning = (function() {\n  function Tuning(tuningString) {\n    this.init(tuningString);\n  }\n\n  Tuning.names = {\n    \"standard\": \"E/5,B/4,G/4,D/4,A/3,E/3\",\n    \"dagdad\": \"D/5,A/4,G/4,D/4,A/3,D/3\",\n    \"dropd\": \"E/5,B/4,G/4,D/4,A/3,D/3\",\n    \"eb\": \"Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3\",\n    \"standardBanjo\": \"D/5,B/4,G/4,D/4,G/5\"\n  };\n\n  Tuning.prototype = {\n    init: function(tuningString) {\n      // Default to standard tuning.\n      this.setTuning(tuningString || \"E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2\");\n    },\n\n    noteToInteger: function(noteString) {\n      return Vex.Flow.keyProperties(noteString).int_value;\n    },\n\n    setTuning: function(noteString) {\n      if (Vex.Flow.Tuning.names[noteString])\n        noteString = Vex.Flow.Tuning.names[noteString];\n\n      this.tuningString = noteString;\n      this.tuningValues = [];\n      this.numStrings = 0;\n\n      var keys = noteString.split(/\\s*,\\s*/);\n      if (keys.length === 0)\n        throw new Vex.RERR(\"BadArguments\", \"Invalid tuning string: \" + noteString);\n\n      this.numStrings = keys.length;\n      for (var i = 0; i < this.numStrings; ++i) {\n        this.tuningValues[i] = this.noteToInteger(keys[i]);\n      }\n    },\n\n    getValueForString: function(stringNum) {\n      var s = parseInt(stringNum, 10);\n      if (s < 1 || s > this.numStrings)\n        throw new Vex.RERR(\"BadArguments\", \"String number must be between 1 and \" +\n            this.numStrings + \": \" + stringNum);\n\n      return this.tuningValues[s - 1];\n    },\n\n    getValueForFret: function(fretNum, stringNum) {\n      var stringValue = this.getValueForString(stringNum);\n      var f = parseInt(fretNum, 10);\n\n      if (f < 0) {\n        throw new Vex.RERR(\"BadArguments\", \"Fret number must be 0 or higher: \" +\n            fretNum);\n      }\n\n      return stringValue + f;\n    },\n\n    getNoteForFret: function(fretNum, stringNum) {\n      var noteValue = this.getValueForFret(fretNum, stringNum);\n\n      var octave = Math.floor(noteValue / 12);\n      var value = noteValue % 12;\n\n      return Vex.Flow.integerToNote(value) + \"/\" + octave;\n    }\n  };\n\n  return Tuning;\n}());\n","// VexFlow - Music Engraving for HTML5\n//\n// A base class for stave modifiers (e.g. clefs, key signatures)\n//\n\n\n/**\n * @constructor\n */\nVex.Flow.StaveModifier = (function() {\n  function StaveModifier() {\n    this.init();\n  }\n\n  StaveModifier.Position = {\n    LEFT: 1,\n    RIGHT: 2,\n    ABOVE: 3,\n    BELOW: 4,\n    BEGIN: 5,\n    END: 6\n  };\n\n  StaveModifier.prototype = {\n    init: function() {\n      this.padding = 10;\n      this.position = StaveModifier.Position.ABOVE;\n    },\n\n    getPosition: function() { return this.position; },\n    setPosition: function(position) { this.position = position; return this; },\n    getStave: function() { return this.stave; },\n    setStave: function(stave) { this.stave = stave; return this; },\n    getWidth: function() { return this.width; },\n    setWidth: function(width) { this.width = width; return this; },\n    getX: function() { return this.x; },\n    setX: function(x) { this.x = x; return this; },\n\n    getCategory: function() {return \"\";},\n    makeSpacer: function(padding) {\n      return {\n        getContext: function() {return true;},\n        setStave: function() {},\n        renderToStave: function() {},\n        getMetrics: function() {\n          return {width: padding};\n        }\n      };\n    },\n\n    placeGlyphOnLine: function(glyph, stave, line) {\n      glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs());\n    },\n\n    getPadding: function(index) {\n      return (index !== undefined && index < 2 ? 0 : this.padding);\n    },\n    setPadding: function(padding) { this.padding = padding; return this; }\n  };\n\n  return StaveModifier;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nVex.Flow.KeySignature = (function() {\n  function KeySignature(keySpec, cancelKeySpec) {\n    if (arguments.length > 0) this.init(keySpec, cancelKeySpec);\n  }\n\n  KeySignature.category = 'keysignatures';\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  KeySignature.accidentalSpacing = {\n    '#': {\n      above: 6,\n      below: 4\n    },\n    'b': {\n      above: 4,\n      below: 7\n    },\n    'n': {\n      above: 3,\n      below: -1\n    }\n  };\n\n  // ## Prototype Methods\n  Vex.Inherit(KeySignature, Vex.Flow.StaveModifier, {\n    // Create a new Key Signature based on a `key_spec`\n    init: function(keySpec, cancelKeySpec) {\n      KeySignature.superclass.init();\n\n      this.setKeySig(keySpec, cancelKeySpec);\n      this.setPosition(Vex.Flow.StaveModifier.Position.BEGIN);\n      this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n      this.glyphs = [];\n      this.paddingForced = false;\n    },\n\n    getCategory: function() { return KeySignature.category; },\n\n    // Add an accidental glyph to the `stave`. `acc` is the data of the\n    // accidental to add. If the `next` accidental is also provided, extra\n    // width will be added to the initial accidental for optimal spacing.\n    convertToGlyph: function(acc, next) {\n      var glyph_data = Vex.Flow.accidentalCodes(acc.type);\n      var glyph = new Vex.Flow.Glyph(glyph_data.code, this.glyphFontScale);\n\n      // Determine spacing between current accidental and the next accidental\n      var extra_width = 0;\n      if (acc.type === \"n\" && next) {\n        var above = next.line >= acc.line;\n        var space = KeySignature.accidentalSpacing[next.type];\n        extra_width = above ? space.above : space.below;\n      }\n\n      var glyph_width = glyph_data.width + extra_width;\n      this.width += glyph_width;\n      // Set the width and place the glyph on the stave\n      glyph.setWidth(glyph_width);\n      this.placeGlyphOnLine(glyph, this.stave, acc.line);\n      this.glyphs.push(glyph);\n    },\n\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey: function(spec) {\n      this.formatted = false;\n      this.cancelKeySpec = spec;\n\n      return this;\n    },\n\n    convertToCancelAccList: function(spec) {\n      // Get the accidental list for the cancelled key signature\n      var cancel_accList = Vex.Flow.keySignature(spec);\n\n      // If the cancelled key has a different accidental type, ie: # vs b\n      var different_types = this.accList.length > 0 &&\n                            cancel_accList[0].type !== this.accList[0].type;\n\n      // Determine how many naturals needed to add\n      var naturals = 0;\n      if (different_types) {\n        naturals = cancel_accList.length;\n      } else {\n        naturals = cancel_accList.length - this.accList.length;\n      }\n\n      // Return if no naturals needed\n      if (naturals < 1) return;\n\n      // Get the line position for each natural\n      var cancelled = [];\n      for (var i = 0; i < naturals; i++) {\n        var index = i;\n        if (!different_types) {\n          index = cancel_accList.length - naturals + i;\n        }\n\n        var acc = cancel_accList[index];\n        cancelled.push({type: \"n\", line: acc.line});\n      }\n\n      // Combine naturals with main accidental list for the key signature\n      this.accList = cancelled.concat(this.accList);\n    },\n\n    // Deprecated\n    addToStave: function(stave, firstGlyph) {\n      this.paddingForced = true;\n      stave.addModifier(this);\n\n      return this;\n    },\n\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines: function(clef, type) {\n      var offset = 0.0; // if clef === \"treble\"\n      var customLines; // when clef doesn't follow treble key sig shape\n\n      switch (clef) {\n        // Treble & Subbass both have offsets of 0, so are not included.\n        case \"soprano\":\n          if(type === \"#\") customLines = [2.5,0.5,2,0,1.5,-0.5,1];\n          else offset = -1;\n          break;\n        case \"mezzo-soprano\":\n          if(type === \"b\") customLines = [0,2,0.5,2.5,1,3,1.5];\n          else offset = 1.5;\n          break;\n        case \"alto\":\n          offset = 0.5;\n          break;\n        case \"tenor\":\n          if(type === \"#\") customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n          else offset = -0.5;\n          break;\n        case \"baritone-f\":\n        case \"baritone-c\":\n          if(type === \"b\") customLines = [0.5,2.5,1,3,1.5,3.5,2];\n          else offset = 2;\n          break;\n        case \"bass\":\n        case \"french\":\n          offset = 1;\n          break;\n      }\n\n      // If there's a special case, assign those lines/spaces:\n      var i;\n      if (typeof customLines !== \"undefined\") {\n        for (i = 0; i < this.accList.length; ++i) {\n          this.accList[i].line = customLines[i];\n        }\n      } else if (offset !== 0) {\n        for (i = 0; i < this.accList.length; ++i) {\n          this.accList[i].line += offset;\n        }\n      }\n    },\n\n    getPadding: function(index) {\n      if (!this.formatted) this.format();\n\n      return (\n        this.glyphs.length === 0 || (!this.paddingForced && index < 2) ?\n          0 : this.padding\n      );\n    },\n\n    getWidth: function() {\n      if (!this.formatted) this.format();\n\n      return this.width;\n    },\n\n    setKeySig: function(keySpec, cancelKeySpec) {\n      this.formatted = false;\n      this.keySpec = keySpec;\n      this.cancelKeySpec = cancelKeySpec;\n\n      return this;\n    },\n\n    format: function() {\n      if (!this.stave) throw new Vex.RERR(\"KeySignatureError\", \"Can't draw key signature without stave.\");\n\n      this.width = 0;\n      this.glyphs = [];\n      this.accList = Vex.Flow.keySignature(this.keySpec);\n      if (this.cancelKeySpec !== undefined) {\n        this.convertToCancelAccList(this.cancelKeySpec);\n      }\n\n      if (this.accList.length > 0) {\n        this.convertAccLines(this.stave.clef, this.accList[0].type);\n        for (var i = 0; i < this.accList.length; ++i) {\n          this.convertToGlyph(this.accList[i], this.accList[i+1]);\n        }\n      }\n\n      this.formatted = true;\n    },\n\n    draw: function() {\n      if (!this.x) throw new Vex.RERR(\"KeySignatureError\", \"Can't draw key signature without x.\");\n      if (!this.stave) throw new Vex.RERR(\"KeySignatureError\", \"Can't draw key signature without stave.\");\n      if (!this.formatted) this.format();\n\n      var x = this.x;\n      for (var i = 0; i < this.glyphs.length; i++) {\n        var glyph = this.glyphs[i];\n        glyph.setStave(this.stave);\n        glyph.setContext(this.stave.context);\n        glyph.renderToStave(x);\n        x += glyph.getMetrics().width;\n      }\n    }\n  });\n\n  return KeySignature;\n}());\n","// Vex Flow Notation\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n//\n\n/**\n * @param {string} timeSpec time signature, i.e. \"4/4\"\n * @param {number} [customPadding] custom padding when using multi-stave/multi-instrument setting\n * to align key/time signature (in pixels), optional\n * @constructor\n */\nVex.Flow.TimeSignature = (function() {\n  function TimeSignature(timeSpec, customPadding) {\n    if (arguments.length > 0) this.init(timeSpec, customPadding);\n  }\n\n  TimeSignature.category = 'timesignatures';\n\n  TimeSignature.glyphs = {\n    \"C\": {\n      code: \"v41\",\n      point: 40,\n      line: 2\n    },\n    \"C|\": {\n      code: \"vb6\",\n      point: 40,\n      line: 2\n    }\n  };\n\n  Vex.Inherit(TimeSignature, Vex.Flow.StaveModifier, {\n    init: function(timeSpec, customPadding) {\n      TimeSignature.superclass.init();\n      var padding = customPadding || 15;\n\n      this.point = 40;\n      this.topLine = 2;\n      this.bottomLine = 4;\n      this.setPosition(Vex.Flow.StaveModifier.Position.BEGIN);\n      this.setTimeSig(timeSpec);\n      this.setWidth(this.timeSig.glyph.getMetrics().width);\n      this.setPadding(padding);\n    },\n\n    getCategory: function() { return TimeSignature.category; },\n\n    parseTimeSpec: function(timeSpec) {\n      if (timeSpec == \"C\" || timeSpec == \"C|\") {\n        var glyphInfo = TimeSignature.glyphs[timeSpec];\n        return {num: false, line: glyphInfo.line,\n          glyph: new Vex.Flow.Glyph(glyphInfo.code, glyphInfo.point)};\n      }\n\n      var topNums = [];\n      var i, c;\n      for (i = 0; i < timeSpec.length; ++i) {\n        c = timeSpec.charAt(i);\n        if (c == \"/\") {\n          break;\n        }\n        else if (/[0-9]/.test(c)) {\n          topNums.push(c);\n        }\n        else {\n          throw new Vex.RERR(\"BadTimeSignature\",\n              \"Invalid time spec: \" + timeSpec);\n        }\n      }\n\n      if (i === 0) {\n        throw new Vex.RERR(\"BadTimeSignature\",\n              \"Invalid time spec: \" + timeSpec);\n      }\n\n      // skip the \"/\"\n      ++i;\n\n      if (i == timeSpec.length) {\n        throw new Vex.RERR(\"BadTimeSignature\",\n              \"Invalid time spec: \" + timeSpec);\n      }\n\n\n      var botNums = [];\n      for (; i < timeSpec.length; ++i) {\n        c = timeSpec.charAt(i);\n        if (/[0-9]/.test(c)) {\n          botNums.push(c);\n        }\n        else {\n          throw new Vex.RERR(\"BadTimeSignature\",\n              \"Invalid time spec: \" + timeSpec);\n        }\n      }\n\n\n      return {num: true, glyph: this.makeTimeSignatureGlyph(topNums, botNums)};\n    },\n\n    makeTimeSignatureGlyph: function(topNums, botNums) {\n      var glyph = new Vex.Flow.Glyph(\"v0\", this.point);\n      glyph[\"topGlyphs\"] = [];\n      glyph[\"botGlyphs\"] = [];\n\n      var topWidth = 0;\n      var i, num;\n      for (i = 0; i < topNums.length; ++i) {\n        num = topNums[i];\n        var topGlyph = new Vex.Flow.Glyph(\"v\" + num, this.point);\n\n        glyph.topGlyphs.push(topGlyph);\n        topWidth += topGlyph.getMetrics().width;\n      }\n\n      var botWidth = 0;\n      for (i = 0; i < botNums.length; ++i) {\n        num = botNums[i];\n        var botGlyph = new Vex.Flow.Glyph(\"v\" + num, this.point);\n\n        glyph.botGlyphs.push(botGlyph);\n        botWidth += botGlyph.getMetrics().width;\n      }\n\n      var width = (topWidth > botWidth ? topWidth : botWidth);\n      var xMin = glyph.getMetrics().x_min;\n\n      glyph.getMetrics = function() {\n        return {\n          x_min: xMin,\n          x_max: xMin + width,\n          width: width\n        };\n      };\n\n      var topStartX = (width - topWidth) / 2.0;\n      var botStartX = (width - botWidth) / 2.0;\n\n      var that = this;\n      glyph.renderToStave = function(x) {\n        var start_x = x + topStartX;\n        var i, g;\n        for (i = 0; i < this.topGlyphs.length; ++i) {\n          g = this.topGlyphs[i];\n          Vex.Flow.Glyph.renderOutline(this.context, g.metrics.outline,\n              g.scale, start_x + g.x_shift, this.stave.getYForLine(that.topLine) + 1);\n          start_x += g.getMetrics().width;\n        }\n\n        start_x = x + botStartX;\n        for (i = 0; i < this.botGlyphs.length; ++i) {\n          g = this.botGlyphs[i];\n          that.placeGlyphOnLine(g, this.stave, g.line);\n          Vex.Flow.Glyph.renderOutline(this.context, g.metrics.outline,\n              g.scale, start_x + g.x_shift, this.stave.getYForLine(that.bottomLine) + 1);\n          start_x += g.getMetrics().width;\n        }\n      };\n\n      return glyph;\n    },\n\n    getTimeSig: function() {\n      return this.timeSig;\n    },\n\n    setTimeSig: function(timeSpec) {\n      this.timeSig = this.parseTimeSpec(timeSpec);\n      return this;\n    },\n\n    draw: function() {\n      if (!this.x) throw new Vex.RERR(\"TimeSignatureError\", \"Can't draw time signature without x.\");\n      if (!this.stave) throw new Vex.RERR(\"TimeSignatureError\", \"Can't draw time signature without stave.\");\n\n      this.timeSig.glyph.setStave(this.stave);\n      this.timeSig.glyph.setContext(this.stave.context);\n      this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);\n      this.timeSig.glyph.renderToStave(this.x);\n    }\n  });\n\n  return TimeSignature;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n//\n// ## Description\n//\n// This file implements various types of clefs that can be rendered on a stave.\n//\n// See `tests/clef_tests.js` for usage examples.\n\nVex.Flow.Clef = (function() {\n  function Clef(type, size, annotation) {\n    if (arguments.length > 0) this.init(type, size, annotation);\n  }\n\n  // To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.\n  function L() { if (Vex.Flow.Clef.DEBUG) Vex.L(\"Vex.Flow.Clef\", arguments); }\n\n  Clef.category = 'clefs';\n\n  // Every clef name is associated with a glyph code from the font file\n  // and a default stave line number.\n  Clef.types = {\n    \"treble\": {\n      code: \"v83\",\n      line: 3\n    },\n    \"bass\": {\n      code: \"v79\",\n      line: 1\n    },\n    \"alto\": {\n      code: \"vad\",\n      line: 2\n    },\n    \"tenor\": {\n      code: \"vad\",\n      line: 1\n    },\n    \"percussion\": {\n      code: \"v59\",\n      line: 2\n    },\n    \"soprano\": {\n      code: \"vad\",\n      line: 4\n    },\n    \"mezzo-soprano\": {\n      code: \"vad\",\n      line: 3\n    },\n    \"baritone-c\": {\n      code: \"vad\",\n      line: 0\n    },\n    \"baritone-f\": {\n      code: \"v79\",\n      line: 2\n    },\n    \"subbass\": {\n      code: \"v79\",\n      line: 0\n    },\n    \"french\": {\n      code: \"v83\",\n      line: 4\n    },\n    \"tab\": {\n      code: \"v2f\"\n    }\n  };\n  // Sizes affect the point-size of the clef.\n  Clef.sizes = {\n    \"default\": 40,\n    \"small\": 32\n  };\n\n  // Annotations attach to clefs -- such as \"8\" for octave up or down.\n  Clef.annotations = {\n    \"8va\": {\n      code: \"v8\",\n      sizes: {\n        \"default\": {\n          point: 20,\n          attachments: {\n            \"treble\": {\n              line: -1.2,\n              x_shift: 11\n            }\n          }\n        },\n        \"small\": {\n          point: 18,\n          attachments: {\n            \"treble\": {\n              line: -0.4,\n              x_shift: 8\n            }\n          }\n        }\n      }\n    },\n    \"8vb\": {\n      code: \"v8\",\n      sizes: {\n        \"default\": {\n          point: 20,\n          attachments: {\n            \"treble\": {\n              line: 6.3,\n              x_shift: 10\n            },\n            \"bass\": {\n              line: 4,\n              x_shift: 1\n            }\n          }\n        },\n        \"small\": {\n          point: 18,\n          attachments: {\n            \"treble\": {\n              line: 5.8,\n              x_shift: 6\n            },\n            \"bass\": {\n              line: 3.5,\n              x_shift: 0.5\n            }\n          }\n        }\n      }\n    },\n  };\n  // ## Prototype Methods\n  Vex.Inherit(Clef, Vex.Flow.StaveModifier, {\n    // Create a new clef. The parameter `clef` must be a key from\n    // `Clef.types`.\n    init: function(type, size, annotation) {\n      var superclass = Vex.Flow.Clef.superclass;\n      superclass.init.call(this);\n\n      this.setPosition(Vex.Flow.StaveModifier.Position.BEGIN);\n      this.setType(type, size, annotation);\n      this.setWidth(this.glyph.getMetrics().width);\n      L(\"Creating clef:\", type);\n    },\n\n    getCategory: function() { return Clef.category; },\n\n    setType: function(type, size, annotation) {\n      this.type = type;\n      this.clef = Vex.Flow.Clef.types[type];\n      if (size === undefined) {\n        this.size = \"default\";\n      } else {\n        this.size = size;\n      }\n      this.clef.point = Vex.Flow.Clef.sizes[this.size];\n      this.glyph = new Vex.Flow.Glyph(this.clef.code, this.clef.point);\n\n      // If an annotation, such as 8va, is specified, add it to the Clef object.\n      if (annotation !== undefined) {\n        var anno_dict = Vex.Flow.Clef.annotations[annotation];\n        this.annotation = {\n          code: anno_dict.code,\n          point: anno_dict.sizes[this.size].point,\n          line: anno_dict.sizes[this.size].attachments[this.type].line,\n          x_shift: anno_dict.sizes[this.size].attachments[this.type].x_shift\n        };\n\n        this.attachment = new Vex.Flow.Glyph(this.annotation.code, this.annotation.point);\n        this.attachment.metrics.x_max = 0;\n        this.attachment.setXShift(this.annotation.x_shift);\n      }\n      else {\n        this.annotation = undefined;\n      }\n\n      return this;\n    },\n\n    getWidth: function() {\n      if (this.type === 'tab' && !this.stave) {\n        throw new Vex.RERR(\"ClefError\", \"Can't get width without stave.\");\n      }\n\n      return this.width;\n    },\n\n    setStave: function(stave) {\n      this.stave = stave;\n\n      if (this.type !== 'tab') return;\n\n      var glyphScale;\n      var glyphOffset;\n      switch(this.stave.getOptions().num_lines) {\n        case 8:\n          glyphScale = 55;\n          glyphOffset = 14;\n          break;\n        case 7:\n          glyphScale = 47;\n          glyphOffset = 8;\n          break;\n        case 6:\n          glyphScale = 40;\n          glyphOffset = 1;\n          break;\n        case 5:\n          glyphScale = 30;\n          glyphOffset = -6;\n          break;\n        case 4:\n          glyphScale = 23;\n          glyphOffset = -12;\n          break;\n      }\n\n      this.glyph.setPoint(glyphScale);\n      this.glyph.setYShift(glyphOffset);\n\n      return this;\n    },\n\n    draw: function() {\n      if (!this.x) throw new Vex.RERR(\"ClefError\", \"Can't draw clef without x.\");\n      if (!this.stave) throw new Vex.RERR(\"ClefError\", \"Can't draw clef without stave.\");\n\n      this.glyph.setStave(this.stave);\n      this.glyph.setContext(this.stave.context);\n      if (this.clef.line !== undefined) {\n        this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);\n      }\n\n      this.glyph.renderToStave(this.x);\n\n      if (this.annotation !== undefined) {\n        this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);\n        this.attachment.setStave(this.stave);\n        this.attachment.setContext(this.stave.context);\n        this.attachment.renderToStave(this.x);\n      }\n    }\n  });\n\n  return Clef;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements some standard music theory routines.\n//\n// requires: vex.js   (Vex)\n// requires: flow.js  (Vex.Flow)\n\n/**\n * @constructor\n */\nVex.Flow.Music = (function() {\n  function Music() {\n    this.init();\n  }\n\n  Music.NUM_TONES = 12;\n  Music.roots = [ \"c\", \"d\", \"e\", \"f\", \"g\", \"a\", \"b\" ];\n  Music.root_values = [ 0, 2, 4, 5, 7, 9, 11 ];\n  Music.root_indices = {\n    \"c\": 0,\n    \"d\": 1,\n    \"e\": 2,\n    \"f\": 3,\n    \"g\": 4,\n    \"a\": 5,\n    \"b\": 6\n  };\n\n  Music.canonical_notes = [\n    \"c\", \"c#\", \"d\", \"d#\",\n    \"e\", \"f\", \"f#\", \"g\",\n    \"g#\", \"a\", \"a#\", \"b\"\n  ];\n\n  Music.diatonic_intervals = [\n    \"unison\", \"m2\", \"M2\", \"m3\", \"M3\",\n    \"p4\", \"dim5\", \"p5\", \"m6\", \"M6\",\n    \"b7\", \"M7\", \"octave\"\n  ];\n\n  Music.diatonic_accidentals = {\n    \"unison\": {note: 0, accidental: 0},\n    \"m2\":     {note: 1, accidental: -1},\n    \"M2\":     {note: 1, accidental: 0},\n    \"m3\":     {note: 2, accidental: -1},\n    \"M3\":     {note: 2, accidental: 0},\n    \"p4\":     {note: 3, accidental: 0},\n    \"dim5\":   {note: 4, accidental: -1},\n    \"p5\":     {note: 4, accidental: 0},\n    \"m6\":     {note: 5, accidental: -1},\n    \"M6\":     {note: 5, accidental: 0},\n    \"b7\":     {note: 6, accidental: -1},\n    \"M7\":     {note: 6, accidental: 0},\n    \"octave\": {note: 7, accidental: 0}\n  };\n\n  Music.intervals = {\n    \"u\":  0, \"unison\": 0,\n    \"m2\": 1, \"b2\": 1, \"min2\": 1, \"S\": 1, \"H\": 1,\n    \"2\": 2, \"M2\": 2, \"maj2\": 2, \"T\": 2, \"W\": 2,\n    \"m3\": 3, \"b3\": 3, \"min3\": 3,\n    \"M3\": 4, \"3\": 4, \"maj3\": 4,\n    \"4\":  5, \"p4\":  5,\n    \"#4\": 6, \"b5\": 6, \"aug4\": 6, \"dim5\": 6,\n    \"5\":  7, \"p5\":  7,\n    \"#5\": 8, \"b6\": 8, \"aug5\": 8,\n    \"6\":  9, \"M6\":  9, \"maj6\": 9,\n    \"b7\": 10, \"m7\": 10, \"min7\": 10, \"dom7\": 10,\n    \"M7\": 11, \"maj7\": 11,\n    \"8\": 12, \"octave\": 12\n  };\n\n  Music.scales = {\n    major: [2, 2, 1, 2, 2, 2, 1],\n    dorian: [2, 1, 2, 2, 2, 1, 2],\n    mixolydian: [2, 2, 1, 2, 2, 1, 2],\n    minor: [2, 1, 2, 2, 1, 2, 2]\n  };\n\n  Music.accidentals = [ \"bb\", \"b\", \"n\", \"#\", \"##\" ];\n\n  Music.noteValues = {\n    'c':   { root_index: 0, int_val: 0 },\n    'cn':  { root_index: 0, int_val: 0 },\n    'c#':  { root_index: 0, int_val: 1 },\n    'c##': { root_index: 0, int_val: 2 },\n    'cb':  { root_index: 0, int_val: 11 },\n    'cbb': { root_index: 0, int_val: 10 },\n    'd':   { root_index: 1, int_val: 2 },\n    'dn':  { root_index: 1, int_val: 2 },\n    'd#':  { root_index: 1, int_val: 3 },\n    'd##': { root_index: 1, int_val: 4 },\n    'db':  { root_index: 1, int_val: 1 },\n    'dbb': { root_index: 1, int_val: 0 },\n    'e':   { root_index: 2, int_val: 4 },\n    'en':  { root_index: 2, int_val: 4 },\n    'e#':  { root_index: 2, int_val: 5 },\n    'e##': { root_index: 2, int_val: 6 },\n    'eb':  { root_index: 2, int_val: 3 },\n    'ebb': { root_index: 2, int_val: 2 },\n    'f':   { root_index: 3, int_val: 5 },\n    'fn':  { root_index: 3, int_val: 5 },\n    'f#':  { root_index: 3, int_val: 6 },\n    'f##': { root_index: 3, int_val: 7 },\n    'fb':  { root_index: 3, int_val: 4 },\n    'fbb': { root_index: 3, int_val: 3 },\n    'g':   { root_index: 4, int_val: 7 },\n    'gn':  { root_index: 4, int_val: 7 },\n    'g#':  { root_index: 4, int_val: 8 },\n    'g##': { root_index: 4, int_val: 9 },\n    'gb':  { root_index: 4, int_val: 6 },\n    'gbb': { root_index: 4, int_val: 5 },\n    'a':   { root_index: 5, int_val: 9 },\n    'an':  { root_index: 5, int_val: 9 },\n    'a#':  { root_index: 5, int_val: 10 },\n    'a##': { root_index: 5, int_val: 11 },\n    'ab':  { root_index: 5, int_val: 8 },\n    'abb': { root_index: 5, int_val: 7 },\n    'b':   { root_index: 6, int_val: 11 },\n    'bn':  { root_index: 6, int_val: 11 },\n    'b#':  { root_index: 6, int_val: 0 },\n    'b##': { root_index: 6, int_val: 1 },\n    'bb':  { root_index: 6, int_val: 10 },\n    'bbb': { root_index: 6, int_val: 9 }\n  };\n\n  Music.prototype = {\n    init: function() {},\n\n    isValidNoteValue: function(note) {\n      if (note == null || note < 0 || note >= Vex.Flow.Music.NUM_TONES)\n        return false;\n      return true;\n    },\n\n    isValidIntervalValue: function(interval) {\n      return this.isValidNoteValue(interval);\n    },\n\n    getNoteParts: function(noteString) {\n      if (!noteString || noteString.length < 1)\n        throw new Vex.RERR(\"BadArguments\", \"Invalid note name: \" + noteString);\n\n      if (noteString.length > 3)\n        throw new Vex.RERR(\"BadArguments\", \"Invalid note name: \" + noteString);\n\n      var note = noteString.toLowerCase();\n\n      var regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n      var match = regex.exec(note);\n\n      if (match != null) {\n        var root = match[1];\n        var accidental = match[2];\n\n        return {\n          'root': root,\n          'accidental': accidental\n        };\n      } else {\n        throw new Vex.RERR(\"BadArguments\", \"Invalid note name: \" + noteString);\n      }\n    },\n\n    getKeyParts: function(keyString) {\n      if (!keyString || keyString.length < 1)\n        throw new Vex.RERR(\"BadArguments\", \"Invalid key: \" + keyString);\n\n      var key = keyString.toLowerCase();\n\n      // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n      var regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n      var match = regex.exec(key);\n\n      if (match != null) {\n        var root = match[1];\n        var accidental = match[2];\n        var type = match[3];\n\n        // Unspecified type implies major\n        if (!type) type = \"M\";\n\n        return {\n          'root': root,\n          'accidental': accidental,\n          'type': type\n        };\n      } else {\n        throw new Vex.RERR(\"BadArguments\", \"Invalid key: \" + keyString);\n      }\n    },\n\n    getNoteValue: function(noteString) {\n      var value = Music.noteValues[noteString];\n      if (value == null)\n        throw new Vex.RERR(\"BadArguments\", \"Invalid note name: \" + noteString);\n\n      return value.int_val;\n    },\n\n    getIntervalValue: function(intervalString) {\n      var value = Music.intervals[intervalString];\n      if (value == null)\n        throw new Vex.RERR(\"BadArguments\",\n                           \"Invalid interval name: \" + intervalString);\n\n      return value;\n    },\n\n    getCanonicalNoteName: function(noteValue) {\n      if (!this.isValidNoteValue(noteValue))\n        throw new Vex.RERR(\"BadArguments\",\n                           \"Invalid note value: \" + noteValue);\n\n      return Music.canonical_notes[noteValue];\n    },\n\n    getCanonicalIntervalName: function(intervalValue) {\n      if (!this.isValidIntervalValue(intervalValue))\n        throw new Vex.RERR(\"BadArguments\",\n                           \"Invalid interval value: \" + intervalValue);\n\n      return Music.diatonic_intervals[intervalValue];\n    },\n\n    /* Given a note, interval, and interval direction, product the\n     * relative note.\n     */\n    getRelativeNoteValue: function(noteValue, intervalValue, direction) {\n      if (direction == null) direction = 1;\n      if (direction != 1 && direction != -1)\n        throw new Vex.RERR(\"BadArguments\", \"Invalid direction: \" + direction);\n\n      var sum = (noteValue + (direction * intervalValue)) % Music.NUM_TONES;\n      if (sum < 0) sum += Music.NUM_TONES;\n\n      return sum;\n    },\n\n    getRelativeNoteName: function(root, noteValue) {\n      var parts = this.getNoteParts(root);\n      var rootValue = this.getNoteValue(parts.root);\n      var interval = noteValue - rootValue;\n\n      if (Math.abs(interval) > Music.NUM_TONES - 3) {\n        var multiplier = 1;\n        if (interval > 0 ) multiplier = -1;\n\n        // Possibly wrap around. (Add +1 for modulo operator)\n        var reverse_interval = (((noteValue + 1) + (rootValue + 1)) %\n          Music.NUM_TONES) * multiplier;\n\n        if (Math.abs(reverse_interval) > 2) {\n          throw new Vex.RERR(\"BadArguments\", \"Notes not related: \" + root + \", \" +\n                            noteValue);\n        } else {\n          interval = reverse_interval;\n        }\n      }\n\n      if (Math.abs(interval) > 2)\n          throw new Vex.RERR(\"BadArguments\", \"Notes not related: \" + root + \", \" +\n                            noteValue);\n\n      var relativeNoteName = parts.root;\n      var i;\n      if (interval > 0) {\n        for (i = 1; i <= interval; ++i)\n          relativeNoteName += \"#\";\n      } else if (interval < 0) {\n        for (i = -1; i >= interval; --i)\n          relativeNoteName += \"b\";\n      }\n\n      return relativeNoteName;\n    },\n\n    /* Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones: function(key, intervals) {\n      var tones = [];\n      tones.push(key);\n\n      var nextNote = key;\n      for (var i = 0; i < intervals.length; ++i) {\n        nextNote = this.getRelativeNoteValue(nextNote,\n                                             intervals[i]);\n        if (nextNote != key) tones.push(nextNote);\n      }\n\n      return tones;\n    },\n\n    /* Returns the interval of a note, given a diatonic scale.\n     *\n     * E.g., Given the scale C, and the note E, returns M3\n     */\n    getIntervalBetween: function(note1, note2, direction) {\n      if (direction == null) direction = 1;\n      if (direction != 1 && direction != -1)\n        throw new Vex.RERR(\"BadArguments\", \"Invalid direction: \" + direction);\n      if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2))\n        throw new Vex.RERR(\"BadArguments\",\n                           \"Invalid notes: \" + note1 + \", \" + note2);\n\n      var difference;\n      if (direction == 1)\n        difference = note2 - note1;\n      else\n        difference = note1 - note2;\n\n      if (difference < 0) difference += Music.NUM_TONES;\n      return difference;\n    },\n\n    // Create a scale map that represents the pitch state for a\n    // `keySignature`. For example, passing a `G` to `keySignature` would \n    // return a scale map with every note naturalized except for `F` which\n    // has an `F#` state.\n    createScaleMap: function(keySignature) {\n      var keySigParts = this.getKeyParts(keySignature);\n      var scaleName = Vex.Flow.KeyManager.scales[keySigParts.type];\n\n      var keySigString = keySigParts.root;\n      if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n      if (!scaleName) throw new Vex.RERR(\"BadArguments\", \"Unsupported key type: \" + keySignature);\n\n      var scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n      var noteLocation = Vex.Flow.Music.root_indices[keySigParts.root];\n\n      var scaleMap = {};\n      for (var i = 0; i < Vex.Flow.Music.roots.length; ++i) {\n        var index = (noteLocation + i) % Vex.Flow.Music.roots.length;\n        var rootName = Vex.Flow.Music.roots[index];\n        var noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n        if (noteName.length === 1) {\n          noteName += \"n\";\n        }\n\n        scaleMap[rootName] = noteName;\n      }\n\n      return scaleMap;\n    }\n\n  };\n\n  return Music;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements diatonic key management.\n//\n// requires: vex.js   (Vex)\n// requires: flow.js  (Vex.Flow)\n// requires: music.js (Vex.Flow.Music)\n\n/**\n * @constructor\n */\nVex.Flow.KeyManager = (function() {\n  function KeyManager(key) {\n    this.init(key);\n  }\n\n  KeyManager.scales = {\n    \"M\": Vex.Flow.Music.scales.major,\n    \"m\": Vex.Flow.Music.scales.minor\n  };\n\n  KeyManager.prototype = {\n    init: function(key) {\n      this.music = new Vex.Flow.Music();\n      this.setKey(key);\n    },\n\n    setKey: function(key) {\n      this.key = key;\n      this.reset();\n      return this;\n    },\n\n    getKey: function() { return this.key; },\n\n    reset: function() {\n      this.keyParts = this.music.getKeyParts(this.key);\n\n      this.keyString = this.keyParts.root;\n      if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n      var is_supported_type = KeyManager.scales[this.keyParts.type];\n      if (!is_supported_type)\n        throw new Vex.RERR(\"BadArguments\", \"Unsupported key type: \" + this.key);\n\n      this.scale = this.music.getScaleTones(\n          this.music.getNoteValue(this.keyString),\n          Vex.Flow.KeyManager.scales[this.keyParts.type]);\n\n      this.scaleMap = {};\n      this.scaleMapByValue = {};\n      this.originalScaleMapByValue = {};\n\n      var noteLocation = Vex.Flow.Music.root_indices[this.keyParts.root];\n\n      for (var i = 0; i < Vex.Flow.Music.roots.length; ++i) {\n        var index = (noteLocation + i) % Vex.Flow.Music.roots.length;\n        var rootName = Vex.Flow.Music.roots[index];\n\n        var noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n        this.scaleMap[rootName] = noteName;\n        this.scaleMapByValue[this.scale[i]] = noteName;\n        this.originalScaleMapByValue[this.scale[i]] = noteName;\n      }\n\n      return this;\n    },\n\n    getAccidental: function(key) {\n      var root = this.music.getKeyParts(key).root;\n      var parts = this.music.getNoteParts(this.scaleMap[root]);\n\n      return {\n        note: this.scaleMap[root],\n        accidental: parts.accidental\n      };\n    },\n\n    selectNote: function(note) {\n      note = note.toLowerCase();\n      var parts = this.music.getNoteParts(note);\n\n      // First look for matching note in our altered scale\n      var scaleNote = this.scaleMap[parts.root];\n      var modparts = this.music.getNoteParts(scaleNote);\n\n      if (scaleNote == note) return {\n        \"note\": scaleNote,\n        \"accidental\": parts.accidental,\n        \"change\": false\n      };\n\n      // Then search for a note of equivalent value in our altered scale\n      var valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n      if (valueNote != null) {\n        return {\n          \"note\": valueNote,\n          \"accidental\": this.music.getNoteParts(valueNote).accidental,\n          \"change\": false\n        };\n      }\n\n      // Then search for a note of equivalent value in the original scale\n      var originalValueNote = this.originalScaleMapByValue[\n        this.music.getNoteValue(note)];\n      if (originalValueNote != null) {\n        this.scaleMap[modparts.root] = originalValueNote;\n        delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n        return {\n          \"note\": originalValueNote,\n          \"accidental\": this.music.getNoteParts(originalValueNote).accidental,\n          \"change\": true\n        };\n      }\n\n      // Then try to unmodify a currently modified note.\n      if (modparts.root == note) {\n        delete this.scaleMapByValue[\n          this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(modparts.root)] =\n          modparts.root;\n        this.scaleMap[modparts.root] = modparts.root;\n        return {\n          \"note\": modparts.root,\n          \"accidental\": null,\n          \"change\": true\n        };\n      }\n\n      // Last resort -- shitshoot\n      delete this.scaleMapByValue[\n        this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n      delete this.scaleMap[modparts.root];\n      this.scaleMap[modparts.root] = note;\n\n      return {\n        \"note\": note,\n        \"accidental\": parts.accidental,\n        \"change\": true\n      };\n    }\n  };\n\n  return KeyManager;\n}());\n","// Vex Flow\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Support for different rendering contexts: Canvas, Raphael\n//\n// Copyright Mohit Cheppudira 2010\n\n/* global document: false */\n\nVex.Flow.Renderer = (function() {\n  function Renderer(sel, backend) {\n    if (arguments.length > 0) this.init(sel, backend);\n  }\n\n  Renderer.Backends = {\n    CANVAS: 1,\n    RAPHAEL: 2,\n    SVG: 3,\n    VML: 4\n  };\n\n  //End of line types\n  Renderer.LineEndType = {\n      NONE: 1,        // No leg\n      UP: 2,          // Upward leg\n      DOWN: 3         // Downward leg\n  };\n\n  // Set this to true if you're using VexFlow inside a runtime\n  // that does not allow modifiying canvas objects. There is a small\n  // performance degradation due to the extra indirection.\n  Renderer.USE_CANVAS_PROXY = false;\n  Renderer.lastContext = null;\n\n  Renderer.buildContext = function(sel,\n      backend, width, height, background) {\n\n    var renderer = new Renderer(sel, backend);\n    if (width && height) { renderer.resize(width, height); }\n\n    if (!background) background = \"#FFF\";\n    var ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  };\n\n  Renderer.getCanvasContext = function(sel, width, height, background) {\n    return Renderer.buildContext(sel, Renderer.Backends.CANVAS,\n        width, height, background);\n  };\n\n  Renderer.getRaphaelContext = function(sel, width, height, background) {\n    return Renderer.buildContext(sel, Renderer.Backends.RAPHAEL,\n        width, height, background);\n  };\n\n  Renderer.getSVGContext = function(sel, width, height, background) {\n    return Renderer.buildContext(sel, Renderer.Backends.SVG,\n        width, height, background);\n  };\n\n\n  Renderer.bolsterCanvasContext = function(ctx) {\n    if (Renderer.USE_CANVAS_PROXY) {\n      return new Vex.Flow.CanvasContext(ctx);\n    }\n\n    var methods = [\"clear\", \"setFont\", \"setRawFont\", \"setFillStyle\", \"setBackgroundFillStyle\",\n                   \"setStrokeStyle\", \"setShadowColor\", \"setShadowBlur\", \"setLineWidth\",\n                   \"setLineCap\", \"setLineDash\", \"openGroup\", \"closeGroup\", \"getGroup\"];\n    ctx.vexFlowCanvasContext = ctx;\n\n    for (var i in methods) {\n      var method = methods[i];\n      ctx[method] = Vex.Flow.CanvasContext.prototype[method];\n    }\n\n    return ctx;\n  };\n\n  //Draw a dashed line (horizontal, vertical or diagonal\n  //dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  //setting the second number to 0 draws a solid line.\n  Renderer.drawDashedLine = function(context, fromX, fromY, toX, toY, dashPattern) {\n    context.beginPath();\n\n    var dx = toX - fromX;\n    var dy = toY - fromY;\n    var angle = Math.atan2(dy, dx);\n    var x = fromX;\n    var y = fromY;\n    context.moveTo(fromX, fromY);\n    var idx = 0;\n    var draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      var dashLength = dashPattern[idx++ % dashPattern.length];\n      var nx = x + (Math.cos(angle) * dashLength);\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      var ny = y + (Math.sin(angle) * dashLength);\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n        draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  };\n\n  Renderer.prototype = {\n    init: function(sel, backend) {\n      // Verify selector\n      this.sel = sel;\n      if (!this.sel) throw new Vex.RERR(\"BadArgument\",\n          \"Invalid selector for renderer.\");\n\n      // Get element from selector\n      this.element = document.getElementById(sel);\n      if (!this.element) this.element = sel;\n\n      // Verify backend and create context\n      this.ctx = null;\n      this.paper = null;\n      this.backend = backend;\n      if (this.backend == Renderer.Backends.CANVAS) {\n        // Create context.\n        if (!this.element.getContext) throw new Vex.RERR(\"BadElement\",\n          \"Can't get canvas context from element: \" + sel);\n        this.ctx = Renderer.bolsterCanvasContext(\n            this.element.getContext('2d'));\n\n      } else if (this.backend == Renderer.Backends.RAPHAEL) {\n        this.ctx = new Vex.Flow.RaphaelContext(this.element);\n\n      } else if (this.backend == Renderer.Backends.SVG) {\n        this.ctx = new Vex.Flow.SVGContext(this.element);\n\n      } else {\n        throw new Vex.RERR(\"InvalidBackend\",\n          \"No support for backend: \" + this.backend);\n      }\n    },\n\n    resize: function(width, height) {\n      if (this.backend == Renderer.Backends.CANVAS) {\n        if (!this.element.getContext) throw new Vex.RERR(\"BadElement\",\n          \"Can't get canvas context from element: \" + this.sel);\n        this.element.width = width;\n        this.element.height = height;\n        this.ctx = Renderer.bolsterCanvasContext(\n            this.element.getContext('2d'));\n      } else {\n        this.ctx.resize(width, height);\n      }\n\n      return this;\n    },\n\n    getContext: function() { return this.ctx; }\n  };\n\n  return Renderer;\n}());\n\n\n","// Vex Flow\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for the Raphael backend.\n//\n// Copyright Mohit Cheppudira 2010\n\n// ## Warning: Deprecated for SVGContext\n// Except in instances where SVG support for IE < 9.0 is\n// needed, SVGContext is recommended.\n\n/** @constructor */\nVex.Flow.RaphaelContext = (function() {\n  function RaphaelContext(element) {\n    if (arguments.length > 0) this.init(element);\n  }\n\n  RaphaelContext.prototype = {\n    init: function(element) {\n      this.element = element;\n      this.paper = Raphael(element);\n      this.path = \"\";\n      this.pen = {x: 0, y: 0};\n      this.lineWidth = 1.0;\n      this.state = {\n        scale: { x: 1, y: 1 },\n        font_family: \"Arial\",\n        font_size: 8,\n        font_weight: 800\n      };\n\n      this.attributes = {\n        \"stroke-width\": 0.3,\n        \"fill\": \"black\",\n        \"stroke\": \"black\",\n        \"font\": \"10pt Arial\"\n      };\n\n      this.background_attributes = {\n        \"stroke-width\": 0,\n        \"fill\": \"white\",\n        \"stroke\": \"white\",\n        \"font\": \"10pt Arial\"\n      };\n\n      this.shadow_attributes = {\n        width: 0,\n        color: \"black\"\n      };\n\n      this.state_stack= [];\n    },\n\n    // Containers not implemented\n    openGroup: function(cls, id, attrs) {},\n    closeGroup: function() {},\n    add: function(elem) {},\n\n    setFont: function(family, size, weight) {\n      this.state.font_family = family;\n      this.state.font_size = size;\n      this.state.font_weight = weight;\n      this.attributes.font = (this.state.font_weight || \"\") + \" \" +\n        (this.state.font_size * this.state.scale.x) + \"pt \" +\n        this.state.font_family;\n      return this;\n    },\n\n    setRawFont: function(font) {\n      this.attributes.font = font;\n      return this;\n    },\n\n    setFillStyle: function(style) {\n      this.attributes.fill = style;\n      return this;\n    },\n\n    setBackgroundFillStyle: function(style) {\n      this.background_attributes.fill = style;\n      this.background_attributes.stroke = style;\n      return this;\n    },\n\n    setStrokeStyle: function(style) {\n      this.attributes.stroke = style;\n      return this;\n    },\n\n    setShadowColor: function(style) {\n      this.shadow_attributes.color = style;\n      return this;\n    },\n\n    setShadowBlur: function(blur) {\n      this.shadow_attributes.width = blur;\n      return this;\n    },\n\n    setLineWidth: function(width) {\n      this.attributes[\"stroke-width\"] = width;\n      this.lineWidth = width;\n    },\n\n    // Empty because there is no equivalent in SVG\n    setLineDash: function() { return this; },\n    setLineCap: function() { return this; },\n\n    scale: function(x, y) {\n      this.state.scale = { x: x, y: y };\n      // The scale() method is deprecated as of Raphael.JS 2.0, and\n      // can no longer be used as an option in an Element.attr() call.\n      // It is preserved here for users running earlier versions of\n      // Raphael.JS, though it has no effect on the SVG output in\n      // Raphael 2 and higher.\n      this.attributes.transform = \"S\" + x + \",\" + y + \",0,0\";\n      this.attributes.scale = x + \",\" + y + \",0,0\";\n      this.attributes.font = this.state.font_size * this.state.scale.x + \"pt \" +\n        this.state.font_family;\n      this.background_attributes.transform = \"S\" + x + \",\" + y + \",0,0\";\n      this.background_attributes.font = this.state.font_size *\n        this.state.scale.x + \"pt \" +\n        this.state.font_family;\n      return this;\n    },\n\n    clear: function() { this.paper.clear(); },\n\n    resize: function(width, height) {\n      this.element.style.width = width;\n      this.paper.setSize(width, height);\n      return this;\n    },\n\n    // Sets the SVG `viewBox` property, which results in auto scaling images when its container\n    // is resized.\n    //\n    // Usage: `ctx.setViewBox(\"0 0 600 400\")`\n    setViewBox: function(viewBox) {\n      this.paper.canvas.setAttribute('viewBox', viewBox);\n    },\n\n    rect: function(x, y, width, height) {\n      if (height < 0) {\n        y += height;\n        height = -height;\n      }\n\n      this.paper.rect(x, y, width - 0.5, height - 0.5).\n        attr(this.attributes).\n        attr(\"fill\", \"none\").\n        attr(\"stroke-width\", this.lineWidth);\n      return this;\n    },\n\n    fillRect: function(x, y, width, height) {\n      if (height < 0) {\n        y += height;\n        height = -height;\n      }\n\n      this.paper.rect(x, y, width - 0.5, height - 0.5).\n        attr(this.attributes);\n      return this;\n    },\n\n    clearRect: function(x, y, width, height) {\n      if (height < 0) {\n        y += height;\n        height = -height;\n      }\n\n      this.paper.rect(x, y, width - 0.5, height - 0.5).\n        attr(this.background_attributes);\n      return this;\n    },\n\n    beginPath: function() {\n      this.path = \"\";\n      this.pen.x = 0;\n      this.pen.y = 0;\n      return this;\n    },\n\n    moveTo: function(x, y) {\n      this.path += \"M\" + x + \",\" + y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    lineTo: function(x, y) {\n      this.path += \"L\" + x + \",\" + y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      this.path += \"C\" +\n        x1 + \",\" +\n        y1 + \",\" +\n        x2 + \",\" +\n        y2 + \",\" +\n        x + \",\" +\n        y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    quadraticCurveTo: function(x1, y1, x, y) {\n      this.path += \"Q\" +\n        x1 + \",\" +\n        y1 + \",\" +\n        x + \",\" +\n        y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    // This is an attempt (hack) to simulate the HTML5 canvas\n    // arc method.\n    arc: function(x, y, radius, startAngle, endAngle, antiClockwise) {\n      function normalizeAngle(angle) {\n        while (angle < 0) {\n          angle += Math.PI * 2;\n        }\n\n        while (angle > Math.PI * 2) {\n          angle -= Math.PI * 2;\n        }\n        return angle;\n      }\n\n      startAngle = normalizeAngle(startAngle);\n      endAngle = normalizeAngle(endAngle);\n\n      if (startAngle > endAngle) {\n          var tmp = startAngle;\n          startAngle = endAngle;\n          endAngle = tmp;\n          antiClockwise = !antiClockwise;\n      }\n\n      var delta = endAngle - startAngle;\n\n      if (delta > Math.PI) {\n          this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2,\n                         antiClockwise);\n          this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle,\n                         antiClockwise);\n      }\n      else {\n          this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n      }\n      return this;\n    },\n\n    arcHelper: function(x, y, radius, startAngle, endAngle, antiClockwise) {\n      var x1 = x + radius * Math.cos(startAngle);\n      var y1 = y + radius * Math.sin(startAngle);\n\n      var x2 = x + radius * Math.cos(endAngle);\n      var y2 = y + radius * Math.sin(endAngle);\n\n      var largeArcFlag = 0;\n      var sweepFlag = 0;\n      if (antiClockwise) {\n        sweepFlag = 1;\n        if (endAngle - startAngle < Math.PI)\n          largeArcFlag = 1;\n      }\n      else if (endAngle - startAngle > Math.PI) {\n          largeArcFlag = 1;\n      }\n\n      this.path += \"M\" + x1 + \",\" + y1 + \",\" + \"A\" +\n        radius + \",\" + radius + \",\" + \"0,\" + largeArcFlag + \",\" + sweepFlag + \",\" +\n        x2 + \",\" + y2 + \"M\" + this.pen.x + \",\" + this.pen.y;\n    },\n\n    // Adapted from the source for Raphael's Element.glow\n    glow: function() {\n      var out = this.paper.set();\n      if (this.shadow_attributes.width > 0) {\n        var sa = this.shadow_attributes;\n        var num_paths = sa.width / 2;\n        for (var i = 1; i <= num_paths; i++) {\n          out.push(this.paper.path(this.path).attr({\n            stroke: sa.color,\n            \"stroke-linejoin\": \"round\",\n            \"stroke-linecap\": \"round\",\n            \"stroke-width\": +(sa.width / num_paths * i).toFixed(3),\n            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n            // See note in this.scale(): In Raphael the scale() method\n            // is deprecated and removed as of Raphael 2.0 and replaced\n            // by the transform() method.  It is preserved here for\n            // users with earlier versions of Raphael, but has no effect\n            // on the output SVG in Raphael 2.0+.\n            transform: this.attributes.transform,\n            scale: this.attributes.scale\n          }));\n        }\n      }\n      return out;\n    },\n\n    fill: function() {\n      var elem = this.paper.path(this.path).\n        attr(this.attributes).\n        attr(\"stroke-width\", 0);\n      this.glow(elem);\n      return this;\n    },\n\n    stroke: function() {\n      // The first line of code below is, unfortunately, a bit of a hack:\n      // Raphael's transform() scaling does not scale the stroke-width, so\n      // in order to scale a stroke, we have to manually scale the\n      // stroke-width.\n      //\n      // This works well so long as the X & Y states for this.scale() are\n      // relatively similar.  However, if they are very different, we\n      // would expect horizontal and vertical lines to have different\n      // stroke-widths.\n      //\n      // In the future, if we want to support very divergent values for\n      // horizontal and vertical scaling, we may want to consider\n      // implementing SVG scaling with properties of the SVG viewBox &\n      // viewPort and removing it entirely from the Element.attr() calls.\n      // This would more closely parallel the approach taken in\n      // canvascontext.js as well.\n\n      var strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y)/2;\n      var elem = this.paper.path(this.path).\n        attr(this.attributes).\n        attr(\"fill\", \"none\").\n        attr(\"stroke-width\", strokeWidth);\n      this.glow(elem);\n      return this;\n    },\n\n    closePath: function() {\n      this.path += \"Z\";\n      return this;\n    },\n\n    measureText: function(text) {\n      var txt = this.paper.text(0, 0, text).\n        attr(this.attributes).\n        attr(\"fill\", \"none\").\n        attr(\"stroke\", \"none\");\n      var bounds = txt.getBBox();\n      txt.remove();\n\n      return {\n        width: bounds.width,\n        height: bounds.height\n      };\n    },\n\n    fillText: function(text, x, y) {\n      this.paper.text(x + (this.measureText(text).width / 2),\n          (y - (this.state.font_size / (2.25 * this.state.scale.y))), text).\n        attr(this.attributes);\n      return this;\n    },\n\n    save: function() {\n      // TODO(mmuthanna): State needs to be deep-copied.\n      this.state_stack.push({\n        state: {\n          font_family: this.state.font_family\n        },\n        attributes: {\n          font: this.attributes.font,\n          fill: this.attributes.fill,\n          stroke: this.attributes.stroke,\n          \"stroke-width\": this.attributes[\"stroke-width\"]\n        },\n        shadow_attributes: {\n          width: this.shadow_attributes.width,\n          color: this.shadow_attributes.color\n        }\n      });\n      return this;\n    },\n\n    restore: function() {\n      // TODO(0xfe): State needs to be deep-restored.\n      var state = this.state_stack.pop();\n      this.state.font_family = state.state.font_family;\n      this.attributes.font = state.attributes.font;\n      this.attributes.fill = state.attributes.fill;\n      this.attributes.stroke = state.attributes.stroke;\n      this.attributes[\"stroke-width\"] = state.attributes[\"stroke-width\"];\n      this.shadow_attributes.width = state.shadow_attributes.width;\n      this.shadow_attributes.color = state.shadow_attributes.color;\n      return this;\n    }\n  };\n\n  return RaphaelContext;\n}());\n","// Vex Flow\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for SVG.\n//\n// Copyright Mohit Muthanna 2015\n// @author Gregory Ristow (2015)\n\n/** @constructor */\nVex.Flow.SVGContext = (function() {\n  function SVGContext(element) {\n    if (arguments.length > 0) this.init(element);\n  }\n\n  // The measureTextCache is used in Javascript runtimes where\n  // there is no proper DOM support for SVG bounding boxes. This\n  // is currently only useful in the NodeJS visual regression tests.\n  SVGContext.measureTextCache = {};\n\n  // If enabled, will start collecting and indexing getBBox data by\n  // font name, size, weight, and style. This should be disabled by\n  // default (or you will find yourself slowly leaking RAM.)\n  SVGContext.collectMeasurements = false;\n\n  // If enabled, will warn if there are new getBBox requests that are\n  // not in the cache. This is enabled in the VexFlow tests, and if you\n  // see a warning on the console, you will need to enable collectMeasurements\n  // above, then update measureTextCache with the new values. See\n  // tests/measure_text_cache.js for instructions on how to do this.\n  SVGContext.validateMeasurement = false;\n\n  SVGContext.addPrefix = Vex.Prefix;\n\n  SVGContext.prototype = {\n    init: function(element) {\n      // element is the parent DOM object\n      this.element = element;\n      // Create the SVG in the SVG namespace:\n      this.svgNS = \"http://www.w3.org/2000/svg\";\n      var svg = this.create(\"svg\");\n      // Add it to the canvas:\n      this.element.appendChild(svg);\n\n      // Point to it:\n      this.svg = svg;\n      this.groups = [this.svg]; // Create the group stack\n      this.parent = this.svg;\n\n      this.path = \"\";\n      this.pen = {x: 0, y: 0};\n      this.lineWidth = 1.0;\n      this.state = {\n        scale: { x: 1, y: 1 },\n        \"font-family\": \"Arial\",\n        \"font-size\": \"8pt\",\n        \"font-weight\": \"normal\"\n      };\n\n      this.attributes = {\n        \"stroke-width\": 0.3,\n        \"fill\": \"black\",\n        \"stroke\": \"black\",\n        \"font-family\": \"Arial\",\n        \"font-size\" : \"10pt\",\n        \"font-weight\" : \"normal\",\n        \"font-style\" : \"normal\"\n      };\n\n      this.background_attributes = {\n        \"stroke-width\": 0,\n        \"fill\": \"white\",\n        \"stroke\": \"white\",\n        \"font-family\": \"Arial\",\n        \"font-size\" : \"10pt\",\n        \"font-weight\": \"normal\",\n        \"font-style\": \"normal\"\n      };\n\n      this.shadow_attributes = {\n        width: 0,\n        color: \"black\"\n      };\n\n      this.state_stack= [];\n\n      // Test for Internet Explorer\n      this.iePolyfill();\n    },\n\n    create: function(svgElementType) {\n      return document.createElementNS(this.svgNS, svgElementType);\n    },\n\n    // Allow grouping elements in containers for interactivity.\n    openGroup: function(cls, id, attrs) {\n      var group = this.create(\"g\");\n      this.groups.push(group);\n      this.parent.appendChild(group);\n      this.parent = group;\n      if (cls) group.setAttribute(\"class\", SVGContext.addPrefix(cls));\n      if (id) group.setAttribute(\"id\", SVGContext.addPrefix(id));\n\n      if (attrs && attrs.pointerBBox) {\n        group.setAttribute(\"pointer-events\", \"bounding-box\");\n      }\n      return group;\n    },\n\n    closeGroup: function() {\n      var group = this.groups.pop();\n      this.parent = this.groups[this.groups.length - 1];\n    },\n\n    add: function(elem) {\n      this.parent.appendChild(elem);\n    },\n\n    // Tests if the browser is Internet Explorer; if it is,\n    // we do some tricks to improve text layout.  See the\n    // note at ieMeasureTextFix() for details.\n    iePolyfill: function() {\n      if (typeof(navigator) !== \"undefined\") {\n        this.ie = (  /MSIE 9/i.test(navigator.userAgent) ||\n                            /MSIE 10/i.test(navigator.userAgent) ||\n                            /rv:11\\.0/i.test(navigator.userAgent) ||\n                            /Trident/i.test(navigator.userAgent) );\n      }\n    },\n\n    // ### Styling & State Methods:\n\n    setFont: function(family, size, weight) {\n      // Unlike canvas, in SVG italic is handled by font-style,\n      // not weight. So: we search the weight argument and\n      // apply bold and italic to weight and style respectively.\n      var bold = false;\n      var italic = false;\n      var style = \"normal\";\n      // Weight might also be a number (200, 400, etc...) so we\n      // test its type to be sure we have access to String methods.\n      if( typeof weight == \"string\" ) {\n          // look for \"italic\" in the weight:\n          if(weight.indexOf(\"italic\") !== -1) {\n            weight = weight.replace(/italic/g, \"\");\n            italic = true;\n          }\n          // look for \"bold\" in weight\n          if(weight.indexOf(\"bold\") !== -1) {\n            weight = weight.replace(/bold/g, \"\");\n            bold = true;\n          }\n          // remove any remaining spaces\n          weight = weight.replace(/ /g, \"\");\n      }\n      weight = bold ? \"bold\" : weight;\n      weight = (typeof weight === \"undefined\" || weight === \"\") ? \"normal\" : weight;\n\n      style = italic ? \"italic\" : style;\n\n      var fontAttributes = {\n        \"font-family\": family,\n        \"font-size\": size + \"pt\",\n        \"font-weight\": weight,\n        \"font-style\" : style\n      };\n\n      // Store the font size so that if the browser is Internet\n      // Explorer we can fix its calculations of text width.\n      this.fontSize = Number(size);\n\n      Vex.Merge(this.attributes, fontAttributes);\n      Vex.Merge(this.state, fontAttributes);\n\n      return this;\n    },\n\n    setRawFont: function(font) {\n      font=font.trim();\n      // Assumes size first, splits on space -- which is presently\n      // how all existing modules are calling this.\n      var fontArray = font.split(\" \");\n\n      this.attributes[\"font-family\"] = fontArray[1];\n      this.state[\"font-family\"] = fontArray[1];\n\n      this.attributes[\"font-size\"] = fontArray[0];\n      this.state[\"font-size\"] = fontArray[0];\n\n      // Saves fontSize for IE polyfill\n      this.fontSize = Number(fontArray[0].match(/\\d+/));\n      return this;\n    },\n\n    setFillStyle: function(style) {\n      this.attributes.fill = style;\n      return this;\n    },\n\n    setBackgroundFillStyle: function(style) {\n      this.background_attributes.fill = style;\n      this.background_attributes.stroke = style;\n      return this;\n    },\n\n    setStrokeStyle: function(style) {\n      this.attributes.stroke = style;\n      return this;\n    },\n\n    setShadowColor: function(style) {\n      this.shadow_attributes.color = style;\n      return this;\n    },\n\n    setShadowBlur: function(blur) {\n      this.shadow_attributes.width = blur;\n      return this;\n    },\n\n    setLineWidth: function(width) {\n      this.attributes[\"stroke-width\"] = width;\n      this.lineWidth = width;\n    },\n\n    setLineDash: function(lineDash) {\n      this.attributes[\"stroke-linedash\"] = lineDash;\n      return this;\n    },\n\n    setLineCap: function(lineCap) {\n      this.attributes[\"stroke-linecap\"] = lineCap;\n      return this;\n    },\n\n    // ### Sizing & Scaling Methods:\n\n    // TODO (GCR): See note at scale() -- seperate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize: function(width, height) {\n      this.width = width;\n      this.height = height;\n      this.element.style.width = width;\n      var attributes = {\n        width : width,\n        height : height\n      };\n      this.applyAttributes(this.svg, attributes);\n      return this;\n    },\n\n    scale: function(x, y) {\n      // uses viewBox to scale\n      // TODO (GCR): we may at some point want to distinguish the\n      // style.width / style.height properties that are applied to\n      // the SVG object from our internal conception of the SVG\n      // width/height.  This would allow us to create automatically\n      // scaling SVG's that filled their containers, for instance.\n      //\n      // As this isn't implemented in Canvas or Raphael contexts,\n      // I've left as is for now, but in using the viewBox to\n      // handle internal scaling, am trying to make it possible\n      // for us to eventually move in that direction.\n\n      this.state.scale = { x: x, y: y };\n      var visibleWidth = this.width / x;\n      var visibleHeight = this.height / y;\n      this.setViewBox(0,0, visibleWidth, visibleHeight);\n\n      return this;\n    },\n\n    setViewBox: function(xMin, yMin, width, height) {\n      // Override for \"x y w h\" style:\n      if(arguments.length == 1) this.svg.setAttribute(\"viewBox\", viewBox);\n      else {\n        var viewBoxString = xMin + \" \" + yMin + \" \" + width + \" \" + height;\n        this.svg.setAttribute(\"viewBox\", viewBoxString);\n      }\n    },\n\n    // ### Drawing helper methods:\n\n    applyAttributes: function(element, attributes) {\n      for(var propertyName in attributes) {\n        element.setAttributeNS(null, propertyName, attributes[propertyName]);\n      }\n      return element;\n    },\n\n    flipRectangle: function(args) {\n      // Avoid invalid negative height attributes by\n      // flipping a rectangle w/ negative height on its head.\n      // Since args is the actual arguments object from\n      // one of the rectangle functions, we don't need to\n      // return it.\n\n      // Add negative height to Y\n      args[1] += args[3];\n      // Make the negative height positive.\n      args[3] = -args[3];\n    },\n\n    // ### Shape & Path Methods:\n\n    clear: function() {\n      // Clear the SVG by removing all inner children.\n\n      // (This approach is usually slightly more efficient\n      // than removing the old SVG & adding a new one to\n      // the container element, since it does not cause the\n      // container to resize twice.  Also, the resize\n      // triggered by removing the entire SVG can trigger\n      // a touchcancel event when the element resizes away\n      // from a touch point.)\n\n      while (this.svg.lastChild) {\n        this.svg.removeChild(this.svg.lastChild);\n      }\n\n      // Replace the viewbox attribute we just removed:\n      this.scale(this.state.scale.x, this.state.scale.y);\n    },\n\n    // ## Rectangles:\n\n    rect: function(x, y, width, height, attributes) {\n      // Avoid invalid negative height attribs by\n      // flipping the rectangle on its head:\n      if (height < 0) this.flipRectangle(arguments);\n\n      // Create the rect & style it:\n      var rect = this.create(\"rect\");\n      if(typeof attributes === \"undefined\") attributes = {\n        fill: \"none\",\n        \"stroke-width\": this.lineWidth,\n        stroke: \"black\"\n      };\n      Vex.Merge(attributes, {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n\n      this.applyAttributes(rect, attributes);\n\n      this.add(rect);\n      return this;\n    },\n\n    fillRect: function(x, y, width, height) {\n      if(height < 0) this.flipRectangle(arguments);\n\n      this.rect(x, y, width - 0.5, height - 0.5, this.attributes);\n      return this;\n    },\n\n    clearRect: function(x, y, width, height) {\n      // TODO(GCR): Improve implementation of this...\n      // Currently it draws a box of the background color, rather\n      // than creating alpha through lower z-levels.\n      //\n      // See the implementation of this in SVGKit:\n      // http://sourceforge.net/projects/svgkit/\n      // as a starting point.\n      //\n      // Adding a large number of transform paths (as we would\n      // have to do) could be a real performance hit.  Since\n      // tabNote seems to be the only module that makes use of this\n      // it may be worth creating a seperate tabStave that would\n      // draw lines around locations of tablature fingering.\n      //\n\n      if (height < 0) this.flipRectangle(arguments);\n\n      this.rect(x, y, width - 0.5, height - 0.5, this.background_attributes);\n      return this;\n    },\n\n    // ## Paths:\n\n    beginPath: function() {\n      this.path = \"\";\n      this.pen.x = 0;\n      this.pen.y = 0;\n      return this;\n    },\n\n    moveTo: function(x, y) {\n      this.path += \"M\" + x + \" \" + y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    lineTo: function(x, y) {\n      this.path += \"L\" + x + \" \" + y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      this.path += \"C\" +\n        x1 + \" \" +\n        y1 + \",\" +\n        x2 + \" \" +\n        y2 + \",\" +\n        x + \" \" +\n        y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    quadraticCurveTo: function(x1, y1, x, y) {\n      this.path += \"Q\" +\n        x1 + \" \" +\n        y1 + \",\" +\n        x + \" \" +\n        y;\n      this.pen.x = x;\n      this.pen.y = y;\n      return this;\n    },\n\n    // This is an attempt (hack) to simulate the HTML5 canvas\n    // arc method.\n    arc: function(x, y, radius, startAngle, endAngle, antiClockwise) {\n      function normalizeAngle(angle) {\n        while (angle < 0) {\n          angle += Math.PI * 2;\n        }\n\n        while (angle > Math.PI * 2) {\n          angle -= Math.PI * 2;\n        }\n        return angle;\n      }\n\n      startAngle = normalizeAngle(startAngle);\n      endAngle = normalizeAngle(endAngle);\n\n      if (startAngle > endAngle) {\n          var tmp = startAngle;\n          startAngle = endAngle;\n          endAngle = tmp;\n          antiClockwise = !antiClockwise;\n      }\n\n      var delta = endAngle - startAngle;\n\n      if (delta > Math.PI) {\n          this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2,\n                         antiClockwise);\n          this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle,\n                         antiClockwise);\n      }\n      else {\n          this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n      }\n      return this;\n    },\n\n    arcHelper: function(x, y, radius, startAngle, endAngle, antiClockwise) {\n      var x1 = x + radius * Math.cos(startAngle);\n      var y1 = y + radius * Math.sin(startAngle);\n\n      var x2 = x + radius * Math.cos(endAngle);\n      var y2 = y + radius * Math.sin(endAngle);\n\n      var largeArcFlag = 0;\n      var sweepFlag = 0;\n      if (antiClockwise) {\n        sweepFlag = 1;\n        if (endAngle - startAngle < Math.PI)\n          largeArcFlag = 1;\n      }\n      else if (endAngle - startAngle > Math.PI) {\n          largeArcFlag = 1;\n      }\n\n      this.path += \"M\" + x1 + \" \" + y1 + \" \" + \"A\" +\n        radius + \" \" + radius + \" \" + \"0 \" + largeArcFlag + \" \" + sweepFlag + \" \" +\n        x2 + \" \" + y2 + \"M\" + this.pen.x + \" \" + this.pen.y;\n\n    },\n\n    closePath: function() {\n      this.path += \"Z\";\n\n      return this;\n    },\n\n    // Adapted from the source for Raphael's Element.glow\n    glow: function() {\n      // Calculate the width & paths of the glow:\n      if (this.shadow_attributes.width > 0) {\n        var sa = this.shadow_attributes;\n        var num_paths = sa.width / 2;\n        // Stroke at varying widths to create effect of gaussian blur:\n        for (var i = 1; i <= num_paths; i++) {\n          var attributes = {\n            stroke: sa.color,\n            \"stroke-linejoin\": \"round\",\n            \"stroke-linecap\": \"round\",\n            \"stroke-width\": +((sa.width *0.4) / num_paths * i).toFixed(3),\n            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n          };\n\n          var path = this.create(\"path\");\n          attributes.d = this.path;\n          this.applyAttributes(path, attributes);\n          this.add(path);\n        }\n      }\n      return this;\n    },\n\n    fill: function(attributes) {\n      // If our current path is set to glow, make it glow\n      this.glow();\n\n      var path = this.create(\"path\");\n      if(typeof attributes === \"undefined\") {\n        attributes = {};\n        Vex.Merge(attributes, this.attributes);\n        attributes.stroke = \"none\";\n      }\n\n      attributes.d = this.path;\n\n      this.applyAttributes(path, attributes);\n      this.add(path);\n      return this;\n    },\n\n    stroke: function() {\n      // If our current path is set to glow, make it glow.\n      this.glow();\n\n      var path = this.create(\"path\");\n      var attributes = {};\n      Vex.Merge(attributes, this.attributes);\n      attributes.fill = \"none\";\n      attributes[\"stroke-width\"] = this.lineWidth;\n      attributes.d = this.path;\n\n      this.applyAttributes(path, attributes);\n      this.add(path);\n      return this;\n    },\n\n    // ## Text Methods:\n    measureText: function(text) {\n      var index = text + this.attributes[\"font-style\"] + this.attributes[\"font-family\"] +\n                  this.attributes[\"font-weight\"] + this.attributes[\"font-size\"];\n\n      var txt = this.create(\"text\");\n      if (typeof(txt.getBBox) === \"function\") {\n        txt.textContent = text;\n        this.applyAttributes(txt, this.attributes);\n\n        // Temporarily add it to the document for measurement.\n        this.svg.appendChild(txt);\n\n        var bbox = txt.getBBox();\n        if( this.ie &&\n            text !== \"\" &&\n            this.attributes[\"font-style\"] == \"italic\") bbox = this.ieMeasureTextFix(bbox, text);\n        this.svg.removeChild(txt);\n\n        // For runtimes that do not have full support of bounding boxes, collect\n        // some data which can be used later to extrapolate them.\n        if (SVGContext.collectMeasurements) {\n          SVGContext.measureTextCache[index] = {\n            x: bbox.x,\n            y: bbox.y,\n            width: bbox.width,\n            height: bbox.height\n          };\n        }\n        if (SVGContext.validateMeasurements) {\n          if (!(index in SVGContext.measureTextCache)) {\n            Vex.W(\"measureTextCache is stale. Please update tests/measure_text_cache.js: \", index);\n          }\n        }\n        return bbox;\n      } else {\n        // Inside NodeJS or other runtimes that don't support getBBox. This\n        // is currently only useful for the NodeJS visual regression tests.\n        return SVGContext.measureTextCache[index];\n      }\n    },\n\n    ieMeasureTextFix: function(bbox, text) {\n    // Internet Explorer over-pads text in italics,\n    // resulting in giant width estimates for measureText.\n    // To fix this, we use this formula, tested against\n    // ie 11:\n    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n    // And then subtract the overestimate from calculated width.\n\n      var fontSize = Number(this.fontSize);\n      var m = 1.196;\n      var b = 1.9598;\n      var widthCorrection = (m * fontSize) + b;\n      var width = bbox.width - widthCorrection;\n      var height = bbox.height - 1.5;\n\n      // Get non-protected copy:\n      var box = {\n        x : bbox.x,\n        y : bbox.y,\n        width : width,\n        height : height\n      };\n\n      return box;\n    },\n\n    fillText: function(text, x, y) {\n      var attributes = {};\n      Vex.Merge(attributes, this.attributes);\n      attributes.stroke = \"none\";\n      attributes.x = x;\n      attributes.y = y;\n\n      var txt = this.create(\"text\");\n      txt.textContent = text;\n      this.applyAttributes(txt, attributes);\n      this.add(txt);\n    },\n\n    save: function() {\n      // TODO(mmuthanna): State needs to be deep-copied.\n      this.state_stack.push({\n        state: {\n          \"font-family\": this.state[\"font-family\"],\n          \"font-weight\": this.state[\"font-weight\"],\n          \"font-style\": this.state[\"font-style\"],\n          \"font-size\": this.state[\"font-size\"]\n        },\n        attributes: {\n          \"font-family\": this.attributes[\"font-family\"],\n          \"font-weight\": this.attributes[\"font-weight\"],\n          \"font-style\": this.attributes[\"font-style\"],\n          \"font-size\": this.attributes[\"font-size\"],\n          fill: this.attributes.fill,\n          stroke: this.attributes.stroke,\n          \"stroke-width\": this.attributes[\"stroke-width\"]\n        },\n        shadow_attributes: {\n          width: this.shadow_attributes.width,\n          color: this.shadow_attributes.color\n        }\n      });\n      return this;\n    },\n\n    restore: function() {\n      // TODO(0xfe): State needs to be deep-restored.\n      var state = this.state_stack.pop();\n      this.state[\"font-family\"] = state.state[\"font-family\"];\n      this.state[\"font-weight\"] = state.state[\"font-weight\"];\n      this.state[\"font-style\"] = state.state[\"font-style\"];\n      this.state[\"font-size\"] = state.state[\"font-size\"];\n\n      this.attributes[\"font-family\"] = state.attributes[\"font-family\"];\n      this.attributes[\"font-weight\"] = state.attributes[\"font-weight\"];\n      this.attributes[\"font-style\"] = state.attributes[\"font-style\"];\n      this.attributes[\"font-size\"] = state.attributes[\"font-size\"];\n\n      this.attributes.fill = state.attributes.fill;\n      this.attributes.stroke = state.attributes.stroke;\n      this.attributes[\"stroke-width\"] = state.attributes[\"stroke-width\"];\n      this.shadow_attributes.width = state.shadow_attributes.width;\n      this.shadow_attributes.color = state.shadow_attributes.color;\n      return this;\n    }\n  };\n\n  return SVGContext;\n}());\n","// Vex Flow\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for the Raphael backend.\n//\n// Copyright Mohit Cheppudira 2010\n\n/** @constructor */\nVex.Flow.CanvasContext = (function() {\n  function CanvasContext(context) {\n    if (arguments.length > 0) this.init(context);\n  }\n\n  CanvasContext.WIDTH = 600;\n  CanvasContext.HEIGHT = 400;\n\n  CanvasContext.prototype = {\n    init: function(context) {\n      // Use a name that is unlikely to clash with a canvas context\n      // property\n      this.vexFlowCanvasContext = context;\n      if (!context.canvas) {\n        this.canvas = {\n          width: CanvasContext.WIDTH,\n          height: CanvasContext.HEIGHT\n        };\n      } else {\n        this.canvas = context.canvas;\n      }\n    },\n\n    clear: function() {\n      this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    },\n\n    // Containers not implemented\n    openGroup: function(cls, id, attrs) {},\n    closeGroup: function() {},\n    add: function(elem) {},\n\n    setFont: function(family, size, weight) {\n      this.vexFlowCanvasContext.font = (weight || \"\") + \" \" + size + \"pt \" + family;\n      return this;\n    },\n\n    setRawFont: function(font) {\n      this.vexFlowCanvasContext.font = font;\n      return this;\n    },\n\n    setFillStyle: function(style) {\n      this.vexFlowCanvasContext.fillStyle = style;\n      return this;\n    },\n\n    setBackgroundFillStyle: function(style) {\n      this.background_fillStyle = style;\n      return this;\n    },\n\n    setStrokeStyle: function(style) {\n      this.vexFlowCanvasContext.strokeStyle = style;\n      return this;\n    },\n\n    setShadowColor: function(style) {\n      this.vexFlowCanvasContext.shadowColor = style;\n      return this;\n    },\n\n    setShadowBlur: function(blur) {\n      this.vexFlowCanvasContext.shadowBlur = blur;\n      return this;\n    },\n\n    setLineWidth: function(width) {\n      this.vexFlowCanvasContext.lineWidth = width;\n      return this;\n    },\n\n    setLineCap: function(cap_type) {\n      this.vexFlowCanvasContext.lineCap = cap_type;\n      return this;\n    },\n\n    setLineDash: function(dash) {\n      this.vexFlowCanvasContext.lineDash = dash;\n    },\n\n    scale: function(x, y) {\n      return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));\n    },\n\n    resize: function(width, height) {\n      return this.vexFlowCanvasContext.resize(\n          parseInt(width, 10), parseInt(height, 10));\n    },\n\n    rect: function(x, y, width, height) {\n      return this.vexFlowCanvasContext.rect(x, y, width, height);\n    },\n\n    fillRect: function(x, y, width, height) {\n      return this.vexFlowCanvasContext.fillRect(x, y, width, height);\n    },\n\n    clearRect: function(x, y, width, height) {\n      return this.vexFlowCanvasContext.clearRect(x, y, width, height);\n    },\n\n    beginPath: function() {\n      return this.vexFlowCanvasContext.beginPath();\n    },\n\n    moveTo: function(x, y) {\n      return this.vexFlowCanvasContext.moveTo(x, y);\n    },\n\n    lineTo: function(x, y) {\n      return this.vexFlowCanvasContext.lineTo(x, y);\n    },\n\n    bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n      return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);\n    },\n\n    quadraticCurveTo: function(x1, y1, x, y) {\n      return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);\n    },\n\n    // This is an attempt (hack) to simulate the HTML5 canvas\n    // arc method.\n    arc: function(x, y, radius, startAngle, endAngle, antiClockwise) {\n      return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n    },\n\n    // Adapted from the source for Raphael's Element.glow\n    glow: function() {\n      return this.vexFlowCanvasContext.glow();\n    },\n\n    fill: function() {\n      return this.vexFlowCanvasContext.fill();\n    },\n\n    stroke: function() {\n      return this.vexFlowCanvasContext.stroke();\n    },\n\n    closePath: function() {\n      return this.vexFlowCanvasContext.closePath();\n    },\n\n    measureText: function(text) {\n      return this.vexFlowCanvasContext.measureText(text);\n    },\n\n    fillText: function(text, x, y) {\n      return this.vexFlowCanvasContext.fillText(text, x, y);\n    },\n\n    save: function() {\n      return this.vexFlowCanvasContext.save();\n    },\n\n    restore: function() {\n      return this.vexFlowCanvasContext.restore();\n    }\n  };\n\n  return CanvasContext;\n}());\n","// Vex Flow Notation\n// Author Larry Kuhns 2011\n// Implements barlines (single, double, repeat, end)\n//\n// Requires vex.js.\n\n/**\n * @constructor\n */\nVex.Flow.Barline = (function() {\n  function Barline(type) {\n    if (arguments.length > 0) this.init(type);\n  }\n\n  Barline.type = {\n    SINGLE: 1,\n    DOUBLE: 2,\n    END: 3,\n    REPEAT_BEGIN: 4,\n    REPEAT_END: 5,\n    REPEAT_BOTH: 6,\n    NONE: 7\n  };\n\n  Vex.Inherit(Barline, Vex.Flow.StaveModifier, {\n    init: function(type) {\n      Barline.superclass.init.call(this);\n      this.thickness = Vex.Flow.STAVE_LINE_THICKNESS;\n\n      var TYPE = Vex.Flow.Barline.type;\n      this.widths = {};\n      this.widths[TYPE.SINGLE] = 5;\n      this.widths[TYPE.DOUBLE] = 5;\n      this.widths[TYPE.END] = 5;\n      this.widths[TYPE.REPEAT_BEGIN] = 5;\n      this.widths[TYPE.REPEAT_END] = 5;\n      this.widths[TYPE.REPEAT_BOTH] = 5;\n      this.widths[TYPE.NONE] = 5;\n\n      this.paddings = {};\n      this.paddings[TYPE.SINGLE] = 0;\n      this.paddings[TYPE.DOUBLE] = 0;\n      this.paddings[TYPE.END] = 0;\n      this.paddings[TYPE.REPEAT_BEGIN] = 15;\n      this.paddings[TYPE.REPEAT_END] = 15;\n      this.paddings[TYPE.REPEAT_BOTH] = 15;\n      this.paddings[TYPE.NONE] = 0;\n\n      this.setPosition(Vex.Flow.StaveModifier.Position.BEGIN);\n      this.setType(type);\n    },\n\n    getCategory: function() { return \"barlines\"; },\n    getType: function() { return this.type; },\n    setType: function(type) {\n      this.type = type;\n      this.setWidth(this.widths[this.type]);\n      this.setPadding(this.paddings[this.type]);\n      return this;\n    },\n\n    // Draw barlines\n    draw: function(stave) {\n      switch (this.type) {\n        case Barline.type.SINGLE:\n          this.drawVerticalBar(stave, this.x, false);\n          break;\n        case Barline.type.DOUBLE:\n          this.drawVerticalBar(stave, this.x, true);\n          break;\n        case Barline.type.END:\n          this.drawVerticalEndBar(stave, this.x);\n          break;\n        case Barline.type.REPEAT_BEGIN:\n          // If the barline is shifted over (in front of clef/time/key)\n          // Draw vertical bar at the beginning.\n          this.drawRepeatBar(stave, this.x, true);\n          if (stave.getX() !== this.x) {\n            this.drawVerticalBar(stave, stave.getX());\n          }\n\n          break;\n        case Barline.type.REPEAT_END:\n          this.drawRepeatBar(stave, this.x, false);\n          break;\n        case Barline.type.REPEAT_BOTH:\n          this.drawRepeatBar(stave, this.x, false);\n          this.drawRepeatBar(stave, this.x, true);\n          break;\n        default:\n          // Default is NONE, so nothing to draw\n          break;\n      }\n    },\n\n    drawVerticalBar: function(stave, x, double_bar) {\n      if (!stave.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n      var topY = stave.getYForLine(0);\n      var botY = stave.getYForLine(stave.getNumLines() - 1) + this.thickness;\n      if (double_bar)\n        stave.context.fillRect(x - 3, topY, 1, botY - topY);\n      stave.context.fillRect(x, topY, 1, botY - topY);\n    },\n\n    drawVerticalEndBar: function(stave, x) {\n      if (!stave.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n\n      var topY = stave.getYForLine(0);\n      var botY = stave.getYForLine(stave.getNumLines() - 1) + this.thickness;\n      stave.context.fillRect(x - 5, topY, 1, botY - topY);\n      stave.context.fillRect(x - 2, topY, 3, botY - topY);\n    },\n\n    drawRepeatBar: function(stave, x, begin) {\n      if (!stave.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n\n      var topY = stave.getYForLine(0);\n      var botY = stave.getYForLine(stave.getNumLines() - 1) + this.thickness;\n      var x_shift = 3;\n\n      if (!begin) {\n        x_shift = -5;\n      }\n\n      stave.context.fillRect(x + x_shift, topY, 1, botY - topY);\n      stave.context.fillRect(x - 2, topY, 3, botY - topY);\n\n      var dot_radius = 2;\n\n      // Shift dots left or right\n      if (begin) {\n        x_shift += 4;\n      } else {\n        x_shift -= 4;\n      }\n\n      var dot_x = (x + x_shift) + (dot_radius / 2);\n\n      // calculate the y offset based on number of stave lines\n      var y_offset = (stave.getNumLines() - 1) *\n        stave.getSpacingBetweenLines();\n      y_offset = (y_offset / 2) -\n                 (stave.getSpacingBetweenLines() / 2);\n      var dot_y = topY + y_offset + (dot_radius / 2);\n\n      // draw the top repeat dot\n      stave.context.beginPath();\n      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n      stave.context.fill();\n\n      //draw the bottom repeat dot\n      dot_y += stave.getSpacingBetweenLines();\n      stave.context.beginPath();\n      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n      stave.context.fill();\n    }\n  });\n\n  return Barline;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either Crescendo or Descrescendo.\n\n/**\n * Create a new hairpin from the specified notes.\n *\n * @constructor\n * @param {!Object} notes The notes to tie up.\n * @param {!Object} type The type of hairpin\n */\nVex.Flow.StaveHairpin = (function() {\n  function StaveHairpin(notes, type) {\n    if (arguments.length > 0) this.init(notes, type);\n  }\n\n  StaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2\n  };\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  StaveHairpin.FormatByTicksAndDraw = function(ctx, formatter, notes, type, position, options) {\n    var ppt = formatter.pixelsPerTick;\n\n    if (ppt == null){\n      throw new Vex.RuntimeError(\"BadArguments\",\n          \"A valid Formatter must be provide to draw offsets by ticks.\");}\n\n    var l_shift_px = ppt * options.left_shift_ticks;\n    var r_shift_px = ppt * options.right_shift_ticks;\n\n    var hairpin_options = {\n      height: options.height,\n      y_shift:options.y_shift,\n      left_shift_px:l_shift_px,\n      right_shift_px:r_shift_px};\n\n    new StaveHairpin({\n      first_note: notes.first_note,\n      last_note: notes.last_note\n    }, type)\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  };\n\n  StaveHairpin.prototype = {\n    init: function(notes, type) {\n      /**\n       * Notes is a struct that has:\n       *\n       *  {\n       *    first_note: Note,\n       *    last_note: Note,\n       *  }\n       *\n       **/\n\n      this.notes = notes;\n      this.hairpin = type;\n      this.position = Vex.Flow.Modifier.Position.BELOW;\n\n      this.context = null;\n\n      this.render_options = {\n          height: 10,\n          y_shift: 0, //vertical offset\n          left_shift_px: 0, //left horizontal offset\n          right_shift_px: 0 // right horizontal offset\n        };\n\n      this.setNotes(notes);\n    },\n\n    setContext: function(context) { this.context = context; return this; },\n\n    setPosition: function(position) {\n      if (position == Vex.Flow.Modifier.Position.ABOVE ||\n          position == Vex.Flow.Modifier.Position.BELOW)\n        this.position = position;\n      return this;\n    },\n\n    setRenderOptions: function(options) {\n      if (options.height != null &&\n          options.y_shift != null &&\n          options.left_shift_px != null &&\n          options.right_shift_px != null){\n        this.render_options = options;\n      }\n      return this;\n    },\n\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes: function(notes) {\n      if (!notes.first_note && !notes.last_note)\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Hairpin needs to have either first_note or last_note set.\");\n\n      // Success. Lets grab 'em notes.\n      this.first_note = notes.first_note;\n      this.last_note = notes.last_note;\n      return this;\n    },\n\n    renderHairpin: function(params) {\n      var ctx = this.context;\n      var dis = this.render_options.y_shift + 20;\n      var y_shift = params.first_y;\n\n      if (this.position == Vex.Flow.Modifier.Position.ABOVE) {\n        dis = -dis +30;\n        y_shift = params.first_y - params.staff_height;\n      }\n\n      var l_shift = this.render_options.left_shift_px;\n      var r_shift = this.render_options.right_shift_px;\n\n      ctx.beginPath();\n\n      switch (this.hairpin) {\n        case StaveHairpin.type.CRESC:\n          ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n          ctx.lineTo(params.first_x + l_shift, y_shift +(this.render_options.height/2) + dis);\n          ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n          break;\n        case StaveHairpin.type.DECRESC:\n          ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n          ctx.lineTo(params.last_x + r_shift, y_shift +(this.render_options.height/2) + dis);\n          ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n          break;\n        default:\n          // Default is NONE, so nothing to draw\n          break;\n      }\n\n      ctx.stroke();\n      ctx.closePath();\n    },\n\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw Hairpin without a context.\");\n\n      var first_note = this.first_note;\n      var last_note = this.last_note;\n\n      var start = first_note.getModifierStartXY(this.position, 0);\n      var end = last_note.getModifierStartXY(this.position, 0);\n\n      this.renderHairpin({\n        first_x: start.x,\n        last_x: end.x,\n        first_y: first_note.getStave().y + first_note.getStave().height,\n        last_y: last_note.getStave().y + last_note.getStave().height,\n        staff_height: first_note.getStave().height\n      });\n     return true;\n    }\n  };\n  return StaveHairpin;\n}());\n\n","// Vex Flow Notation\n// Author Larry Kuhns 2011\n// Implements voltas (repeat brackets)\n//\n// Requires vex.js.\n\nVex.Flow.Volta = (function() {\n  function Volta(type, number, x, y_shift) {\n    if (arguments.length > 0) this.init(type, number, x, y_shift);\n  }\n\n  Volta.type = {\n    NONE: 1,\n    BEGIN: 2,\n    MID: 3,\n    END: 4,\n    BEGIN_END: 5\n  };\n\n  Vex.Inherit(Volta, Vex.Flow.StaveModifier, {\n    init: function(type, number, x, y_shift) {\n      Volta.superclass.init.call(this);\n\n      this.volta = type;\n      this.x = x;\n      this.y_shift = y_shift;\n      this.number = number;\n      this.font = {\n        family: \"sans-serif\",\n        size: 9,\n        weight: \"bold\"\n      };\n    },\n\n    getCategory: function() { return \"voltas\"; },\n    setShiftY: function(y) { this.y_shift = y; return this; },\n\n    draw: function(stave, x) {\n      if (!stave.context) throw new Vex.RERR(\"NoCanvasContext\",\n        \"Can't draw stave without canvas context.\");\n      var ctx = stave.context;\n      var width = stave.width;\n      var top_y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n      var vert_height = 1.5 * stave.options.spacing_between_lines_px;\n      switch(this.volta) {\n        case Vex.Flow.Volta.type.BEGIN:\n          ctx.fillRect(this.x + x, top_y, 1, vert_height);\n          break;\n        case Vex.Flow.Volta.type.END:\n          width -= 5;\n          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n          break;\n        case Vex.Flow.Volta.type.BEGIN_END:\n          width -= 3;\n          ctx.fillRect(this.x + x, top_y, 1, vert_height);\n          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n          break;\n      }\n        // If the beginning of a volta, draw measure number\n      if (this.volta == Volta.type.BEGIN ||\n          this.volta == Volta.type.BEGIN_END) {\n        ctx.save();\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n        ctx.restore();\n      }\n      ctx.fillRect(this.x + x, top_y, width, 1);\n      return this;\n    }\n  });\n\n  return Volta;\n}());","// Vex Flow Notation\n// Author Larry Kuhns 2011\n// Implements Repetitions (Coda, signo, D.C., etc.)\n//\n// Requires vex.js.\n\nVex.Flow.Repetition = (function() {\n  function Repetition(type, x, y_shift) {\n    if (arguments.length > 0) this.init(type, x, y_shift);\n  }\n\n  Repetition.type = {\n    NONE: 1,         // no coda or segno\n    CODA_LEFT: 2,    // coda at beginning of stave\n    CODA_RIGHT: 3,   // coda at end of stave\n    SEGNO_LEFT: 4,   // segno at beginning of stave\n    SEGNO_RIGHT: 5,  // segno at end of stave\n    DC: 6,           // D.C. at end of stave\n    DC_AL_CODA: 7,   // D.C. al coda at end of stave\n    DC_AL_FINE: 8,   // D.C. al Fine end of stave\n    DS: 9,           // D.S. at end of stave\n    DS_AL_CODA: 10,  // D.S. al coda at end of stave\n    DS_AL_FINE: 11,  // D.S. al Fine at end of stave\n    FINE: 12         // Fine at end of stave\n  };\n\n  Vex.Inherit(Repetition, Vex.Flow.StaveModifier, {\n    init: function(type, x, y_shift) {\n      Repetition.superclass.init.call(this);\n\n      this.symbol_type = type;\n      this.x = x;\n      this.x_shift = 0;\n      this.y_shift = y_shift;\n      this.font = {\n        family: \"times\",\n        size: 12,\n        weight: \"bold italic\"\n      };\n    },\n\n    getCategory: function() { return \"repetitions\"; },\n    setShiftX: function(x) { this.x_shift = x; return this; },\n    setShiftY: function(y) { this.y_shift = y; return this; },\n\n    draw: function(stave, x) {\n      switch (this.symbol_type) {\n        case Repetition.type.CODA_RIGHT:\n          this.drawCodaFixed(stave, x + stave.width);\n          break;\n        case Repetition.type.CODA_LEFT:\n          this.drawSymbolText(stave, x, \"Coda\", true);\n          break;\n        case Repetition.type.SEGNO_LEFT:\n          this.drawSignoFixed(stave, x);\n          break;\n        case Repetition.type.SEGNO_RIGHT:\n          this.drawSignoFixed(stave, x + stave.width);\n          break;\n        case Repetition.type.DC:\n          this.drawSymbolText(stave, x, \"D.C.\", false);\n          break;\n        case Repetition.type.DC_AL_CODA:\n          this.drawSymbolText(stave, x, \"D.C. al\", true);\n          break;\n        case Repetition.type.DC_AL_FINE:\n          this.drawSymbolText(stave, x, \"D.C. al Fine\", false);\n          break;\n        case Repetition.type.DS:\n          this.drawSymbolText(stave, x, \"D.S.\", false);\n          break;\n        case Repetition.type.DS_AL_CODA:\n          this.drawSymbolText(stave, x, \"D.S. al\", true);\n          break;\n        case Repetition.type.DS_AL_FINE:\n          this.drawSymbolText(stave, x, \"D.S. al Fine\", false);\n          break;\n        case Repetition.type.FINE:\n          this.drawSymbolText(stave, x, \"Fine\", false);\n          break;\n        default:\n          break;\n      }\n\n      return this;\n    },\n\n    drawCodaFixed: function(stave, x) {\n      if (!stave.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n\n      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n      Vex.Flow.renderGlyph(stave.context, this.x + x + this.x_shift,\n                           y + 25, 40, \"v4d\", true);\n      return this;\n    },\n\n    drawSignoFixed: function(stave, x) {\n      if (!stave.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n      Vex.Flow.renderGlyph(stave.context, this.x + x + this.x_shift,\n                           y + 25, 30, \"v8c\", true);\n      return this;\n    },\n\n    drawSymbolText: function(stave, x, text, draw_coda) {\n      if (!stave.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw stave without canvas context.\");\n\n      var ctx = stave.context;\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        // Default to right symbol\n      var text_x = 0 + this.x_shift;\n      var symbol_x = x + this.x_shift;\n      if (this.symbol_type == Vex.Flow.Repetition.type.CODA_LEFT) {\n          // Offset Coda text to right of stave beginning\n        text_x = this.x + stave.options.vertical_bar_width;\n        symbol_x = text_x + ctx.measureText(text).width + 12;\n      } else {\n          // Offset Signo text to left stave end\n        symbol_x = this.x + x + stave.width - 5 + this.x_shift;\n        text_x = symbol_x - + ctx.measureText(text).width - 12;\n      }\n      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n      if (draw_coda) {\n        Vex.Flow.renderGlyph(ctx, symbol_x, y, 40, \"v4d\", true);\n      }\n\n      ctx.fillText(text, text_x, y + 5);\n      ctx.restore();\n\n      return this;\n    }\n  });\n\n  return Repetition;\n}());","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2011\n// Implements stave section names.\n\n/**\n * @constructor\n */\nVex.Flow.StaveSection = (function() {\n  function StaveSection(section, x, shift_y) {\n    if (arguments.length > 0) this.init(section, x, shift_y);\n  }\n\n  Vex.Inherit(StaveSection, Vex.Flow.StaveModifier, {\n    init: function(section, x, shift_y) {\n      StaveSection.superclass.init.call(this);\n\n      this.setWidth(16);\n      this.section = section;\n      this.x = x;\n      this.shift_x = 0;\n      this.shift_y = shift_y;\n      this.font = {\n        family: \"sans-serif\",\n        size: 12,\n        weight: \"bold\"\n      };\n    },\n\n    getCategory: function() { return \"stavesection\"; },\n    setStaveSection: function(section) { this.section = section; return this; },\n    setShiftX: function(x) { this.shift_x = x; return this; },\n    setShiftY: function(y) { this.shift_y = y; return this; },\n\n    draw: function(stave, shift_x) {\n      if (!stave.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw stave section without a context.\");\n\n      var ctx = stave.context;\n\n      ctx.save();\n      ctx.lineWidth = 2;\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      var text_width = ctx.measureText(\"\" + this.section).width;\n      var width = text_width + 6;  // add left & right padding\n      if (width < 18) width = 18;\n      var height = 20;\n        //  Seems to be a good default y\n      var y = stave.getYForTopText(3) + this.shift_y;\n      var x = this.x + shift_x;\n      ctx.beginPath();\n      ctx.lineWidth = 2;\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n      x += (width - text_width) / 2;\n      ctx.fillText(\"\" + this.section, x, y + 16);\n      ctx.restore();\n      return this;\n    }\n  });\n\n  return StaveSection;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Radosaw Eichler 2012\n// Implements tempo marker.\n\n/**\n * @constructor\n * @param {Object} tempo Tempo parameters: { name, duration, dots, bpm }\n */\nVex.Flow.StaveTempo = (function() {\n  function StaveTempo(tempo, x, shift_y) {\n    if (arguments.length > 0) this.init(tempo, x, shift_y);\n  }\n\n  Vex.Inherit(StaveTempo, Vex.Flow.StaveModifier, {\n    init: function(tempo, x, shift_y) {\n      StaveTempo.superclass.init.call(this);\n\n      this.tempo = tempo;\n      this.position = Vex.Flow.Modifier.Position.ABOVE;\n      this.x = x;\n      this.shift_x = 10;\n      this.shift_y = shift_y;\n      this.font = {\n        family: \"times\",\n        size: 14,\n        weight: \"bold\"\n      };\n      this.render_options = {\n        glyph_font_scale: 30  // font size for note\n      };\n    },\n\n    getCategory: function() { return \"stavetempo\"; },\n    setTempo: function(tempo) { this.tempo = tempo; return this; },\n    setShiftX: function(x) { this.shift_x = x; return this; },\n    setShiftY: function(y) { this.shift_y = y; return this; },\n\n    draw: function(stave, shift_x) {\n      if (!stave.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw stave tempo without a context.\");\n\n      var options = this.render_options;\n      var scale = options.glyph_font_scale / 38;\n      var name = this.tempo.name;\n      var duration = this.tempo.duration;\n      var dots = this.tempo.dots;\n      var bpm = this.tempo.bpm;\n      var font = this.font;\n      var ctx = stave.context;\n      var x = this.x + this.shift_x + shift_x;\n      var y = stave.getYForTopText(1) + this.shift_y;\n\n      ctx.save();\n\n      if (name) {\n        ctx.setFont(font.family, font.size, font.weight);\n        ctx.fillText(name, x, y);\n        x += ctx.measureText(name).width;\n      }\n\n      if (duration && bpm) {\n        ctx.setFont(font.family, font.size, 'normal');\n\n        if (name) {\n          x += ctx.measureText(\" \").width;\n          ctx.fillText(\"(\", x, y);\n          x += ctx.measureText(\"(\").width;\n        }\n\n        var code = Vex.Flow.durationToGlyph(duration);\n\n        x += 3 * scale;\n        Vex.Flow.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n        x += code.head_width * scale;\n\n        // Draw stem and flags\n        if (code.stem) {\n          var stem_height = 30;\n\n          if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n          stem_height *= scale;\n\n          var y_top = y - stem_height;\n          ctx.fillRect(x, y_top, scale, stem_height);\n\n          if (code.flag) {\n            Vex.Flow.renderGlyph(ctx, x + scale, y_top, options.glyph_font_scale,\n                                 code.code_flag_upstem);\n\n            if (!dots) x += 6 * scale;\n          }\n        }\n\n        // Draw dot\n        for (var i = 0; i < dots; i++) {\n          x += 6 * scale;\n          ctx.beginPath();\n          ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n          ctx.fill();\n        }\n\n        ctx.fillText(\" = \" + bpm + (name ? \")\" : \"\"), x + 3 * scale, y);\n      }\n\n      ctx.restore();\n      return this;\n    }\n  });\n\n  return StaveTempo;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\n/**\n * @constructor\n */\nVex.Flow.StaveText = (function() {\n  function StaveText(text, position, options) {\n    if (arguments.length > 0) this.init(text, position, options);\n  }\n\n  Vex.Inherit(StaveText, Vex.Flow.StaveModifier, {\n    init: function(text, position, options) {\n      StaveText.superclass.init.call(this);\n\n      this.setWidth(16);\n      this.text = text;\n      this.position = position;\n      this.options = {\n        shift_x: 0,\n        shift_y: 0,\n        justification: Vex.Flow.TextNote.Justification.CENTER\n      };\n      Vex.Merge(this.options, options);\n\n      this.font = {\n        family: \"times\",\n        size: 16,\n        weight: \"normal\"\n      };\n    },\n\n    getCategory: function() { return \"stavetext\"; },\n    setStaveText: function(text) { this.text = text; return this; },\n    setShiftX: function(x) { this.shift_x = x; return this; },\n    setShiftY: function(y) { this.shift_y = y; return this; },\n\n    setFont: function(font) {\n      Vex.Merge(this.font, font);\n    },\n\n    setText: function(text) {\n      this.text = text;\n    },\n\n    draw: function(stave) {\n      if (!stave.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw stave text without a context.\");\n\n      var ctx = stave.context;\n\n      ctx.save();\n      ctx.lineWidth = 2;\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      var text_width = ctx.measureText(\"\" + this.text).width;\n\n      var x, y;\n      var Position = Vex.Flow.StaveModifier.Position;\n      switch(this.position) {\n        case Position.LEFT:\n        case Position.RIGHT:\n          y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n          if(this.position == Position.LEFT) {\n            x = stave.getX() - text_width - 24 + this.options.shift_x;\n          }\n          else {\n            x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n          }\n          break;\n        case Position.ABOVE:\n        case Position.BELOW:\n          var Justification = Vex.Flow.TextNote.Justification;\n          x = stave.getX() + this.options.shift_x;\n          if(this.options.justification == Justification.CENTER) {\n            x += stave.getWidth() / 2 - text_width / 2;\n          }\n          else if(this.options.justification == Justification.RIGHT) {\n            x += stave.getWidth() - text_width;\n          }\n\n          if(this.position == Position.ABOVE) {\n            y = stave.getYForTopText(2) + this.options.shift_y;\n          }\n          else {\n            y = stave.getYForBottomText(2) + this.options.shift_y;\n          }\n          break;\n        default:\n          throw new Vex.RERR(\"InvalidPosition\",\n            \"Value Must be in Modifier.Position.\");\n      }\n\n      ctx.fillText(\"\" + this.text, x, y + 4);\n      ctx.restore();\n      return this;\n    }\n  });\n\n  return StaveText;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can\n// be added to a voice and rendered in the middle of a stave. Since it has no\n// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n//\n// See `tests/barnote_tests.js` for usage examples.\n\nVex.Flow.BarNote = (function() {\n  function BarNote() { this.init(); }\n\n  // To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.\n  function L() { if (BarNote.DEBUG) Vex.L(\"Vex.Flow.BarNote\", arguments); }\n\n  // ## Prototype Methods\n  Vex.Inherit(BarNote, Vex.Flow.Note, {\n    init: function() {\n      BarNote.superclass.init.call(this, {duration: \"b\"});\n\n      var TYPE = Vex.Flow.Barline.type;\n      this.metrics = {\n        widths: {}\n      };\n\n      // Defined this way to prevent lint errors.\n      this.metrics.widths[TYPE.SINGLE] = 8;\n      this.metrics.widths[TYPE.DOUBLE] = 12;\n      this.metrics.widths[TYPE.END] = 15;\n      this.metrics.widths[TYPE.REPEAT_BEGIN] = 14;\n      this.metrics.widths[TYPE.REPEAT_END] = 14;\n      this.metrics.widths[TYPE.REPEAT_BOTH] = 18;\n      this.metrics.widths[TYPE.NONE] = 0;\n\n      // Tell the formatter that bar notes have no duration.\n      this.ignore_ticks = true;\n      this.type = TYPE.SINGLE;\n\n      // Set width to width of relevant `Barline`.\n      this.setWidth(this.metrics.widths[this.type]);\n    },\n\n    // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.\n    getType: function() { return this.type; },\n    setType: function(type) {\n      this.type = type;\n      this.setWidth(this.metrics.widths[this.type]);\n      return this;\n    },\n\n    getBoundingBox: function() {\n      return new Vex.Flow.BoundingBox(0, 0, 0, 0);\n    },\n\n    addToModifierContext: function() {\n      /* overridden to ignore */\n      return this;\n    },\n\n    preFormat: function() {\n      /* overridden to ignore */\n      this.setPreFormatted(true);\n      return this;\n    },\n\n    // Render note to stave.\n    draw: function() {\n      if (!this.stave) throw new Vex.RERR(\"NoStave\", \"Can't draw without a stave.\");\n      L(\"Rendering bar line at: \", this.getAbsoluteX());\n      var barline = new Vex.Flow.Barline(this.type);\n      barline.setX(this.getAbsoluteX());\n      barline.draw(this.stave);\n    }\n  });\n\n  return BarNote;\n}());\n","// VexFlow - Music Engraving for HTML5\n// Author: Mike Corrigan <corrigan@gmail.com>\n//\n// This class implements tremolo notation.\n\n/**\n * @constructor\n */\nVex.Flow.Tremolo = (function() {\n  function Tremolo(num) {\n    if (arguments.length > 0) this.init(num);\n  }\n\n  var Modifier = Vex.Flow.Modifier;\n  Vex.Inherit(Tremolo, Modifier, {\n    init: function(num) {\n      Tremolo.superclass.init.call(this);\n\n      this.num = num;\n      this.note = null;\n      this.index = null;\n      this.position = Modifier.Position.CENTER;\n      this.code = \"v74\";\n      this.shift_right = -2;\n      this.y_spacing = 4;\n\n      this.render_options = {\n        font_scale: 35,\n        stroke_px: 3,\n        stroke_spacing: 10\n      };\n\n      this.font = {\n        family: \"Arial\",\n        size: 16,\n        weight: \"\"\n      };\n    },\n\n    getCategory: function() { return \"tremolo\"; },\n\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw Tremolo without a context.\");\n      if (!(this.note && (this.index != null))) throw new Vex.RERR(\"NoAttachedNote\",\n        \"Can't draw Tremolo without a note and index.\");\n\n      var start = this.note.getModifierStartXY(this.position, this.index);\n      var x = start.x;\n      var y = start.y;\n\n      x += this.shift_right;\n      for (var i = 0; i < this.num; ++i) {\n        Vex.Flow.renderGlyph(this.context, x, y,\n                             this.render_options.font_scale, this.code);\n        y += this.y_spacing;\n      }\n    }\n  });\n\n  return Tremolo;\n}());\n","/**\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same line, and have the same duration (in ticks).\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes.\n */\nVex.Flow.Tuplet = (function() {\n  function Tuplet(notes, options) {\n    if (arguments.length > 0) this.init(notes, options);\n  }\n\n  Tuplet.LOCATION_TOP = 1;\n  Tuplet.LOCATION_BOTTOM = -1;\n\n  Tuplet.prototype = {\n    init: function(notes, options) {\n      if (!notes || notes == []) {\n        throw new Vex.RuntimeError(\"BadArguments\", \"No notes provided for tuplet.\");\n      }\n\n      if (notes.length == 1) {\n        throw new Vex.RuntimeError(\"BadArguments\", \"Too few notes for tuplet.\");\n      }\n\n      this.options = Vex.Merge({}, options);\n      this.notes = notes;\n      this.num_notes = 'num_notes' in this.options ?\n        this.options.num_notes : notes.length;\n      this.beats_occupied = 'beats_occupied' in this.options ?\n        this.options.beats_occupied : 2;\n      this.bracketed = (notes[0].beam == null);\n      this.ratioed = false;\n      this.point = 28;\n      this.y_pos = 16;\n      this.x_pos = 100;\n      this.width = 200;\n      this.location = Tuplet.LOCATION_TOP;\n\n      Vex.Flow.Formatter.AlignRestsToNotes(notes, true, true);\n      this.resolveGlyphs();\n      this.attach();\n    },\n\n    attach: function () {\n      for (var i = 0; i < this.notes.length; i++) {\n        var note = this.notes[i];\n        note.setTuplet(this);\n      }\n    },\n\n    detach: function () {\n      for (var i = 0; i < this.notes.length; i++) {\n        var note = this.notes[i];\n        note.setTuplet(null);\n      }\n    },\n\n    setContext: function(context) {\n      this.context = context;\n      return this;\n    },\n\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed: function(bracketed) {\n      this.bracketed = bracketed ? true : false;\n      return this;\n    },\n\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed: function(ratioed) {\n      this.ratioed = ratioed ? true : false;\n      return this;\n    },\n\n    /**\n     * Set the tuplet to be displayed either on the top or bottom of the stave\n     */\n    setTupletLocation: function(location) {\n      if (!location) location = Tuplet.LOCATION_TOP;\n      else if (location != Tuplet.LOCATION_TOP &&\n          location != Tuplet.LOCATION_BOTTOM) {\n        throw new Vex.RERR(\"BadArgument\", \"Invalid tuplet location: \" + location);\n      }\n\n      this.location = location;\n      return this;\n    },\n\n    getNotes: function() {\n      return this.notes;\n    },\n\n    getNoteCount: function() {\n      return this.num_notes;\n    },\n\n    getBeatsOccupied: function() {\n      return this.beats_occupied;\n    },\n\n    setBeatsOccupied: function(beats) {\n      this.detach();\n      this.beats_occupied = beats;\n      this.resolveGlyphs();\n      this.attach();\n    },\n\n    resolveGlyphs: function() {\n      this.num_glyphs = [];\n      var n = this.num_notes;\n      while (n >= 1) {\n        this.num_glyphs.push(new Vex.Flow.Glyph(\"v\" + (n % 10), this.point));\n        n = parseInt(n / 10, 10);\n      }\n\n      this.denom_glyphs = [];\n      n = this.beats_occupied;\n      while (n >= 1) {\n        this.denom_glyphs.push(new Vex.Flow.Glyph(\"v\" + (n % 10), this.point));\n        n = parseInt(n / 10, 10);\n      }\n    },\n\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n\n      // determine x value of left bound of tuplet\n      var first_note = this.notes[0];\n      var last_note = this.notes[this.notes.length - 1];\n\n      if (!this.bracketed) {\n        this.x_pos = first_note.getStemX();\n        this.width = last_note.getStemX() - this.x_pos;\n      }\n      else {\n        this.x_pos = first_note.getTieLeftX() - 5;\n        this.width = last_note.getTieRightX() - this.x_pos + 5;\n      }\n\n      // determine y value for tuplet\n      var i;\n      if (this.location == Tuplet.LOCATION_TOP) {\n        this.y_pos = first_note.getStave().getYForLine(0) - 15;\n        //this.y_pos = first_note.getStemExtents().topY - 10;\n\n        for (i=0; i<this.notes.length; ++i) {\n          var top_y = this.notes[i].getStemDirection() === Vex.Flow.Stem.UP ?\n              this.notes[i].getStemExtents().topY - 10\n            : this.notes[i].getStemExtents().baseY - 20;\n          if (top_y < this.y_pos)\n            this.y_pos = top_y;\n        }\n      }\n      else {\n        this.y_pos = first_note.getStave().getYForLine(4) + 20;\n\n        for (i=0; i<this.notes.length; ++i) {\n          var bottom_y = this.notes[i].getStemDirection() === Vex.Flow.Stem.UP ?\n              this.notes[i].getStemExtents().baseY + 20\n            : this.notes[i].getStemExtents().topY + 10;\n          if (bottom_y > this.y_pos)\n            this.y_pos = bottom_y;\n        }\n      }\n\n      // calculate total width of tuplet notation\n      var width = 0;\n      var glyph;\n      for (glyph in this.num_glyphs) {\n        width += this.num_glyphs[glyph].getMetrics().width;\n      }\n      if (this.ratioed) {\n        for (glyph in this.denom_glyphs) {\n          width += this.denom_glyphs[glyph].getMetrics().width;\n        }\n        width += this.point * 0.32;\n      }\n\n      var notation_center_x = this.x_pos + (this.width/2);\n      var notation_start_x = notation_center_x - (width/2);\n\n      // draw bracket if the tuplet is not beamed\n      if (this.bracketed) {\n        var line_width = this.width/2 - width/2 - 5;\n\n        // only draw the bracket if it has positive length\n        if (line_width > 0) {\n          this.context.fillRect(this.x_pos, this.y_pos,line_width, 1);\n          this.context.fillRect(this.x_pos + this.width / 2 + width / 2 + 5,\n                                this.y_pos,line_width, 1);\n          this.context.fillRect(this.x_pos,\n              this.y_pos + (this.location == Tuplet.LOCATION_BOTTOM),\n              1, this.location * 10);\n          this.context.fillRect(this.x_pos + this.width,\n              this.y_pos + (this.location == Tuplet.LOCATION_BOTTOM),\n              1, this.location * 10);\n        }\n      }\n\n      // draw numerator glyphs\n      var x_offset = 0;\n      var size = this.num_glyphs.length;\n      for (glyph in this.num_glyphs) {\n        this.num_glyphs[size-glyph-1].render(\n            this.context, notation_start_x + x_offset,\n            this.y_pos + (this.point/3) - 2);\n        x_offset += this.num_glyphs[size-glyph-1].getMetrics().width;\n      }\n\n      // display colon and denominator if the ratio is to be shown\n      if (this.ratioed) {\n        var colon_x = notation_start_x + x_offset + this.point*0.16;\n        var colon_radius = this.point * 0.06;\n        this.context.beginPath();\n        this.context.arc(colon_x, this.y_pos - this.point*0.08,\n                         colon_radius, 0, Math.PI*2, true);\n        this.context.closePath();\n        this.context.fill();\n        this.context.beginPath();\n        this.context.arc(colon_x, this.y_pos + this.point*0.12,\n                         colon_radius, 0, Math.PI*2, true);\n        this.context.closePath();\n        this.context.fill();\n        x_offset += this.point*0.32;\n        size = this.denom_glyphs.length;\n        for (glyph in this.denom_glyphs) {\n          this.denom_glyphs[size-glyph-1].render(\n              this.context, notation_start_x + x_offset,\n              this.y_pos + (this.point/3) - 2);\n          x_offset += this.denom_glyphs[size-glyph-1].getMetrics().width;\n        }\n      }\n    }\n  };\n\n  return Tuplet;\n}());\n","// Vex Music Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n\n// Bounding boxes for interactive notation\n\n/** @constructor */\nVex.Flow.BoundingBox = (function() {\n  function BoundingBox(x, y, w, h) { this.init(x, y, w, h); }\n  BoundingBox.copy = function(that) {\n    return new BoundingBox(that.x, that.y, that.w, that.h); };\n\n  BoundingBox.prototype = {\n    init: function(x, y, w, h) {\n      this.x = x;\n      this.y = y;\n      this.w = w;\n      this.h = h;\n    },\n\n    getX: function() { return this.x; },\n    getY: function() { return this.y; },\n    getW: function() { return this.w; },\n    getH: function() { return this.h; },\n\n    setX: function(x) { this.x = x; return this; },\n    setY: function(y) { this.y = y; return this; },\n    setW: function(w) { this.w = w; return this; },\n    setH: function(h) { this.h = h; return this; },\n\n    move: function(x, y) { this.x += x; this.y += y; },\n    clone: function() { return BoundingBox.copy(this); },\n\n    // Merge my box with given box. Creates a bigger bounding box unless\n    // the given box is contained in this one.\n    mergeWith: function(boundingBox, ctx) {\n      var that = boundingBox;\n\n      var new_x = this.x < that.x ? this.x : that.x;\n      var new_y = this.y < that.y ? this.y : that.y;\n      var new_w = (this.x + this.w) < (that.x + that.w) ? (that.x + that.w) - this.x : (this.x + this.w) - Vex.Min(this.x, that.x);\n      var new_h = (this.y + this.h) < (that.y + that.h) ? (that.y + that.h) - this.y : (this.y + this.h) - Vex.Min(this.y, that.y);\n\n      this.x = new_x;\n      this.y = new_y;\n      this.w = new_w;\n      this.h = new_h;\n\n      if (ctx) this.draw(ctx);\n      return this;\n    },\n\n    draw: function(ctx, x, y) {\n      if (!x) x = 0;\n      if (!y) y = 0;\n      ctx.rect(this.x + x, this.y + y, this.w, this.h);\n      ctx.stroke();\n    }\n  };\n\n  return BoundingBox;\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// `TextNote` is a notation element that is positioned in time. Generally \n// meant for objects that sit above/below the staff and inline with each other.\n// Examples of this would be such as dynamics, lyrics, chord changes, etc.\nVex.Flow.TextNote = (function() {\n  function TextNote(text_struct) {\n    if (arguments.length > 0) this.init(text_struct);\n  }\n\n  TextNote.Justification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3\n  };\n\n  // Glyph data\n  TextNote.GLYPHS = {\n    \"segno\": {\n      code: \"v8c\",\n      point: 40,\n      x_shift: 0,\n      y_shift: -10\n      // width: 10 // optional\n    },\n    \"tr\": {\n      code: \"v1f\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"mordent_upper\": {\n      code: \"v1e\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"mordent_lower\": {\n      code: \"v45\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"f\": {\n      code: \"vba\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"p\": {\n      code: \"vbf\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"m\": {\n      code: \"v62\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"s\": {\n      code: \"v4a\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"z\": {\n      code: \"v80\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n    \"coda\": {\n      code: \"v4d\",\n      point: 40,\n      x_shift: 0,\n      y_shift: -8\n      // width: 10 // optional\n    },\n    \"pedal_open\": {\n      code: \"v36\",\n      point:40,\n      x_shift:0,\n      y_shift:0\n    },\n    \"pedal_close\": {\n      code: \"v5d\",\n      point:40,\n      x_shift:0,\n      y_shift:3\n    },\n    \"caesura_straight\": {\n      code: \"v34\",\n      point:40,\n      x_shift:0,\n      y_shift:2\n    },\n    \"caesura_curved\": {\n      code: \"v4b\",\n      point:40,\n      x_shift:0,\n      y_shift:2\n    },\n    \"breath\": {\n      code: \"v6c\",\n      point:40,\n      x_shift:0,\n      y_shift:0\n    },\n    \"tick\": {\n      code: \"v6f\",\n      point:50,\n      x_shift:0,\n      y_shift:0\n    },\n    \"turn\": {\n      code: \"v72\",\n      point:40,\n      x_shift:0,\n      y_shift:0\n    },\n    \"turn_inverted\": {\n      code: \"v33\",\n      point:40,\n      x_shift:0,\n      y_shift:0\n    },\n\n    // DEPRECATED - please use \"mordent_upper\" or \"mordent_lower\"\n    \"mordent\": {\n      code: \"v1e\",\n      point: 40,\n      x_shift: 0,\n      y_shift: 0\n      // width: 10 // optional\n    },\n  };\n\n  // ## Prototype Methods\n  Vex.Inherit(TextNote, Vex.Flow.Note, {\n    init: function(text_struct) {\n      TextNote.superclass.init.call(this, text_struct);\n\n      // Note properties\n      this.text = text_struct.text;\n      this.superscript = text_struct.superscript;\n      this.subscript = text_struct.subscript;\n      this.glyph_type = text_struct.glyph;\n      this.glyph = null;\n      this.font = {\n        family: \"Arial\",\n        size: 12,\n        weight: \"\"\n      };\n\n      // Set font\n      if (text_struct.font) this.font = text_struct.font;\n\n      // Determine and set initial note width. Note that the text width is \n      // an approximation and isn't very accurate. The only way to accurately\n      // measure the length of text is with `canvasContext.measureText()`\n      if (this.glyph_type) {\n        var struct = TextNote.GLYPHS[this.glyph_type];\n        if (!struct) throw new Vex.RERR(\"Invalid glyph type: \" + this.glyph_type);\n\n        this.glyph = new Vex.Flow.Glyph(struct.code, struct.point, {cache: false});\n\n        if (struct.width)\n          this.setWidth(struct.width);\n        else\n          this.setWidth(this.glyph.getMetrics().width);\n\n        this.glyph_struct = struct;\n      } else {\n        this.setWidth(Vex.Flow.textWidth(this.text));\n      }\n      this.line = text_struct.line || 0;\n      this.smooth = text_struct.smooth || false;\n      this.ignore_ticks = text_struct.ignore_ticks || false;\n      this.justification = TextNote.Justification.LEFT;\n    },\n\n    // Set the horizontal justification of the TextNote\n    setJustification: function(just) {\n      this.justification = just;\n      return this;\n    },\n\n    // Set the Stave line on which the note should be placed\n    setLine: function(line) {\n      this.line = line;\n      return this;\n    },\n\n    // Pre-render formatting\n    preFormat: function() {\n      if (!this.context) throw new Vex.RERR(\"NoRenderContext\",\n          \"Can't measure text without rendering context.\");\n      if (this.preFormatted) return;\n\n      if (this.smooth) {\n        this.setWidth(0);\n      } else {\n        if (this.glyph) {\n          // Width already set.\n        } else {\n          this.setWidth(this.context.measureText(this.text).width);\n        }\n      }\n\n      if (this.justification == TextNote.Justification.CENTER) {\n        this.extraLeftPx = this.width / 2;\n      } else if (this.justification == TextNote.Justification.RIGHT) {\n        this.extraLeftPx = this.width;\n      }\n\n      this.setPreFormatted(true);\n    },\n\n    // Renders the TextNote\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoCanvasContext\",\n          \"Can't draw without a canvas context.\");\n      if (!this.stave) throw new Vex.RERR(\"NoStave\", \"Can't draw without a stave.\");\n\n      var ctx = this.context;\n      var x = this.getAbsoluteX();\n      if (this.justification == TextNote.Justification.CENTER) {\n        x -= this.getWidth() / 2;\n      } else if (this.justification == TextNote.Justification.RIGHT) {\n        x -= this.getWidth();\n      }\n\n      var y;\n      if (this.glyph) {\n        y = this.stave.getYForLine(this.line + (-3));\n        this.glyph.render(this.context,\n                          x + this.glyph_struct.x_shift,\n                          y + this.glyph_struct.y_shift);\n      } else {\n        y = this.stave.getYForLine(this.line + (-3));\n        ctx.save();\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n        ctx.fillText(this.text, x, y);\n\n        // Width of the letter M gives us the approximate height of the text\n        var height = ctx.measureText(\"M\").width;\n        // Get accurate width of text\n        var width = ctx.measureText(this.text).width;\n\n        // Write superscript\n        if (this.superscript) {\n          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n          ctx.fillText(this.superscript, x + width + 2, y - (height/2.2));\n        }\n\n        // Write subscript\n        if (this.subscript) {\n          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n          ctx.fillText(this.subscript, x + width + 2, y + (height/2.2) - 1);\n        }\n\n        ctx.restore();\n      }\n    }\n  });\n\n  return TextNote;\n}());\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n// Author Larry Kuhns 2013\r\n// Class to draws string numbers into the notation.\r\n\r\n/**\r\n * @constructor\r\n */\r\nVex.Flow.FretHandFinger = (function() {\r\n  function FretHandFinger(number) {\r\n    if (arguments.length > 0) this.init(number);\r\n  }\r\n  FretHandFinger.CATEGORY = \"frethandfinger\";\r\n\r\n  var Modifier = Vex.Flow.Modifier;\r\n\r\n  // Arrange fingerings inside a ModifierContext.\r\n  FretHandFinger.format = function(nums, state) {\r\n    var left_shift = state.left_shift;\r\n    var right_shift = state.right_shift;\r\n    var num_spacing = 1;\r\n\r\n    if (!nums || nums.length === 0) return false;\r\n\r\n    var nums_list = [];\r\n    var prev_note = null;\r\n    var shift_left = 0;\r\n    var shift_right = 0;\r\n\r\n    var i, num, note, pos, props_tmp;\r\n    for (i = 0; i < nums.length; ++i) {\r\n      num = nums[i];\r\n      note = num.getNote();\r\n      pos = num.getPosition();\r\n      var props = note.getKeyProps()[num.getIndex()];\r\n      if (note != prev_note) {\r\n        for (var n = 0; n < note.keys.length; ++n) {\r\n          props_tmp = note.getKeyProps()[n];\r\n          if (left_shift === 0)\r\n            shift_left = (props_tmp.displaced ? note.getExtraLeftPx() : shift_left);\r\n          if (right_shift === 0)\r\n            shift_right = (props_tmp.displaced ? note.getExtraRightPx() : shift_right);\r\n        }\r\n        prev_note = note;\r\n      }\r\n\r\n      nums_list.push({ line: props.line, pos: pos, shiftL: shift_left, shiftR: shift_right, note: note, num: num });\r\n    }\r\n\r\n    // Sort fingernumbers by line number.\r\n    nums_list.sort(function(a, b) { return (b.line - a.line); });\r\n\r\n    var num_shiftL = 0;\r\n    var num_shiftR = 0;\r\n    var x_widthL = 0;\r\n    var x_widthR = 0;\r\n    var last_line = null;\r\n    var last_note = null;\r\n\r\n    for (i = 0; i < nums_list.length; ++i) {\r\n      var num_shift = 0;\r\n      note = nums_list[i].note;\r\n      pos = nums_list[i].pos;\r\n      num = nums_list[i].num;\r\n      var line = nums_list[i].line;\r\n      var shiftL = nums_list[i].shiftL;\r\n      var shiftR = nums_list[i].shiftR;\r\n\r\n      // Reset the position of the string number every line.\r\n      if (line != last_line || note != last_note) {\r\n        num_shiftL = left_shift + shiftL;\r\n        num_shiftR = right_shift + shiftR;\r\n      }\r\n\r\n      var num_width = num.getWidth() + num_spacing;\r\n      if (pos == Vex.Flow.Modifier.Position.LEFT) {\r\n        num.setXShift(left_shift + num_shiftL);\r\n        num_shift = left_shift + num_width; // spacing\r\n        x_widthL = (num_shift > x_widthL) ? num_shift : x_widthL;\r\n      } else if (pos == Vex.Flow.Modifier.Position.RIGHT) {\r\n        num.setXShift(num_shiftR);\r\n        num_shift = shift_right + num_width; // spacing\r\n        x_widthR = (num_shift > x_widthR) ? num_shift : x_widthR;\r\n      }\r\n      last_line = line;\r\n      last_note = note;\r\n    }\r\n\r\n    state.left_shift += x_widthL;\r\n    state.right_shift += x_widthR;\r\n  };\r\n\r\n  Vex.Inherit(FretHandFinger, Modifier, {\r\n    init: function(number) {\r\n      var superclass = Vex.Flow.FretHandFinger.superclass;\r\n      superclass.init.call(this);\r\n\r\n      this.note = null;\r\n      this.index = null;\r\n      this.finger = number;\r\n      this.width = 7;\r\n      this.position = Modifier.Position.LEFT;  // Default position above stem or note head\r\n      this.x_shift = 0;\r\n      this.y_shift = 0;\r\n      this.x_offset = 0;       // Horizontal offset from default\r\n      this.y_offset = 0;       // Vertical offset from default\r\n      this.font = {\r\n        family: \"sans-serif\",\r\n        size: 9,\r\n        weight: \"bold\"\r\n      };\r\n    },\r\n\r\n    getNote: function() { return this.note; },\r\n    setNote: function(note) { this.note = note; return this; },\r\n    getIndex: function() { return this.index; },\r\n    setIndex: function(index) { this.index = index; return this; },\r\n    getPosition: function() { return this.position; },\r\n    setPosition: function(position) {\r\n      if (position >= Modifier.Position.LEFT &&\r\n          position <= Modifier.Position.BELOW)\r\n        this.position = position;\r\n      return this;\r\n    },\r\n    setFretHandFinger: function(number) { this.finger = number; return this; },\r\n    setOffsetX: function(x) { this.x_offset = x; return this; },\r\n    setOffsetY: function(y) { this.y_offset = y; return this; },\r\n\r\n    draw: function() {\r\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\r\n        \"Can't draw string number without a context.\");\r\n      if (!(this.note && (this.index != null))) throw new Vex.RERR(\"NoAttachedNote\",\r\n        \"Can't draw string number without a note and index.\");\r\n\r\n      var ctx = this.context;\r\n      var start = this.note.getModifierStartXY(this.position, this.index);\r\n      var dot_x = (start.x + this.x_shift + this.x_offset);\r\n      var dot_y = start.y + this.y_shift + this.y_offset + 5;\r\n\r\n      switch (this.position) {\r\n        case Modifier.Position.ABOVE:\r\n          dot_x -= 4;\r\n          dot_y -= 12;\r\n          break;\r\n        case Modifier.Position.BELOW:\r\n          dot_x -= 2;\r\n          dot_y += 10;\r\n          break;\r\n        case Modifier.Position.LEFT:\r\n          dot_x -= this.width;\r\n          break;\r\n        case Modifier.Position.RIGHT:\r\n          dot_x += 1;\r\n          break;\r\n      }\r\n\r\n      ctx.save();\r\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\r\n      ctx.fillText(\"\" + this.finger, dot_x, dot_y);\r\n\r\n      ctx.restore();\r\n    }\r\n  });\r\n\r\n  return FretHandFinger;\r\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Larry Kuhns\r\n//\r\n// ## Description\r\n//\r\n// This file implements the `StringNumber` class which renders string\r\n// number annotations beside notes.\r\n\r\nVex.Flow.StringNumber = (function() {\r\n  function StringNumber(number) {\r\n    if (arguments.length > 0) this.init(number);\r\n  }\r\n  StringNumber.CATEGORY = \"stringnumber\";\r\n\r\n  var Modifier = Vex.Flow.Modifier;\r\n\r\n  // ## Static Methods\r\n  // Arrange string numbers inside a `ModifierContext`\r\n  StringNumber.format = function(nums, state) {\r\n    var left_shift = state.left_shift;\r\n    var right_shift = state.right_shift;\r\n    var num_spacing = 1;\r\n\r\n    if (!nums || nums.length === 0) return this;\r\n\r\n    var nums_list = [];\r\n    var prev_note = null;\r\n    var shift_left = 0;\r\n    var shift_right = 0;\r\n\r\n    var i, num, note, pos, props_tmp;\r\n    for (i = 0; i < nums.length; ++i) {\r\n      num = nums[i];\r\n      note = num.getNote();\r\n\r\n      for (i = 0; i < nums.length; ++i) {\r\n        num = nums[i];\r\n        note = num.getNote();\r\n        pos = num.getPosition();\r\n        var props = note.getKeyProps()[num.getIndex()];\r\n\r\n        if (note != prev_note) {\r\n          for (var n = 0; n < note.keys.length; ++n) {\r\n            props_tmp = note.getKeyProps()[n];\r\n            if (left_shift === 0)\r\n              shift_left = (props_tmp.displaced ? note.getExtraLeftPx() : shift_left);\r\n            if (right_shift === 0)\r\n              shift_right = (props_tmp.displaced ? note.getExtraRightPx() : shift_right);\r\n          }\r\n          prev_note = note;\r\n        }\r\n\r\n        nums_list.push({ line: props.line, pos: pos, shiftL: shift_left, shiftR: shift_right, note: note, num: num });\r\n      }\r\n    }\r\n\r\n    // Sort string numbers by line number.\r\n    nums_list.sort(function(a, b) { return (b.line - a.line); });\r\n\r\n    var num_shiftL = 0;\r\n    var num_shiftR = 0;\r\n    var x_widthL = 0;\r\n    var x_widthR = 0;\r\n    var last_line = null;\r\n    var last_note = null;\r\n    for (i = 0; i < nums_list.length; ++i) {\r\n      var num_shift = 0;\r\n      note = nums_list[i].note;\r\n      pos = nums_list[i].pos;\r\n      num = nums_list[i].num;\r\n      var line = nums_list[i].line;\r\n      var shiftL = nums_list[i].shiftL;\r\n      var shiftR = nums_list[i].shiftR;\r\n\r\n      // Reset the position of the string number every line.\r\n      if (line != last_line || note != last_note) {\r\n        num_shiftL = left_shift + shiftL;\r\n        num_shiftR = right_shift + shiftR;\r\n      }\r\n\r\n      var num_width = num.getWidth() + num_spacing;\r\n      if (pos == Vex.Flow.Modifier.Position.LEFT) {\r\n        num.setXShift(left_shift);\r\n        num_shift = shift_left + num_width; // spacing\r\n        x_widthL = (num_shift > x_widthL) ? num_shift : x_widthL;\r\n      } else if (pos == Vex.Flow.Modifier.Position.RIGHT) {\r\n        num.setXShift(num_shiftR);\r\n        num_shift += num_width; // spacing\r\n        x_widthR = (num_shift > x_widthR) ? num_shift : x_widthR;\r\n      }\r\n      last_line = line;\r\n      last_note = note;\r\n    }\r\n\r\n    state.left_shift += x_widthL;\r\n    state.right_shift += x_widthR;\r\n    return true;\r\n  };\r\n\r\n  // ## Prototype Methods\r\n  Vex.Inherit(StringNumber, Modifier, {\r\n    init: function(number) {\r\n      StringNumber.superclass.init.call(this);\r\n\r\n      this.note = null;\r\n      this.last_note = null;\r\n      this.index = null;\r\n      this.string_number = number;\r\n      this.setWidth(20);                                 // ???\r\n      this.position = Modifier.Position.ABOVE;  // Default position above stem or note head\r\n      this.x_shift = 0;\r\n      this.y_shift = 0;\r\n      this.x_offset = 0;                               // Horizontal offset from default\r\n      this.y_offset = 0;                               // Vertical offset from default\r\n      this.dashed = true;                              // true - draw dashed extension  false - no extension\r\n      this.leg = Vex.Flow.Renderer.LineEndType.NONE;   // draw upward/downward leg at the of extension line\r\n      this.radius = 8;\r\n      this.font = {\r\n        family: \"sans-serif\",\r\n        size: 10,\r\n        weight: \"bold\"\r\n      };\r\n    },\r\n\r\n    getNote: function() { return this.note; },\r\n    setNote: function(note) { this.note = note; return this; },\r\n    getIndex: function() { return this.index; },\r\n    setIndex: function(index) { this.index = index; return this; },\r\n\r\n    setLineEndType: function(leg) {\r\n      if (leg >= Vex.Flow.Renderer.LineEndType.NONE &&\r\n          leg <= Vex.Flow.Renderer.LineEndType.DOWN)\r\n        this.leg = leg;\r\n      return this;\r\n    },\r\n\r\n    getPosition: function() { return this.position; },\r\n    setPosition: function(position) {\r\n      if (position >= Modifier.Position.LEFT &&\r\n          position <= Modifier.Position.BELOW)\r\n        this.position = position;\r\n      return this;\r\n    },\r\n\r\n    setStringNumber: function(number) { this.string_number = number; return this; },\r\n    setOffsetX: function(x) { this.x_offset = x; return this; },\r\n    setOffsetY: function(y) { this.y_offset = y; return this; },\r\n    setLastNote: function(note) { this.last_note = note; return this; },\r\n    setDashed: function(dashed) { this.dashed = dashed; return this; },\r\n\r\n    draw: function() {\r\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\r\n        \"Can't draw string number without a context.\");\r\n      if (!(this.note && (this.index != null))) throw new Vex.RERR(\"NoAttachedNote\",\r\n        \"Can't draw string number without a note and index.\");\r\n\r\n      var ctx = this.context;\r\n      var line_space = this.note.stave.options.spacing_between_lines_px;\r\n\r\n      var start = this.note.getModifierStartXY(this.position, this.index);\r\n      var dot_x = (start.x + this.x_shift + this.x_offset);\r\n      var dot_y = start.y + this.y_shift + this.y_offset;\r\n\r\n      switch (this.position) {\r\n        case Modifier.Position.ABOVE:\r\n        case Modifier.Position.BELOW:\r\n          var stem_ext = this.note.getStemExtents();\r\n          var top = stem_ext.topY;\r\n          var bottom = stem_ext.baseY + 2;\r\n\r\n          if (this.note.stem_direction == Vex.Flow.StaveNote.STEM_DOWN) {\r\n            top = stem_ext.baseY;\r\n            bottom = stem_ext.topY - 2;\r\n          }\r\n\r\n          if (this.position == Modifier.Position.ABOVE) {\r\n            dot_y = this.note.hasStem() ? top - (line_space * 1.75)\r\n                                        : start.y - (line_space * 1.75);\r\n        } else {\r\n            dot_y = this.note.hasStem() ? bottom + (line_space * 1.5)\r\n                                        : start.y + (line_space * 1.75);\r\n          }\r\n\r\n          dot_y += this.y_shift + this.y_offset;\r\n\r\n          break;\r\n        case Modifier.Position.LEFT:\r\n          dot_x -= (this.radius / 2) + 5;\r\n          break;\r\n        case Modifier.Position.RIGHT:\r\n          dot_x += (this.radius / 2) + 6;\r\n          break;\r\n      }\r\n\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\r\n      ctx.lineWidth = 1.5;\r\n      ctx.stroke();\r\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\r\n      var x = dot_x - ctx.measureText(this.string_number).width / 2;\r\n      ctx.fillText(\"\" + this.string_number, x, dot_y + 4.5);\r\n\r\n      if (this.last_note != null) {\r\n        var end = this.last_note.getStemX() - this.note.getX() + 5;\r\n        ctx.strokeStyle=\"#000000\";\r\n        ctx.lineCap = \"round\";\r\n        ctx.lineWidth = 0.6;\r\n        if (this.dashed)\r\n          Vex.Flow.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3,3]);\r\n        else\r\n          Vex.Flow.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3,0]);\r\n\r\n        var len, pattern;\r\n        switch (this.leg) {\r\n          case Vex.Flow.Renderer.LineEndType.UP:\r\n            len = -10;\r\n            pattern = this.dashed ? [3,3] : [3,0];\r\n            Vex.Flow.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\r\n            break;\r\n          case Vex.Flow.Renderer.LineEndType.DOWN:\r\n            len = 10;\r\n            pattern = this.dashed ? [3,3] : [3,0];\r\n            Vex.Flow.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\r\n            break;\r\n        }\r\n      }\r\n\r\n      ctx.restore();\r\n    }\r\n  });\r\n\r\n  return StringNumber;\r\n}());\r\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Larry Kuhns\r\n//\r\n// ## Description\r\n//\r\n// This file implements the `Stroke` class which renders chord strokes\r\n// that can be arpeggiated, brushed, rasquedo, etc.\r\n\r\nVex.Flow.Stroke = (function() {\r\n  function Stroke(type, options) {\r\n    if (arguments.length > 0) this.init(type, options);\r\n  }\r\n  Stroke.CATEGORY = \"strokes\";\r\n\r\n  Stroke.Type = {\r\n    BRUSH_DOWN: 1,\r\n    BRUSH_UP: 2,\r\n    ROLL_DOWN: 3,        // Arpegiated chord\r\n    ROLL_UP: 4,          // Arpegiated chord\r\n    RASQUEDO_DOWN: 5,\r\n    RASQUEDO_UP: 6\r\n  };\r\n\r\n  var Modifier = Vex.Flow.Modifier;\r\n\r\n  // ## Static Methods\r\n\r\n  // Arrange strokes inside `ModifierContext`\r\n  Stroke.format = function(strokes, state) {\r\n    var left_shift = state.left_shift;\r\n    var stroke_spacing = 0;\r\n\r\n    if (!strokes || strokes.length === 0) return this;\r\n\r\n    var str_list = [];\r\n    var i, str, shift;\r\n    for (i = 0; i < strokes.length; ++i) {\r\n      str = strokes[i];\r\n      var note = str.getNote();\r\n      var props;\r\n      if (note instanceof Vex.Flow.StaveNote) {\r\n        props = note.getKeyProps()[str.getIndex()];\r\n        shift = (props.displaced ? note.getExtraLeftPx() : 0);\r\n        str_list.push({ line: props.line, shift: shift, str: str });\r\n      } else {\r\n        props = note.getPositions()[str.getIndex()];\r\n        str_list.push({ line: props.str, shift: 0, str: str });\r\n      }\r\n    }\r\n\r\n    var str_shift = left_shift;\r\n    var x_shift = 0;\r\n\r\n    // There can only be one stroke .. if more than one, they overlay each other\r\n    for (i = 0; i < str_list.length; ++i) {\r\n      str = str_list[i].str;\r\n      shift = str_list[i].shift;\r\n\r\n      str.setXShift(str_shift + shift);\r\n      x_shift = Math.max(str.getWidth() + stroke_spacing, x_shift);\r\n    }\r\n\r\n    state.left_shift += x_shift;\r\n    return true;\r\n  };\r\n\r\n  // ## Prototype Methods\r\n  Vex.Inherit(Stroke, Modifier, {\r\n    init: function(type, options) {\r\n      Stroke.superclass.init.call(this);\r\n\r\n      this.note = null;\r\n      this.options = Vex.Merge({}, options);\r\n\r\n      // multi voice - span stroke across all voices if true\r\n      this.all_voices = 'all_voices' in this.options ?\r\n        this.options.all_voices : true;\r\n\r\n      // multi voice - end note of stroke, set in draw()\r\n      this.note_end = null;\r\n      this.index = null;\r\n      this.type = type;\r\n      this.position = Modifier.Position.LEFT;\r\n\r\n      this.render_options = {\r\n        font_scale: 38,\r\n        stroke_px: 3,\r\n        stroke_spacing: 10\r\n      };\r\n\r\n      this.font = {\r\n       family: \"serif\",\r\n       size: 10,\r\n       weight: \"bold italic\"\r\n     };\r\n\r\n      this.setXShift(0);\r\n      this.setWidth(10);\r\n    },\r\n\r\n    getPosition: function() { return this.position; },\r\n    addEndNote: function(note) { this.note_end = note; return this; },\r\n\r\n    draw: function() {\r\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\r\n        \"Can't draw stroke without a context.\");\r\n      if (!(this.note && (this.index != null))) throw new Vex.RERR(\"NoAttachedNote\",\r\n        \"Can't draw stroke without a note and index.\");\r\n      var start = this.note.getModifierStartXY(this.position, this.index);\r\n      var ys = this.note.getYs();\r\n      var topY = start.y;\r\n      var botY = start.y;\r\n      var x = start.x - 5;\r\n      var line_space = this.note.stave.options.spacing_between_lines_px;\r\n\r\n      var notes = this.getModifierContext().getModifiers(this.note.getCategory());\r\n      var i;\r\n      for (i = 0; i < notes.length; i++) {\r\n        ys = notes[i].getYs();\r\n        for (var n = 0; n < ys.length; n++) {\r\n          if (this.note == notes[i] || this.all_voices) {\r\n            topY = Vex.Min(topY, ys[n]);\r\n            botY = Vex.Max(botY, ys[n]);\r\n          }\r\n        }\r\n      }\r\n\r\n      var arrow, arrow_shift_x, arrow_y, text_shift_x, text_y;\r\n      switch (this.type) {\r\n        case Stroke.Type.BRUSH_DOWN:\r\n          arrow = \"vc3\";\r\n          arrow_shift_x = -3;\r\n          arrow_y = topY - (line_space / 2) + 10;\r\n          botY += (line_space / 2);\r\n          break;\r\n        case Stroke.Type.BRUSH_UP:\r\n          arrow = \"v11\";\r\n          arrow_shift_x = 0.5;\r\n          arrow_y = botY + (line_space / 2);\r\n          topY -= (line_space / 2);\r\n          break;\r\n        case Stroke.Type.ROLL_DOWN:\r\n        case Stroke.Type.RASQUEDO_DOWN:\r\n          arrow = \"vc3\";\r\n          arrow_shift_x = -3;\r\n          text_shift_x = this.x_shift + arrow_shift_x - 2;\r\n          if (this.note instanceof Vex.Flow.StaveNote) {\r\n            topY += 1.5 * line_space;\r\n            if ((botY - topY) % 2 !== 0) {\r\n              botY += 0.5 * line_space;\r\n            } else {\r\n              botY += line_space;\r\n            }\r\n            arrow_y = topY - line_space;\r\n            text_y = botY + line_space + 2;\r\n          } else {\r\n            topY += 1.5 * line_space;\r\n            botY += line_space;\r\n            arrow_y = topY - 0.75 * line_space;\r\n            text_y = botY + 0.25 * line_space;\r\n          }\r\n          break;\r\n        case Stroke.Type.ROLL_UP:\r\n        case Stroke.Type.RASQUEDO_UP:\r\n          arrow = \"v52\";\r\n          arrow_shift_x = -4;\r\n          text_shift_x = this.x_shift + arrow_shift_x - 1;\r\n          if (this.note instanceof Vex.Flow.StaveNote) {\r\n            arrow_y = line_space / 2;\r\n            topY += 0.5 * line_space;\r\n            if ((botY - topY) % 2 === 0) {\r\n              botY += line_space / 2;\r\n            }\r\n            arrow_y = botY + 0.5 * line_space;\r\n            text_y = topY - 1.25 * line_space;\r\n          } else {\r\n            topY += 0.25 * line_space;\r\n            botY += 0.5 * line_space;\r\n            arrow_y = botY + 0.25 * line_space;\r\n            text_y = topY - line_space;\r\n          }\r\n          break;\r\n      }\r\n\r\n      // Draw the stroke\r\n      if (this.type == Stroke.Type.BRUSH_DOWN ||\r\n          this.type == Stroke.Type.BRUSH_UP) {\r\n        this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);\r\n      } else {\r\n        if (this.note instanceof Vex.Flow.StaveNote) {\r\n          for (i = topY; i <= botY; i += line_space) {\r\n            Vex.Flow.renderGlyph(this.context, x + this.x_shift - 4,\r\n                                 i,\r\n                                 this.render_options.font_scale, \"va3\");\r\n          }\r\n        } else {\r\n          for (i = topY; i <= botY; i+= 10) {\r\n            Vex.Flow.renderGlyph(this.context, x + this.x_shift - 4,\r\n                                 i,\r\n                                 this.render_options.font_scale, \"va3\");\r\n          }\r\n          if (this.type == Vex.Flow.Stroke.Type.RASQUEDO_DOWN)\r\n            text_y = i + 0.25 * line_space;\r\n        }\r\n      }\r\n\r\n      // Draw the arrow head\r\n      Vex.Flow.renderGlyph(this.context, x + this.x_shift + arrow_shift_x, arrow_y,\r\n                           this.render_options.font_scale, arrow);\r\n\r\n      // Draw the rasquedo \"R\"\r\n      if (this.type == Stroke.Type.RASQUEDO_DOWN ||\r\n          this.type == Stroke.Type.RASQUEDO_UP) {\r\n        this.context.save();\r\n        this.context.setFont(this.font.family, this.font.size, this.font.weight);\r\n        this.context.fillText(\"R\", x + text_shift_x, text_y);\r\n        this.context.restore();\r\n      }\r\n    }\r\n  });\r\n\r\n  return Stroke;\r\n}());","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nVex.Flow.Curve = (function() {\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  function Curve(from, to, options) {\n    if (arguments.length > 0) this.init(from, to, options);\n  }\n\n  Curve.Position = {\n    NEAR_HEAD: 1,\n    NEAR_TOP: 2\n  };\n\n  Curve.DEBUG = true;\n\n  Curve.prototype = {\n    init: function(from, to, options) {\n      this.render_options = {\n        spacing: 2,\n        thickness: 2,\n        x_shift: 0,\n        y_shift: 10,\n        position: Curve.Position.NEAR_HEAD,\n        invert: false,\n        cps: [{x: 0, y: 10}, {x: 0, y: 10}]\n      };\n\n      Vex.Merge(this.render_options, options);\n      this.setNotes(from, to);\n    },\n\n    setContext: function(context) { this.context = context; return this; },\n    setNotes: function(from, to) {\n      if (!from && !to)\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Curve needs to have either first_note or last_note set.\");\n\n      this.from = from;\n      this.to = to;\n      return this;\n    },\n\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial: function() {\n      return (!this.from || !this.to);\n    },\n\n    renderCurve: function(params) {\n      var ctx = this.context;\n      var cps = this.render_options.cps;\n\n      var x_shift = this.render_options.x_shift;\n      var y_shift = this.render_options.y_shift * params.direction;\n\n      var first_x = params.first_x + x_shift;\n      var first_y = params.first_y + y_shift;\n      var last_x = params.last_x - x_shift;\n      var last_y = params.last_y + y_shift;\n      var thickness = this.render_options.thickness;\n\n      var cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n      ctx.beginPath();\n      ctx.moveTo(first_x, first_y);\n      ctx.bezierCurveTo(first_x + cp_spacing + cps[0].x,\n                        first_y + (cps[0].y * params.direction),\n                        last_x - cp_spacing + cps[1].x,\n                        last_y + (cps[1].y * params.direction),\n                        last_x, last_y);\n      ctx.bezierCurveTo(last_x - cp_spacing + cps[1].x,\n                        last_y + ((cps[1].y + thickness) * params.direction),\n                        first_x + cp_spacing + cps[0].x,\n                        first_y + ((cps[0].y + thickness) * params.direction),\n                        first_x, first_y);\n      ctx.stroke();\n      ctx.closePath();\n      ctx.fill();\n    },\n\n    draw: function() {\n      if (!this.context)\n        throw new Vex.RERR(\"NoContext\", \"No context to render tie.\");\n      var first_note = this.from;\n      var last_note = this.to;\n      var first_x, last_x, first_y, last_y, stem_direction;\n\n      var metric = \"baseY\";\n      var end_metric = \"baseY\";\n      var position = this.render_options.position;\n      var position_end = this.render_options.position_end;\n\n      if (position === Curve.Position.NEAR_TOP) {\n        metric = \"topY\";\n        end_metric = \"topY\";\n      }\n\n      if (position_end == Curve.Position.NEAR_HEAD) {\n        end_metric = \"baseY\";\n      } else if (position_end == Curve.Position.NEAR_TOP) {\n        end_metric = \"topY\";\n      }\n\n      if (first_note) {\n        first_x = first_note.getTieRightX();\n        stem_direction = first_note.getStemDirection();\n        first_y = first_note.getStemExtents()[metric];\n      } else {\n        first_x = last_note.getStave().getTieStartX();\n        first_y = last_note.getStemExtents()[metric];\n      }\n\n      if (last_note) {\n        last_x = last_note.getTieLeftX();\n        stem_direction = last_note.getStemDirection();\n        last_y = last_note.getStemExtents()[end_metric];\n      } else {\n        last_x = first_note.getStave().getTieEndX();\n        last_y = first_note.getStemExtents()[end_metric];\n      }\n\n      this.renderCurve({\n        first_x: first_x,\n        last_x: last_x,\n        first_y: first_y,\n        last_y: last_y,\n        direction: stem_direction *\n          (this.render_options.invert === true ? -1 : 1)\n      });\n      return true;\n    }\n  };\n\n  return Curve;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nVex.Flow.StaveLine = (function() {\n  function StaveLine(notes) {\n    if (arguments.length > 0) this.init(notes);\n  }\n\n  // Text Positioning\n  StaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2\n  };\n\n  StaveLine.TextJustification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3\n  };\n\n  // ## Prototype Methods\n  StaveLine.prototype = {\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    first_note: Note,\n    //    last_note: Note,\n    //    first_indices: [n1, n2, n3],\n    //    last_indices: [n1, n2, n3]\n    //  }\n    //  ```\n    init: function(notes) {\n      this.notes = notes;\n      this.context = null;\n\n      this.text = \"\";\n\n      this.font = {\n        family: \"Arial\",\n        size: 10,\n        weight: \"\"\n      };\n\n      this.render_options = {\n        // Space to add to the left or the right\n        padding_left: 4,\n        padding_right: 3,\n\n        // The width of the line in pixels\n        line_width: 1,\n        // An array of line/space lengths. Unsupported with Raphael (SVG)\n        line_dash: null,\n        // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)\n        rounded_end: true,\n        // The color of the line and arrowheads\n        color: null,\n\n        // Flags to draw arrows on each end of the line\n        draw_start_arrow: false,\n        draw_end_arrow: false,\n\n        // The length of the arrowhead sides\n        arrowhead_length: 10,\n        // The angle of the arrowhead\n        arrowhead_angle: Math.PI / 8,\n\n        // The position of the text\n        text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n        text_justification: StaveLine.TextJustification.CENTER\n      };\n\n      this.setNotes(notes);\n    },\n\n    // Set the rendering context\n    setContext: function(context) { this.context = context; return this; },\n    // Set the font for the `StaveLine` text\n    setFont: function(font) { this.font = font; return this; },\n    // The the annotation for the `StaveLine`\n    setText: function(text) { this.text = text; return this; },\n\n    // Set the notes for the `StaveLine`\n    setNotes: function(notes) {\n      if (!notes.first_note && !notes.last_note)\n        throw new Vex.RuntimeError(\"BadArguments\",\n            \"Notes needs to have either first_note or last_note set.\");\n\n      if (!notes.first_indices) notes.first_indices = [0];\n      if (!notes.last_indices) notes.last_indices = [0];\n\n      if (notes.first_indices.length != notes.last_indices.length)\n        throw new Vex.RuntimeError(\"BadArguments\", \"Connected notes must have similar\" +\n          \" index sizes\");\n\n      // Success. Lets grab 'em notes.\n      this.first_note = notes.first_note;\n      this.first_indices = notes.first_indices;\n      this.last_note = notes.last_note;\n      this.last_indices = notes.last_indices;\n      return this;\n    },\n\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle: function() {\n      if (!this.context) {\n        throw new Vex.RERR(\"NoContext\",\"No context to apply the styling to\");\n      }\n\n      var render_options = this.render_options;\n      var ctx = this.context;\n\n      if (render_options.line_dash) {\n        ctx.setLineDash(render_options.line_dash);\n      }\n\n      if (render_options.line_width) {\n        ctx.setLineWidth(render_options.line_width);\n      }\n\n      if (render_options.rounded_end) {\n        ctx.setLineCap(\"round\");\n      } else {\n        ctx.setLineCap(\"square\");\n      }\n    },\n\n    // Apply the text styling to the context\n    applyFontStyle: function() {\n      if (!this.context) {\n        throw new Vex.RERR(\"NoContext\",\"No context to apply the styling to\");\n      }\n\n      var ctx = this.context;\n\n      if (this.font) {\n        ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      }\n\n      if (this.render_options.color) {\n        ctx.setStrokeStyle(this.render_options.color);\n        ctx.setFillStyle(this.render_options.color);\n      }\n    },\n\n    // Renders the `StaveLine` on the context\n    draw: function() {\n      if (!this.context) {\n        throw new Vex.RERR(\"NoContext\", \"No context to render StaveLine.\");\n      }\n\n      var ctx = this.context;\n      var first_note = this.first_note;\n      var last_note = this.last_note;\n      var render_options = this.render_options;\n\n      ctx.save();\n      this.applyLineStyle();\n\n      // Cycle through each set of indices and draw lines\n      var start_position;\n      var end_position;\n      this.first_indices.forEach(function(first_index, i) {\n        var last_index = this.last_indices[i];\n\n        // Get initial coordinates for the start/end of the line\n        start_position = first_note.getModifierStartXY(2, first_index);\n        end_position = last_note.getModifierStartXY(1, last_index);\n        var upwards_slope = start_position.y > end_position.y;\n\n        // Adjust `x` coordinates for modifiers\n        start_position.x += first_note.getMetrics().modRightPx +\n                            render_options.padding_left;\n        end_position.x -= last_note.getMetrics().modLeftPx +\n                          render_options.padding_right;\n\n\n        // Adjust first `x` coordinates for displacements\n        var notehead_width = first_note.getGlyph().head_width;\n        var first_displaced = first_note.getKeyProps()[first_index].displaced;\n        if (first_displaced && first_note.getStemDirection() === 1) {\n          start_position.x += notehead_width + render_options.padding_left;\n        }\n\n        // Adjust last `x` coordinates for displacements\n        var last_displaced = last_note.getKeyProps()[last_index].displaced;\n        if (last_displaced && last_note.getStemDirection() === -1) {\n          end_position.x -= notehead_width + render_options.padding_right;\n        }\n\n        // Adjust y position better if it's not coming from the center of the note\n        start_position.y += upwards_slope ? -3 : 1;\n        end_position.y += upwards_slope ? 2 : 0;\n\n        drawArrowLine(ctx, start_position, end_position, this.render_options);\n\n      }, this);\n\n      ctx.restore();\n\n      // Determine the x coordinate where to start the text\n      var text_width = ctx.measureText(this.text).width;\n      var justification = render_options.text_justification;\n      var x = 0;\n      if (justification === StaveLine.TextJustification.LEFT) {\n        x = start_position.x;\n      } else if (justification === StaveLine.TextJustification.CENTER) {\n        var delta_x = (end_position.x - start_position.x);\n        var center_x = (delta_x / 2 ) + start_position.x;\n        x = center_x - (text_width / 2);\n      } else if (justification === StaveLine.TextJustification.RIGHT) {\n        x = end_position.x  -  text_width;\n      }\n\n      // Determine the y value to start the text\n      var y;\n      var vertical_position = render_options.text_position_vertical;\n      if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n        y = first_note.getStave().getYForTopText();\n      } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n        y = first_note.getStave().getYForBottomText();\n      }\n\n      // Draw the text\n      ctx.save();\n      this.applyFontStyle();\n      ctx.fillText(this.text, x, y);\n      ctx.restore();\n\n      return this;\n    }\n  };\n\n  // ## Private Helpers\n  // \n  // Attribution: Arrow rendering implementations based off of\n  // Patrick Horgan's article, \"Drawing lines and arcs with \n  // arrow heads on  HTML5 Canvas\"\n  // \n  // Draw an arrow head that connects between 3 coordinates\n  function drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0,y0);\n    ctx.lineTo(x1,y1);\n    ctx.lineTo(x2,y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n\n    ctx.fill();\n  }\n\n  // Helper function to draw a line with arrow heads\n  function drawArrowLine(ctx, point1, point2, config) {\n    var both_arrows = config.draw_start_arrow && config.draw_end_arrow;\n\n    var x1 = point1.x;\n    var y1 = point1.y;\n    var x2 = point2.x;\n    var y2 = point2.y;\n\n    // For ends with arrow we actually want to stop before we get to the arrow\n    // so that wide lines won't put a flat end on the arrow.\n    var distance = Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n    var ratio = (distance - config.arrowhead_length/3) / distance;\n    var end_x, end_y, start_x, start_y;\n    if (config.draw_end_arrow || both_arrows) {\n      end_x = Math.round(x1 + (x2 - x1) * ratio);\n      end_y = Math.round(y1 + (y2 - y1) * ratio);\n    } else {\n      end_x = x2;\n      end_y = y2;\n    }\n\n    if (config.draw_start_arrow || both_arrows) {\n      start_x = x1 + (x2 - x1) * (1 - ratio);\n      start_y = y1 + (y2 - y1) * (1 - ratio);\n    } else {\n      start_x = x1;\n      start_y = y1;\n    }\n\n    if (config.color) {\n      ctx.setStrokeStyle(config.color);\n      ctx.setFillStyle(config.color);\n    }\n\n    // Draw the shaft of the arrow\n    ctx.beginPath();\n    ctx.moveTo(start_x, start_y);\n    ctx.lineTo(end_x,end_y);\n    ctx.stroke();\n    ctx.closePath();\n\n    // calculate the angle of the line\n    var line_angle = Math.atan2(y2 - y1, x2 - x1);\n    // h is the line length of a side of the arrow head\n    var h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));\n\n    var angle1, angle2;\n    var top_x, top_y;\n    var bottom_x, bottom_y;\n\n    if (config.draw_end_arrow || both_arrows) {\n      angle1 = line_angle + Math.PI + config.arrowhead_angle;\n      top_x = x2 + Math.cos(angle1) * h;\n      top_y = y2 + Math.sin(angle1) * h;\n\n      angle2 = line_angle + Math.PI - config.arrowhead_angle;\n      bottom_x = x2 + Math.cos(angle2) * h;\n      bottom_y = y2 + Math.sin(angle2) * h;\n\n      drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n    }\n\n    if (config.draw_start_arrow || both_arrows) {\n      angle1 = line_angle + config.arrowhead_angle;\n      top_x = x1 + Math.cos(angle1) * h;\n      top_y = y1 + Math.sin(angle1) * h;\n\n      angle2 = line_angle - config.arrowhead_angle;\n      bottom_x = x1 + Math.cos(angle2) * h;\n      bottom_y = y1 + Math.sin(angle2) * h;\n\n      drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n    }\n  }\n\n  return StaveLine;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nVex.Flow.Crescendo = (function() {\n  function Crescendo(note_struct) {\n    if (arguments.length > 0) this.init(note_struct);\n  }\n\n  // To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n  function L() { if (Crescendo.DEBUG) Vex.L(\"Vex.Flow.Crescendo\", arguments); }\n\n  // Private helper to draw the hairpin\n  function renderHairpin(ctx, params) {\n    var begin_x = params.begin_x;\n    var end_x = params.end_x;\n    var y = params.y;\n    var half_height =  params.height / 2;\n\n    ctx.beginPath();\n\n    if (params.reverse) {\n        ctx.moveTo(begin_x, y - half_height);\n        ctx.lineTo(end_x,  y);\n        ctx.lineTo(begin_x, y + half_height);\n    } else {\n        ctx.moveTo(end_x,  y - half_height);\n        ctx.lineTo(begin_x, y);\n        ctx.lineTo(end_x,  y + half_height);\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  // ## Prototype Methods\n  Vex.Inherit(Crescendo, Vex.Flow.Note, {\n    // Initialize the crescendo's properties\n    init: function(note_struct) {\n      Crescendo.superclass.init.call(this, note_struct);\n\n      // Whether the object is a decrescendo\n      this.decrescendo = false;\n\n      // The staff line to be placed on\n      this.line = note_struct.line || 0;\n\n      // The height at the open end of the cresc/decresc\n      this.height = 15;\n\n      Vex.Merge(this.render_options, {\n        // Extensions to the length of the crescendo on either side\n        extend_left: 0,\n        extend_right: 0,\n        // Vertical shift\n        y_shift: 0\n      });\n    },\n\n    // Set the line to center the element on\n    setLine: function(line) { this.line = line; return this; },\n\n    // Set the full height at the open end\n    setHeight: function(height) { this.height = height; return this; },\n\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo: function(decresc) {\n      this.decrescendo = decresc;\n      return this;\n    },\n\n    // Preformat the note\n    preFormat: function() { this.preFormatted = true; return this; },\n\n    // Render the Crescendo object onto the canvas\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw Hairpin without a context.\");\n\n      var tick_context = this.getTickContext();\n      var next_context = Vex.Flow.TickContext.getNextContext(tick_context);\n\n      var begin_x = this.getAbsoluteX();\n      var end_x;\n      if (next_context) {\n        end_x = next_context.getX();\n      } else {\n        end_x = this.stave.x + this.stave.width;\n      }\n\n      var y = this.stave.getYForLine(this.line + (-3)) + 1;\n\n      L(\"Drawing \",  this.decrescendo ? \"decrescendo \" : \"crescendo \",\n        this.height, \"x\", begin_x - end_x);\n\n      renderHairpin(this.context, {\n        begin_x: begin_x - this.render_options.extend_left,\n        end_x: end_x + this.render_options.extend_right,\n        y: y + this.render_options.y_shift,\n        height: this.height,\n        reverse: this.decrescendo\n      });\n    }\n  });\n\n  return Crescendo;\n})();","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements ornaments as modifiers that can be\n// attached to notes. The complete list of ornaments is available in\n// `tables.js` under `Vex.Flow.ornamentCodes`.\n//\n// See `tests/ornament_tests.js` for usage examples.\n\nVex.Flow.Ornament = (function() {\n  function Ornament(type) {\n    if (arguments.length > 0) this.init(type);\n  }\n  Ornament.CATEGORY = \"ornaments\";\n\n  // Accidental position modifications for each glyph\n  var acc_mods = {\n    \"n\": {\n      shift_x: 1,\n      shift_y_upper:0,\n      shift_y_lower:0,\n      height: 17\n    },\n    \"#\": {\n      shift_x: 0,\n      shift_y_upper: -2,\n      shift_y_lower: -2,\n      height: 20\n    },\n    \"b\": {\n      shift_x: 1,\n      shift_y_upper: 0,\n      shift_y_lower: 3,\n      height: 18\n    },\n    \"##\": {\n      shift_x: 0,\n      shift_y_upper: 0,\n      shift_y_lower: 0,\n      height: 12,\n    },\n    \"bb\": {\n      shift_x: 0,\n      shift_y_upper: 0,\n      shift_y_lower: 4,\n      height: 17\n    },\n    \"db\": {\n      shift_x: -3,\n      shift_y_upper: 0,\n      shift_y_lower: 4,\n      height: 17\n    },\n    \"bbs\": {\n      shift_x: 0,\n      shift_y_upper: 0,\n      shift_y_lower: 4,\n      height: 17\n    },\n    \"d\": {\n      shift_x: 0,\n      shift_y_upper: 0,\n      shift_y_lower: 0,\n      height: 17\n    },\n    \"++\": {\n      shift_x: -2,\n      shift_y_upper: -6,\n      shift_y_lower: -3,\n      height: 22\n    },\n    \"+\": {\n      shift_x: 1,\n      shift_y_upper: -4,\n      shift_y_lower: -2,\n      height: 20\n    }\n  };\n\n  // To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.\n  function L() { if (Ornament.DEBUG) Vex.L(\"Vex.Flow.Ornament\", arguments); }\n\n  var Modifier = Vex.Flow.Modifier;\n\n  // ## Static Methods\n  // Arrange ornaments inside `ModifierContext`\n  Ornament.format = function(ornaments, state) {\n   if (!ornaments || ornaments.length === 0) return false;\n\n    var width = 0;\n    for (var i = 0; i < ornaments.length; ++i) {\n      var ornament = ornaments[i];\n      var increment = 1;\n      width = Math.max(ornament.getWidth(), width);\n\n      var type = Vex.Flow.ornamentCodes(ornament.type);\n\n      if (!type.between_lines) increment += 1.5;\n\n      if (ornament.getPosition() === Modifier.Position.ABOVE) {\n        ornament.setTextLine(state.top_text_line);\n        state.top_text_line += increment;\n      } else {\n        ornament.setTextLine(state.text_line);\n        state.text_line += increment;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  };\n\n  // ## Prototype Methods\n  Vex.Inherit(Ornament, Modifier, {\n    // Create a new ornament of type `type`, which is an entry in\n    // `Vex.Flow.ornamentCodes` in `tables.js`.\n    init: function(type) {\n      Ornament.superclass.init.call(this);\n\n      this.note = null;\n      this.index = null;\n      this.type = type;\n      this.position = Modifier.Position.ABOVE;\n      this.delayed = false;\n\n      this.accidental_upper = \"\";\n      this.accidental_lower = \"\";\n\n      this.render_options = {\n        font_scale: 38\n      };\n\n      this.ornament = Vex.Flow.ornamentCodes(this.type);\n      if (!this.ornament) throw new Vex.RERR(\"ArgumentError\",\n         \"Ornament not found: '\" + this.type + \"'\");\n\n      // Default width comes from ornament table.\n      this.setWidth(this.ornament.width);\n    },\n\n    // Set whether the ornament is to be delayed\n    setDelayed: function(delayed) { this.delayed = delayed; return this; },\n\n    // Set the upper accidental for the ornament\n    setUpperAccidental: function(acc) {\n      this.accidental_upper = acc;\n      return this;\n    },\n\n    // Set the lower accidental for the ornament\n    setLowerAccidental: function(acc) {\n      this.accidental_lower = acc;\n      return this;\n    },\n\n    // Render ornament in position next to note.\n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw Ornament without a context.\");\n      if (!(this.note && (this.index !== null))) throw new Vex.RERR(\"NoAttachedNote\",\n        \"Can't draw Ornament without a note and index.\");\n\n      var ctx = this.context;\n      var stem_direction = this.note.getStemDirection();\n      var stave = this.note.getStave();\n\n      // Get stem extents\n      var stem_ext = this.note.getStem().getExtents();\n      var top, bottom;\n      if (stem_direction === Vex.Flow.StaveNote.STEM_DOWN) {\n        top = stem_ext.baseY;\n        bottom = stem_ext.topY;\n      } else {\n        top = stem_ext.topY;\n        bottom = stem_ext.baseY;\n      }\n\n      // TabNotes don't have stems attached to them. Tab stems are rendered\n      // outside the stave.\n      var is_tabnote = this.note.getCategory() === 'tabnotes';\n      if (is_tabnote) {\n        if (this.note.hasStem()){\n          if (stem_direction === Vex.Flow.StaveNote.STEM_UP) {\n            bottom = stave.getYForBottomText(this.text_line - 2);\n          } else if (stem_direction === Vex.Flow.StaveNote.STEM_DOWN ) {\n            top = stave.getYForTopText(this.text_line - 1.5);\n          }\n        } else { // Without a stem\n          top = stave.getYForTopText(this.text_line - 1);\n          bottom = stave.getYForBottomText(this.text_line - 2);\n        }\n      }\n\n      var is_on_head = stem_direction === Vex.Flow.StaveNote.STEM_DOWN;\n      var spacing = stave.getSpacingBetweenLines();\n      var line_spacing = 1;\n\n      // Beamed stems are longer than quarter note stems, adjust accordingly\n      if (!is_on_head && this.note.beam) {\n        line_spacing += 0.5;\n      }\n\n      var total_spacing = spacing * (this.text_line + line_spacing);\n      var glyph_y_between_lines = (top - 7) - total_spacing;\n\n      // Get initial coordinates for the modifier position\n      var start = this.note.getModifierStartXY(this.position, this.index);\n      var glyph_x = start.x + this.ornament.shift_right;\n      var glyph_y = Math.min(stave.getYForTopText(this.text_line) - 3, glyph_y_between_lines);\n      glyph_y += this.ornament.shift_up + this.y_shift;\n\n      // Ajdust x position if ornament is delayed\n      if (this.delayed) {\n        glyph_x += this.ornament.width;\n        var next_context = Vex.Flow.TickContext.getNextContext(this.note.getTickContext());\n        if (next_context) {\n          glyph_x += (next_context.getX() - glyph_x) * 0.5;\n        } else {\n          glyph_x += (stave.x + stave.width - glyph_x) * 0.5;\n        }\n      }\n\n      var ornament = this;\n      function drawAccidental(ctx, code, upper) {\n        var accidental = Vex.Flow.accidentalCodes(code);\n\n        var acc_x = glyph_x - 3;\n        var acc_y = glyph_y + 2;\n\n        // Special adjustments for trill glyph\n        if (upper) {\n          acc_y -= mods ? mods.height : 18;\n          acc_y +=  ornament.type === \"tr\" ? -8 : 0;\n        } else {\n          acc_y +=  ornament.type === \"tr\" ? -6 : 0;\n        }\n\n        // Fine tune position of accidental glyph\n        var mods = acc_mods[code];\n        if (mods) {\n          acc_x += mods.shift_x;\n          acc_y += upper ? mods.shift_y_upper : mods.shift_y_lower;\n        }\n\n        // Render the glyph\n        var scale = ornament.render_options.font_scale/1.3;\n        Vex.Flow.renderGlyph(ctx, acc_x, acc_y, scale, accidental.code);\n\n        // If rendered a bottom accidental, increase the y value by the\n        // accidental height so that the ornament's glyph is shifted up\n        if (!upper) {\n          glyph_y -= mods ? mods.height : 18;\n        }\n      }\n\n      // Draw lower accidental for ornament\n      if (this.accidental_lower) {\n        drawAccidental(ctx, this.accidental_lower, false, glyph_x, glyph_y);\n      }\n\n      L(\"Rendering ornament: \", this.ornament, glyph_x, glyph_y);\n      Vex.Flow.renderGlyph(ctx, glyph_x, glyph_y,\n                           this.render_options.font_scale, this.ornament.code);\n\n      // Draw upper accidental for ornament\n      if (this.accidental_upper) {\n        drawAccidental(ctx, this.accidental_upper, true, glyph_x, glyph_y);\n      }\n\n    }\n  });\n\n  return Ornament;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements different types of pedal markings. These notation\n// elements indicate to the performer when to depress and release the a pedal.\n//\n// In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n// custom text for the release/depress pedal markings.\nVex.Flow.PedalMarking = (function() {\n  function PedalMarking(type) {\n    if (arguments.length > 0) this.init(type);\n  }\n\n  // To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.\n  function L() { if (PedalMarking.DEBUG) Vex.L(\"Vex.Flow.PedalMarking\", arguments); }\n\n  // Glyph data\n  PedalMarking.GLYPHS = {\n    \"pedal_depress\": {\n      code: \"v36\",\n      x_shift:-10,\n      y_shift:0\n    },\n    \"pedal_release\": {\n      code: \"v5d\",\n      x_shift:-2,\n      y_shift:3\n    },\n  };\n\n  PedalMarking.Styles = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3\n  };\n\n\n  // ## Public helpers\n  //\n  // Create a sustain pedal marking. Returns the defaults PedalMarking.\n  // Which uses the traditional \"Ped\" and \"*\"\" markings.\n  PedalMarking.createSustain = function(notes) {\n    var pedal = new PedalMarking(notes);\n    return pedal;\n  };\n\n  // Create a sostenuto pedal marking\n  PedalMarking.createSostenuto = function(notes) {\n    var pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.MIXED);\n    pedal.setCustomText(\"Sost. Ped.\");\n    return pedal;\n  };\n\n  // Create an una corda pedal marking\n  PedalMarking.createUnaCorda = function(notes){\n    var pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.TEXT);\n    pedal.setCustomText(\"una corda\", \"tre corda\");\n    return pedal;\n  };\n\n  // ## Prototype Methods\n  PedalMarking.prototype =  {\n    init: function(notes) {\n      this.notes = notes;\n      this.style = Vex.Flow.PedalMarking.TEXT;\n      this.line = 0;\n\n      // Custom text for the release/depress markings\n      this.custom_depress_text = \"\";\n      this.custom_release_text = \"\";\n\n      this.font = {\n        family: \"Times New Roman\",\n        size: 12,\n        weight: \"italic bold\"\n      };\n\n      this.render_options = {\n        bracket_height: 10,\n        text_margin_right: 6,\n        bracket_line_width: 1,\n        glyph_point_size: 40,\n        color: \"black\"\n      };\n    },\n\n    // Set custom text for the `depress`/`release` pedal markings. No text is\n    // set if the parameter is falsy.\n    setCustomText: function(depress, release) {\n      this.custom_depress_text = depress || \"\";\n      this.custom_release_text = release || \"\";\n      return this;\n    },\n\n    // Set the pedal marking style\n    setStyle: function(style){\n      if (style < 1 && style > 3)  {\n        throw new Vex.RERR(\"InvalidParameter\",\n          \"The style must be one found in PedalMarking.Styles\");\n      }\n\n      this.style = style;\n      return this;\n    },\n\n    // Set the staff line to render the markings on\n    setLine: function(line) { this.line = line; return this; },\n\n    // Set the rendering context\n    setContext: function(context) { this.context = context; return this; },\n\n    // Draw the bracket based pedal markings\n    drawBracketed: function() {\n      var ctx = this.context;\n      var is_pedal_depressed = false;\n      var prev_x;\n      var prev_y;\n      var pedal = this;\n\n      // Iterate through each note\n      this.notes.forEach(function(note, index, notes) {\n        // Each note triggers the opposite pedal action\n        is_pedal_depressed = !is_pedal_depressed;\n\n        // Get the initial coordinates for the note\n        var x = note.getAbsoluteX();\n        var y = note.getStave().getYForBottomText(pedal.line + 3);\n\n        // Throw if current note is positioned before the previous note\n        if (x < prev_x) throw new Vex.RERR('InvalidConfiguration',\n          'The notes provided must be in order of ascending x positions');\n\n        // Determine if the previous or next note are the same\n        // as the current note. We need to keep track of this for\n        // when adjustments are made for the release+depress action\n        var next_is_same = notes[index+1] === note;\n        var prev_is_same = notes[index-1] === note;\n\n        var x_shift = 0;\n        if (is_pedal_depressed) {\n          // Adjustment for release+depress\n          x_shift =  prev_is_same ? 5 : 0;\n\n          if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {\n            // For MIXED style, start with text instead of bracket\n            if (pedal.custom_depress_text) {\n              // If we have custom text, use instead of the default \"Ped\" glyph\n              var text_width = ctx.measureText(pedal.custom_depress_text).width;\n              ctx.fillText(pedal.custom_depress_text, x - (text_width/2), y);\n              x_shift = (text_width / 2) + pedal.render_options.text_margin_right;\n            } else {\n              // Render the Ped glyph in position\n              drawPedalGlyph('pedal_depress', ctx, x, y, pedal.render_options.glyph_point_size);\n              x_shift = 20 + pedal.render_options.text_margin_right;\n            }\n          } else {\n            // Draw start bracket\n            ctx.beginPath();\n            ctx.moveTo(x, y - pedal.render_options.bracket_height);\n            ctx.lineTo(x + x_shift, y);\n            ctx.stroke();\n            ctx.closePath();\n          }\n        } else {\n          // Adjustment for release+depress\n          x_shift = next_is_same ? -5 : 0;\n\n          // Draw end bracket\n          ctx.beginPath();\n          ctx.moveTo(prev_x, prev_y);\n          ctx.lineTo(x + x_shift, y);\n          ctx.lineTo(x, y - pedal.render_options.bracket_height);\n          ctx.stroke();\n          ctx.closePath();\n        }\n\n        // Store previous coordinates\n        prev_x = x + x_shift;\n        prev_y = y;\n      });\n    },\n\n    // Draw the text based pedal markings. This defaults to the traditional\n    // \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n    drawText: function() {\n      var ctx = this.context;\n      var is_pedal_depressed = false;\n      var pedal = this;\n\n      // The glyph point size\n      var point = pedal.render_options.glyph_point_size;\n\n      // Iterate through each note, placing glyphs or custom text accordingly\n      this.notes.forEach(function(note) {\n        is_pedal_depressed = !is_pedal_depressed;\n        var stave = note.getStave();\n        var x = note.getAbsoluteX();\n        var y = stave.getYForBottomText(pedal.line + 3);\n\n        var text_width = 0;\n        if (is_pedal_depressed) {\n          if (pedal.custom_depress_text) {\n            text_width = ctx.measureText(pedal.custom_depress_text).width;\n            ctx.fillText(pedal.custom_depress_text, x - (text_width/2), y);\n          } else {\n            drawPedalGlyph(\"pedal_depress\", ctx, x, y, point);\n          }\n        } else {\n          if (pedal.custom_release_text) {\n            text_width = ctx.measureText(pedal.custom_release_text).width;\n            ctx.fillText(pedal.custom_release_text, x - (text_width/2), y);\n          } else {\n            drawPedalGlyph(\"pedal_release\", ctx, x, y, point);\n          }\n        }\n      });\n    },\n\n    // Render the pedal marking in position on the rendering context \n    draw: function() {\n      if (!this.context) throw new Vex.RERR(\"NoContext\",\n        \"Can't draw PedalMarking without a context.\");\n      var ctx = this.context;\n\n      ctx.save();\n      ctx.setStrokeStyle(this.render_options.color);\n      ctx.setFillStyle(this.render_options.color);\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n      L(\"Rendering Pedal Marking\");\n\n      if (this.style === PedalMarking.Styles.BRACKET ||\n          this.style === PedalMarking.Styles.MIXED) {\n        ctx.setLineWidth(this.render_options.bracket_line_width);\n        this.drawBracketed();\n      } else if (this.style === Vex.Flow.PedalMarking.Styles.TEXT) {\n        this.drawText();\n      }\n\n      ctx.restore();\n    }\n  };\n\n  // ## Private Helper\n  // \n  // Draws a pedal glyph with the provided `name` on a rendering `context` \n  // at the coordinates `x` and `y. Takes into account the glyph data\n  // coordinate shifts.\n  function drawPedalGlyph(name, context, x, y, point) {\n    var glyph_data = PedalMarking.GLYPHS[name];\n    var glyph = new Vex.Flow.Glyph(glyph_data.code, point);\n    glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n  }\n\n  return PedalMarking;\n}());","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n//\nVex.Flow.TextBracket = (function() {\n  function TextBracket(bracket_data) {\n    if (arguments.length > 0) this.init(bracket_data);\n  }\n\n  // To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n  function L() { if (TextBracket.DEBUG) Vex.L(\"Vex.Flow.TextBracket\", arguments); }\n\n  TextBracket.Positions = {\n    TOP: 1,\n    BOTTOM: -1\n  };\n\n  // ## Prototype Methods\n  TextBracket.prototype =  {\n    init: function(bracket_data) {\n      this.start = bracket_data.start;\n      this.stop = bracket_data.stop;\n\n      this.text = bracket_data.text || \"\";\n      this.superscript = bracket_data.superscript || \"\";\n\n      this.position = bracket_data.position || TextBracket.Positions.TOP;\n      this.line = 1;\n\n      this.font = {\n        family: \"Serif\",\n        size: 15,\n        weight: \"italic\"\n      };\n\n      this.render_options = {\n        dashed: true,\n        dash: [5],\n        color: \"black\",\n        line_width: 1,\n        show_bracket: true,\n        bracket_height: 8,\n\n        // In the BOTTOM position, the bracket line can extend\n        // under the superscript.\n        underline_superscript: true\n      };\n    },\n\n    // Apply the text backet styling to the provided `context`\n    applyStyle: function(context) {\n      // Apply style for the octave bracket\n      context.setFont(this.font.family, this.font.size, this.font.weight);\n      context.setStrokeStyle(this.render_options.color);\n      context.setFillStyle(this.render_options.color);\n      context.setLineWidth(this.render_options.line_width);\n\n      return this;\n    },\n\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed: function(dashed, dash) {\n      this.render_options.dashed = dashed;\n      if (dash) this.render_options.dash = dash;\n      return this;\n    },\n\n    // Set the font for the text\n    setFont: function(font) { this.font = font; return this; },\n    // Set the rendering `context` for the octave bracket\n    setContext: function(context) { this.context = context; return this; },\n    // Set the staff line to render the bracket on\n    setLine: function(line) { this.line = line; return this; },\n\n    // Draw the octave bracket on the rendering context\n    draw: function() {\n      var ctx = this.context;\n\n      var y = 0;\n      switch(this.position) {\n        case TextBracket.Positions.TOP:\n          y =  this.start.getStave().getYForTopText(this.line);\n          break;\n        case TextBracket.Positions.BOTTOM:\n          y =  this.start.getStave().getYForBottomText(this.line);\n          break;\n      }\n\n      // Get the preliminary start and stop coordintates for the bracket\n      var start = { x: this.start.getAbsoluteX(), y: y};\n      var stop = { x: this.stop.getAbsoluteX(), y: y };\n\n      L(\"Rendering TextBracket: start:\", start, \"stop:\", stop, \"y:\", y);\n\n      var bracket_height = this.render_options.bracket_height * this.position;\n\n      ctx.save();\n      this.applyStyle(ctx);\n\n      // Draw text\n      ctx.fillText(this.text, start.x, start.y);\n\n      // Get the width and height for the octave number\n      var main_width = ctx.measureText(this.text).width;\n      var main_height = ctx.measureText(\"M\").width;\n\n      // Calculate the y position for the super script\n      var super_y = start.y - (main_height/2.5);\n\n      // Draw the superscript\n      ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n      ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n\n      // Determine width and height of the superscript\n      var superscript_width = ctx.measureText(this.superscript).width;\n      var super_height = ctx.measureText(\"M\").width;\n\n      // Setup initial coordinates for the bracket line\n      var start_x = start.x;\n      var line_y = super_y;\n      var end_x = stop.x + this.stop.getGlyph().head_width;\n\n      // Adjust x and y coordinates based on position\n      if (this.position === TextBracket.Positions.TOP) {\n        start_x += main_width + superscript_width + 5;\n        line_y -= super_height/2.7;\n      } else if (this.position === TextBracket.Positions.BOTTOM) {\n        line_y += super_height/2.7;\n        start_x += main_width + 2;\n\n        if (!this.render_options.underline_superscript) {\n          start_x += superscript_width;\n        }\n      }\n\n      if (this.render_options.dashed) {\n        // Main line\n        Vex.Flow.Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y,\n          this.render_options.dash);\n        // Ending Bracket\n        if (this.render_options.show_bracket) {\n          Vex.Flow.Renderer.drawDashedLine(ctx, end_x, line_y + (1 * this.position),\n            end_x, line_y + bracket_height, this.render_options.dash);\n        }\n      } else {\n        ctx.beginPath();\n        ctx.moveTo(start_x, line_y);\n        // Main line\n        ctx.lineTo(end_x, line_y);\n        if (this.render_options.show_bracket) {\n          // Ending bracket\n          ctx.lineTo(end_x, line_y + bracket_height);\n        }\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      ctx.restore();\n    }\n  };\n\n  return TextBracket;\n})();","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `TextDynamics` which renders traditional\n// text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n//\n// You can render any dynamics string that contains a combination of\n// the following letters:  P, M, F, Z, R, S\nVex.Flow.TextDynamics = (function(){\n  function TextDynamics(text_struct) {\n    if (arguments.length > 0) this.init(text_struct);\n  }\n\n  // To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.\n  function L() { if (TextDynamics.DEBUG) Vex.L(\"Vex.Flow.TextDynamics\", arguments); }\n\n  // The glyph data for each dynamics letter\n  TextDynamics.GLYPHS = {\n    \"f\": {\n      code: \"vba\",\n      width: 12\n    },\n    \"p\": {\n      code: \"vbf\",\n      width: 14\n    },\n    \"m\": {\n      code: \"v62\",\n      width: 17\n    },\n    \"s\": {\n      code: \"v4a\",\n      width: 10\n    },\n    \"z\": {\n      code: \"v80\",\n      width: 12\n    },\n    \"r\": {\n      code: \"vb1\",\n      width: 12\n    }\n  };\n\n  // ## Prototype Methods\n  //\n  // A `TextDynamics` object inherits from `Note` so that it can be formatted\n  // within a `Voice`.\n  Vex.Inherit(TextDynamics, Vex.Flow.Note, {\n    // Create the dynamics marking. `text_struct` is an object\n    // that contains a `duration` property and a `sequence` of\n    // letters that represents the letters to render\n    init: function(text_struct) {\n      TextDynamics.superclass.init.call(this, text_struct);\n\n      this.sequence = text_struct.text.toLowerCase();\n      this.line = text_struct.line || 0;\n      this.glyphs = [];\n\n      Vex.Merge(this.render_options, {\n        glyph_font_size: 40\n      });\n\n      L(\"New Dynamics Text: \", this.sequence);\n    },\n\n    // Set the Stave line on which the note should be placed\n    setLine: function(line) { this.line = line;  return this; },\n\n    // Preformat the dynamics text\n    preFormat: function() {\n      var total_width = 0;\n      // Iterate through each letter\n      this.sequence.split('').forEach(function(letter) {\n        // Get the glyph data for the letter\n        var glyph_data = TextDynamics.GLYPHS[letter];\n        if (!glyph_data) throw new Vex.RERR(\"Invalid dynamics character: \" + letter);\n\n        var size =  this.render_options.glyph_font_size;\n        var glyph = new Vex.Flow.Glyph(glyph_data.code, size);\n\n        // Add the glyph\n        this.glyphs.push(glyph);\n\n        total_width += glyph_data.width;\n      }, this);\n\n      // Store the width of the text\n      this.setWidth(total_width);\n      this.preFormatted = true;\n      return this;\n    },\n\n    // Draw the dynamics text on the rendering context\n    draw: function() {\n      var x = this.getAbsoluteX();\n      var y = this.stave.getYForLine(this.line + (-3));\n\n      L(\"Rendering Dynamics: \", this.sequence);\n\n      var letter_x = x;\n      this.glyphs.forEach(function(glyph, index) {\n        var current_letter = this.sequence[index];\n        glyph.render(this.context, letter_x, y);\n        letter_x += TextDynamics.GLYPHS[current_letter].width;\n      }, this);\n    }\n  });\n\n  return TextDynamics;\n})();","Vex.Flow.GraceNote = (function() {\n  var GraceNote = function(note_struct) {\n    if (arguments.length > 0) this.init(note_struct);\n  };\n\n  Vex.Inherit(GraceNote, Vex.Flow.StaveNote, {\n    init: function(note_struct) {\n      GraceNote.superclass.init.call(this, note_struct);\n\n      this.render_options.glyph_font_scale = 22;\n      this.render_options.stem_height = 20;\n      this.render_options.stroke_px = 2;\n      this.glyph.head_width = 6;\n\n      this.slash = note_struct.slash;\n      this.slur = true;\n\n      this.buildNoteHeads();\n\n      this.width = 3;\n    },\n\n    getStemExtension: function(){\n      var glyph = this.getGlyph();\n\n      if (this.stem_extension_override != null) {\n        return this.stem_extension_override;\n      }\n\n      if (glyph) {\n        return this.getStemDirection() === 1 ? glyph.gracenote_stem_up_extension :\n          glyph.gracenote_stem_down_extension;\n      }\n\n      return 0;\n    },\n\n    getCategory: function() { return 'gracenotes'; },\n\n    draw: function(){\n      GraceNote.superclass.draw.call(this);\n      var ctx = this.context;\n      var stem_direction = this.getStemDirection();\n\n      if (this.slash) {\n        ctx.beginPath();\n\n        var x = this.getAbsoluteX();\n        var y = this.getYs()[0] - (this.stem.getHeight() / 2.8);\n        if (stem_direction === 1) {\n          x += 1;\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + 13, y - 9);\n        } else if (stem_direction === -1) {\n          x -= 4;\n          y += 1;\n          ctx.moveTo(x, y);\n          ctx.lineTo(x + 13, y + 9);\n        }\n\n        ctx.closePath();\n        ctx.stroke();\n      }\n    }\n  });\n\n  return GraceNote;\n}());\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nVex.Flow.GraceNoteGroup = (function(){\n  function GraceNoteGroup(grace_notes, config) {\n    if (arguments.length > 0) this.init(grace_notes, config);\n  }\n\n  GraceNoteGroup.CATEGORY = \"gracenotegroups\";\n\n  // To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.\n  function L() { if (GraceNoteGroup.DEBUG) Vex.L(\"Vex.Flow.GraceNoteGroup\", arguments); }\n\n  // Arrange groups inside a `ModifierContext`\n  GraceNoteGroup.format = function(gracenote_groups, state) {\n    var gracenote_spacing = 4;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    var group_list = [];\n    var hasStave = false;\n    var prev_note = null;\n    var shiftL = 0;\n\n    var i, gracenote_group, props_tmp;\n    for (i = 0; i < gracenote_groups.length; ++i) {\n      gracenote_group = gracenote_groups[i];\n      var note = gracenote_group.getNote();\n      var stave = note.getStave();\n      if (note != prev_note) {\n         // Iterate through all notes to get the displaced pixels\n         for (var n = 0; n < note.keys.length; ++n) {\n            props_tmp = note.getKeyProps()[n];\n            shiftL = (props_tmp.displaced ? note.getExtraLeftPx() : shiftL);\n          }\n          prev_note = note;\n      }\n      if (stave != null) {\n        hasStave = true;\n        group_list.push({shift: shiftL, gracenote_group: gracenote_group});\n      } else {\n        group_list.push({shift: shiftL, gracenote_group: gracenote_group });\n      }\n    }\n\n    // If first note left shift in case it is displaced\n    var group_shift = group_list[0].shift;\n    var formatWidth;\n    for (i = 0; i < group_list.length; ++i) {\n      gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + gracenote_spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (i = 0; i < group_list.length; ++i) {\n      gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + gracenote_spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  };\n\n  // ## Prototype Methods\n  //\n  // `GraceNoteGroup` inherits from `Modifier` and is placed inside a\n  // `ModifierContext`.\n  Vex.Inherit(GraceNoteGroup, Vex.Flow.Modifier, {\n    init: function(grace_notes, show_slur) {\n      var superclass = GraceNoteGroup.superclass;\n      superclass.init.call(this);\n\n      this.note = null;\n      this.index = null;\n      this.position = Vex.Flow.Modifier.Position.LEFT;\n      this.grace_notes = grace_notes;\n      this.width = 0;\n\n      this.preFormatted = false;\n\n      this.show_slur = show_slur;\n      this.slur = null;\n\n      this.formatter = new Vex.Flow.Formatter();\n      this.voice = new Vex.Flow.Voice({\n        num_beats: 4,\n        beat_value: 4,\n        resolution: Vex.Flow.RESOLUTION\n      }).setStrict(false);\n\n      this.voice.addTickables(this.grace_notes);\n\n      return this;\n    },\n\n    preFormat: function(){\n      if (this.preFormatted) return;\n\n      this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n      this.setWidth(this.formatter.getMinTotalWidth());\n      this.preFormatted = true;\n    },\n\n    beamNotes: function(){\n      if (this.grace_notes.length > 1) {\n        var beam = new Vex.Flow.Beam(this.grace_notes);\n\n        beam.render_options.beam_width = 3;\n        beam.render_options.partial_beam_length = 4;\n\n        this.beam = beam;\n      }\n\n      return this;\n    },\n\n    setNote: function(note) {\n      this.note = note;\n    },\n    setWidth: function(width){\n      this.width = width;\n    },\n    getWidth: function(){\n      return this.width;\n    },\n    draw: function() {\n      if (!this.context)  {\n        throw new Vex.RuntimeError(\"NoContext\",\n          \"Can't draw Grace note without a context.\");\n      }\n\n      var note = this.getNote();\n\n      L(\"Drawing grace note group for:\", note);\n\n      if (!(note && (this.index !== null))) {\n        throw new Vex.RuntimeError(\"NoAttachedNote\",\n          \"Can't draw grace note without a parent note and parent note index.\");\n      }\n\n      var that = this;\n      function alignGraceNotesWithNote(grace_notes, note, groupWidth) {\n        // Shift over the tick contexts of each note\n        // So that th aligned with the note\n        var tickContext = note.getTickContext();\n        var extraPx = tickContext.getExtraPx();\n        var x = tickContext.getX() - extraPx.left - extraPx.extraLeft + that.getSpacingFromNextModifier();\n        grace_notes.forEach(function(graceNote) {\n            var tick_context = graceNote.getTickContext();\n            var x_offset = tick_context.getX();\n            graceNote.setStave(note.stave);\n            tick_context.setX(x + x_offset);\n        });\n      }\n\n      alignGraceNotesWithNote(this.grace_notes, note, this.width);\n\n      // Draw notes\n      this.grace_notes.forEach(function(graceNote) {\n        graceNote.setContext(this.context).draw();\n      }, this);\n\n      // Draw beam\n      if (this.beam) {\n        this.beam.setContext(this.context).draw();\n      }\n\n      if (this.show_slur) {\n        // Create and draw slur\n        this.slur = new Vex.Flow.StaveTie({\n          last_note: this.grace_notes[0],\n          first_note: note,\n          first_indices: [0],\n          last_indices: [0]\n        });\n\n        this.slur.render_options.cp2 = 12;\n        this.slur.setContext(this.context).draw();\n      }\n    }\n  });\n\nreturn GraceNoteGroup;\n}());"]}