{"version":3,"file":null,"sources":["../src/vex.js","../../../../../__babelHelpers__","../src/fraction.js","../src/tables.js","../src/canvascontext.js","../src/raphaelcontext.js","../src/svgcontext.js","../src/renderer.js","../src/voice.js","../src/boundingboxcomputation.js","../src/boundingbox.js","../src/fonts/vexflow_font.js","../src/glyph.js","../src/stem.js","../src/tuplet.js","../src/beam.js","../src/staveconnector.js","../src/tickable.js","../src/note.js","../src/notehead.js","../src/stemmablenote.js","../src/modifier.js","../src/dot.js","../src/stavenote.js","../src/frethandfinger.js","../src/music.js","../src/accidental.js","../src/stavetie.js","../src/gracenotegroup.js","../src/strokes.js","../src/stringnumber.js","../src/articulation.js","../src/tickcontext.js","../src/ornament.js","../src/annotation.js","../src/bend.js","../src/vibrato.js","../src/modifiercontext.js","../src/formatter.js","../src/stavemodifier.js","../src/stavebarline.js","../src/staverepetition.js","../src/stavesection.js","../src/stavetempo.js","../src/textnote.js","../src/stavetext.js","../src/clef.js","../src/keysignature.js","../src/timesignature.js","../src/stavevolta.js","../src/stave.js","../src/tabstave.js","../src/tabnote.js","../src/clefnote.js","../src/timesignote.js","../src/tabtie.js","../src/tabslide.js","../src/gracenote.js","../src/tuning.js","../src/keymanager.js","../src/stavehairpin.js","../src/curve.js","../src/textdynamics.js","../src/staveline.js","../src/pedalmarking.js","../src/textbracket.js","../src/barnote.js","../src/tremolo.js","../src/crescendo.js","../src/index.js"],"sourcesContent":["// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements utility methods used by the rest of the VexFlow\n// codebase.\n//\n// ## JSHint Settings\n//\n/* global window: false */\n/* global document: false */\n/* global Vex: true */\n\nconst Vex = () => {};\n\n// Default log function sends all arguments to console.\nVex.L = (block, args) => {\n  if (!args) return;\n  const line = Array.prototype.slice.call(args).join(' ');\n  window.console.log(block + ': ' + line);\n};\n\n// Default runtime exception.\nVex.RuntimeError = function(code, message) {\n  this.code = code;\n  this.message = message;\n};\n\nVex.RuntimeError.prototype.toString = function() {\n  return 'RuntimeError: ' + this.message;\n};\n\n// Shortcut method for `RuntimeError`.\nVex.RERR = Vex.RuntimeError;\n\n// Merge `destination` hash with `source` hash, overwriting like keys\n// in `source` if necessary.\nVex.Merge = (destination, source) => {\n  for (const property in source)\n    destination[property] = source[property];\n  return destination;\n};\n\n// DEPRECATED. Use `Math.*`.\nVex.Min = Math.min;\nVex.Max = Math.max;\nVex.forEach = (a, fn) => {\n  for (let i = 0; i < a.length; i++) {\n    fn(a[i], i);\n  }\n};\n\n// Round number to nearest fractional value (`.5`, `.25`, etc.)\nVex.RoundN = (x, n) => (x % n) >= (n / 2) ?\n  parseInt(x / n, 10) * n + n : parseInt(x / n, 10) * n;\n\n// Locate the mid point between stave lines. Returns a fractional line if a space.\nVex.MidLine = (a, b) => {\n  let mid_line = b + (a - b) / 2;\n  if (mid_line % 2 > 0) {\n    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;\n  }\n  return mid_line;\n};\n\n// Take `arr` and return a new list consisting of the sorted, unique,\n// contents of arr. Does not modify `arr`.\nVex.SortAndUnique = (arr, cmp, eq) => {\n  if (arr.length > 1) {\n    const newArr = [];\n    let last;\n    arr.sort(cmp);\n\n    for (let i = 0; i < arr.length; ++i) {\n      if (i === 0 || !eq(arr[i], last)) {\n        newArr.push(arr[i]);\n      }\n      last = arr[i];\n    }\n\n    return newArr;\n  } else {\n    return arr;\n  }\n};\n\n// Check if array `a` contains `obj`.\nVex.Contains = (a, obj) => {\n  let i = a.length;\n  while (i--) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Get the 2D Canvas context from DOM element `canvas_sel`.\nVex.getCanvasContext = canvas_sel => {\n  if (!canvas_sel)\n    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);\n\n  const canvas = document.getElementById(canvas_sel);\n  if (!(canvas && canvas.getContext)) {\n    throw new Vex.RERR('UnsupportedBrowserError',\n        'This browser does not support HTML5 Canvas');\n  }\n\n  return canvas.getContext('2d');\n};\n\n// Draw a tiny dot marker on the specified canvas. A great debugging aid.\n//\n// `ctx`: Canvas context.\n// `x`, `y`: Dot coordinates.\nVex.drawDot = (ctx, x, y, color) => {\n  const c = color || '#f55';\n  ctx.save();\n  ctx.setFillStyle(c);\n\n  // draw a circle\n  ctx.beginPath();\n  ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n  ctx.closePath();\n  ctx.fill();\n  ctx.restore();\n};\n\n// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.\nVex.BM = (s, f) => {\n  const start_time = new Date().getTime();\n  f();\n  const elapsed = new Date().getTime() - start_time;\n  Vex.L(s + elapsed + 'ms');\n};\n\n// Basic classical inheritance helper. Usage:\n// ```\n// // Vex.Inherit(Child, Parent, {\n// //   getName: function() {return this.name;},\n// //   setName: function(name) {this.name = name}\n// // });\n// //\n// // Returns 'Child'.\n// ```\nVex.Inherit = ((() => {\n  const F = () => {};\n  // `C` is Child. `P` is parent. `O` is an object to\n  // to extend `C` with.\n  return (C, P, O) => {\n    F.prototype = P.prototype;\n    C.prototype = new F();\n    C.superclass = P.prototype;\n    C.prototype.constructor = C;\n    Vex.Merge(C.prototype, O);\n    return C;\n  };\n})());\n\n// Get stack trace.\nVex.StackTrace = () => {\n  const err = new Error();\n  return err.stack;\n};\n\n// Dump warning to console.\nVex.W = function() {\n  const line = Array.prototype.slice.call(arguments).join(' ');\n  window.console.log('Warning: ', line, Vex.StackTrace());\n};\n\n// Used by various classes (e.g., SVGContext) to provide a\n// unique prefix to element names (or other keys in shared namespaces).\nVex.Prefix = text => Vex.Prefix.prefix + text;\nVex.Prefix.prefix = 'vf-';\n\nexport { Vex };\n","var babelHelpers = {};\nexport var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nexport var jsx = function () {\n  var REACT_ELEMENT_TYPE = typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\") || 0xeac7;\n  return function createRawReactElement(type, props, key, children) {\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {};\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  };\n}();\n\nexport var asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            return step(\"next\", value);\n          }, function (err) {\n            return step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\nexport var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nexport var createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexport var defineEnumerableProperties = function (obj, descs) {\n  for (var key in descs) {\n    var desc = descs[key];\n    desc.configurable = desc.enumerable = true;\n    if (\"value\" in desc) desc.writable = true;\n    Object.defineProperty(obj, key, desc);\n  }\n\n  return obj;\n};\n\nexport var defaults = function (obj, defaults) {\n  var keys = Object.getOwnPropertyNames(defaults);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n    if (value && value.configurable && obj[key] === undefined) {\n      Object.defineProperty(obj, key, value);\n    }\n  }\n\n  return obj;\n};\n\nexport var defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nexport var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexport var get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nexport var inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nexport var _instanceof = function (left, right) {\n  if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n    return right[Symbol.hasInstance](left);\n  } else {\n    return left instanceof right;\n  }\n};\n\nexport var interopRequireDefault = function (obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n};\n\nexport var interopRequireWildcard = function (obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n};\n\nexport var newArrowCheck = function (innerThis, boundThis) {\n  if (innerThis !== boundThis) {\n    throw new TypeError(\"Cannot instantiate an arrow function\");\n  }\n};\n\nexport var objectDestructuringEmpty = function (obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n};\n\nexport var objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nexport var possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nexport var selfGlobal = typeof global === \"undefined\" ? self : global;\n\nexport var set = function set(object, property, value, receiver) {\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent !== null) {\n      set(parent, property, value, receiver);\n    }\n  } else if (\"value\" in desc && desc.writable) {\n    desc.value = value;\n  } else {\n    var setter = desc.set;\n\n    if (setter !== undefined) {\n      setter.call(receiver, value);\n    }\n  }\n\n  return value;\n};\n\nexport var slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexport var slicedToArrayLoose = function (arr, i) {\n  if (Array.isArray(arr)) {\n    return arr;\n  } else if (Symbol.iterator in Object(arr)) {\n    var _arr = [];\n\n    for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  } else {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }\n};\n\nexport var taggedTemplateLiteral = function (strings, raw) {\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n};\n\nexport var taggedTemplateLiteralLoose = function (strings, raw) {\n  strings.raw = raw;\n  return strings;\n};\n\nexport var temporalRef = function (val, name, undef) {\n  if (val === undef) {\n    throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n  } else {\n    return val;\n  }\n};\n\nexport var temporalUndefined = {};\n\nexport var toArray = function (arr) {\n  return Array.isArray(arr) ? arr : Array.from(arr);\n};\n\nexport var toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nbabelHelpers;\n\nexport { _typeof as typeof, _extends as extends, _instanceof as instanceof }","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Fraction class that represents a rational number\n//\n// @author zz85\n// @author incompleteopus (modifications)\n\nimport { Vex } from './vex';\nexport class Fraction {\n\n  /**\n   * GCD: Find greatest common divisor using Euclidean algorithm\n   */\n  static GCD(a, b) {\n    if (typeof a !== 'number' || typeof b !== 'number') {\n      throw new Vex.RERR('BadArgument', 'Invalid numbers: ' + a + ', ' + b);\n    }\n\n    let t;\n\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n\n    return a;\n  }\n\n  /**\n   * LCM: Lowest common multiple\n   */\n  static LCM(a, b) {\n    return ((a * b) / Fraction.GCD(a, b));\n  }\n\n  /**\n   * LCMM: Lowest common multiple for more than two numbers\n   */\n  static LCMM(args) {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length == 1) {\n      return args[0];\n    } else if (args.length == 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      const arg0 = args[0];\n      args.shift();\n      return Fraction.LCM(arg0, Fraction.LCMM(args));\n    }\n  }\n\n  constructor(numerator, denominator) {\n    this.set(numerator, denominator);\n  }\n  set(numerator, denominator) {\n    this.numerator = numerator === undefined ? 1 : numerator;\n    this.denominator = denominator === undefined ? 1 : denominator;\n    return this;\n  }\n  value() {\n    return this.numerator / this.denominator;\n  }\n  simplify() {\n    let u = this.numerator;\n    let d = this.denominator;\n\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n  add(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  subtract(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 0;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  multiply(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n  divide(param1, param2) {\n    let otherNumerator;\n    let otherDenominator;\n\n    if (param1 instanceof Fraction) {\n      otherNumerator = param1.numerator;\n      otherDenominator = param1.denominator;\n    } else {\n      if (param1 !== undefined) {\n        otherNumerator = param1;\n      } else {\n        otherNumerator = 1;\n      }\n\n      if (param2 !== undefined) {\n        otherDenominator = param2;\n      } else {\n        otherDenominator = 1;\n      }\n    }\n\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n\n  // Simplifies both sides and checks if they are equal.\n  equals(compare) {\n    const a = Fraction.__compareA.copy(compare).simplify();\n    const b = Fraction.__compareB.copy(this).simplify();\n\n    return (a.numerator === b.numerator) && (a.denominator === b.denominator);\n  }\n\n  // Greater than operator.\n  greaterThan(compare) {\n    const a = Fraction.__compareB.copy(this);\n    a.subtract(compare);\n    return (a.numerator > 0);\n  }\n\n  // Greater than or equals operator.\n  greaterThanEquals(compare) {\n    const a = Fraction.__compareB.copy(this);\n    a.subtract(compare);\n    return (a.numerator >= 0);\n  }\n\n  // Less than operator.\n  lessThan(compare) {\n    return !(this.greaterThanEquals(compare));\n  }\n\n  // Less than or equals operator.\n  lessThanEquals(compare) {\n    return !(this.greaterThan(compare));\n  }\n\n  // Creates a new copy with this current values.\n  clone() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n  // Copies value of another Fraction into itself.\n  copy(copy) {\n    return this.set(copy.numerator, copy.denominator);\n  }\n\n  // Returns the integer component eg. (4/2) == 2\n  quotient() {\n    return Math.floor(this.numerator / this.denominator);\n  }\n\n  // Returns the fraction component when reduced to a mixed number\n  fraction() {\n    return this.numerator % this.denominator;\n  }\n\n  // Returns the absolute value\n  abs() {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n\n  // Returns a raw string representation\n  toString() {\n    return this.numerator + '/' + this.denominator;\n  }\n\n  // Returns a simplified string respresentation\n  toSimplifiedString() {\n    return Fraction.__tmp.copy(this).simplify().toString();\n  }\n\n  // Returns string representation in mixed form\n  toMixedString() {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__tmp.copy(this);\n\n    if (q < 0) {\n      f.abs().fraction();\n    } else {\n      f.fraction();\n    }\n\n    if (q !== 0) {\n      s += q;\n\n      if (f.numerator !== 0) {\n        s += ' ' + f.toSimplifiedString();\n      }\n    } else {\n      if (f.numerator === 0) {\n        s = '0';\n      } else {\n        s = f.toSimplifiedString();\n      }\n    }\n\n    return s;\n  }\n\n  // Parses a fraction string\n  parse(str) {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = (i[1]) ? parseInt(i[1], 10) : 1;\n\n    return this.set(n, d);\n  }\n}\n\n// Temporary cached objects\nFraction.__compareA = new Fraction();\nFraction.__compareB = new Fraction();\nFraction.__tmp = new Fraction();\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\n\nlet Flow = {};\nFlow.STEM_WIDTH = 1.5;\nFlow.STEM_HEIGHT = 32;\nFlow.STAVE_LINE_THICKNESS = 2;\nFlow.RESOLUTION = 16384;\n\n/* Kerning (DEPRECATED) */\nFlow.IsKerned = true;\n\nFlow.clefProperties = clef => {\n  if (!clef) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  const props = Flow.clefProperties.values[clef];\n  if (!props) throw new Vex.RERR('BadArgument', 'Invalid clef: ' + clef);\n\n  return props;\n};\n\nFlow.clefProperties.values = {\n  'treble': { line_shift: 0 },\n  'bass': { line_shift: 6 },\n  'tenor': { line_shift: 4 },\n  'alto': { line_shift: 3 },\n  'soprano': { line_shift: 1 },\n  'percussion': { line_shift: 0 },\n  'mezzo-soprano': { line_shift: 2 },\n  'baritone-c': { line_shift: 5 },\n  'baritone-f': { line_shift: 5 },\n  'subbass': { line_shift: 7 },\n  'french': { line_shift: -1 },\n};\n\n/*\n  Take a note in the format \"Key/Octave\" (e.g., \"C/5\") and return properties.\n\n  The last argument, params, is a struct the currently can contain one option,\n  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n*/\nFlow.keyProperties = (key, clef, params) => {\n  if (clef === undefined) {\n    clef = 'treble';\n  }\n  const options = {\n    octave_shift: 0,\n  };\n  if (typeof params == 'object') {\n    Vex.Merge(options, params);\n  }\n\n  const pieces = key.split('/');\n\n  if (pieces.length < 2) {\n    throw new Vex.RERR('BadArguments',\n        'Key must have note + octave and an optional glyph: ' + key);\n  }\n\n  const k = pieces[0].toUpperCase();\n  const value = Flow.keyProperties.note_values[k];\n  if (!value) throw new Vex.RERR('BadArguments', 'Invalid key name: ' + k);\n  if (value.octave) pieces[1] = value.octave;\n\n  let o = parseInt(pieces[1]);\n\n  // Octave_shift is the shift to compensate for clef 8va/8vb.\n  o += -1 * options.octave_shift;\n\n  const base_index = (o * 7) - (4 * 7);\n  let line = (base_index + value.index) / 2;\n  line += Flow.clefProperties(clef).line_shift;\n\n  let stroke = 0;\n\n  if (line <= 0 && (((line * 2) % 2) === 0)) stroke = 1;  // stroke up\n  if (line >= 6 && (((line * 2) % 2) === 0)) stroke = -1; // stroke down\n\n  // Integer value for note arithmetic.\n  const int_value = (typeof(value.int_val) != 'undefined') ? (o * 12) +\n    value.int_val : null;\n\n  /* Check if the user specified a glyph. */\n  let code = value.code;\n  let shift_right = value.shift_right;\n  if ((pieces.length > 2) && (pieces[2])) {\n    const glyph_name = pieces[2].toUpperCase();\n    const note_glyph = Flow.keyProperties.note_glyph[glyph_name];\n    if (note_glyph) {\n      code = note_glyph.code;\n      shift_right = note_glyph.shift_right;\n    }\n  }\n\n  return {\n    key: k,\n    octave: o,\n    line,\n    int_value,\n    accidental: value.accidental,\n    code,\n    stroke,\n    shift_right,\n    displaced: false,\n  };\n};\n\nFlow.keyProperties.note_values = {\n  'C': { index: 0, int_val: 0, accidental: null },\n  'CN': { index: 0, int_val: 0, accidental: 'n' },\n  'C#': { index: 0, int_val: 1, accidental: '#' },\n  'C##': { index: 0, int_val: 2, accidental: '##' },\n  'CB': { index: 0, int_val: -1, accidental: 'b' },\n  'CBB': { index: 0, int_val: -2, accidental: 'bb' },\n  'D': { index: 1, int_val: 2, accidental: null },\n  'DN': { index: 1, int_val: 2, accidental: 'n' },\n  'D#': { index: 1, int_val: 3, accidental: '#' },\n  'D##': { index: 1, int_val: 4, accidental: '##' },\n  'DB': { index: 1, int_val: 1, accidental: 'b' },\n  'DBB': { index: 1, int_val: 0, accidental: 'bb' },\n  'E': { index: 2, int_val: 4, accidental: null },\n  'EN': { index: 2, int_val: 4, accidental: 'n' },\n  'E#': { index: 2, int_val: 5, accidental: '#' },\n  'E##': { index: 2, int_val: 6, accidental: '##' },\n  'EB': { index: 2, int_val: 3, accidental: 'b' },\n  'EBB': { index: 2, int_val: 2, accidental: 'bb' },\n  'F': { index: 3, int_val: 5, accidental: null },\n  'FN': { index: 3, int_val: 5, accidental: 'n' },\n  'F#': { index: 3, int_val: 6, accidental: '#' },\n  'F##': { index: 3, int_val: 7, accidental: '##' },\n  'FB': { index: 3, int_val: 4, accidental: 'b' },\n  'FBB': { index: 3, int_val: 3, accidental: 'bb' },\n  'G': { index: 4, int_val: 7, accidental: null },\n  'GN': { index: 4, int_val: 7, accidental: 'n' },\n  'G#': { index: 4, int_val: 8, accidental: '#' },\n  'G##': { index: 4, int_val: 9, accidental: '##' },\n  'GB': { index: 4, int_val: 6, accidental: 'b' },\n  'GBB': { index: 4, int_val: 5, accidental: 'bb' },\n  'A': { index: 5, int_val: 9, accidental: null },\n  'AN': { index: 5, int_val: 9, accidental: 'n' },\n  'A#': { index: 5, int_val: 10, accidental: '#' },\n  'A##': { index: 5, int_val: 11, accidental: '##' },\n  'AB': { index: 5, int_val: 8, accidental: 'b' },\n  'ABB': { index: 5, int_val: 7, accidental: 'bb' },\n  'B': { index: 6, int_val: 11, accidental: null },\n  'BN': { index: 6, int_val: 11, accidental: 'n' },\n  'B#': { index: 6, int_val: 12, accidental: '#' },\n  'B##': { index: 6, int_val: 13, accidental: '##' },\n  'BB': { index: 6, int_val: 10, accidental: 'b' },\n  'BBB': { index: 6, int_val: 9, accidental: 'bb' },\n  'R': { index: 6, int_val: 9, rest: true }, // Rest\n  'X': {\n    index: 6,\n    accidental: '',\n    octave: 4,\n    code: 'v3e',\n    shift_right: 5.5,\n  },\n};\n\nFlow.keyProperties.note_glyph = {\n  /* Diamond */\n  'D0': { code: 'v27', shift_right: -0.5 },\n  'D1': { code: 'v2d', shift_right: -0.5 },\n  'D2': { code: 'v22', shift_right: -0.5 },\n  'D3': { code: 'v70', shift_right: -0.5 },\n\n  /* Triangle */\n  'T0': { code: 'v49', shift_right: -2 },\n  'T1': { code: 'v93', shift_right: 0.5 },\n  'T2': { code: 'v40', shift_right: 0.5 },\n  'T3': { code: 'v7d', shift_right: 0.5 },\n\n  /* Cross */\n  'X0': { code: 'v92', shift_right: -2 },\n  'X1': { code: 'v95', shift_right: -0.5 },\n  'X2': { code: 'v7f', shift_right: 0.5 },\n  'X3': { code: 'v3b', shift_right: -2 },\n};\n\nFlow.integerToNote = integer => {\n  if (typeof(integer) == 'undefined')\n    throw new Vex.RERR('BadArguments', 'Undefined integer for integerToNote');\n\n  if (integer < -2)\n    throw new Vex.RERR('BadArguments',\n        'integerToNote requires integer > -2: ' + integer);\n\n  const noteValue = Flow.integerToNote.table[integer];\n  if (!noteValue)\n    throw new Vex.RERR('BadArguments', 'Unknown note value for integer: ' +\n        integer);\n\n  return noteValue;\n};\n\nFlow.integerToNote.table = {\n  0: 'C',\n  1: 'C#',\n  2: 'D',\n  3: 'D#',\n  4: 'E',\n  5: 'F',\n  6: 'F#',\n  7: 'G',\n  8: 'G#',\n  9: 'A',\n  10: 'A#',\n  11: 'B',\n};\n\n\nFlow.tabToGlyph = fret => {\n  let glyph = null;\n  let width = 0;\n  let shift_y = 0;\n\n  if (fret.toString().toUpperCase() == 'X') {\n    glyph = 'v7f';\n    width = 7;\n    shift_y = -4.5;\n  } else {\n    width = Flow.textWidth(fret.toString());\n  }\n\n  return {\n    text: fret,\n    code: glyph,\n    width,\n    shift_y,\n  };\n};\n\nFlow.textWidth = text => 6 * text.toString().length;\n\nFlow.articulationCodes = artic => Flow.articulationCodes.articulations[artic];\n\nFlow.articulationCodes.articulations = {\n  'a.': {   // Staccato\n    code: 'v23',\n    width: 4,\n    shift_right: -2,\n    shift_up: 8,\n    shift_down: 0,\n    between_lines: true,\n  },\n  'av': {   // Staccatissimo\n    code: 'v28',\n    width: 4,\n    shift_right: 0,\n    shift_up: 11,\n    shift_down: 5,\n    between_lines: true,\n  },\n  'a>': {   // Accent\n    code: 'v42',\n    width: 10,\n    shift_right: 5,\n    shift_up: 8,\n    shift_down: 1,\n    between_lines: true,\n  },\n  'a-': {   // Tenuto\n    code: 'v25',\n    width: 9,\n    shift_right: -4,\n    shift_up: 17,\n    shift_down: 10,\n    between_lines: true,\n  },\n  'a^': {   // Marcato\n    code: 'va',\n    width: 8,\n    shift_right: 0,\n    shift_up: -4,\n    shift_down: -2,\n    between_lines: false,\n  },\n  'a+': {   // Left hand pizzicato\n    code: 'v8b',\n    width: 9,\n    shift_right: -4,\n    shift_up: 12,\n    shift_down: 12,\n    between_lines: false,\n  },\n  'ao': {   // Snap pizzicato\n    code: 'v94',\n    width: 8,\n    shift_right: 0,\n    shift_up: -4,\n    shift_down: 6,\n    between_lines: false,\n  },\n  'ah': {   // Natural harmonic or open note\n    code: 'vb9',\n    width: 7,\n    shift_right: 0,\n    shift_up: -4,\n    shift_down: 4,\n    between_lines: false,\n  },\n  'a@a': {   // Fermata above staff\n    code: 'v43',\n    width: 25,\n    shift_right: 0,\n    shift_up: 8,\n    shift_down: 10,\n    between_lines: false,\n  },\n  'a@u': {   // Fermata below staff\n    code: 'v5b',\n    width: 25,\n    shift_right: 0,\n    shift_up: 0,\n    shift_down: -4,\n    between_lines: false,\n  },\n  'a|': {   // Bow up - up stroke\n    code: 'v75',\n    width: 8,\n    shift_right: 0,\n    shift_up: 8,\n    shift_down: 10,\n    between_lines: false,\n  },\n  'am': {   // Bow down - down stroke\n    code: 'v97',\n    width: 13,\n    shift_right: 0,\n    shift_up: 10,\n    shift_down: 12,\n    between_lines: false,\n  },\n  'a,': {   // Choked\n    code: 'vb3',\n    width: 6,\n    shift_right: 8,\n    shift_up: -4,\n    shift_down: 4,\n    between_lines: false,\n  },\n};\n\nFlow.accidentalCodes = acc => Flow.accidentalCodes.accidentals[acc];\n\nFlow.accidentalCodes.accidentals = {\n  '#': {\n    code: 'v18',\n    width: 10,\n    gracenote_width: 4.5,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  '##': {\n    code: 'v7f',\n    width: 13,\n    gracenote_width: 6,\n    shift_right: -1,\n    shift_down: 0,\n  },\n  'b': {\n    code: 'v44',\n    width: 8,\n    gracenote_width: 4.5,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  'bb': {\n    code: 'v26',\n    width: 14,\n    gracenote_width: 8,\n    shift_right: -3,\n    shift_down: 0,\n  },\n  'n': {\n    code: 'v4e',\n    width: 8,\n    gracenote_width: 4.5,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  '{': {   // Left paren for cautionary accidentals\n    code: 'v9c',\n    width: 5,\n    shift_right: 2,\n    shift_down: 0,\n  },\n  '}': {   // Right paren for cautionary accidentals\n    code: 'v84',\n    width: 5,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  'db': {\n    code: 'v9e',\n    width: 16,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  'd': {\n    code: 'vab',\n    width: 10,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  'bbs': {\n    code: 'v90',\n    width: 13,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  '++': {\n    code: 'v51',\n    width: 13,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  '+': {\n    code: 'v78',\n    width: 8,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  '+-': {\n    code: 'v8d',\n    width: 7,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  '++-': {\n    code: 'v7a',\n    width: 10,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  'bs': {\n    code: 'vb7',\n    width: 10,\n    shift_right: 0,\n    shift_down: 0,\n  },\n  'bss': {\n    code: 'v39',\n    width: 10,\n    shift_right: 0,\n    shift_down: 0,\n  },\n};\n\nFlow.accidentalColumnsTable = {\n  1: { a: [1], b: [1] },\n  2: { a: [1, 2] },\n  3: { a: [1, 3, 2], b: [1, 2, 1], second_on_bottom: [1, 2, 3] },\n  4: { a: [1, 3, 4, 2], b: [1, 2, 3, 1], spaced_out_tetrachord: [1, 2, 1, 2] },\n  5: { a: [1, 3, 5, 4, 2], b: [1, 2, 4, 3, 1],\n        spaced_out_pentachord: [1, 2, 3, 2, 1],\n        very_spaced_out_pentachord: [1, 2, 1, 2, 1] },\n  6: { a: [1, 3, 5, 6, 4, 2], b: [1, 2, 4, 5, 3, 1],\n        spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n        very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2] },\n};\n\nFlow.ornamentCodes = acc => Flow.ornamentCodes.ornaments[acc];\n\nFlow.ornamentCodes.ornaments = {\n  'mordent': {\n    code: 'v1e',\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 5,\n    width: 14,\n  },\n  'mordent_inverted': {\n    code: 'v45',\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 5,\n    width: 14,\n  },\n  'turn': {\n    code: 'v72',\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 5,\n    width: 20,\n  },\n  'turn_inverted': {\n    code: 'v33',\n    shift_right: 1,\n    shift_up: 0,\n    shift_down: 6,\n    width: 20,\n  },\n  'tr': {\n    code: 'v1f',\n    shift_right: 0,\n    shift_up: 5,\n    shift_down: 15,\n    width: 10,\n  },\n  'upprall': {\n    code: 'v60',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  'downprall': {\n    code: 'vb4',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  'prallup': {\n    code: 'v6d',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  'pralldown': {\n    code: 'v2c',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  'upmordent': {\n    code: 'v29',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  'downmordent': {\n    code: 'v68',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  'lineprall': {\n    code: 'v20',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n  'prallprall': {\n    code: 'v86',\n    shift_right: 1,\n    shift_up: -3,\n    shift_down: 6,\n    width: 20,\n  },\n};\n\nFlow.keySignature = spec => {\n  const keySpec = Flow.keySignature.keySpecs[spec];\n\n  if (!keySpec) {\n    throw new Vex.RERR('BadKeySignature',\n        \"Bad key signature spec: '\" + spec + \"'\");\n  }\n\n  if (!keySpec.acc) {\n    return [];\n  }\n\n  const notes = Flow.keySignature.accidentalList(keySpec.acc);\n\n  const acc_list = [];\n  for (let i = 0; i < keySpec.num; ++i) {\n    const line = notes[i];\n    acc_list.push({ type: keySpec.acc, line });\n  }\n\n  return acc_list;\n};\n\nFlow.keySignature.keySpecs = {\n  'C': { acc: null, num: 0 },\n  'Am': { acc: null, num: 0 },\n  'F': { acc: 'b', num: 1 },\n  'Dm': { acc: 'b', num: 1 },\n  'Bb': { acc: 'b', num: 2 },\n  'Gm': { acc: 'b', num: 2 },\n  'Eb': { acc: 'b', num: 3 },\n  'Cm': { acc: 'b', num: 3 },\n  'Ab': { acc: 'b', num: 4 },\n  'Fm': { acc: 'b', num: 4 },\n  'Db': { acc: 'b', num: 5 },\n  'Bbm': { acc: 'b', num: 5 },\n  'Gb': { acc: 'b', num: 6 },\n  'Ebm': { acc: 'b', num: 6 },\n  'Cb': { acc: 'b', num: 7 },\n  'Abm': { acc: 'b', num: 7 },\n  'G': { acc: '#', num: 1 },\n  'Em': { acc: '#', num: 1 },\n  'D': { acc: '#', num: 2 },\n  'Bm': { acc: '#', num: 2 },\n  'A': { acc: '#', num: 3 },\n  'F#m': { acc: '#', num: 3 },\n  'E': { acc: '#', num: 4 },\n  'C#m': { acc: '#', num: 4 },\n  'B': { acc: '#', num: 5 },\n  'G#m': { acc: '#', num: 5 },\n  'F#': { acc: '#', num: 6 },\n  'D#m': { acc: '#', num: 6 },\n  'C#': { acc: '#', num: 7 },\n  'A#m': { acc: '#', num: 7 },\n};\n\nFlow.unicode = {\n  // Unicode accidentals\n  'sharp': String.fromCharCode(parseInt('266F', 16)),\n  'flat': String.fromCharCode(parseInt('266D', 16)),\n  'natural': String.fromCharCode(parseInt('266E', 16)),\n  // Major Chord\n  'triangle': String.fromCharCode(parseInt('25B3', 16)),\n  // half-diminished\n  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),\n   // Diminished\n  'degrees': String.fromCharCode(parseInt('00B0', 16)),\n  'circle': String.fromCharCode(parseInt('25CB', 16)),\n};\n\nFlow.keySignature.accidentalList = acc => {\n  if (acc == 'b') {\n    return [2, 0.5, 2.5, 1, 3, 1.5, 3.5];\n  }\n  else if (acc == '#') {\n    return [0, 1.5, -0.5, 1, 2.5, 0.5, 2]; }\n};\n\nFlow.parseNoteDurationString = durationString => {\n  if (typeof(durationString) !== 'string') {\n    return null;\n  }\n\n  const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n\n  const result = regexp.exec(durationString);\n  if (!result) {\n    return null;\n  }\n\n  const duration = result[1];\n  const dots = result[2].length;\n  let type = result[3];\n\n  if (type.length === 0) {\n    type = 'n';\n  }\n\n  return {\n    duration,\n    dots,\n    type,\n  };\n};\n\nFlow.parseNoteData = noteData => {\n  const duration = noteData.duration;\n\n  // Preserve backwards-compatibility\n  const durationStringData = Flow.parseNoteDurationString(duration);\n  if (!durationStringData) {\n    return null;\n  }\n\n  let ticks = Flow.durationToTicks(durationStringData.duration);\n  if (ticks == null) {\n    return null;\n  }\n\n  let type = noteData.type;\n\n  if (type) {\n    if (!(type === 'n' || type === 'r' || type === 'h' ||\n          type === 'm' || type === 's')) {\n      return null;\n    }\n  } else {\n    type = durationStringData.type;\n    if (!type) {\n      type = 'n';\n    }\n  }\n\n  let dots = 0;\n  if (noteData.dots) {\n    dots = noteData.dots;\n  } else {\n    dots = durationStringData.dots;\n  }\n\n  if (typeof(dots) !== 'number') {\n    return null;\n  }\n\n  let currentTicks = ticks;\n\n  for (let i = 0; i < dots; i++) {\n    if (currentTicks <= 1) {\n      return null;\n    }\n\n    currentTicks = currentTicks / 2;\n    ticks += currentTicks;\n  }\n\n  return {\n    duration: durationStringData.duration,\n    type,\n    dots,\n    ticks,\n  };\n};\n\n// Used to convert duration aliases to the number based duration.\n// If the input isn't an alias, simply return the input.\n//\n// example: 'q' -> '4', '8' -> '8'\nFlow.sanitizeDuration = duration => {\n  const alias = Flow.durationAliases[duration];\n  if (alias !== undefined) {\n    duration = alias;\n  }\n\n  if (Flow.durationToTicks.durations[duration] === undefined) {\n    throw new Vex.RERR('BadArguments',\n      'The provided duration is not valid: ' + duration);\n  }\n\n  return duration;\n};\n\n// Convert the `duration` to an fraction\nFlow.durationToFraction = duration => new Fraction().parse(Flow.sanitizeDuration(duration));\n\n// Convert the `duration` to an number\nFlow.durationToNumber = duration => Flow.durationToFraction(duration).value();\n\n// Convert the `duration` to total ticks\nFlow.durationToTicks = duration => {\n  duration = Flow.sanitizeDuration(duration);\n\n  const ticks = Flow.durationToTicks.durations[duration];\n  if (ticks === undefined) {\n    return null;\n  }\n\n  return ticks;\n};\n\nFlow.durationToTicks.durations = {\n  '1/2': Flow.RESOLUTION * 2,\n  '1': Flow.RESOLUTION / 1,\n  '2': Flow.RESOLUTION / 2,\n  '4': Flow.RESOLUTION / 4,\n  '8': Flow.RESOLUTION / 8,\n  '16': Flow.RESOLUTION / 16,\n  '32': Flow.RESOLUTION / 32,\n  '64': Flow.RESOLUTION / 64,\n  '128': Flow.RESOLUTION / 128,\n  '256': Flow.RESOLUTION / 256,\n};\n\nFlow.durationAliases = {\n  'w': '1',\n  'h': '2',\n  'q': '4',\n\n  // This is the default duration used to render bars (BarNote). Bars no longer\n  // consume ticks, so this should be a no-op.\n  //\n  // TODO(0xfe): This needs to be cleaned up.\n  'b': '256',\n};\n\nFlow.durationToGlyph = (duration, type) => {\n  duration = Flow.sanitizeDuration(duration);\n\n  const code = Flow.durationToGlyph.duration_codes[duration];\n  if (code === undefined) {\n    return null;\n  }\n\n  if (!type) {\n    type = 'n';\n  }\n\n  const glyphTypeProperties = code.type[type];\n  if (glyphTypeProperties === undefined) {\n    return null;\n  }\n\n  return Vex.Merge(Vex.Merge({}, code.common), glyphTypeProperties);\n};\n\nFlow.durationToGlyph.duration_codes = {\n  '1/2': {\n    common: {\n      head_width: 22,\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,\n      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Breve note\n        code_head: 'v53',\n      },\n      'h': { // Breve note harmonic\n        code_head: 'v59',\n      },\n      'm': { // Breve note muted -\n        code_head: 'vf',\n        stem_offset: 0,\n      },\n      'r': { // Breve rest\n        code_head: 'v31',\n        head_width: 24,\n        rest: true,\n        position: 'B/5',\n        dot_shiftY: 0.5,\n      },\n      's': { // Breve note slash -\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '1': {\n    common: {\n      head_width: 16,\n      stem: false,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: -Flow.STEM_HEIGHT,\n      stem_down_extension: -Flow.STEM_HEIGHT,\n      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,\n      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,\n      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Whole note\n        code_head: 'v1d',\n      },\n      'h': { // Whole note harmonic\n        code_head: 'v46',\n      },\n      'm': { // Whole note muted\n        code_head: 'v92',\n        stem_offset: -3,\n      },\n      'r': { // Whole rest\n        code_head: 'v5c',\n        head_width: 12,\n        rest: true,\n        position: 'D/5',\n        dot_shiftY: 0.5,\n      },\n      's': { // Whole note slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '2': {\n    common: {\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Half note\n        code_head: 'v81',\n      },\n      'h': { // Half note harmonic\n        code_head: 'v2d',\n      },\n      'm': { // Half note muted\n        code_head: 'v95',\n        stem_offset: -3,\n      },\n      'r': { // Half rest\n        code_head: 'vc',\n        head_width: 12,\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n      },\n      's': { // Half note slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '4': {\n    common: {\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: false,\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Quarter note\n        code_head: 'vb',\n      },\n      'h': { // Quarter harmonic\n        code_head: 'v22',\n      },\n      'm': { // Quarter muted\n        code_head: 'v3e',\n        stem_offset: -3,\n      },\n      'r': { // Quarter rest\n        code_head: 'v7c',\n        head_width: 8,\n        stem: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.5,\n        line_below: 1.5,\n      },\n      's': { // Quarter slash\n         // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '8': {\n    common: {\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      beam_count: 1,\n      code_flag_upstem: 'v54',\n      code_flag_downstem: 'v9a',\n      stem_up_extension: 0,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Eighth note\n        code_head: 'vb',\n      },\n      'h': { // Eighth note harmonic\n        code_head: 'v22',\n      },\n      'm': { // Eighth note muted\n        code_head: 'v3e',\n      },\n      'r': { // Eighth rest\n        code_head: 'va5',\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 1.0,\n      },\n      's': { // Eight slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '16': {\n    common: {\n      beam_count: 2,\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'v3f',\n      code_flag_downstem: 'v8f',\n      stem_up_extension: 4,\n      stem_down_extension: 0,\n      gracenote_stem_up_extension: -14,\n      gracenote_stem_down_extension: -14,\n      tabnote_stem_up_extension: 0,\n      tabnote_stem_down_extension: 0,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Sixteenth note\n        code_head: 'vb',\n      },\n      'h': { // Sixteenth note harmonic\n        code_head: 'v22',\n      },\n      'm': { // Sixteenth note muted\n        code_head: 'v3e',\n      },\n      'r': { // Sixteenth rest\n        code_head: 'v3c',\n        head_width: 13,\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -0.5,\n        line_above: 1.0,\n        line_below: 2.0,\n      },\n      's': { // Sixteenth slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '32': {\n    common: {\n      beam_count: 3,\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'v47',\n      code_flag_downstem: 'v2a',\n      stem_up_extension: 13,\n      stem_down_extension: 9,\n      gracenote_stem_up_extension: -12,\n      gracenote_stem_down_extension: -12,\n      tabnote_stem_up_extension: 9,\n      tabnote_stem_down_extension: 5,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Thirty-second note\n        code_head: 'vb',\n      },\n      'h': { // Thirty-second harmonic\n        code_head: 'v22',\n      },\n      'm': { // Thirty-second muted\n        code_head: 'v3e',\n      },\n      'r': { // Thirty-second rest\n        code_head: 'v55',\n        head_width: 16,\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 2.0,\n      },\n      's': { // Thirty-second slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '64': {\n    common: {\n      beam_count: 4,\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'va9',\n      code_flag_downstem: 'v58',\n      stem_up_extension: 17,\n      stem_down_extension: 13,\n      gracenote_stem_up_extension: -10,\n      gracenote_stem_down_extension: -10,\n      tabnote_stem_up_extension: 13,\n      tabnote_stem_down_extension: 9,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': { // Sixty-fourth note\n        code_head: 'vb',\n      },\n      'h': { // Sixty-fourth harmonic\n        code_head: 'v22',\n      },\n      'm': { // Sixty-fourth muted\n        code_head: 'v3e',\n      },\n      'r': { // Sixty-fourth rest\n        code_head: 'v38',\n        head_width: 18,\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: -1.5,\n        line_above: 2.0,\n        line_below: 3.0,\n      },\n      's': { // Sixty-fourth slash\n        // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n  '128': {\n    common: {\n      beam_count: 5,\n      head_width: 10,\n      stem: true,\n      stem_offset: 0,\n      flag: true,\n      code_flag_upstem: 'v9b',\n      code_flag_downstem: 'v30',\n      stem_up_extension: 26,\n      stem_down_extension: 22,\n      gracenote_stem_up_extension: -8,\n      gracenote_stem_down_extension: -8,\n      tabnote_stem_up_extension: 22,\n      tabnote_stem_down_extension: 18,\n      dot_shiftY: 0,\n      line_above: 0,\n      line_below: 0,\n    },\n    type: {\n      'n': {  // Hundred-twenty-eight note\n        code_head: 'vb',\n      },\n      'h': { // Hundred-twenty-eight harmonic\n        code_head: 'v22',\n      },\n      'm': { // Hundred-twenty-eight muted\n        code_head: 'v3e',\n      },\n      'r': {  // Hundred-twenty-eight rest\n        code_head: 'vaa',\n        head_width: 20,\n        stem: false,\n        flag: false,\n        rest: true,\n        position: 'B/4',\n        dot_shiftY: 1.5,\n        line_above: 3.0,\n        line_below: 3.0,\n      },\n      's': { // Hundred-twenty-eight rest\n              // Drawn with canvas primitives\n        head_width: 15,\n        position: 'B/4',\n      },\n    },\n  },\n};\n\n// Some defaults\nFlow.TIME4_4 = {\n  num_beats: 4,\n  beat_value: 4,\n  resolution: Flow.RESOLUTION,\n};\nexport { Flow };\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// A rendering context for the Raphael backend.\n//\n// Copyright Mohit Cheppudira 2010\n\n/** @constructor */\nexport class CanvasContext {\n  static get WIDTH() {\n    return 600;\n  }\n  static get HEIGHT() {\n    return 400;\n  }\n\n  constructor(context) {\n    // Use a name that is unlikely to clash with a canvas context\n    // property\n    this.vexFlowCanvasContext = context;\n    if (!context.canvas) {\n      this.canvas = {\n        width: CanvasContext.WIDTH,\n        height: CanvasContext.HEIGHT,\n      };\n    } else {\n      this.canvas = context.canvas;\n    }\n  }\n\n  clear() {\n    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Containers not implemented\n  openGroup(cls, id, attrs) {}\n  closeGroup() {}\n  add(elem) {}\n\n  setFont(family, size, weight) {\n    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.vexFlowCanvasContext.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.vexFlowCanvasContext.fillStyle = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_fillStyle = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.vexFlowCanvasContext.strokeStyle = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.vexFlowCanvasContext.shadowColor = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.vexFlowCanvasContext.shadowBlur = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.vexFlowCanvasContext.lineWidth = width;\n    return this;\n  }\n\n  setLineCap(cap_type) {\n    this.vexFlowCanvasContext.lineCap = cap_type;\n    return this;\n  }\n\n  // setLineDash: is the one native method in a canvas context\n  // that begins with set, therefore we don't bolster the method\n  // if it already exists (see renderer.bolsterCanvasContext).\n  // If it doesn't exist, we bolster it and assume it's looking for\n  // a ctx.lineDash method, as previous versions of VexFlow\n  // expected.\n  setLineDash(dash) {\n    this.vexFlowCanvasContext.lineDash = dash;\n    return this;\n  }\n\n  scale(x, y) {\n    return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));\n  }\n\n  resize(width, height) {\n    return this.vexFlowCanvasContext.resize(\n        parseInt(width, 10), parseInt(height, 10));\n  }\n\n  rect(x, y, width, height) {\n    return this.vexFlowCanvasContext.rect(x, y, width, height);\n  }\n\n  fillRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.fillRect(x, y, width, height);\n  }\n\n  clearRect(x, y, width, height) {\n    return this.vexFlowCanvasContext.clearRect(x, y, width, height);\n  }\n\n  beginPath() {\n    return this.vexFlowCanvasContext.beginPath();\n  }\n\n  moveTo(x, y) {\n    return this.vexFlowCanvasContext.moveTo(x, y);\n  }\n\n  lineTo(x, y) {\n    return this.vexFlowCanvasContext.lineTo(x, y);\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    return this.vexFlowCanvasContext.glow();\n  }\n\n  fill() {\n    return this.vexFlowCanvasContext.fill();\n  }\n\n  stroke() {\n    return this.vexFlowCanvasContext.stroke();\n  }\n\n  closePath() {\n    return this.vexFlowCanvasContext.closePath();\n  }\n\n  measureText(text) {\n    return this.vexFlowCanvasContext.measureText(text);\n  }\n\n  fillText(text, x, y) {\n    return this.vexFlowCanvasContext.fillText(text, x, y);\n  }\n\n  save() {\n    return this.vexFlowCanvasContext.save();\n  }\n\n  restore() {\n    return this.vexFlowCanvasContext.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A rendering context for the Raphael backend.\n//\n// ## Warning: Deprecated for SVGContext\n// Except in instances where SVG support for IE < 9.0 is\n// needed, SVGContext is recommended.\n\nexport class RaphaelContext {\n  constructor(element) {\n    this.element = element;\n    this.paper = Raphael(element);\n    this.path = '';\n    this.pen = { x: 0, y: 0 };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      font_family: 'Arial',\n      font_size: 8,\n      font_weight: 800,\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'font': '10pt Arial',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'font': '10pt Arial',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n  }\n\n  // Containers not implemented\n  openGroup(cls, id, attrs) {}\n  closeGroup() {}\n  add(elem) {}\n\n  setFont(family, size, weight) {\n    this.state.font_family = family;\n    this.state.font_size = size;\n    this.state.font_weight = weight;\n    this.attributes.font = (this.state.font_weight || '') + ' ' +\n      (this.state.font_size * this.state.scale.x) + 'pt ' +\n      this.state.font_family;\n    return this;\n  }\n\n  setRawFont(font) {\n    this.attributes.font = font;\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // Empty because there is no equivalent in SVG\n  setLineDash() { return this; }\n  setLineCap() { return this; }\n\n  scale(x, y) {\n    this.state.scale = { x, y };\n    // The scale() method is deprecated as of Raphael.JS 2.0, and\n    // can no longer be used as an option in an Element.attr() call.\n    // It is preserved here for users running earlier versions of\n    // Raphael.JS, though it has no effect on the SVG output in\n    // Raphael 2 and higher.\n    this.attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.attributes.scale = x + ',' + y + ',0,0';\n    this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' +\n      this.state.font_family;\n    this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';\n    this.background_attributes.font = this.state.font_size *\n      this.state.scale.x + 'pt ' +\n      this.state.font_family;\n    return this;\n  }\n\n  clear() { this.paper.clear(); }\n\n  resize(width, height) {\n    this.element.style.width = width;\n    this.paper.setSize(width, height);\n    return this;\n  }\n\n  // Sets the SVG `viewBox` property, which results in auto scaling images when its container\n  // is resized.\n  //\n  // Usage: `ctx.setViewBox(\"0 0 600 400\")`\n  setViewBox(viewBox) {\n    this.paper.canvas.setAttribute('viewBox', viewBox);\n  }\n\n  rect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).\n      attr(this.attributes).\n      attr('fill', 'none').\n      attr('stroke-width', this.lineWidth);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).\n      attr(this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height = -height;\n    }\n\n    this.paper.rect(x, y, width - 0.5, height - 0.5).\n      attr(this.background_attributes);\n    return this;\n  }\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = 0;\n    this.pen.y = 0;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ',' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' +\n      x1 + ',' +\n      y1 + ',' +\n      x2 + ',' +\n      y2 + ',' +\n      x + ',' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' +\n      x1 + ',' +\n      y1 + ',' +\n      x + ',' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2,\n                       antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle,\n                       antiClockwise);\n    }\n    else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI)\n        largeArcFlag = 1;\n    }\n    else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ',' + y1 + ',' + 'A' +\n      radius + ',' + radius + ',' + '0,' + largeArcFlag + ',' + sweepFlag + ',' +\n      x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    const out = this.paper.set();\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      for (let i = 1; i <= num_paths; i++) {\n        out.push(this.paper.path(this.path).attr({\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +(sa.width / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n          // See note in this.scale(): In Raphael the scale() method\n          // is deprecated and removed as of Raphael 2.0 and replaced\n          // by the transform() method.  It is preserved here for\n          // users with earlier versions of Raphael, but has no effect\n          // on the output SVG in Raphael 2.0+.\n          transform: this.attributes.transform,\n          scale: this.attributes.scale,\n        }));\n      }\n    }\n    return out;\n  }\n\n  fill() {\n    const elem = this.paper.path(this.path).\n      attr(this.attributes).\n      attr('stroke-width', 0);\n    this.glow(elem);\n    return this;\n  }\n\n  stroke() {\n    // The first line of code below is, unfortunately, a bit of a hack:\n    // Raphael's transform() scaling does not scale the stroke-width, so\n    // in order to scale a stroke, we have to manually scale the\n    // stroke-width.\n    //\n    // This works well so long as the X & Y states for this.scale() are\n    // relatively similar.  However, if they are very different, we\n    // would expect horizontal and vertical lines to have different\n    // stroke-widths.\n    //\n    // In the future, if we want to support very divergent values for\n    // horizontal and vertical scaling, we may want to consider\n    // implementing SVG scaling with properties of the SVG viewBox &\n    // viewPort and removing it entirely from the Element.attr() calls.\n    // This would more closely parallel the approach taken in\n    // canvascontext.js as well.\n\n    const strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;\n    const elem = this.paper.path(this.path).\n      attr(this.attributes).\n      attr('fill', 'none').\n      attr('stroke-width', strokeWidth);\n    this.glow(elem);\n    return this;\n  }\n\n  closePath() {\n    this.path += 'Z';\n    return this;\n  }\n\n  measureText(text) {\n    const txt = this.paper.text(0, 0, text).\n      attr(this.attributes).\n      attr('fill', 'none').\n      attr('stroke', 'none');\n    const bounds = txt.getBBox();\n    txt.remove();\n\n    return {\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n\n  fillText(text, x, y) {\n    this.paper.text(x + (this.measureText(text).width / 2),\n        (y - (this.state.font_size / (2.25 * this.state.scale.y))), text).\n      attr(this.attributes);\n    return this;\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        font_family: this.state.font_family,\n      },\n      attributes: {\n        font: this.attributes.font,\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state.font_family = state.state.font_family;\n    this.attributes.font = state.attributes.font;\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Gregory Ristow (2015)\n\nimport { Vex } from './vex';\n\nexport class SVGContext {\n  constructor(element) {\n    // element is the parent DOM object\n    this.element = element;\n    // Create the SVG in the SVG namespace:\n    this.svgNS = 'http://www.w3.org/2000/svg';\n    const svg = this.create('svg');\n    // Add it to the canvas:\n    this.element.appendChild(svg);\n\n    // Point to it:\n    this.svg = svg;\n    this.groups = [this.svg]; // Create the group stack\n    this.parent = this.svg;\n\n    this.path = '';\n    this.pen = { x: 0, y: 0 };\n    this.lineWidth = 1.0;\n    this.state = {\n      scale: { x: 1, y: 1 },\n      'font-family': 'Arial',\n      'font-size': '8pt',\n      'font-weight': 'normal',\n    };\n\n    this.attributes = {\n      'stroke-width': 0.3,\n      'fill': 'black',\n      'stroke': 'black',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.background_attributes = {\n      'stroke-width': 0,\n      'fill': 'white',\n      'stroke': 'white',\n      'stroke-dasharray': 'none',\n      'font-family': 'Arial',\n      'font-size': '10pt',\n      'font-weight': 'normal',\n      'font-style': 'normal',\n    };\n\n    this.shadow_attributes = {\n      width: 0,\n      color: 'black',\n    };\n\n    this.state_stack = [];\n\n    // Test for Internet Explorer\n    this.iePolyfill();\n  }\n\n  create(svgElementType) {\n    return document.createElementNS(this.svgNS, svgElementType);\n  }\n\n  // Allow grouping elements in containers for interactivity.\n  openGroup(cls, id, attrs) {\n    const group = this.create('g');\n    this.groups.push(group);\n    this.parent.appendChild(group);\n    this.parent = group;\n    if (cls) group.setAttribute('class', Vex.Prefix(cls));\n    if (id) group.setAttribute('id', Vex.Prefix(id));\n\n    if (attrs && attrs.pointerBBox) {\n      group.setAttribute('pointer-events', 'bounding-box');\n    }\n    return group;\n  }\n\n  closeGroup() {\n    const group = this.groups.pop();\n    this.parent = this.groups[this.groups.length - 1];\n  }\n\n  add(elem) {\n    this.parent.appendChild(elem);\n  }\n\n  // Tests if the browser is Internet Explorer; if it is,\n  // we do some tricks to improve text layout.  See the\n  // note at ieMeasureTextFix() for details.\n  iePolyfill() {\n    if (typeof(navigator) !== 'undefined') {\n      this.ie = (/MSIE 9/i.test(navigator.userAgent) ||\n                          /MSIE 10/i.test(navigator.userAgent) ||\n                          /rv:11\\.0/i.test(navigator.userAgent) ||\n                          /Trident/i.test(navigator.userAgent));\n    }\n  }\n\n  // ### Styling & State Methods:\n\n  setFont(family, size, weight) {\n    // Unlike canvas, in SVG italic is handled by font-style,\n    // not weight. So: we search the weight argument and\n    // apply bold and italic to weight and style respectively.\n    let bold = false;\n    let italic = false;\n    let style = 'normal';\n    // Weight might also be a number (200, 400, etc...) so we\n    // test its type to be sure we have access to String methods.\n    if (typeof weight == 'string') {\n        // look for \"italic\" in the weight:\n      if (weight.indexOf('italic') !== -1) {\n        weight = weight.replace(/italic/g, '');\n        italic = true;\n      }\n        // look for \"bold\" in weight\n      if (weight.indexOf('bold') !== -1) {\n        weight = weight.replace(/bold/g, '');\n        bold = true;\n      }\n        // remove any remaining spaces\n      weight = weight.replace(/ /g, '');\n    }\n    weight = bold ? 'bold' : weight;\n    weight = (typeof weight === 'undefined' || weight === '') ? 'normal' : weight;\n\n    style = italic ? 'italic' : style;\n\n    const fontAttributes = {\n      'font-family': family,\n      'font-size': size + 'pt',\n      'font-weight': weight,\n      'font-style': style,\n    };\n\n    // Store the font size so that if the browser is Internet\n    // Explorer we can fix its calculations of text width.\n    this.fontSize = Number(size);\n\n    Vex.Merge(this.attributes, fontAttributes);\n    Vex.Merge(this.state, fontAttributes);\n\n    return this;\n  }\n\n  setRawFont(font) {\n    font = font.trim();\n    // Assumes size first, splits on space -- which is presently\n    // how all existing modules are calling this.\n    const fontArray = font.split(' ');\n\n    this.attributes['font-family'] = fontArray[1];\n    this.state['font-family'] = fontArray[1];\n\n    this.attributes['font-size'] = fontArray[0];\n    this.state['font-size'] = fontArray[0];\n\n    // Saves fontSize for IE polyfill\n    this.fontSize = Number(fontArray[0].match(/\\d+/));\n    return this;\n  }\n\n  setFillStyle(style) {\n    this.attributes.fill = style;\n    return this;\n  }\n\n  setBackgroundFillStyle(style) {\n    this.background_attributes.fill = style;\n    this.background_attributes.stroke = style;\n    return this;\n  }\n\n  setStrokeStyle(style) {\n    this.attributes.stroke = style;\n    return this;\n  }\n\n  setShadowColor(style) {\n    this.shadow_attributes.color = style;\n    return this;\n  }\n\n  setShadowBlur(blur) {\n    this.shadow_attributes.width = blur;\n    return this;\n  }\n\n  setLineWidth(width) {\n    this.attributes['stroke-width'] = width;\n    this.lineWidth = width;\n  }\n\n  // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]\n  setLineDash(lineDash) {\n    if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n      lineDash = lineDash.join(', ');\n      this.attributes['stroke-dasharray'] = lineDash;\n      return this;\n    } else {\n      throw new Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');\n    }\n  }\n\n  setLineCap(lineCap) {\n    this.attributes['stroke-linecap'] = lineCap;\n    return this;\n  }\n\n  // ### Sizing & Scaling Methods:\n\n  // TODO (GCR): See note at scale() -- seperate our internal\n  // conception of pixel-based width/height from the style.width\n  // and style.height properties eventually to allow users to\n  // apply responsive sizing attributes to the SVG.\n  resize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.element.style.width = width;\n    const attributes = {\n      width,\n      height,\n    };\n    this.applyAttributes(this.svg, attributes);\n    return this;\n  }\n\n  scale(x, y) {\n    // uses viewBox to scale\n    // TODO (GCR): we may at some point want to distinguish the\n    // style.width / style.height properties that are applied to\n    // the SVG object from our internal conception of the SVG\n    // width/height.  This would allow us to create automatically\n    // scaling SVG's that filled their containers, for instance.\n    //\n    // As this isn't implemented in Canvas or Raphael contexts,\n    // I've left as is for now, but in using the viewBox to\n    // handle internal scaling, am trying to make it possible\n    // for us to eventually move in that direction.\n\n    this.state.scale = { x, y };\n    const visibleWidth = this.width / x;\n    const visibleHeight = this.height / y;\n    this.setViewBox(0, 0, visibleWidth, visibleHeight);\n\n    return this;\n  }\n\n  setViewBox(xMin, yMin, width, height) {\n    // Override for \"x y w h\" style:\n    if (arguments.length == 1) this.svg.setAttribute('viewBox', viewBox);\n    else {\n      const viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;\n      this.svg.setAttribute('viewBox', viewBoxString);\n    }\n  }\n\n  // ### Drawing helper methods:\n\n  applyAttributes(element, attributes) {\n    for (const propertyName in attributes) {\n      element.setAttributeNS(null, propertyName, attributes[propertyName]);\n    }\n    return element;\n  }\n\n  // ### Shape & Path Methods:\n\n  clear() {\n    // Clear the SVG by removing all inner children.\n\n    // (This approach is usually slightly more efficient\n    // than removing the old SVG & adding a new one to\n    // the container element, since it does not cause the\n    // container to resize twice.  Also, the resize\n    // triggered by removing the entire SVG can trigger\n    // a touchcancel event when the element resizes away\n    // from a touch point.)\n\n    while (this.svg.lastChild) {\n      this.svg.removeChild(this.svg.lastChild);\n    }\n\n    // Replace the viewbox attribute we just removed:\n    this.scale(this.state.scale.x, this.state.scale.y);\n  }\n\n  // ## Rectangles:\n\n  rect(x, y, width, height, attributes) {\n    // Avoid invalid negative height attribs by\n    // flipping the rectangle on its head:\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    // Create the rect & style it:\n    const rectangle = this.create('rect');\n    if (typeof attributes === 'undefined') attributes = {\n      fill: 'none',\n      'stroke-width': this.lineWidth,\n      stroke: 'black',\n    };\n    Vex.Merge(attributes, {\n      x,\n      y,\n      width,\n      height,\n    });\n\n    this.applyAttributes(rectangle, attributes);\n\n    this.add(rectangle);\n    return this;\n  }\n\n  fillRect(x, y, width, height) {\n    if (height < 0) {\n      y += height;\n      height *= -1;\n    }\n\n    this.rect(x, y, width - 0.5, height - 0.5, this.attributes);\n    return this;\n  }\n\n  clearRect(x, y, width, height) {\n    // TODO(GCR): Improve implementation of this...\n    // Currently it draws a box of the background color, rather\n    // than creating alpha through lower z-levels.\n    //\n    // See the implementation of this in SVGKit:\n    // http://sourceforge.net/projects/svgkit/\n    // as a starting point.\n    //\n    // Adding a large number of transform paths (as we would\n    // have to do) could be a real performance hit.  Since\n    // tabNote seems to be the only module that makes use of this\n    // it may be worth creating a seperate tabStave that would\n    // draw lines around locations of tablature fingering.\n    //\n\n    if (height < 0) this.flipRectangle(arguments);\n\n    this.rect(x, y, width - 0.5, height - 0.5, this.background_attributes);\n    return this;\n  }\n\n  // ## Paths:\n\n  beginPath() {\n    this.path = '';\n    this.pen.x = 0;\n    this.pen.y = 0;\n    return this;\n  }\n\n  moveTo(x, y) {\n    this.path += 'M' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  lineTo(x, y) {\n    this.path += 'L' + x + ' ' + y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this.path += 'C' +\n      x1 + ' ' +\n      y1 + ',' +\n      x2 + ' ' +\n      y2 + ',' +\n      x + ' ' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  quadraticCurveTo(x1, y1, x, y) {\n    this.path += 'Q' +\n      x1 + ' ' +\n      y1 + ',' +\n      x + ' ' +\n      y;\n    this.pen.x = x;\n    this.pen.y = y;\n    return this;\n  }\n\n  // This is an attempt (hack) to simulate the HTML5 canvas\n  // arc method.\n  arc(x, y, radius, startAngle, endAngle, antiClockwise) {\n    function normalizeAngle(angle) {\n      while (angle < 0) {\n        angle += Math.PI * 2;\n      }\n\n      while (angle > Math.PI * 2) {\n        angle -= Math.PI * 2;\n      }\n      return angle;\n    }\n\n    startAngle = normalizeAngle(startAngle);\n    endAngle = normalizeAngle(endAngle);\n\n    if (startAngle > endAngle) {\n      const tmp = startAngle;\n      startAngle = endAngle;\n      endAngle = tmp;\n      antiClockwise = !antiClockwise;\n    }\n\n    const delta = endAngle - startAngle;\n\n    if (delta > Math.PI) {\n      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2,\n                       antiClockwise);\n      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle,\n                       antiClockwise);\n    }\n    else {\n      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);\n    }\n    return this;\n  }\n\n  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {\n    const x1 = x + radius * Math.cos(startAngle);\n    const y1 = y + radius * Math.sin(startAngle);\n\n    const x2 = x + radius * Math.cos(endAngle);\n    const y2 = y + radius * Math.sin(endAngle);\n\n    let largeArcFlag = 0;\n    let sweepFlag = 0;\n    if (antiClockwise) {\n      sweepFlag = 1;\n      if (endAngle - startAngle < Math.PI)\n        largeArcFlag = 1;\n    }\n    else if (endAngle - startAngle > Math.PI) {\n      largeArcFlag = 1;\n    }\n\n    this.path += 'M' + x1 + ' ' + y1 + ' ' + 'A' +\n      radius + ' ' + radius + ' ' + '0 ' + largeArcFlag + ' ' + sweepFlag + ' ' +\n      x2 + ' ' + y2 + 'M' + this.pen.x + ' ' + this.pen.y;\n  }\n\n  closePath() {\n    this.path += 'Z';\n\n    return this;\n  }\n\n  // Adapted from the source for Raphael's Element.glow\n  glow() {\n    // Calculate the width & paths of the glow:\n    if (this.shadow_attributes.width > 0) {\n      const sa = this.shadow_attributes;\n      const num_paths = sa.width / 2;\n      // Stroke at varying widths to create effect of gaussian blur:\n      for (let i = 1; i <= num_paths; i++) {\n        const attributes = {\n          stroke: sa.color,\n          'stroke-linejoin': 'round',\n          'stroke-linecap': 'round',\n          'stroke-width': +((sa.width * 0.4) / num_paths * i).toFixed(3),\n          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),\n        };\n\n        const path = this.create('path');\n        attributes.d = this.path;\n        this.applyAttributes(path, attributes);\n        this.add(path);\n      }\n    }\n    return this;\n  }\n\n  fill(attributes) {\n    // If our current path is set to glow, make it glow\n    this.glow();\n\n    const path = this.create('path');\n    if (typeof attributes === 'undefined') {\n      attributes = {};\n      Vex.Merge(attributes, this.attributes);\n      attributes.stroke = 'none';\n    }\n\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  stroke() {\n    // If our current path is set to glow, make it glow.\n    this.glow();\n\n    const path = this.create('path');\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.fill = 'none';\n    attributes['stroke-width'] = this.lineWidth;\n    attributes.d = this.path;\n\n    this.applyAttributes(path, attributes);\n    this.add(path);\n    return this;\n  }\n\n  // ## Text Methods:\n  measureText(text) {\n    const txt = this.create('text');\n    if (typeof(txt.getBBox) !== 'function')\n      return { x: 0, y: 0, width: 0, height: 0 };\n\n    txt.textContent = text;\n    this.applyAttributes(txt, this.attributes);\n\n    // Temporarily add it to the document for measurement.\n    this.svg.appendChild(txt);\n\n    let bbox = txt.getBBox();\n    if (this.ie && text !== '' && this.attributes['font-style'] == 'italic')\n      bbox = this.ieMeasureTextFix(bbox, text);\n\n    this.svg.removeChild(txt);\n    return bbox;\n  }\n\n  ieMeasureTextFix(bbox, text) {\n    // Internet Explorer over-pads text in italics,\n    // resulting in giant width estimates for measureText.\n    // To fix this, we use this formula, tested against\n    // ie 11:\n    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96\n    // And then subtract the overestimate from calculated width.\n\n    const fontSize = Number(this.fontSize);\n    const m = 1.196;\n    const b = 1.9598;\n    const widthCorrection = (m * fontSize) + b;\n    const width = bbox.width - widthCorrection;\n    const height = bbox.height - 1.5;\n\n    // Get non-protected copy:\n    const box = {\n      x: bbox.x,\n      y: bbox.y,\n      width,\n      height,\n    };\n\n    return box;\n  }\n\n  fillText(text, x, y) {\n    const attributes = {};\n    Vex.Merge(attributes, this.attributes);\n    attributes.stroke = 'none';\n    attributes.x = x;\n    attributes.y = y;\n\n    const txt = this.create('text');\n    txt.textContent = text;\n    this.applyAttributes(txt, attributes);\n    this.add(txt);\n  }\n\n  save() {\n    // TODO(mmuthanna): State needs to be deep-copied.\n    this.state_stack.push({\n      state: {\n        'font-family': this.state['font-family'],\n        'font-weight': this.state['font-weight'],\n        'font-style': this.state['font-style'],\n        'font-size': this.state['font-size'],\n      },\n      attributes: {\n        'font-family': this.attributes['font-family'],\n        'font-weight': this.attributes['font-weight'],\n        'font-style': this.attributes['font-style'],\n        'font-size': this.attributes['font-size'],\n        fill: this.attributes.fill,\n        stroke: this.attributes.stroke,\n        'stroke-width': this.attributes['stroke-width'],\n        'stroke-dasharray': this.attributes['stroke-dasharray'],\n      },\n      shadow_attributes: {\n        width: this.shadow_attributes.width,\n        color: this.shadow_attributes.color,\n      },\n    });\n    return this;\n  }\n\n  restore() {\n    // TODO(0xfe): State needs to be deep-restored.\n    const state = this.state_stack.pop();\n    this.state['font-family'] = state.state['font-family'];\n    this.state['font-weight'] = state.state['font-weight'];\n    this.state['font-style'] = state.state['font-style'];\n    this.state['font-size'] = state.state['font-size'];\n\n    this.attributes['font-family'] = state.attributes['font-family'];\n    this.attributes['font-weight'] = state.attributes['font-weight'];\n    this.attributes['font-style'] = state.attributes['font-style'];\n    this.attributes['font-size'] = state.attributes['font-size'];\n\n    this.attributes.fill = state.attributes.fill;\n    this.attributes.stroke = state.attributes.stroke;\n    this.attributes['stroke-width'] = state.attributes['stroke-width'];\n    this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n\n    this.shadow_attributes.width = state.shadow_attributes.width;\n    this.shadow_attributes.color = state.shadow_attributes.color;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Support for different rendering contexts: Canvas, Raphael\n\n/* global document: false */\n\nimport { CanvasContext } from './canvascontext';\nimport { RaphaelContext } from './raphaelcontext';\nimport { SVGContext } from './svgcontext';\n\nlet _lastContext = null;\n\nexport class Renderer {\n  static get Backends() {\n    return {\n      CANVAS: 1,\n      RAPHAEL: 2,\n      SVG: 3,\n      VML: 4,\n    };\n  }\n\n  // End of line types\n  static get LineEndType() {\n    return {\n      NONE: 1,        // No leg\n      UP: 2,          // Upward leg\n      DOWN: 3,         // Downward leg\n    };\n  }\n\n  // Set this to true if you're using VexFlow inside a runtime\n  // that does not allow modifiying canvas objects. There is a small\n  // performance degradation due to the extra indirection.\n  static get USE_CANVAS_PROXY() {\n    return false;\n  }\n\n  static get lastContext() {\n    return _lastContext;\n  }\n  static set lastContext(ctx) {\n    _lastContext = ctx;\n  }\n\n  static buildContext(sel, backend, width, height, background) {\n    const renderer = new Renderer(sel, backend);\n    if (width && height) { renderer.resize(width, height); }\n\n    if (!background) background = '#FFF';\n    const ctx = renderer.getContext();\n    ctx.setBackgroundFillStyle(background);\n    Renderer.lastContext = ctx;\n    return ctx;\n  }\n\n  static getCanvasContext(sel, width, height, background) {\n    return Renderer.buildContext(sel, Renderer.Backends.CANVAS,\n        width, height, background);\n  }\n\n  static getRaphaelContext(sel, width, height, background) {\n    return Renderer.buildContext(sel, Renderer.Backends.RAPHAEL,\n        width, height, background);\n  }\n\n  static getSVGContext(sel, width, height, background) {\n    return Renderer.buildContext(sel, Renderer.Backends.SVG,\n        width, height, background);\n  }\n\n  static bolsterCanvasContext(ctx) {\n    if (Renderer.USE_CANVAS_PROXY) {\n      return new CanvasContext(ctx);\n    }\n\n    const methods = ['clear', 'setFont', 'setRawFont', 'setFillStyle', 'setBackgroundFillStyle',\n                   'setStrokeStyle', 'setShadowColor', 'setShadowBlur', 'setLineWidth',\n                   'setLineCap', 'setLineDash', 'openGroup', 'closeGroup', 'getGroup'];\n    ctx.vexFlowCanvasContext = ctx;\n\n    for (const i in methods) {\n      const method = methods[i];\n      ctx[method] = ctx[method] || CanvasContext.prototype[method];\n    }\n\n    return ctx;\n  }\n\n  // Draw a dashed line (horizontal, vertical or diagonal\n  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n  // setting the second number to 0 draws a solid line.\n  static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n    context.beginPath();\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n    const angle = Math.atan2(dy, dx);\n    let x = fromX;\n    let y = fromY;\n    context.moveTo(fromX, fromY);\n    let idx = 0;\n    let draw = true;\n    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n      const dashLength = dashPattern[idx++ % dashPattern.length];\n      const nx = x + (Math.cos(angle) * dashLength);\n      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n      const ny = y + (Math.sin(angle) * dashLength);\n      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n      if (draw) {\n        context.lineTo(x, y);\n      } else {\n        context.moveTo(x, y);\n      }\n      draw = !draw;\n    }\n\n    context.closePath();\n    context.stroke();\n  }\n\n  constructor(sel, backend) {\n    // Verify selector\n    this.sel = sel;\n    if (!this.sel) throw new Vex.RERR('BadArgument',\n        'Invalid selector for renderer.');\n\n    // Get element from selector\n    this.element = document.getElementById(sel);\n    if (!this.element) this.element = sel;\n\n    // Verify backend and create context\n    this.ctx = null;\n    this.paper = null;\n    this.backend = backend;\n    if (this.backend == Renderer.Backends.CANVAS) {\n      // Create context.\n      if (!this.element.getContext) throw new Vex.RERR('BadElement',\n        \"Can't get canvas context from element: \" + sel);\n      this.ctx = Renderer.bolsterCanvasContext(\n          this.element.getContext('2d'));\n    } else if (this.backend == Renderer.Backends.RAPHAEL) {\n      this.ctx = new RaphaelContext(this.element);\n    } else if (this.backend == Renderer.Backends.SVG) {\n      this.ctx = new SVGContext(this.element);\n    } else {\n      throw new Vex.RERR('InvalidBackend',\n        'No support for backend: ' + this.backend);\n    }\n  }\n\n  resize(width, height) {\n    if (this.backend == Renderer.Backends.CANVAS) {\n      if (!this.element.getContext) throw new Vex.RERR('BadElement',\n        \"Can't get canvas context from element: \" + this.sel);\n      this.element.width = width;\n      this.element.height = height;\n      this.ctx = Renderer.bolsterCanvasContext(\n          this.element.getContext('2d'));\n    } else {\n      this.ctx.resize(width, height);\n    }\n\n    return this;\n  }\n\n  getContext() { return this.ctx; }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the main Voice class. It's mainly a container\n// object to group `Tickables` for formatting.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\n\nexport class Voice {\n  // Modes allow the addition of ticks in three different ways:\n  //\n  // STRICT: This is the default. Ticks must fill the voice.\n  // SOFT:   Ticks can be added without restrictions.\n  // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum\n  //         tick length.\n  static get Mode() {\n    return {\n      STRICT: 1,\n      SOFT: 2,\n      FULL: 3,\n    };\n  }\n\n  constructor(time) {\n    this.time = Vex.Merge({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }, time);\n\n    // Recalculate total ticks.\n    this.totalTicks = new Fraction(\n      this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n\n    this.resolutionMultiplier = 1;\n\n    // Set defaults\n    this.tickables = [];\n    this.ticksUsed = new Fraction(0, 1);\n    this.smallestTickCount = this.totalTicks.clone();\n    this.largestTickWidth = 0;\n    this.stave = null;\n    this.boundingBox = null;\n    // Do we care about strictly timed notes\n    this.mode = Voice.Mode.STRICT;\n\n    // This must belong to a VoiceGroup\n    this.voiceGroup = null;\n  }\n\n  // Get the total ticks in the voice\n  getTotalTicks() { return this.totalTicks; }\n\n  // Get the total ticks used in the voice by all the tickables\n  getTicksUsed() { return this.ticksUsed; }\n\n  // Get the largest width of all the tickables\n  getLargestTickWidth() { return this.largestTickWidth; }\n\n  // Get the tick count for the shortest tickable\n  getSmallestTickCount() { return this.smallestTickCount; }\n\n  // Get the tickables in the voice\n  getTickables() { return this.tickables; }\n\n  // Get/set the voice mode, use a value from `Voice.Mode`\n  getMode() { return this.mode; }\n  setMode(mode) { this.mode = mode; return this; }\n\n  // Get the resolution multiplier for the voice\n  getResolutionMultiplier() { return this.resolutionMultiplier; }\n\n  // Get the actual tick resolution for the voice\n  getActualResolution() { return this.resolutionMultiplier * this.time.resolution; }\n\n  // Set the voice's stave\n  setStave(stave) {\n    this.stave = stave;\n    this.boundingBox = null; // Reset bounding box so we can reformat\n    return this;\n  }\n\n  // Get the bounding box for the voice\n  getBoundingBox() {\n    let stave, boundingBox, bb, i;\n\n    if (!this.boundingBox) {\n      if (!this.stave) throw Vex.RERR('NoStave', \"Can't get bounding box without stave.\");\n      stave = this.stave;\n      boundingBox = null;\n\n      for (i = 0; i < this.tickables.length; ++i) {\n        this.tickables[i].setStave(stave);\n\n        bb = this.tickables[i].getBoundingBox();\n        if (!bb) continue;\n\n        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n      }\n\n      this.boundingBox = boundingBox;\n    }\n    return this.boundingBox;\n  }\n\n  // Every tickable must be associated with a voiceGroup. This allows formatters\n  // and preformatters to associate them with the right modifierContexts.\n  getVoiceGroup() {\n    if (!this.voiceGroup)\n      throw new Vex.RERR('NoVoiceGroup', 'No voice group for voice.');\n    return this.voiceGroup;\n  }\n\n  // Set the voice group\n  setVoiceGroup(g) { this.voiceGroup = g; return this; }\n\n  // Set the voice mode to strict or soft\n  setStrict(strict) {\n    this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;\n    return this;\n  }\n\n  // Determine if the voice is complete according to the voice mode\n  isComplete() {\n    if (this.mode == Voice.Mode.STRICT ||\n        this.mode == Voice.Mode.FULL) {\n      return this.ticksUsed.equals(this.totalTicks);\n    } else {\n      return true;\n    }\n  }\n\n  // Add a tickable to the voice\n  addTickable(tickable) {\n    if (!tickable.shouldIgnoreTicks()) {\n      const ticks = tickable.getTicks();\n\n      // Update the total ticks for this line.\n      this.ticksUsed.add(ticks);\n\n      if ((this.mode == Voice.Mode.STRICT ||\n           this.mode == Voice.Mode.FULL) &&\n           this.ticksUsed.greaterThan(this.totalTicks)) {\n        this.totalTicks.subtract(ticks);\n        throw new Vex.RERR('BadArgument', 'Too many ticks.');\n      }\n\n      // Track the smallest tickable for formatting.\n      if (ticks.lessThan(this.smallestTickCount)) {\n        this.smallestTickCount = ticks.clone();\n      }\n\n      this.resolutionMultiplier = this.ticksUsed.denominator;\n\n      // Expand total ticks using denominator from ticks used.\n      this.totalTicks.add(0, this.ticksUsed.denominator);\n    }\n\n    // Add the tickable to the line.\n    this.tickables.push(tickable);\n    tickable.setVoice(this);\n    return this;\n  }\n\n  // Add an array of tickables to the voice.\n  addTickables(tickables) {\n    for (let i = 0; i < tickables.length; ++i) {\n      this.addTickable(tickables[i]);\n    }\n\n    return this;\n  }\n\n  // Preformats the voice by applying the voice's stave to each note.\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.tickables.forEach(function(tickable) {\n      if (!tickable.getStave()) {\n        tickable.setStave(this.stave);\n      }\n    }, this);\n\n    this.preFormatted = true;\n    return this;\n  }\n\n  // Render the voice onto the canvas `context` and an optional `stave`.\n  // If `stave` is omitted, it is expected that the notes have staves\n  // already set.\n  draw(context, stave) {\n    let boundingBox = null;\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n\n      // Set the stave if provided\n      if (stave) tickable.setStave(stave);\n\n      if (!tickable.getStave()) {\n        throw new Vex.RuntimeError('MissingStave',\n          'The voice cannot draw tickables without staves.');\n      }\n\n      if (i === 0) boundingBox = tickable.getBoundingBox();\n\n      if (i > 0 && boundingBox) {\n        const tickable_bb = tickable.getBoundingBox();\n        if (tickable_bb) boundingBox.mergeWith(tickable_bb);\n      }\n\n      tickable.setContext(context);\n      tickable.draw();\n    }\n\n    this.boundingBox = boundingBox;\n  }\n}\n","// ## Description\n//\n// Object which computes metrics for a bounding box by continuously\n// taking canvas path commands\n\n// Warning: This file is merely a crutch to get bounding box information without\n// explicit metadata. This is likely to get deprecated following SMuFL support.\n//\n// taken from: https://github.com/gabelerner/canvg/blob/860e418aca67b9a41e858a223d74d375793ec364/canvg.js#L449\n\nexport class BoundingBoxComputation {\n  constructor(x1, y1, x2, y2) { // pass in initial points if you want\n    this.x1 = Number.NaN;\n    this.y1 = Number.NaN;\n    this.x2 = Number.NaN;\n    this.y2 = Number.NaN;\n\n    this.addPoint(x1, y1);\n    this.addPoint(x2, y2);\n  }\n\n  width() {\n    return this.x2 - this.x1;\n  }\n\n  height() {\n    return this.y2 - this.y1;\n  }\n\n  addPoint(x, y) {\n    if (x != null) {\n      if (isNaN(this.x1) || isNaN(this.x2)) {\n        this.x1 = x;\n        this.x2 = x;\n      }\n      if (x < this.x1) this.x1 = x;\n      if (x > this.x2) this.x2 = x;\n    }\n\n    if (y != null) {\n      if (isNaN(this.y1) || isNaN(this.y2)) {\n        this.y1 = y;\n        this.y2 = y;\n      }\n      if (y < this.y1) this.y1 = y;\n      if (y > this.y2) this.y2 = y;\n    }\n  }\n\n  addX(x) {\n    this.addPoint(x, null);\n  }\n\n  addY(y) {\n    this.addPoint(null, y);\n  }\n\n  addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n    const cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n    const cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n    const cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n    const cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n    this.addBezierCurve(p0x, p0y, cp1x, cp1y, cp2x, cp2y, p2x, p2y);\n  }\n\n  addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    const p0 = [p0x, p0y];\n    const p1 = [p1x, p1y];\n    const p2 = [p2x, p2y];\n    const p3 = [p3x, p3y];\n    let i;\n\n    this.addPoint(p0[0], p0[1]);\n    this.addPoint(p3[0], p3[1]);\n\n    const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +\n      3 * Math.pow(1 - t, 2) * t * p1[i] +\n      3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n      Math.pow(t, 3) * p3[i];\n\n    for (i = 0; i <= 1; i++) {\n      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n      const c = 3 * p1[i] - 3 * p0[i];\n\n      if (a === 0) {\n        if (b === 0) continue;\n        const t = -c / b;\n        if (0 < t && t < 1) {\n          if (i === 0) this.addX(f(t, i));\n          if (i === 1) this.addY(f(t, i));\n        }\n        continue;\n      }\n\n      const b2ac = Math.pow(b, 2) - 4 * c * a;\n      if (b2ac < 0) continue;\n      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        if (i === 0) this.addX(f(t1, i));\n        if (i === 1) this.addY(f(t1, i));\n      }\n      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        if (i === 0) this.addX(f(t2, i));\n        if (i === 1) this.addY(f(t2, i));\n      }\n    }\n  }\n}\n","// Vex Music Notation\n// Mohit Muthanna <mohit@muthanna.com>\n//\n// Copyright Mohit Muthanna 2010\n\n// Bounding boxes for interactive notation\n\nimport { Vex } from './vex';\n\n/** @constructor */\nexport class BoundingBox {\n  static copy(that) {\n    return new BoundingBox(that.x, that.y, that.w, that.h);\n  }\n\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n  getX() { return this.x; }\n  getY() { return this.y; }\n  getW() { return this.w; }\n  getH() { return this.h; }\n  setX(x) { this.x = x; return this; }\n  setY(y) { this.y = y; return this; }\n  setW(w) { this.w = w; return this; }\n  setH(h) { this.h = h; return this; }\n  move(x, y) { this.x += x; this.y += y; }\n  clone() { return BoundingBox.copy(this); }\n\n  // Merge my box with given box. Creates a bigger bounding box unless\n  // the given box is contained in this one.\n  mergeWith(boundingBox, ctx) {\n    const that = boundingBox;\n\n    const new_x = this.x < that.x ? this.x : that.x;\n    const new_y = this.y < that.y ? this.y : that.y;\n    const new_w = (this.x + this.w) < (that.x + that.w) ? (that.x + that.w) - this.x : (this.x + this.w) - Vex.Min(this.x, that.x);\n    const new_h = (this.y + this.h) < (that.y + that.h) ? (that.y + that.h) - this.y : (this.y + this.h) - Vex.Min(this.y, that.y);\n\n    this.x = new_x;\n    this.y = new_y;\n    this.w = new_w;\n    this.h = new_h;\n\n    if (ctx) this.draw(ctx);\n    return this;\n  }\n  draw(ctx, x, y) {\n    if (!x) x = 0;\n    if (!y) y = 0;\n    ctx.rect(this.x + x, this.y + y, this.w, this.h);\n    ctx.stroke();\n  }\n}\n","export var Font = { 'glyphs': { 'v0': { 'x_min': 0, 'x_max': 514.5, 'ha': 525, 'o': 'm 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 ' }, 'v1': { 'x_min': -1.359375, 'x_max': 344.359375, 'ha': 351, 'o': 'm 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 ' }, 'v2': { 'x_min': -1.359375, 'x_max': 458.6875, 'ha': 468, 'o': 'm 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 ' }, 'v3': { 'x_min': -1.359375, 'x_max': 409.6875, 'ha': 418, 'o': 'm 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ' }, 'v4': { 'x_min': 0, 'x_max': 468.21875, 'ha': 478, 'o': 'm 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 ' }, 'v5': { 'x_min': 0, 'x_max': 409.6875, 'ha': 418, 'o': 'm 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 ' }, 'v6': { 'x_min': 0, 'x_max': 475.03125, 'ha': 485, 'o': 'm 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ' }, 'v7': { 'x_min': 0, 'x_max': 442.359375, 'ha': 451, 'o': 'm 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 ' }, 'v8': { 'x_min': 0, 'x_max': 488.640625, 'ha': 499, 'o': 'm 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 ' }, 'v9': { 'x_min': 0, 'x_max': 475.03125, 'ha': 485, 'o': 'm 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 ' }, 'va': { 'x_min': -149.71875, 'x_max': 148.359375, 'ha': 151, 'o': 'm -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 ' }, 'vb': { 'x_min': 0, 'x_max': 428.75, 'ha': 438, 'o': 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 ' }, 'vc': { 'x_min': 0, 'x_max': 447.8125, 'ha': 457, 'o': 'm 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 ' }, 'vd': { 'x_min': 0, 'x_max': 343, 'ha': 350, 'o': 'm 329 331 b 333 331 330 331 332 331 b 343 322 338 331 343 327 b 343 320 343 322 343 320 b 318 276 341 317 340 313 b 279 223 291 227 294 230 b 202 208 257 212 236 208 b 144 210 186 208 167 208 b 93 212 123 212 107 212 b 19 195 59 212 39 208 b 8 191 14 192 10 191 b 0 198 5 191 2 194 b 0 201 0 199 0 199 b 23 248 0 205 4 213 b 62 301 50 297 47 292 b 140 316 84 312 104 316 b 197 313 155 316 174 315 b 249 310 217 312 234 310 b 322 328 283 310 303 316 b 329 331 325 328 328 331 ' }, 've': { 'x_min': -390.640625, 'x_max': 389.28125, 'ha': 397, 'o': 'm -378 502 l -374 503 l 0 503 l 372 503 l 377 502 b 387 491 381 499 385 496 l 389 488 l 389 251 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 174 l 347 335 l 0 335 l -348 335 l -348 174 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 251 l -390 488 l -389 491 b -378 502 -386 496 -382 499 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ' }, 'vf': { 'x_min': 0, 'x_max': 370.21875, 'ha': 378, 'o': 'm 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 ' }, 'v10': { 'x_min': 0, 'x_max': 559.421875, 'ha': 571, 'o': 'm 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 ' }, 'v11': { 'x_min': -155.171875, 'x_max': 153.8125, 'ha': 157, 'o': 'm -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 ' }, 'v12': { 'x_min': 0, 'x_max': 699.609375, 'ha': 714, 'o': 'm 0 0 l 0 563 l 65 563 l 132 563 l 132 0 l 132 -564 l 65 -564 l 0 -564 l 0 0 m 181 0 l 181 563 l 197 563 l 215 563 l 215 294 b 215 24 215 95 215 24 b 228 37 216 24 221 30 b 332 245 274 84 311 159 b 344 262 334 258 338 262 b 349 262 347 262 348 262 b 359 244 356 259 357 256 b 488 91 364 158 424 91 b 519 97 499 91 509 94 b 582 306 570 113 582 156 l 582 308 b 544 501 582 423 573 471 b 464 528 525 520 496 528 b 387 512 439 528 412 523 b 381 508 383 509 381 508 b 383 508 381 508 382 508 b 430 473 400 508 421 491 b 436 445 434 464 436 455 b 372 380 436 412 408 380 b 366 380 370 380 368 380 b 304 449 328 384 304 416 b 323 498 304 467 310 484 b 465 555 362 537 413 555 b 656 453 536 555 611 520 b 699 312 686 410 699 360 b 496 66 699 191 617 74 b 487 66 494 66 490 66 b 412 91 461 66 438 74 b 404 97 408 95 405 97 b 404 95 404 97 404 97 b 348 1 404 95 352 9 l 347 0 l 375 -49 b 405 -98 392 -76 404 -98 l 405 -98 b 415 -91 405 -97 409 -94 b 492 -68 438 -74 464 -68 b 598 -105 526 -68 564 -80 b 688 -238 641 -136 673 -184 b 699 -313 695 -263 699 -290 b 594 -516 699 -395 661 -469 b 465 -556 555 -542 510 -556 b 353 -523 426 -556 386 -545 b 304 -460 321 -501 307 -484 b 304 -451 304 -458 304 -453 b 372 -381 304 -410 337 -381 b 408 -392 383 -381 396 -384 b 436 -445 427 -405 436 -426 b 385 -508 436 -474 417 -503 l 379 -509 l 387 -513 b 464 -530 412 -524 438 -530 b 522 -517 485 -530 506 -526 b 579 -390 558 -501 574 -463 b 582 -299 582 -370 582 -334 b 581 -226 582 -272 582 -242 b 519 -98 575 -144 560 -112 b 488 -93 510 -95 499 -93 b 359 -245 424 -93 364 -158 b 345 -263 357 -258 355 -263 b 332 -244 337 -263 336 -260 b 220 -30 310 -155 268 -73 l 215 -24 l 215 -295 l 215 -564 l 197 -564 l 181 -564 l 181 0 ' }, 'v13': { 'x_min': -1.359375, 'x_max': 455.96875, 'ha': 465, 'o': 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ' }, 'v14': { 'x_min': -1.359375, 'x_max': 349.8125, 'ha': 357, 'o': 'm 230 287 b 243 287 234 287 238 287 b 266 285 251 287 261 287 b 349 180 319 274 349 227 b 307 95 349 149 336 117 b 208 63 280 74 245 63 b 84 106 166 63 122 79 b 76 113 80 111 77 113 b 76 113 76 113 76 113 b 132 -74 76 112 102 27 b 187 -272 179 -235 187 -263 b 186 -276 187 -273 186 -274 b 166 -288 183 -284 174 -288 b 148 -278 159 -288 152 -285 b -1 231 145 -273 -1 227 b 20 252 -1 244 9 252 b 36 244 25 252 32 249 b 40 234 38 242 39 238 b 167 112 63 174 112 127 l 174 111 l 170 113 b 142 181 152 133 142 158 b 230 287 142 230 176 277 ' }, 'v15': { 'x_min': -209.609375, 'x_max': 208.25, 'ha': 213, 'o': 'm -12 248 b -1 249 -9 249 -5 249 b 55 219 20 249 43 237 b 66 180 62 206 66 194 b 36 123 66 158 55 137 b 0 112 25 116 12 112 b -57 142 -21 112 -43 122 b -68 180 -63 154 -68 167 b -12 248 -68 212 -46 242 m -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -5 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -5 b -197 19 -209 6 -205 15 ' }, 'v16': { 'x_min': -155.171875, 'x_max': 153.8125, 'ha': 157, 'o': 'm -137 353 b -129 355 -134 353 -132 355 b -102 333 -118 355 -111 348 b -8 129 -63 273 -32 205 b 0 106 -4 116 -1 106 b 6 129 0 106 2 116 b 100 333 31 205 62 273 b 114 349 107 344 108 347 b 127 353 118 352 123 353 b 153 327 141 353 153 344 b 144 302 153 320 153 317 b 29 18 96 227 54 123 l 25 -4 b -1 -26 21 -19 13 -26 b -27 -4 -14 -26 -23 -19 l -31 18 b -145 302 -55 123 -98 227 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 ' }, 'v17': { 'x_min': 0, 'x_max': 102.078125, 'ha': 104, 'o': 'm 42 104 b 47 104 43 104 46 104 b 66 102 54 104 62 102 b 102 51 89 94 102 72 b 76 5 102 33 93 15 b 51 -1 68 1 59 -1 b 10 18 35 -1 20 5 b 0 51 2 27 0 38 b 42 104 0 76 16 99 ' }, 'v18': { 'x_min': 0, 'x_max': 323.9375, 'ha': 331, 'o': 'm 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 ' }, 'v19': { 'x_min': -10.890625, 'x_max': 366.140625, 'ha': 363, 'o': 'm 98 172 b 110 173 102 173 106 173 b 210 120 142 173 172 156 b 281 66 235 95 264 74 b 294 63 285 63 289 63 b 341 87 307 63 322 72 b 356 97 348 94 352 97 b 363 93 359 97 362 95 b 366 87 364 90 366 88 b 355 72 366 83 363 79 b 268 2 317 31 288 9 b 243 -1 259 0 251 -1 b 144 52 212 -1 181 16 b 72 106 119 77 91 98 b 61 109 69 108 65 109 b 13 84 47 109 31 101 b 0 76 5 77 2 76 b -10 86 -6 76 -10 80 b -10 88 -10 87 -10 88 b 62 158 -9 95 43 145 b 98 172 73 165 87 170 ' }, 'v1a': { 'x_min': -149.71875, 'x_max': 148.359375, 'ha': 151, 'o': 'm -9 151 b -1 152 -6 151 -2 152 b 1 152 0 152 0 152 l 9 151 b 144 37 72 148 127 99 b 148 -62 148 19 148 15 b 148 -111 148 -76 148 -93 l 148 -216 l 147 -219 b 127 -231 144 -227 136 -231 b 108 -219 119 -231 112 -227 l 107 -216 l 107 -104 b 103 26 106 18 107 12 b -1 109 89 76 46 109 b -38 102 -13 109 -25 106 b -104 27 -70 90 -96 62 b -108 -101 -108 15 -108 22 l -108 -216 l -110 -219 b -129 -231 -114 -227 -122 -231 b -148 -219 -137 -231 -145 -227 l -149 -216 l -149 -99 b -149 -63 -149 -87 -149 -74 b -145 37 -149 26 -149 20 b -9 151 -130 101 -74 148 ' }, 'v1b': { 'x_min': 0, 'x_max': 559.421875, 'ha': 571, 'o': 'm 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 ' }, 'v1c': { 'x_min': 0, 'x_max': 326.671875, 'ha': 333, 'o': 'm 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -105 b 239 -262 239 -167 239 -219 b 238 -448 239 -416 239 -445 b 238 -451 238 -449 238 -451 b 238 -452 238 -452 238 -452 b 243 -451 239 -452 240 -451 b 298 -431 262 -448 280 -441 b 308 -427 300 -428 304 -427 b 326 -446 318 -427 326 -435 l 326 -446 l 326 -452 l 321 -462 b 238 -674 283 -520 253 -599 b 219 -695 234 -689 230 -695 b 197 -670 206 -695 202 -689 b 115 -462 179 -591 152 -520 l 110 -452 l 110 -446 l 110 -446 b 127 -427 110 -435 118 -427 b 138 -431 130 -427 134 -428 b 193 -451 155 -441 172 -448 b 198 -452 196 -452 197 -452 b 198 -451 198 -452 198 -452 b 198 -448 198 -451 198 -449 b 197 -323 197 -445 197 -426 b 197 -201 197 -247 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 ' }, 'v1d': { 'x_min': 0, 'x_max': 619.3125, 'ha': 632, 'o': 'm 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 ' }, 'v1e': { 'x_min': -402.890625, 'x_max': 401.53125, 'ha': 410, 'o': 'm -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 ' }, 'v1f': { 'x_min': -340.28125, 'x_max': 338.921875, 'ha': 346, 'o': 'm -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 ' }, 'v20': { 'x_min': -571.671875, 'x_max': 570.3125, 'ha': 582, 'o': 'm -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 ' }, 'v21': { 'x_min': -149.71875, 'x_max': 148.359375, 'ha': 151, 'o': 'm -138 229 b -129 230 -136 230 -133 230 b -110 217 -121 230 -114 226 l -108 215 l -108 99 b -104 -29 -108 -23 -108 -16 b -38 -104 -96 -63 -70 -91 b -1 -111 -25 -108 -13 -111 b 103 -27 46 -111 89 -77 b 107 102 107 -13 106 -19 l 107 215 l 108 217 b 127 230 112 226 119 230 b 137 229 130 230 134 230 b 147 217 141 226 145 223 l 148 215 l 148 109 b 148 63 148 91 148 76 b 147 -24 148 -1 148 -13 b -1 -154 134 -101 70 -154 b -38 -148 -13 -154 -25 -151 b -145 -38 -91 -134 -133 -93 b -149 62 -149 -22 -149 -27 b -149 98 -149 73 -149 86 l -149 215 l -148 217 b -138 229 -147 223 -142 226 ' }, 'v22': { 'x_min': 0, 'x_max': 432.828125, 'ha': 442, 'o': 'm 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 ' }, 'v23': { 'x_min': 0, 'x_max': 133.390625, 'ha': 136, 'o': 'm 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 ' }, 'v24': { 'x_min': -627.46875, 'x_max': 626.109375, 'ha': 639, 'o': 'm -69 173 b -53 174 -62 174 -58 174 b -42 172 -49 174 -44 174 b -28 149 -32 166 -28 158 b -42 126 -28 140 -32 131 b -231 73 -44 124 -29 129 l -371 34 l -469 8 b -499 0 -485 2 -499 0 b -469 -9 -499 -1 -485 -4 l -371 -36 l -231 -74 b -40 -129 -21 -131 -44 -124 b -28 -151 -32 -133 -28 -141 b -40 -172 -28 -159 -32 -167 b -54 -176 -44 -174 -49 -176 b -69 -174 -58 -176 -62 -176 l -288 -113 l -552 -41 b -616 -22 -619 -23 -611 -24 b -627 0 -623 -18 -627 -9 b -616 20 -627 8 -623 16 b -615 22 -615 22 -615 22 b -615 22 -615 22 -615 22 b -288 112 -615 23 -598 27 l -69 173 m 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 ' }, 'v25': { 'x_min': 0, 'x_max': 318.5, 'ha': 325, 'o': 'm 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 ' }, 'v26': { 'x_min': -21.78125, 'x_max': 483.1875, 'ha': 493, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ' }, 'v27': { 'x_min': 0, 'x_max': 432.828125, 'ha': 442, 'o': 'm 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 ' }, 'v28': { 'x_min': -73.5, 'x_max': 72.140625, 'ha': 74, 'o': 'm -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 ' }, 'v29': { 'x_min': -590.71875, 'x_max': 589.359375, 'ha': 601, 'o': 'm 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 ' }, 'v2a': { 'x_min': -21.78125, 'x_max': 366.140625, 'ha': 374, 'o': 'm 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 ' }, 'v2b': { 'x_min': 0, 'x_max': 386.5625, 'ha': 394, 'o': 'm 0 0 l 0 347 l 193 347 l 386 347 l 386 0 l 386 -348 l 193 -348 l 0 -348 l 0 0 ' }, 'v2c': { 'x_min': -597.53125, 'x_max': 596.171875, 'ha': 608, 'o': 'm -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 ' }, 'v2d': { 'x_min': 0, 'x_max': 438.28125, 'ha': 447, 'o': 'm 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 ' }, 'v2e': { 'x_min': -108.890625, 'x_max': 251.8125, 'ha': 257, 'o': 'm -8 863 b 0 864 -5 864 -2 864 b 12 859 4 864 9 863 b 19 843 16 856 16 853 b 102 631 34 768 65 689 l 107 621 l 107 616 l 107 616 b 89 596 107 605 99 596 b 78 601 85 596 83 598 b 47 614 69 606 55 612 b 19 621 39 617 21 621 b 19 621 19 621 19 621 b 19 619 19 621 19 620 b 20 383 20 616 20 585 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 b -20 619 -21 563 -21 616 b -20 621 -20 620 -20 621 b -20 621 -20 621 -20 621 b -49 614 -23 621 -40 617 b -80 601 -57 612 -70 606 b -91 596 -84 598 -87 596 b -108 616 -100 596 -108 605 l -108 616 l -108 621 l -103 631 b -20 839 -66 689 -38 760 b -8 863 -17 856 -14 859 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ' }, 'v2f': { 'x_min': -1.359375, 'x_max': 680.5625, 'ha': 694, 'o': 'm 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 ' }, 'v30': { 'x_min': -21.78125, 'x_max': 367.5, 'ha': 375, 'o': 'm 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 ' }, 'v31': { 'x_min': 0, 'x_max': 386.5625, 'ha': 394, 'o': 'm 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 ' }, 'v32': { 'x_min': -390.640625, 'x_max': 389.28125, 'ha': 397, 'o': 'm -378 573 l -374 576 l 0 576 l 372 576 l 377 573 b 387 563 381 571 385 567 l 389 559 l 389 287 l 389 15 l 387 12 b 367 0 383 4 375 0 b 348 12 360 0 352 4 l 347 15 l 347 210 l 347 406 l 0 406 l -348 406 l -348 210 l -348 15 l -349 12 b -368 0 -353 4 -362 0 b -389 12 -377 0 -385 4 l -390 15 l -390 287 l -390 559 l -389 563 b -378 573 -386 567 -382 571 m -274 337 l -270 338 l 0 338 l 269 338 l 273 337 b 284 326 279 334 281 330 l 285 323 l 285 169 l 285 15 l 284 12 b 265 -1 280 4 272 -1 b 245 12 257 -1 249 4 l 245 15 l 243 108 l 243 201 l 0 201 l -245 201 l -245 108 l -245 15 l -246 12 b -266 -1 -250 4 -258 -1 b -285 12 -273 -1 -281 4 l -287 15 l -287 169 l -287 323 l -285 326 b -274 337 -283 330 -280 334 m -13 131 b -1 133 -9 133 -5 133 b 50 105 19 133 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -58 38 -62 55 b -13 131 -62 98 -44 124 ' }, 'v33': { 'x_min': -423.3125, 'x_max': 421.9375, 'ha': 431, 'o': 'm -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 ' }, 'v34': { 'x_min': 0, 'x_max': 622.03125, 'ha': 635, 'o': 'm 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 ' }, 'v35': { 'x_min': 0, 'x_max': 323.9375, 'ha': 331, 'o': 'm 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 ' }, 'v36': { 'x_min': -1.359375, 'x_max': 1064.390625, 'ha': 1086, 'o': 'm 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 ' }, 'v37': { 'x_min': 0, 'x_max': 333.46875, 'ha': 340, 'o': 'm 219 818 b 225 821 220 820 223 821 b 239 816 231 821 235 818 b 245 800 242 811 243 810 b 328 587 259 725 291 646 l 333 578 l 333 573 l 333 571 b 315 553 333 560 325 553 b 306 556 313 553 308 555 b 251 577 288 567 270 574 b 246 578 249 577 247 578 b 245 577 246 578 245 578 b 246 576 245 577 246 577 b 247 416 246 574 246 542 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 494 87 498 b 114 485 102 498 110 494 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 409 b 206 574 205 546 205 571 b 206 577 206 576 206 577 b 205 578 206 578 206 578 b 200 577 205 578 202 577 b 147 556 181 574 163 567 b 136 553 142 555 138 553 b 118 571 126 553 118 560 l 118 573 l 118 578 l 123 587 b 205 796 160 646 187 717 b 219 818 209 813 210 816 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 ' }, 'v38': { 'x_min': -1.359375, 'x_max': 651.96875, 'ha': 665, 'o': 'm 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 ' }, 'v39': { 'x_min': -171.5, 'x_max': 251.8125, 'ha': 257, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ' }, 'v3a': { 'x_min': -1.359375, 'x_max': 227.3125, 'ha': 232, 'o': 'm 182 210 b 196 215 189 213 193 215 b 204 209 200 215 202 212 b 205 204 205 206 205 205 b 193 191 205 199 201 195 b 104 54 137 159 104 105 b 122 -8 104 31 110 11 l 123 -11 l 130 -11 b 202 -45 156 -11 185 -24 b 227 -112 219 -65 227 -88 b 172 -205 227 -149 208 -186 b 127 -216 157 -212 142 -216 b -1 -52 59 -216 -1 -144 b 0 -37 -1 -48 0 -43 b 182 210 6 58 80 155 ' }, 'v3b': { 'x_min': 0, 'x_max': 484.5625, 'ha': 494, 'o': 'm 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 ' }, 'v3c': { 'x_min': 0, 'x_max': 450.53125, 'ha': 460, 'o': 'm 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 ' }, 'v3d': { 'x_min': 0, 'x_max': 677.828125, 'ha': 692, 'o': 'm 390 1199 b 396 1200 392 1200 394 1200 b 426 1179 404 1200 412 1195 b 528 975 468 1135 507 1059 b 543 863 537 938 543 900 b 401 533 543 743 494 627 l 364 496 l 344 476 l 345 471 l 355 430 l 383 291 l 385 284 l 387 284 b 420 287 398 285 409 287 b 616 192 494 287 567 251 b 677 18 658 140 677 79 b 502 -244 677 -88 615 -195 b 496 -247 499 -245 496 -247 b 514 -334 496 -247 499 -259 l 526 -394 b 537 -467 536 -437 537 -444 b 307 -700 536 -602 428 -700 b 215 -681 276 -700 245 -695 b 114 -595 174 -663 130 -626 b 103 -544 107 -578 103 -562 b 156 -444 103 -505 122 -466 b 219 -424 175 -431 197 -424 b 303 -463 250 -424 283 -438 b 329 -535 321 -485 329 -510 b 234 -644 329 -588 292 -638 l 224 -644 l 225 -645 b 268 -659 235 -650 254 -656 b 307 -663 281 -662 294 -663 b 498 -494 401 -663 484 -592 b 500 -467 499 -484 500 -476 b 491 -406 500 -452 498 -435 l 480 -348 b 461 -259 466 -284 461 -259 b 461 -259 461 -259 461 -259 b 457 -260 460 -259 458 -259 b 374 -270 430 -267 402 -270 b 190 -222 311 -270 246 -254 b 0 115 68 -151 0 -20 b 46 303 0 179 14 242 b 268 581 80 369 182 496 l 281 595 l 280 605 l 254 730 b 236 850 239 799 236 813 b 235 868 235 857 235 863 b 239 927 235 888 236 903 b 340 1153 250 1010 285 1090 b 390 1199 356 1171 383 1197 m 446 1039 b 434 1041 442 1041 438 1041 b 306 921 389 1041 332 989 b 284 810 291 884 284 849 b 296 705 284 780 288 745 l 308 649 b 313 627 311 637 313 627 l 313 627 b 344 657 314 627 332 645 b 487 957 434 757 487 870 b 483 995 487 970 485 982 b 446 1039 477 1021 468 1034 m 315 437 b 314 442 314 440 314 442 b 314 442 314 442 314 442 b 230 345 311 442 255 378 b 104 101 142 234 115 183 b 102 55 103 86 102 70 b 374 -242 102 -108 225 -242 b 420 -238 389 -242 404 -241 b 454 -229 431 -237 453 -230 b 454 -229 454 -229 454 -229 b 451 -213 454 -227 453 -220 l 441 -162 l 426 -93 l 378 136 b 372 149 375 145 375 149 b 364 147 371 149 368 148 b 270 12 306 123 270 70 b 274 -20 270 1 272 -9 b 333 -101 281 -52 302 -80 b 343 -117 340 -105 343 -112 b 330 -133 343 -124 338 -130 b 328 -133 329 -133 328 -133 b 238 -70 308 -133 262 -101 b 193 61 206 -30 193 15 b 340 272 193 151 247 240 b 348 276 345 274 348 276 b 347 284 348 276 348 280 l 315 437 m 443 155 b 421 156 436 156 428 156 b 412 155 416 156 412 156 b 412 155 412 155 412 155 b 420 117 412 154 416 137 l 435 44 l 449 -19 l 460 -72 l 475 -147 b 488 -212 484 -188 488 -208 b 490 -213 488 -212 490 -213 b 494 -210 490 -213 491 -212 b 571 -134 525 -194 553 -165 b 601 -33 592 -102 601 -66 b 443 155 601 56 539 140 ' }, 'v3e': { 'x_min': 0, 'x_max': 406.96875, 'ha': 415, 'o': 'm 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 ' }, 'v3f': { 'x_min': -24.5, 'x_max': 317.140625, 'ha': 324, 'o': 'm -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 ' }, 'v40': { 'x_min': -1.359375, 'x_max': 436.921875, 'ha': 446, 'o': 'm 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 ' }, 'v41': { 'x_min': -1.359375, 'x_max': 556.6875, 'ha': 568, 'o': 'm 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 ' }, 'v42': { 'x_min': -348.4375, 'x_max': 24.5, 'ha': 25, 'o': 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 ' }, 'v43': { 'x_min': -442.359375, 'x_max': 441, 'ha': 450, 'o': 'm -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 ' }, 'v44': { 'x_min': -21.78125, 'x_max': 251.8125, 'ha': 257, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ' }, 'v45': { 'x_min': -402.890625, 'x_max': 401.53125, 'ha': 410, 'o': 'm -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 ' }, 'v46': { 'x_min': 0, 'x_max': 627.46875, 'ha': 640, 'o': 'm 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 ' }, 'v47': { 'x_min': -24.5, 'x_max': 315.78125, 'ha': 322, 'o': 'm -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 ' }, 'v48': { 'x_min': 0, 'x_max': 720.03125, 'ha': 735, 'o': 'm 251 280 b 269 280 258 280 264 280 b 487 215 348 280 432 255 b 594 -2 558 159 594 87 b 590 -55 594 -19 593 -37 b 44 -598 553 -309 330 -533 b 10 -605 25 -603 16 -605 b 1 -599 5 -605 2 -603 b 0 -594 0 -598 0 -595 b 8 -580 0 -587 2 -580 b 43 -566 9 -580 32 -571 b 453 -54 279 -467 434 -274 b 454 -9 454 -48 454 -29 b 453 34 454 9 454 29 b 351 230 443 129 411 192 b 259 255 323 247 292 255 b 70 133 183 255 103 208 b 68 124 68 127 68 124 b 68 123 68 123 68 123 b 70 126 68 123 69 124 b 126 141 88 137 107 141 b 202 109 153 141 182 131 b 234 33 224 87 234 59 b 126 -77 234 -23 191 -77 b 5 61 53 -77 5 -13 b 27 147 5 88 12 119 b 251 280 68 226 151 274 m 672 172 b 677 173 673 173 676 173 b 720 130 700 173 720 152 b 714 111 720 124 717 117 b 677 88 707 95 692 88 b 642 108 664 88 650 95 b 637 130 638 115 637 123 b 672 172 637 151 650 169 m 672 -90 b 677 -90 673 -90 676 -90 b 720 -131 700 -90 720 -109 b 714 -151 720 -138 717 -144 b 677 -174 707 -166 692 -174 b 642 -154 664 -174 650 -167 b 637 -133 638 -147 637 -140 b 672 -90 637 -112 650 -93 ' }, 'v49': { 'x_min': 0, 'x_max': 630.203125, 'ha': 643, 'o': 'm 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 ' }, 'v4a': { 'x_min': 70.78125, 'x_max': 378.390625, 'ha': 315, 'o': 'm 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 ' }, 'v4b': { 'x_min': 0, 'x_max': 503.609375, 'ha': 514, 'o': 'm 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 ' }, 'v4c': { 'x_min': -348.4375, 'x_max': 24.5, 'ha': 25, 'o': 'm -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -6 27 -221 95 -117 52 b 10 23 1 26 8 23 b 24 -1 20 18 24 8 b 12 -23 24 -9 20 -19 b -8 -29 9 -26 9 -26 b -298 -148 -112 -52 -223 -97 b -322 -158 -313 -158 -315 -158 b -348 -133 -338 -158 -348 -147 b -343 -115 -348 -127 -347 -120 b -313 -1 -323 -79 -313 -40 b -337 101 -313 34 -321 69 b -343 113 -338 105 -341 111 b -348 131 -347 119 -348 126 b -330 155 -348 142 -343 152 ' }, 'v4d': { 'x_min': -311.6875, 'x_max': 310.328125, 'ha': 317, 'o': 'm -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 ' }, 'v4e': { 'x_min': 0, 'x_max': 239.5625, 'ha': 244, 'o': 'm 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 ' }, 'v4f': { 'x_min': 0, 'x_max': 193.28125, 'ha': 197, 'o': 'm 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 ' }, 'v50': { 'x_min': -111.609375, 'x_max': 110.25, 'ha': 113, 'o': 'm -8 112 b -1 112 -5 112 -2 112 b 110 -1 63 112 110 58 b 87 -69 110 -24 103 -48 b -1 -113 65 -98 32 -113 b -88 -69 -34 -113 -66 -98 b -111 -1 -104 -48 -111 -24 b -8 112 -111 55 -70 108 m 17 94 b 0 95 12 95 6 95 b -53 79 -17 95 -38 90 b -95 -1 -80 61 -95 30 b -72 -63 -95 -23 -88 -45 b -1 -97 -53 -87 -27 -97 b 89 -31 38 -97 74 -73 b 93 0 92 -20 93 -11 b 17 94 93 44 63 83 ' }, 'v51': { 'x_min': -1.359375, 'x_max': 455.96875, 'ha': 465, 'o': 'm 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 ' }, 'v52': { 'x_min': -10.890625, 'x_max': 298.078125, 'ha': 294, 'o': 'm 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 ' }, 'v53': { 'x_min': 0, 'x_max': 902.421875, 'ha': 921, 'o': 'm 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 ' }, 'v54': { 'x_min': -24.5, 'x_max': 317.140625, 'ha': 324, 'o': 'm -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 ' }, 'v55': { 'x_min': 0, 'x_max': 551.25, 'ha': 563, 'o': 'm 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 ' }, 'v56': { 'x_min': 0, 'x_max': 1159.671875, 'ha': 1183, 'o': 'm 0 0 l 0 347 l 193 347 l 386 347 l 386 0 l 386 -348 l 193 -348 l 0 -348 l 0 0 m 773 -1 l 773 347 l 966 347 l 1159 347 l 1159 -1 l 1159 -348 l 966 -348 l 773 -348 l 773 -1 ' }, 'v57': { 'x_min': 0, 'x_max': 272.21875, 'ha': 278, 'o': 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 ' }, 'v58': { 'x_min': -21.78125, 'x_max': 367.5, 'ha': 375, 'o': 'm 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 ' }, 'v59': { 'x_min': 0, 'x_max': 464.140625, 'ha': 474, 'o': 'm 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 ' }, 'v5a': { 'x_min': -171.5, 'x_max': 170.140625, 'ha': 174, 'o': 'm -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 ' }, 'v5b': { 'x_min': -441, 'x_max': 439.640625, 'ha': 449, 'o': 'm -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ' }, 'v5c': { 'x_min': 0, 'x_max': 447.8125, 'ha': 457, 'o': 'm 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 ' }, 'v5d': { 'x_min': -1.359375, 'x_max': 592.078125, 'ha': 604, 'o': 'm 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 ' }, 'v5e': { 'x_min': -206.890625, 'x_max': 428.75, 'ha': 438, 'o': 'm -178 811 b -172 811 -175 811 -174 811 b -145 800 -164 811 -157 809 l -114 778 l -50 735 l 13 691 l 77 646 l 141 602 l 205 559 l 269 514 l 332 471 l 394 427 b 428 392 421 409 426 405 b 428 384 428 390 428 387 b 394 349 428 365 412 349 b 375 355 387 349 382 351 b 272 426 372 356 303 403 l 209 469 l 145 513 l 83 556 l -34 638 l -87 674 l -151 718 b -202 759 -196 749 -198 752 b -206 775 -205 764 -206 770 b -178 811 -206 792 -196 809 ' }, 'v5f': { 'x_min': -390.640625, 'x_max': 389.28125, 'ha': 397, 'o': 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -176 l -348 -337 l 0 -337 l 347 -337 l 347 -176 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -252 l 389 -489 l 387 -492 b 377 -503 385 -498 381 -501 l 372 -505 l 0 -505 l -374 -505 l -378 -503 b -389 -492 -382 -501 -386 -498 l -390 -489 l -390 -252 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ' }, 'v60': { 'x_min': -590.71875, 'x_max': 589.359375, 'ha': 601, 'o': 'm -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 ' }, 'v61': { 'x_min': -108.890625, 'x_max': 251.8125, 'ha': 257, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 93 -148 206 -40 179 -70 l 38 -199 l 23 -215 l 20 -217 l 20 -241 b 19 -267 20 -260 20 -266 b 19 -270 19 -269 19 -270 b 19 -270 19 -270 19 -270 b 47 -263 21 -270 39 -266 b 78 -249 55 -260 69 -255 b 89 -247 83 -247 85 -247 b 107 -265 99 -247 107 -254 l 107 -265 l 107 -270 l 102 -280 b 19 -492 65 -338 34 -417 b 0 -513 14 -508 10 -513 b -20 -488 -12 -513 -16 -508 b -103 -280 -38 -409 -66 -338 l -108 -270 l -108 -265 l -108 -265 b -91 -247 -108 -254 -100 -247 b -80 -249 -87 -247 -84 -247 b -49 -263 -70 -255 -57 -260 b -20 -270 -40 -266 -23 -270 b -20 -270 -20 -270 -20 -270 b -20 -267 -20 -270 -20 -269 b -21 174 -21 -266 -21 -208 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ' }, 'v62': { 'x_min': 46.28125, 'x_max': 669.671875, 'ha': 563, 'o': 'm 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 ' }, 'v63': { 'x_min': -1.359375, 'x_max': 392, 'ha': 400, 'o': 'm 253 341 b 317 341 276 341 298 341 b 363 341 344 341 362 341 b 392 309 379 340 392 326 l 392 309 b 266 -320 392 305 269 -310 b 246 -341 262 -330 255 -337 b 136 -342 243 -342 189 -342 b 21 -341 80 -342 24 -342 b -1 -310 8 -337 -1 -324 b 0 -310 -1 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 253 341 147 341 151 341 m 321 276 b 250 277 321 277 307 277 b 179 276 194 277 179 277 b 123 -1 179 276 153 151 l 68 -278 l 140 -278 b 167 -278 149 -278 159 -278 b 210 -278 191 -278 210 -278 b 321 276 210 -278 321 274 ' }, 'v64': { 'x_min': -355.25, 'x_max': 353.890625, 'ha': 361, 'o': 'm -355 534 l -355 1068 l 0 1068 l 353 1068 l 353 534 l 353 0 l 0 0 l -355 0 l -355 534 m 325 881 l 325 1041 l -1 1041 l -326 1041 l -326 881 l -326 721 l -1 721 l 325 721 l 325 881 m 325 534 l 325 694 l 0 694 l -326 694 l -326 534 l -326 374 l 0 374 l 325 374 l 325 534 m 325 187 l 325 347 l 0 347 l -326 347 l -326 187 l -326 27 l 0 27 l 325 27 l 325 187 ' }, 'v65': { 'x_min': -695.53125, 'x_max': 694.171875, 'ha': 708, 'o': 'm -50 1414 b 1 1415 -32 1414 -16 1415 b 683 828 333 1415 626 1168 b 694 706 690 787 694 746 b -1 0 694 323 389 0 b -695 706 -385 0 -695 315 b -50 1413 -695 1079 -415 1386 l -50 1414 m 44 1385 b -2 1386 28 1386 13 1386 b -526 1124 -204 1386 -400 1289 b -564 1068 -539 1107 -564 1070 b -1 1067 -564 1068 -311 1067 b 563 1068 308 1067 563 1068 b 524 1124 563 1070 537 1107 b 44 1385 406 1276 235 1371 m 590 1021 l 581 1039 l -1 1039 l -582 1039 l -592 1021 b -666 728 -637 931 -666 816 l -666 720 l -1 720 l 665 720 l 665 728 b 590 1021 665 816 635 931 m 665 685 l 665 692 l -1 692 l -666 692 l -666 685 b -590 391 -666 596 -637 480 l -582 374 l -1 374 l 579 374 l 589 391 b 665 685 634 480 665 596 m 558 337 l 563 345 l -1 345 l -564 345 l -559 337 b 0 27 -436 142 -223 27 b 148 44 49 27 99 33 b 558 337 315 83 465 191 ' }, 'v66': { 'x_min': -73.5, 'x_max': 72.140625, 'ha': 74, 'o': 'm -36 -126 b 0 0 -17 -56 -1 0 b 70 -254 0 0 70 -249 l 72 -255 l 0 -255 l -73 -255 l -72 -254 b -36 -126 -72 -254 -55 -195 ' }, 'v67': { 'x_min': -1.359375, 'x_max': 549.890625, 'ha': 561, 'o': 'm 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 495 122 b 534 148 528 148 528 148 b 549 133 544 148 549 142 l 549 133 b 549 130 549 131 549 131 b 509 91 549 124 548 123 l 436 33 b 390 0 397 0 396 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 ' }, 'v68': { 'x_min': -597.53125, 'x_max': 596.171875, 'ha': 608, 'o': 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ' }, 'v69': { 'x_min': -25.859375, 'x_max': 347.078125, 'ha': 354, 'o': 'm 313 155 b 321 156 315 156 318 156 b 329 156 325 156 328 156 b 347 130 341 152 347 141 b 338 109 347 123 344 115 b 288 79 332 105 307 88 b 126 6 236 49 186 26 b 104 0 114 2 104 0 b 126 -8 104 -1 114 -4 b 326 -104 201 -33 268 -65 b 343 -117 337 -111 340 -112 b 347 -131 345 -122 347 -127 b 321 -158 347 -145 337 -158 b 296 -148 314 -158 311 -158 b 17 -31 223 -99 121 -56 l -4 -27 b -25 0 -19 -23 -25 -15 b -4 26 -25 13 -19 22 l 17 30 b 296 147 121 55 223 98 b 313 155 307 152 310 155 ' }, 'v6a': { 'x_min': -85.75, 'x_max': 84.390625, 'ha': 86, 'o': 'm -17 84 b 0 86 -12 86 -6 86 b 84 -1 46 86 84 45 b 83 -18 84 -6 84 -12 b -1 -87 73 -62 36 -87 b -66 -55 -25 -87 -49 -77 b -85 -1 -80 -38 -85 -19 b -17 84 -85 37 -59 74 ' }, 'v6b': { 'x_min': -1.359375, 'x_max': 544.4375, 'ha': 556, 'o': 'm 475 834 b 483 835 477 834 480 835 b 514 803 500 835 514 820 b 509 785 514 798 513 791 b 356 742 496 764 424 743 l 341 742 l 341 738 b 344 671 343 716 344 694 b 247 351 344 533 306 401 b 144 315 217 326 185 315 b 121 316 136 315 129 315 b 83 340 98 317 88 323 b 81 348 83 342 81 345 b 114 380 81 366 98 380 b 137 369 122 380 130 377 b 147 365 140 366 142 365 b 191 399 159 365 178 378 b 251 673 230 459 251 560 b 250 739 251 695 251 717 b 239 757 249 756 249 755 b 194 763 224 762 209 763 b 103 712 153 763 121 745 b 68 689 95 696 81 689 b 29 730 47 689 29 703 b 77 785 29 749 43 766 b 198 814 111 805 155 814 b 262 806 220 814 243 811 b 351 793 294 798 323 793 b 462 827 396 793 435 805 b 475 834 466 831 469 832 m 334 290 b 340 290 336 290 338 290 b 386 244 364 290 383 272 b 470 -154 397 115 439 -81 b 509 -195 481 -177 498 -195 b 510 -195 509 -195 510 -195 b 518 -194 513 -194 515 -194 b 544 -223 533 -194 544 -208 b 530 -244 544 -231 540 -240 b 510 -248 526 -247 519 -248 b 450 -235 491 -248 466 -244 b 351 -68 401 -210 381 -176 b 333 5 344 -44 333 1 b 333 5 333 5 333 5 b 326 -8 333 5 329 -1 b 289 -73 313 -34 302 -54 l 281 -84 l 284 -86 b 328 -102 295 -95 313 -102 b 344 -116 340 -104 344 -106 b 323 -131 344 -124 340 -129 b 304 -134 317 -133 311 -134 b 259 -123 289 -134 273 -130 l 254 -120 l 251 -124 b 78 -237 198 -183 141 -222 b 29 -242 63 -241 44 -242 b 16 -241 24 -242 19 -242 b -1 -217 5 -237 -1 -227 b 17 -192 -1 -206 5 -195 b 23 -191 19 -191 20 -191 b 29 -191 24 -191 27 -191 b 32 -191 29 -191 31 -191 b 175 -97 70 -191 132 -152 b 294 237 246 -12 287 105 b 306 273 295 256 298 263 b 334 290 313 281 323 288 m 292 -285 b 311 -285 299 -285 306 -285 b 517 -399 405 -285 496 -334 b 519 -420 518 -406 519 -413 b 427 -535 519 -462 485 -505 l 416 -541 l 427 -546 b 528 -681 491 -580 528 -631 b 518 -724 528 -695 525 -710 b 341 -816 488 -782 417 -816 b 216 -785 299 -816 255 -806 b 186 -750 194 -774 186 -764 b 187 -742 186 -748 186 -745 l 187 -739 l 186 -742 b 66 -784 151 -771 114 -784 b 59 -784 65 -784 62 -784 b 16 -767 31 -784 23 -781 b 13 -753 14 -763 13 -757 b 43 -723 13 -737 27 -723 b 62 -730 50 -723 55 -725 b 70 -734 66 -734 66 -734 b 151 -666 96 -734 130 -705 b 167 -630 153 -660 155 -656 b 213 -444 193 -570 209 -506 b 215 -412 215 -437 215 -426 b 212 -355 215 -385 213 -356 b 212 -353 212 -355 212 -353 b 176 -369 209 -353 187 -363 b 106 -433 145 -385 119 -409 b 69 -458 98 -449 83 -458 b 36 -437 57 -458 44 -451 b 31 -417 32 -431 31 -424 b 53 -378 31 -405 38 -391 b 292 -285 111 -324 191 -294 m 336 -338 b 310 -337 329 -338 318 -337 b 300 -338 304 -337 300 -337 b 300 -338 300 -338 300 -338 b 306 -408 303 -345 306 -381 b 306 -415 306 -410 306 -413 b 247 -657 304 -496 284 -578 b 217 -709 235 -682 228 -695 b 210 -717 215 -713 212 -716 b 210 -717 210 -717 210 -717 b 215 -717 210 -717 212 -717 b 217 -717 215 -717 216 -717 b 220 -717 217 -717 219 -717 b 242 -727 228 -717 232 -718 b 337 -764 273 -752 303 -763 b 341 -764 338 -764 340 -764 b 436 -681 396 -764 436 -728 b 435 -664 436 -675 436 -670 b 319 -566 427 -617 381 -578 b 299 -557 307 -563 304 -562 b 292 -539 294 -552 292 -545 b 317 -513 292 -527 302 -514 b 423 -445 364 -508 409 -480 b 428 -421 427 -437 428 -430 b 336 -338 428 -384 392 -349 ' }, 'v6c': { 'x_min': -1.359375, 'x_max': 193.28125, 'ha': 197, 'o': 'm 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 ' }, 'v6d': { 'x_min': -590.71875, 'x_max': 589.359375, 'ha': 601, 'o': 'm 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 ' }, 'v6e': { 'x_min': -355.25, 'x_max': 353.890625, 'ha': 361, 'o': 'm -27 720 b -13 721 -24 720 -20 721 b 42 718 4 721 34 720 b 343 446 190 699 308 591 b 353 360 349 417 353 390 b 84 9 353 197 245 49 b 0 0 55 2 27 0 b -344 273 -160 0 -306 109 b -355 359 -351 302 -355 331 b -39 718 -355 539 -221 700 l -27 720 m 39 691 b -13 692 32 691 4 692 b -25 692 -19 692 -23 692 b -326 383 -190 675 -314 548 l -326 374 l -1 374 l 325 374 l 325 383 b 39 691 314 541 197 667 m 325 337 l 325 345 l -1 345 l -326 345 l -326 337 b -55 33 -315 184 -204 58 b -1 29 -34 29 -29 29 b 54 33 28 29 32 29 b 325 337 201 58 314 184 ' }, 'v6f': { 'x_min': -80.3125, 'x_max': 78.9375, 'ha': 81, 'o': 'm 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 ' }, 'v70': { 'x_min': 0, 'x_max': 436.921875, 'ha': 446, 'o': 'm 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 ' }, 'v71': { 'x_min': -25.859375, 'x_max': 347.078125, 'ha': 354, 'o': 'm 313 155 b 321 156 315 156 318 156 b 334 154 325 156 330 155 b 347 131 343 148 347 140 b 341 113 347 126 345 120 b 336 101 340 111 337 105 b 311 -1 319 69 311 34 b 341 -115 311 -40 322 -79 b 347 -133 345 -120 347 -127 b 321 -158 347 -147 337 -158 b 296 -148 314 -158 311 -158 b 6 -29 221 -97 111 -52 b -13 -23 -10 -26 -10 -26 b -25 -1 -21 -19 -25 -9 b -12 23 -25 8 -21 18 b 5 27 -9 23 -2 26 b 296 147 115 52 220 95 b 313 155 307 152 310 155 ' }, 'v72': { 'x_min': -423.3125, 'x_max': 421.9375, 'ha': 431, 'o': 'm -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 ' }, 'v73': { 'x_min': 0, 'x_max': 347.078125, 'ha': 354, 'o': 'm 231 818 b 239 821 234 820 236 821 b 251 816 243 821 249 818 b 258 800 255 811 255 810 b 341 587 273 725 304 646 l 347 578 l 347 573 l 347 571 b 329 553 347 560 338 553 b 318 556 325 553 322 555 b 264 577 302 567 283 574 b 258 578 261 577 259 578 b 258 577 258 578 258 578 b 258 576 258 577 258 577 b 259 416 259 574 259 542 l 259 258 l 285 265 b 318 270 302 269 311 270 b 336 259 328 270 332 267 b 337 208 336 256 337 233 b 336 158 337 184 336 159 b 302 140 332 148 329 147 b 259 130 266 131 259 130 b 259 65 259 130 259 104 b 259 20 259 51 259 36 l 259 -88 l 285 -81 b 318 -76 302 -77 311 -76 b 332 -81 325 -76 328 -77 b 337 -123 336 -87 337 -86 l 337 -138 l 337 -154 b 332 -195 337 -191 336 -190 b 281 -210 328 -199 328 -199 b 262 -216 272 -213 264 -216 l 259 -216 l 259 -349 l 259 -483 l 258 -487 b 239 -499 254 -495 246 -499 b 220 -487 231 -499 223 -495 l 219 -483 l 217 -355 l 217 -227 l 216 -227 l 194 -233 l 152 -244 b 129 -249 140 -247 130 -249 b 127 -410 127 -249 127 -258 b 127 -576 127 -548 127 -573 b 126 -578 126 -577 126 -578 b 127 -580 126 -578 126 -580 b 133 -578 129 -580 130 -578 b 186 -557 152 -576 170 -569 b 197 -555 190 -556 194 -555 b 215 -573 206 -555 215 -562 l 215 -574 l 215 -580 l 209 -588 b 126 -802 172 -648 141 -727 b 107 -823 123 -817 118 -823 b 87 -798 95 -823 91 -817 b 5 -588 69 -718 40 -648 l 0 -580 l 0 -574 b 0 -573 0 -574 0 -574 b 16 -555 0 -562 6 -555 b 27 -557 20 -555 24 -556 b 81 -578 44 -569 62 -576 b 87 -580 84 -578 85 -580 b 88 -578 88 -580 88 -580 b 87 -576 88 -578 88 -577 b 87 -416 87 -573 87 -549 b 85 -260 87 -270 87 -260 b 85 -260 85 -260 85 -260 b 32 -273 74 -263 35 -273 b 13 -260 24 -273 16 -267 b 12 -209 12 -256 12 -256 l 12 -162 l 13 -158 b 74 -134 17 -148 17 -148 l 87 -131 l 87 -22 b 85 86 87 79 87 86 b 85 86 85 86 85 86 b 32 74 74 83 35 74 b 13 86 24 74 16 79 b 12 137 12 90 12 90 l 12 184 l 13 188 b 73 212 17 198 17 198 l 87 215 l 87 348 l 87 481 l 88 485 b 107 498 92 494 99 498 b 126 485 115 498 122 494 l 127 481 l 127 353 l 127 226 l 133 226 b 172 235 136 227 153 231 l 212 247 l 217 248 l 217 409 b 219 574 217 546 217 571 b 219 577 219 576 219 577 b 219 578 219 578 219 578 b 213 577 217 578 216 577 b 159 556 194 574 175 567 b 148 553 155 555 152 553 b 130 571 138 553 130 560 l 130 573 l 130 578 l 136 587 b 219 796 172 646 200 717 b 231 818 221 813 224 816 m 217 9 b 217 119 217 70 217 119 l 217 119 b 194 113 217 119 206 116 l 152 102 b 129 97 140 99 130 97 b 127 -12 127 97 127 91 l 127 -122 l 133 -120 b 172 -111 136 -119 153 -115 l 212 -101 l 217 -98 l 217 9 ' }, 'v74': { 'x_min': -206.890625, 'x_max': 428.75, 'ha': 438, 'o': 'm 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 ' }, 'v75': { 'x_min': -149.71875, 'x_max': 148.359375, 'ha': 151, 'o': 'm -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 ' }, 'v76': { 'x_min': 0, 'x_max': 737.71875, 'ha': 753, 'o': 'm 9 13 b 208 15 10 15 51 15 b 368 15 251 15 304 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 660 -16 l 592 -16 l 592 -95 l 592 -174 l 368 -174 l 144 -174 l 144 -95 l 144 -16 l 77 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 9 13 0 5 2 11 ' }, 'v77': { 'x_min': -209.609375, 'x_max': 208.25, 'ha': 213, 'o': 'm -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -6 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -6 b -197 19 -209 6 -205 15 ' }, 'v78': { 'x_min': 0, 'x_max': 193.28125, 'ha': 197, 'o': 'm 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 ' }, 'v79': { 'x_min': -1.359375, 'x_max': 899.703125, 'ha': 918, 'o': 'm 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 ' }, 'v7a': { 'x_min': -1.359375, 'x_max': 386.5625, 'ha': 394, 'o': 'm 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 ' }, 'v7b': { 'x_min': -212.328125, 'x_max': 210.96875, 'ha': 215, 'o': 'm -8 216 b -1 217 -6 216 -4 217 b 19 204 8 217 16 212 b 20 111 20 201 20 199 l 20 20 l 107 20 b 142 20 121 20 133 20 b 205 13 205 20 198 19 b 210 0 209 9 210 4 b 198 -20 210 -9 206 -16 b 107 -22 194 -22 193 -22 l 20 -22 l 20 -112 b 20 -148 20 -126 20 -138 b 13 -212 20 -213 19 -206 b 0 -219 9 -216 4 -219 b -20 -205 -8 -219 -16 -213 b -21 -112 -21 -202 -21 -201 l -21 -22 l -108 -22 b -200 -20 -194 -22 -196 -22 b -212 0 -208 -16 -212 -9 b -206 13 -212 4 -210 9 b -144 20 -200 19 -206 20 b -108 20 -134 20 -122 20 l -21 20 l -21 111 b -20 204 -21 199 -21 201 b -8 216 -17 209 -13 213 ' }, 'v7c': { 'x_min': 0, 'x_max': 300.8125, 'ha': 307, 'o': 'm 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 ' }, 'v7d': { 'x_min': -1.359375, 'x_max': 436.921875, 'ha': 446, 'o': 'm 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 ' }, 'v7e': { 'x_min': -390.640625, 'x_max': 389.28125, 'ha': 397, 'o': 'm -377 -1 b -368 0 -375 -1 -372 0 b -362 -1 -366 0 -363 -1 b -343 -24 -356 -4 -352 -8 l -285 -119 l -187 -280 l -88 -444 l -35 -533 b -31 -538 -32 -537 -32 -538 b -28 -534 -31 -538 -29 -537 l -23 -526 l -19 -517 l -13 -509 l -8 -501 l -2 -492 l 2 -483 l 6 -476 l 17 -458 l 23 -449 l 32 -433 l 38 -424 l 42 -416 l 47 -408 l 53 -399 l 58 -391 l 63 -381 l 68 -373 l 73 -365 l 78 -356 l 84 -348 l 89 -340 l 93 -330 l 99 -322 l 104 -315 l 114 -297 l 125 -280 l 129 -272 l 134 -263 l 140 -255 l 145 -247 l 151 -238 l 155 -230 l 160 -220 l 166 -212 l 171 -204 l 176 -195 l 181 -187 l 186 -177 l 191 -169 l 196 -162 l 201 -154 l 206 -144 l 217 -127 l 221 -119 l 227 -111 l 232 -102 l 238 -94 l 242 -86 l 247 -77 l 253 -69 l 258 -59 l 262 -51 l 268 -43 l 273 -34 l 279 -26 l 283 -18 b 321 -1 292 -2 292 -1 b 338 -1 326 -1 332 -1 b 382 -6 378 -1 375 -1 b 389 -20 386 -9 389 -15 b 382 -38 389 -26 386 -31 l 378 -47 l 372 -55 l 367 -63 l 362 -72 l 356 -80 l 351 -90 l 347 -98 l 341 -106 l 336 -115 l 330 -123 l 325 -131 l 321 -141 l 315 -149 l 310 -158 l 304 -166 l 299 -174 b 295 -183 298 -177 296 -181 l 289 -191 l 285 -199 l 280 -208 l 274 -216 l 269 -224 l 264 -233 l 259 -242 l 254 -251 l 249 -259 l 243 -267 l 238 -276 l 234 -284 l 228 -292 l 223 -302 l 217 -310 l 213 -319 l 208 -327 b 202 -335 206 -330 204 -334 l 197 -344 l 193 -351 l 187 -360 l 182 -369 l 176 -377 l 172 -385 l 167 -394 l 161 -403 l 156 -412 l 152 -420 l 147 -428 l 141 -437 l 136 -445 l 130 -455 l 126 -463 l 121 -471 l 115 -480 b 110 -488 114 -483 111 -487 l 106 -496 l 100 -503 l 96 -512 l 89 -521 l 85 -530 l 80 -538 l 74 -546 l 69 -555 l 65 -564 l 59 -573 l 54 -581 l 49 -589 l 43 -598 l 39 -606 l 34 -616 l 28 -624 l 23 -632 b 19 -641 21 -635 20 -638 b 0 -653 14 -649 8 -653 b -25 -631 -10 -653 -14 -649 l -80 -541 l -359 -79 b -389 -29 -375 -52 -389 -30 b -390 -22 -389 -26 -390 -24 b -377 -1 -390 -13 -385 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 51 -36 19 -8 39 -19 b 61 -72 58 -47 61 -59 b 51 -106 61 -84 58 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -127 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ' }, 'v7f': { 'x_min': 0, 'x_max': 367.5, 'ha': 375, 'o': 'm 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 ' }, 'v80': { 'x_min': 29.9375, 'x_max': 420.578125, 'ha': 371, 'o': 'm 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 ' }, 'v81': { 'x_min': 0, 'x_max': 428.75, 'ha': 438, 'o': 'm 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 ' }, 'v82': { 'x_min': 0, 'x_max': 607.0625, 'ha': 619, 'o': 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 ' }, 'v83': { 'x_min': -1.359375, 'x_max': 847.96875, 'ha': 865, 'o': 'm 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 ' }, 'v84': { 'x_min': 25.859375, 'x_max': 164.6875, 'ha': 168, 'o': 'm 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 ' }, 'v85': { 'x_min': -21.78125, 'x_max': 251.8125, 'ha': 257, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ' }, 'v86': { 'x_min': -571.671875, 'x_max': 570.3125, 'ha': 582, 'o': 'm -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 ' }, 'v87': { 'x_min': 0, 'x_max': 0, 'ha': 263 }, 'v88': { 'x_min': -1.359375, 'x_max': 413.78125, 'ha': 422, 'o': 'm 99 692 b 107 694 102 692 104 694 b 121 688 112 694 117 691 b 126 673 123 685 125 682 b 209 460 141 598 172 519 l 215 451 l 215 445 l 215 445 b 197 426 215 434 206 426 b 186 430 194 426 190 427 b 133 449 170 440 152 446 b 127 451 130 449 129 451 b 126 449 126 451 126 451 b 127 446 126 449 127 448 b 127 324 127 444 127 424 b 129 205 127 259 129 205 b 215 227 129 205 167 215 b 308 249 283 244 300 249 b 315 247 311 249 313 248 b 325 237 319 245 323 241 l 326 233 l 326 -105 b 326 -262 326 -167 326 -219 b 326 -448 326 -416 326 -445 b 325 -451 325 -449 325 -451 b 326 -452 325 -452 325 -452 b 330 -451 326 -452 329 -451 b 385 -431 351 -448 368 -441 b 396 -427 389 -428 393 -427 b 413 -446 405 -427 413 -435 l 413 -446 l 413 -452 l 408 -462 b 325 -674 371 -520 340 -599 b 306 -695 322 -689 317 -695 b 285 -670 294 -695 289 -689 b 204 -462 268 -591 239 -520 l 197 -452 l 197 -446 l 197 -446 b 215 -427 197 -435 205 -427 b 225 -431 219 -427 223 -428 b 280 -451 243 -441 261 -448 b 285 -452 283 -452 284 -452 b 287 -451 287 -452 287 -452 b 285 -448 287 -451 287 -449 b 285 -323 285 -445 285 -426 b 284 -201 285 -247 284 -201 b 197 -223 284 -201 245 -210 b 104 -245 129 -240 111 -245 b 98 -242 102 -245 100 -244 b 88 -233 93 -241 89 -237 l 87 -230 l 87 106 b 87 262 87 169 87 220 b 87 446 87 415 87 444 b 88 449 88 448 88 449 b 87 451 88 451 88 451 b 81 449 85 451 84 451 b 27 430 62 446 44 440 b 16 426 24 427 20 426 b -1 445 6 426 -1 434 b 0 445 -1 445 0 445 l 0 451 l 5 460 b 87 669 40 519 69 589 b 99 692 91 685 92 688 m 284 22 b 285 70 285 41 285 58 b 284 116 285 113 284 116 l 284 116 b 205 97 283 116 247 106 l 127 77 l 127 -18 b 129 -112 127 -69 129 -112 l 206 -93 l 284 -73 l 284 22 ' }, 'v89': { 'x_min': 0, 'x_max': 737.71875, 'ha': 753, 'o': 'm 144 94 l 144 173 l 368 173 l 592 173 l 592 94 l 592 15 l 660 15 l 726 15 l 729 12 b 737 -1 735 9 737 4 b 729 -15 737 -6 735 -11 l 726 -16 l 368 -16 l 9 -16 l 6 -15 b 0 -1 1 -11 0 -6 b 6 12 0 4 1 9 l 9 15 l 77 15 l 144 15 l 144 94 ' }, 'v8a': { 'x_min': -170.140625, 'x_max': 168.78125, 'ha': 172, 'o': 'm -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 ' }, 'v8b': { 'x_min': 0, 'x_max': 319.859375, 'ha': 326, 'o': 'm 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 ' }, 'v8c': { 'x_min': -330.75, 'x_max': 329.390625, 'ha': 336, 'o': 'm -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 ' }, 'v8d': { 'x_min': -1.359375, 'x_max': 255.890625, 'ha': 261, 'o': 'm 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 ' }, 'v8e': { 'x_min': -299.4375, 'x_max': 298.078125, 'ha': 304, 'o': 'm -281 174 b -274 174 -280 174 -277 174 b -259 173 -270 174 -265 174 l -40 112 l 224 40 b 287 20 289 22 283 23 b 298 0 295 16 298 8 b 287 -22 298 -9 295 -18 b 287 -23 287 -23 287 -23 b 287 -23 287 -23 287 -23 b -40 -113 287 -24 270 -29 l -259 -174 b -274 -176 -265 -176 -270 -176 b -288 -172 -280 -176 -284 -174 b -299 -151 -296 -167 -299 -159 b -288 -129 -299 -141 -296 -133 b -98 -74 -284 -124 -307 -131 l 42 -36 l 140 -9 b 170 0 156 -4 170 -1 b 140 8 170 0 156 2 l 42 34 l -98 73 b -287 126 -299 129 -284 124 b -299 149 -295 131 -299 140 b -281 174 -299 161 -294 170 ' }, 'v8f': { 'x_min': -21.78125, 'x_max': 362.0625, 'ha': 369, 'o': 'm 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 ' }, 'v90': { 'x_min': -171.5, 'x_max': 483.1875, 'ha': 493, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ' }, 'v91': { 'x_min': -355.25, 'x_max': 353.890625, 'ha': 361, 'o': 'm -27 720 b -13 721 -24 720 -20 721 b 42 718 4 721 34 720 b 343 446 190 699 308 591 b 353 360 349 417 353 390 b 84 9 353 197 245 49 b 0 0 55 2 27 0 b -344 273 -160 0 -306 109 b -355 359 -351 302 -355 331 b -39 718 -355 539 -221 700 l -27 720 m 39 691 b -13 692 32 691 4 692 b -25 692 -19 692 -23 692 b -322 416 -178 677 -296 566 b -326 360 -325 394 -326 390 b -325 323 -326 341 -325 328 b -36 29 -303 163 -193 51 b -1 29 -31 29 -16 29 b 35 29 14 29 29 29 b 323 323 191 51 302 163 b 325 360 323 328 325 341 b 321 416 325 390 323 394 b 39 691 296 560 185 669 m -12 655 b -4 655 -9 655 -6 655 b 20 652 4 655 14 653 b 66 585 50 642 66 613 b 32 524 66 562 55 538 b 25 521 28 523 25 521 b 16 403 25 520 16 408 b 16 403 16 403 16 403 l 16 403 b 54 448 17 403 34 423 l 92 492 l 89 499 b 87 519 88 506 87 513 b 103 564 87 535 92 552 b 155 589 117 581 136 589 b 216 551 179 589 204 576 b 224 520 221 541 224 530 b 156 449 224 483 193 449 b 136 453 149 449 142 451 l 129 455 l 85 416 b 42 377 61 395 42 378 l 42 377 l 42 377 b 156 387 46 377 156 387 b 160 394 156 387 159 390 b 220 430 172 417 197 430 b 280 394 243 430 266 417 b 288 360 285 384 288 371 b 280 326 288 348 285 337 b 220 291 266 302 243 291 b 160 327 197 291 172 302 b 156 333 159 330 156 333 b 42 342 156 333 46 342 b 42 342 42 342 42 342 l 42 342 b 85 303 42 342 61 324 l 129 265 l 136 267 b 155 270 142 269 148 270 b 198 254 171 270 186 265 b 223 201 216 240 223 220 b 186 138 223 176 210 151 b 155 131 176 133 166 131 b 87 201 119 131 87 162 b 89 220 87 206 88 213 l 92 227 l 54 272 b 16 316 34 297 17 316 l 16 316 b 16 316 16 316 16 316 b 25 199 16 313 25 199 b 32 195 25 199 28 198 b 68 134 55 183 68 158 b 32 73 68 111 55 87 b -1 65 23 68 10 65 b -34 73 -12 65 -24 68 b -69 134 -57 87 -69 111 b -34 195 -69 158 -57 183 b -27 199 -29 198 -27 199 b -17 316 -27 199 -17 313 b -17 316 -17 316 -17 316 l -17 316 b -55 272 -19 316 -35 297 l -93 227 l -91 220 b -88 201 -89 215 -88 208 b -104 156 -88 184 -93 169 b -156 131 -118 140 -137 131 b -217 169 -181 131 -205 144 b -225 201 -223 179 -225 190 b -157 270 -225 238 -194 270 b -137 267 -151 270 -144 269 l -130 265 l -87 303 b -43 342 -62 324 -43 342 l -43 342 b -43 342 -43 342 -43 342 b -157 333 -47 342 -157 333 b -161 327 -159 333 -160 330 b -221 291 -175 302 -198 291 b -281 326 -245 291 -268 302 b -289 360 -287 337 -289 348 b -281 394 -289 371 -287 384 b -221 430 -268 417 -245 430 b -161 394 -198 430 -175 417 b -157 387 -160 390 -159 387 b -43 377 -157 387 -47 377 l -43 377 l -43 377 b -87 416 -43 378 -62 395 l -130 455 l -137 453 b -156 449 -144 451 -149 449 b -200 466 -172 449 -187 455 b -224 520 -217 480 -224 499 b -187 581 -224 545 -212 569 b -156 589 -178 587 -167 589 b -88 520 -121 589 -88 559 b -91 499 -88 513 -89 506 l -93 492 l -55 448 b -17 403 -35 423 -19 403 l -17 403 b -17 403 -17 403 -17 403 b -27 521 -17 408 -27 520 b -34 524 -27 521 -29 523 b -68 585 -57 538 -68 562 b -12 655 -68 617 -47 649 ' }, 'v92': { 'x_min': 0, 'x_max': 598.890625, 'ha': 611, 'o': 'm 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 ' }, 'v93': { 'x_min': 0, 'x_max': 438.28125, 'ha': 447, 'o': 'm 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 ' }, 'v94': { 'x_min': -149.71875, 'x_max': 148.359375, 'ha': 151, 'o': 'm -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 ' }, 'v95': { 'x_min': 0, 'x_max': 406.96875, 'ha': 415, 'o': 'm 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 ' }, 'v96': { 'x_min': 0, 'x_max': 597.53125, 'ha': 610, 'o': 'm 356 341 b 479 341 402 341 445 341 b 570 341 533 341 568 341 b 597 309 586 340 597 326 l 597 309 b 472 -320 597 305 475 -310 b 451 -341 469 -330 462 -337 b 242 -342 450 -342 347 -342 b 21 -341 134 -342 24 -342 b 0 -310 8 -337 0 -324 b 0 -310 0 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 356 341 147 341 153 341 m 528 276 b 353 277 528 277 492 277 b 179 276 215 277 179 277 b 123 -1 179 276 153 151 l 68 -278 l 242 -278 b 310 -278 266 -278 289 -278 b 416 -278 372 -278 416 -278 b 528 276 417 -278 528 274 ' }, 'v97': { 'x_min': -228.671875, 'x_max': 227.3125, 'ha': 232, 'o': 'm -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 ' }, 'v98': { 'x_min': -1.359375, 'x_max': 427.390625, 'ha': 436, 'o': 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 b 272 494 272 616 272 616 l 272 370 l 344 333 b 426 285 426 292 423 294 b 427 277 426 283 427 280 b 405 256 427 266 417 256 b 405 256 405 256 405 256 l 400 256 l 336 290 b 272 322 300 308 272 322 b 272 54 272 322 272 201 b 270 -216 272 -212 272 -212 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b -1 84 9 18 -1 52 b 111 199 -1 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 245 l 231 342 l 157 380 b 81 420 92 413 84 417 b 76 435 77 424 76 430 b 96 456 76 446 84 456 b 98 456 96 456 98 456 l 103 456 l 166 424 b 230 391 201 406 230 391 b 231 503 230 391 231 442 b 232 620 231 614 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 ' }, 'v99': { 'x_min': 0, 'x_max': 239.5625, 'ha': 244, 'o': 'm 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 ' }, 'v9a': { 'x_min': -21.78125, 'x_max': 367.5, 'ha': 375, 'o': 'm 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 ' }, 'v9b': { 'x_min': -24.5, 'x_max': 313.0625, 'ha': 319, 'o': 'm -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 ' }, 'v9c': { 'x_min': -166.0625, 'x_max': -25.859375, 'ha': 0, 'o': 'm -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 ' }, 'v9d': { 'x_min': -1.359375, 'x_max': 326.671875, 'ha': 333, 'o': 'm 99 692 b 107 694 102 692 104 694 b 121 688 112 694 117 691 b 126 673 123 685 125 682 b 209 460 141 598 172 519 l 215 451 l 215 445 l 215 445 b 197 426 215 434 206 426 b 186 430 194 426 190 427 b 133 449 170 440 152 446 b 127 451 130 449 129 451 b 126 449 126 451 126 451 b 127 446 126 449 127 448 b 127 324 127 444 127 424 b 129 205 127 259 129 205 b 215 227 129 205 167 215 b 308 249 283 244 300 249 b 315 247 311 249 313 248 b 325 237 319 245 323 241 l 326 233 l 326 -106 l 326 -448 l 325 -451 b 306 -463 321 -459 314 -463 b 287 -451 298 -463 291 -459 l 285 -448 l 285 -324 b 284 -201 285 -248 284 -201 b 197 -223 284 -201 245 -210 b 104 -245 129 -240 111 -245 b 98 -242 102 -245 100 -244 b 88 -233 93 -241 89 -237 l 87 -230 l 87 106 b 87 262 87 169 87 220 b 87 446 87 415 87 444 b 88 449 88 448 88 449 b 87 451 88 451 88 451 b 81 449 85 451 84 451 b 27 430 62 446 44 440 b 16 426 24 427 20 426 b -1 445 6 426 -1 434 b 0 445 -1 445 0 445 l 0 451 l 5 460 b 87 669 40 519 69 589 b 99 692 91 685 92 688 m 284 22 b 285 70 285 41 285 58 b 284 116 285 113 284 116 l 284 116 b 205 97 283 116 247 106 l 127 77 l 127 -18 b 129 -112 127 -69 129 -112 l 206 -93 l 284 -73 l 284 22 ' }, 'v9e': { 'x_min': 0, 'x_max': 607.0625, 'ha': 619, 'o': 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 ' }, 'v9f': { 'x_min': -311.6875, 'x_max': 310.328125, 'ha': 317, 'o': 'm -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 l 23 328 l 23 290 l 27 290 b 172 274 62 290 129 283 b 200 259 191 270 196 267 b 215 40 204 249 215 102 b 215 26 215 33 215 26 l 216 24 l 253 24 l 255 24 b 299 19 292 24 292 23 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 255 -27 292 -27 292 -27 l 253 -27 l 216 -27 l 215 -30 b 215 -55 215 -31 215 -43 b 202 -244 213 -111 209 -179 b 174 -277 200 -270 198 -273 b 40 -294 132 -285 87 -291 l 23 -294 l 23 -331 b 23 -340 23 -334 23 -337 b 17 -381 23 -376 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -376 b -27 -331 -27 -337 -27 -334 l -27 -294 l -44 -294 b -178 -277 -91 -291 -136 -285 b -205 -258 -198 -273 -204 -270 b -219 -44 -210 -215 -219 -94 b -219 -29 -219 -37 -219 -30 l -220 -27 l -255 -27 l -258 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -255 24 -291 23 -284 24 l -220 24 l -219 26 b -219 40 -219 26 -219 33 b -204 259 -219 104 -208 249 b -176 274 -200 267 -196 270 b -31 290 -133 283 -66 290 l -27 290 l -27 328 b -27 371 -27 360 -27 369 b -9 388 -24 378 -17 385 m -27 136 l -27 247 l -28 247 b -103 233 -46 245 -100 235 b -107 197 -103 233 -106 217 b -115 52 -111 147 -114 94 b -115 27 -115 40 -115 29 l -115 24 l -72 24 l -27 24 l -27 136 m 34 245 b 24 247 28 247 24 247 b 23 136 24 247 23 197 l 23 24 l 68 24 l 111 24 l 111 27 b 111 52 111 29 111 40 b 103 197 110 94 107 147 b 99 233 102 217 100 233 b 34 245 98 235 54 244 m -27 -140 l -27 -27 l -72 -27 l -115 -27 l -115 -30 b -115 -56 -115 -33 -115 -44 b -107 -201 -114 -98 -111 -151 b -103 -237 -106 -222 -103 -237 b -28 -251 -100 -240 -40 -251 b -27 -140 -28 -251 -27 -201 m 111 -30 l 111 -27 l 68 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 99 -237 36 -251 96 -240 b 103 -201 100 -237 102 -222 b 111 -56 107 -151 110 -98 b 111 -30 111 -44 111 -33 ' }, 'va0': { 'x_min': 0, 'x_max': 622.03125, 'ha': 635, 'o': 'm 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 ' }, 'va1': { 'x_min': 0, 'x_max': 294, 'ha': 300, 'o': 'm 138 381 b 147 381 141 381 144 381 b 221 299 191 381 221 341 b 194 238 221 278 213 255 b 159 210 190 234 161 212 b 78 148 157 209 81 151 b 78 148 78 148 78 148 b 95 106 78 144 88 119 b 121 77 103 88 108 83 b 156 69 132 72 144 69 b 259 127 193 69 232 91 b 273 140 266 137 269 138 b 279 141 274 141 276 141 b 294 124 287 141 294 134 b 292 117 294 123 294 120 b 255 66 289 113 261 72 b 126 -1 220 22 171 -1 b 47 27 96 -1 69 8 b 2 133 31 43 9 93 b 0 180 0 149 0 165 b 53 326 0 237 17 288 b 103 366 59 331 91 358 b 138 381 112 373 129 380 m 126 326 b 118 326 123 326 121 326 b 98 316 110 326 103 323 b 68 215 78 288 68 255 b 68 208 68 213 68 210 b 70 183 69 195 69 184 l 70 183 b 93 201 70 183 81 191 l 133 231 b 159 259 152 247 155 248 b 163 278 161 266 163 272 b 126 326 163 299 148 320 ' }, 'va2': { 'x_min': 0, 'x_max': 367.5, 'ha': 375, 'o': 'm 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 ' }, 'va3': { 'x_min': 58.53125, 'x_max': 228.671875, 'ha': 294, 'o': 'm 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 ' }, 'va4': { 'x_min': -21.78125, 'x_max': 483.1875, 'ha': 493, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 ' }, 'va5': { 'x_min': 0, 'x_max': 349.8125, 'ha': 357, 'o': 'm 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 ' }, 'va6': { 'x_min': 0, 'x_max': 462.78125, 'ha': 472, 'o': 'm 8 595 b 14 596 10 596 12 596 b 50 591 21 596 29 595 b 455 248 255 544 420 405 b 462 191 460 229 462 209 b 321 0 462 94 404 9 b 300 -1 314 -1 307 -1 b 149 167 215 -1 149 69 b 294 387 149 258 201 337 b 296 390 295 388 296 388 b 289 398 296 391 294 392 b 21 560 225 477 130 535 b 2 569 9 563 5 566 b 0 580 0 573 0 576 b 8 595 0 587 2 592 m 325 348 b 321 353 322 351 322 353 b 313 348 319 353 317 351 b 223 167 255 306 223 237 b 227 124 223 154 224 138 b 289 31 236 79 261 40 b 295 31 291 31 294 31 b 355 104 315 31 338 59 b 368 191 364 129 368 159 b 364 241 368 208 367 224 b 325 348 357 277 344 313 ' }, 'va7': { 'x_min': -155.171875, 'x_max': 153.8125, 'ha': 157, 'o': 'm -9 24 b 0 26 -5 24 -2 26 b 25 2 12 26 21 16 l 29 -19 b 144 -303 54 -124 96 -229 b 153 -328 153 -319 153 -322 b 127 -355 153 -344 142 -355 b 100 -334 115 -355 111 -351 b 6 -130 62 -274 31 -206 b -1 -108 2 -117 0 -108 b -8 -130 -1 -108 -4 -117 b -102 -334 -32 -206 -63 -274 b -129 -355 -112 -351 -117 -355 b -155 -328 -144 -355 -155 -344 b -145 -303 -155 -322 -155 -319 b -31 -19 -98 -229 -55 -124 l -27 2 b -9 24 -24 13 -17 22 ' }, 'va8': { 'x_min': -68.0625, 'x_max': 66.6875, 'ha': 68, 'o': 'm -12 66 b -1 68 -9 68 -5 68 b 55 37 20 68 43 56 b 66 -1 62 26 66 12 b 36 -58 66 -23 55 -44 b 0 -69 25 -65 12 -69 b -57 -38 -21 -69 -43 -58 b -68 -1 -63 -27 -68 -13 b -12 66 -68 30 -46 61 ' }, 'va9': { 'x_min': -24.5, 'x_max': 314.421875, 'ha': 321, 'o': 'm -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 ' }, 'vaa': { 'x_min': -1.359375, 'x_max': 752.703125, 'ha': 768, 'o': 'm 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 ' }, 'vab': { 'x_min': 0, 'x_max': 272.21875, 'ha': 278, 'o': 'm 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 ' }, 'vac': { 'x_min': -390.640625, 'x_max': 389.28125, 'ha': 397, 'o': 'm -9 650 b -1 652 -6 650 -4 652 b 19 639 6 652 13 648 l 23 631 b 28 623 24 628 27 626 l 34 614 l 39 606 l 43 598 l 49 588 l 54 580 l 59 571 l 65 563 l 69 555 l 74 546 l 80 537 l 85 528 b 89 520 87 526 89 523 l 95 512 l 100 503 l 106 494 l 111 487 l 115 478 l 121 470 l 126 462 l 130 453 l 136 445 l 141 437 l 147 427 l 151 419 l 156 410 l 161 402 l 167 394 l 172 385 l 176 376 b 182 367 179 374 181 370 l 187 359 l 193 351 l 198 342 l 202 334 l 208 326 l 212 317 l 217 309 l 223 301 l 228 292 l 234 284 l 238 274 l 243 266 l 249 258 l 254 249 l 259 241 l 264 233 l 269 224 b 274 216 270 222 273 217 l 280 206 l 285 198 l 295 180 l 299 174 l 304 165 l 310 156 l 315 148 l 321 140 l 325 131 l 330 123 l 336 113 l 341 105 l 347 97 l 351 88 l 356 80 l 360 72 b 364 66 362 70 363 68 b 370 58 366 65 368 61 l 379 41 b 389 19 386 31 389 24 b 382 4 389 13 386 8 b 347 0 377 0 378 0 b 337 0 344 0 340 0 b 336 0 336 0 336 0 b 287 11 294 0 294 0 l 281 19 l 276 27 l 272 37 l 266 45 l 261 54 l 255 62 l 250 70 l 246 79 l 240 87 l 235 97 l 230 105 l 224 113 l 220 122 l 215 130 l 209 140 l 204 148 l 200 155 l 194 163 b 189 172 193 165 191 169 l 185 180 l 179 188 l 174 198 l 168 206 l 163 215 l 159 223 l 153 231 l 148 240 l 142 249 l 138 258 l 133 266 l 127 274 l 122 283 l 117 292 l 111 301 l 107 308 l 102 316 b 98 324 102 317 99 322 l 92 333 l 87 341 l 81 349 l 77 359 l 72 367 l 66 376 l 61 384 l 55 392 l 51 401 l 46 410 l 40 419 l 35 427 l 31 435 l 24 444 l 20 453 l 14 460 l 10 469 b 5 477 9 470 6 474 l 0 485 l -5 494 l -9 502 l -14 512 b -20 519 -16 513 -19 517 l -24 526 l -28 534 b -31 537 -29 535 -31 537 b -35 533 -32 537 -32 535 l -88 444 l -187 280 l -285 117 l -343 23 b -362 1 -352 6 -356 2 b -368 0 -364 0 -367 0 b -390 20 -381 0 -390 8 l -390 20 b -359 77 -390 27 -390 27 l -80 539 l -25 631 b -9 650 -17 644 -13 648 m -13 133 b -1 134 -9 133 -5 134 b 50 105 19 134 39 123 b 61 70 57 95 61 83 b 50 34 61 58 57 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 70 -57 40 -62 55 b -13 133 -62 98 -44 126 ' }, 'vad': { 'x_min': 0, 'x_max': 873.828125, 'ha': 892, 'o': 'm 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 ' }, 'vae': { 'x_min': -108.890625, 'x_max': 251.8125, 'ha': 257, 'o': 'm -8 863 b 0 864 -5 864 -2 864 b 12 859 4 864 9 863 b 19 843 16 856 16 853 b 102 631 34 768 65 689 l 107 621 l 107 616 l 107 616 b 89 596 107 605 99 596 b 78 601 85 596 83 598 b 47 614 69 606 55 612 b 19 621 39 617 21 621 b 19 621 19 621 19 621 b 19 619 19 621 19 620 b 20 383 20 616 20 585 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 93 -148 206 -40 179 -70 l 38 -199 l 23 -215 l 20 -217 l 20 -241 b 19 -267 20 -260 20 -266 b 19 -270 19 -269 19 -270 b 19 -270 19 -270 19 -270 b 47 -263 21 -270 39 -266 b 78 -249 55 -260 69 -255 b 89 -247 83 -247 85 -247 b 107 -265 99 -247 107 -254 l 107 -265 l 107 -270 l 102 -280 b 19 -492 65 -338 34 -417 b 0 -513 14 -508 10 -513 b -20 -488 -12 -513 -16 -508 b -103 -280 -38 -409 -66 -338 l -108 -270 l -108 -265 l -108 -265 b -91 -247 -108 -254 -100 -247 b -80 -249 -87 -247 -84 -247 b -49 -263 -70 -255 -57 -260 b -20 -270 -40 -266 -23 -270 b -20 -270 -20 -270 -20 -270 b -20 -267 -20 -270 -20 -269 b -21 174 -21 -266 -21 -208 b -20 619 -21 559 -21 616 b -20 621 -20 620 -20 621 b -20 621 -20 621 -20 621 b -49 614 -23 621 -40 617 b -80 601 -57 612 -70 606 b -91 596 -84 598 -87 596 b -108 616 -100 596 -108 605 l -108 616 l -108 621 l -103 631 b -20 839 -66 689 -38 760 b -8 863 -17 856 -14 859 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ' }, 'vaf': { 'x_min': -209.609375, 'x_max': 208.25, 'ha': 213, 'o': 'm -197 19 b 1 20 -194 19 -96 20 b 196 19 98 20 193 19 b 208 -1 204 15 208 6 b 202 -15 208 -5 206 -11 b 95 -22 197 -20 212 -22 b -1 -22 69 -22 38 -22 b -96 -22 -39 -22 -70 -22 b -204 -15 -213 -22 -198 -20 b -209 -1 -208 -11 -209 -5 b -197 19 -209 6 -205 15 m -12 -113 b -1 -113 -9 -113 -5 -113 b 55 -144 20 -113 43 -124 b 66 -181 62 -155 66 -169 b 27 -244 66 -208 53 -233 b 0 -251 19 -248 9 -251 b -57 -220 -21 -251 -43 -240 b -68 -181 -63 -208 -68 -195 b -12 -113 -68 -151 -46 -120 ' }, 'vb0': { 'x_min': 0, 'x_max': 438.28125, 'ha': 447, 'o': 'm 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 ' }, 'vb1': { 'x_min': 78.9375, 'x_max': 485.921875, 'ha': 417, 'o': 'm 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 ' }, 'vb2': { 'x_min': -80.3125, 'x_max': 78.9375, 'ha': 81, 'o': 'm 23 191 b 32 192 27 192 29 192 b 78 145 57 192 78 172 b 78 140 78 142 78 141 b -10 -72 78 133 70 116 l -50 -165 b -70 -194 -63 -194 -63 -194 b -80 -184 -77 -194 -80 -192 b -76 -159 -80 -179 -78 -172 l -68 -116 b -12 159 -51 -31 -13 156 b 23 191 -6 176 6 188 ' }, 'vb3': { 'x_min': 0, 'x_max': 227.3125, 'ha': 232, 'o': 'm 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 ' }, 'vb4': { 'x_min': -597.53125, 'x_max': 596.171875, 'ha': 608, 'o': 'm -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 ' }, 'vb5': { 'x_min': -170.140625, 'x_max': 168.78125, 'ha': 172, 'o': 'm -160 -1 b -122 -1 -159 -1 -149 -1 l -87 -1 l -84 -2 b -74 -15 -78 -4 -77 -6 b -20 -201 -73 -18 -49 -102 b 31 -383 8 -301 31 -383 b 85 -197 31 -383 55 -299 b 140 -9 114 -95 138 -11 b 153 0 141 -4 148 0 b 168 -9 159 0 166 -4 b 168 -12 168 -11 168 -11 b 92 -287 168 -20 159 -55 b 14 -555 50 -434 14 -555 b 0 -569 14 -562 6 -569 b -17 -553 -8 -569 -17 -560 b -93 -285 -17 -552 -51 -433 b -170 -16 -166 -36 -170 -20 b -170 -15 -170 -15 -170 -15 b -160 -1 -170 -8 -167 -4 ' }, 'vb6': { 'x_min': 0, 'x_max': 556.6875, 'ha': 568, 'o': 'm 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 ' }, 'vb7': { 'x_min': -176.9375, 'x_max': 251.8125, 'ha': 257, 'o': 'm -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 ' }, 'vb8': { 'x_min': 0, 'x_max': 175.578125, 'ha': 179, 'o': 'm 72 231 b 87 233 77 233 81 233 b 175 142 137 233 175 191 b 164 102 175 130 171 116 b 87 54 149 70 118 54 b 24 80 63 54 42 62 b 0 142 6 98 0 120 b 72 231 0 184 27 224 ' }, 'vb9': { 'x_min': -122.5, 'x_max': 121.140625, 'ha': 124, 'o': 'm -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 ' }, 'vba': { 'x_min': -118.421875, 'x_max': 597.53125, 'ha': 381, 'o': 'm 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 ' }, 'vbb': { 'x_min': 0, 'x_max': 288.5625, 'ha': 294, 'o': 'm 202 341 b 235 341 213 341 225 341 b 261 341 249 341 259 341 b 288 309 276 340 288 326 l 288 309 b 163 -320 288 305 166 -310 b 142 -341 160 -330 153 -337 b 83 -342 140 -342 111 -342 b 21 -341 54 -342 24 -342 b 0 -310 8 -337 0 -324 b 0 -310 0 -310 0 -310 b 123 316 0 -306 118 297 b 144 340 126 327 133 335 b 202 341 147 341 151 341 ' }, 'vbc': { 'x_min': -155.171875, 'x_max': 153.8125, 'ha': 158, 'o': 'm -8 24 b -1 26 -6 24 -4 26 b 21 12 8 26 17 20 b 27 -8 24 9 24 9 b 144 -303 50 -115 93 -227 b 153 -322 151 -315 152 -317 b 153 -330 153 -324 153 -327 b 129 -355 153 -344 142 -355 b 111 -351 123 -355 117 -353 b 0 -319 76 -330 38 -319 b -100 -344 -35 -319 -69 -327 b -112 -351 -104 -345 -110 -348 b -129 -355 -119 -355 -123 -355 b -155 -328 -144 -355 -155 -344 b -145 -303 -155 -322 -155 -319 b -28 -6 -95 -226 -53 -119 b -8 24 -24 13 -20 19 ' }, 'vbd': { 'x_min': -390.640625, 'x_max': 389.28125, 'ha': 397, 'o': 'm -378 -2 b -368 -1 -375 -1 -374 -1 b -349 -13 -360 -1 -353 -5 l -348 -16 l -348 -212 l -348 -408 l 0 -408 l 347 -408 l 347 -212 l 347 -16 l 348 -13 b 367 0 352 -5 360 0 b 387 -13 375 0 383 -5 l 389 -16 l 389 -288 l 389 -560 l 387 -564 b 377 -574 385 -569 381 -573 l 372 -577 l 0 -577 l -374 -577 l -378 -574 b -389 -564 -382 -573 -386 -569 l -390 -560 l -390 -288 l -390 -16 l -389 -13 b -378 -2 -386 -8 -382 -4 m -274 -2 b -266 -1 -272 -1 -270 -1 b -246 -13 -257 -1 -250 -5 l -245 -16 l -245 -109 l -245 -202 l 0 -202 l 243 -202 l 243 -109 l 245 -16 l 245 -13 b 265 0 249 -5 257 0 b 284 -13 272 0 280 -5 l 285 -16 l 285 -170 l 285 -324 l 284 -327 b 273 -338 281 -331 279 -335 l 269 -340 l 0 -340 l -270 -340 l -274 -338 b -285 -327 -280 -335 -283 -331 l -287 -324 l -287 -170 l -287 -16 l -285 -13 b -274 -2 -283 -8 -280 -4 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -58 -102 -62 -87 b -13 -9 -62 -44 -44 -16 ' }, 'vbe': { 'x_min': -122.5, 'x_max': 121.140625, 'ha': 124, 'o': 'm -16 145 b -1 147 -10 147 -5 147 b 119 20 58 147 111 93 b 121 0 119 13 121 6 b 32 -142 121 -66 84 -124 l 24 -144 l 24 -180 b 24 -187 24 -183 24 -184 b 19 -227 24 -222 24 -220 b 0 -237 14 -234 6 -237 b -20 -227 -8 -237 -16 -234 b -25 -187 -25 -220 -25 -222 b -25 -180 -25 -184 -25 -183 l -25 -144 l -34 -142 b -122 0 -85 -124 -122 -66 b -121 20 -122 6 -121 13 b -16 145 -114 84 -70 137 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -69 0 -69 15 -69 6 b -13 -113 -69 -49 -46 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 ' }, 'vbf': { 'x_min': -53.078125, 'x_max': 513.140625, 'ha': 485, 'o': 'm 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 ' }, 'vc0': { 'x_min': -571.671875, 'x_max': 570.3125, 'ha': 582, 'o': 'm 156 273 b 163 274 159 273 161 274 b 183 262 171 274 179 269 b 185 158 185 259 185 259 l 185 56 l 231 112 b 284 174 277 172 279 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 189 -6 194 0 191 -2 l 185 -12 l 185 -147 b 185 -210 185 -173 185 -194 b 179 -292 185 -297 185 -287 b 164 -299 175 -297 170 -299 b 145 -287 156 -299 148 -295 b 144 -174 144 -284 144 -284 l 142 -63 l 100 -117 b 46 -176 57 -170 54 -176 b 42 -176 44 -176 43 -176 b -54 -87 32 -174 38 -180 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -393 170 -566 -43 -398 165 b -379 174 -389 173 -383 174 b -370 173 -375 174 -372 174 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 127 11 -32 172 16 123 l 138 -1 l 141 1 l 144 4 l 144 130 b 145 260 144 256 144 258 b 156 273 147 266 151 270 ' }, 'vc1': { 'x_min': -525.390625, 'x_max': 524.03125, 'ha': 535, 'o': 'm -42 1067 b 1 1068 -27 1068 -13 1068 b 524 534 285 1068 524 831 b 0 0 524 231 283 0 b -118 12 -38 0 -77 4 b -487 335 -284 51 -424 174 b -525 534 -513 402 -525 469 b -42 1067 -525 802 -325 1042 m 38 1038 b 0 1039 25 1039 12 1039 b -460 725 -198 1039 -386 914 l -461 721 l 0 721 l 460 721 l 458 725 b 38 1038 390 899 224 1022 m 472 685 l 470 692 l 0 692 l -470 692 l -473 685 b -496 535 -488 638 -496 587 b -472 377 -496 483 -488 428 l -470 374 l 0 374 l 470 374 l 470 377 b 495 535 487 428 495 483 b 472 685 495 587 488 638 m 458 344 l 460 345 l 0 345 l -461 345 l -460 344 b -402 238 -454 323 -424 269 b 0 27 -303 98 -152 27 b 401 238 151 27 302 98 b 458 344 423 269 453 323 ' }, 'vc2': { 'x_min': 0, 'x_max': 337.5625, 'ha': 344, 'o': 'm 230 535 b 239 537 232 537 234 537 b 258 524 247 537 254 533 l 259 521 l 259 390 l 259 258 l 285 265 b 318 270 302 269 311 270 b 336 259 328 270 332 267 b 337 208 336 256 337 233 b 336 158 337 184 336 159 b 302 140 332 148 329 147 b 259 130 266 131 259 130 b 259 65 259 130 259 104 b 259 20 259 51 259 36 l 259 -88 l 285 -81 b 318 -76 302 -77 311 -76 b 332 -81 325 -76 328 -77 b 337 -123 336 -87 337 -86 l 337 -138 l 337 -154 b 332 -195 337 -191 336 -190 b 281 -210 328 -199 328 -199 b 262 -216 272 -213 264 -216 l 259 -216 l 259 -349 l 259 -483 l 258 -487 b 239 -499 254 -495 246 -499 b 220 -487 231 -499 223 -495 l 219 -483 l 217 -355 l 217 -227 l 216 -227 l 194 -233 l 152 -244 b 129 -249 140 -247 130 -249 b 127 -410 127 -249 127 -258 b 127 -576 127 -548 127 -573 b 126 -578 126 -577 126 -578 b 127 -580 126 -578 126 -580 b 133 -578 129 -580 130 -578 b 186 -557 152 -576 170 -569 b 197 -555 190 -556 194 -555 b 215 -573 206 -555 215 -562 l 215 -574 l 215 -580 l 209 -588 b 126 -802 172 -648 141 -727 b 107 -823 123 -817 118 -823 b 87 -798 95 -823 91 -817 b 5 -588 69 -718 40 -648 l 0 -580 l 0 -574 b 0 -573 0 -574 0 -574 b 16 -555 0 -562 6 -555 b 27 -557 20 -555 24 -556 b 81 -578 44 -569 62 -576 b 87 -580 84 -578 85 -580 b 88 -578 88 -580 88 -580 b 87 -576 88 -578 88 -577 b 87 -416 87 -573 87 -549 b 85 -260 87 -270 87 -260 b 85 -260 85 -260 85 -260 b 32 -273 74 -263 35 -273 b 13 -260 24 -273 16 -267 b 12 -209 12 -256 12 -256 l 12 -162 l 13 -158 b 74 -134 17 -148 17 -148 l 87 -131 l 87 -22 b 85 86 87 79 87 86 b 85 86 85 86 85 86 b 32 74 74 83 35 74 b 13 86 24 74 16 79 b 12 137 12 90 12 90 l 12 184 l 13 188 b 73 212 17 198 17 198 l 87 215 l 87 348 l 87 481 l 88 485 b 107 498 92 492 99 498 b 117 495 110 498 114 496 b 126 485 121 494 125 489 l 127 481 l 127 353 l 127 226 l 133 226 b 172 235 136 227 153 231 l 212 247 l 217 248 l 217 384 l 219 521 l 220 524 b 230 535 221 528 225 533 m 217 9 b 217 119 217 70 217 119 l 217 119 b 194 113 217 119 206 116 l 152 102 b 129 97 140 99 130 97 b 127 -12 127 97 127 91 l 127 -122 l 133 -120 b 172 -111 136 -119 153 -115 l 212 -101 l 217 -98 l 217 9 ' }, 'vc3': { 'x_min': -10.890625, 'x_max': 299.4375, 'ha': 294, 'o': 'm 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 ' } }, 'cssFontWeight': 'normal', 'ascender': 1903, 'underlinePosition': -125, 'cssFontStyle': 'normal', 'boundingBox': { 'yMin': -2065.375, 'xMin': -695.53125, 'yMax': 1901.578125, 'xMax': 1159.671875 }, 'resolution': 1000, 'original_font_information': { 'postscript_name': 'Gonville-18', 'version_string': 'Version 0.1.8904 ', 'vendor_url': '', 'full_font_name': 'Gonville-18', 'font_family_name': 'Gonville-18', 'copyright': 'No copyright is claimed on this font file.', 'description': '', 'trademark': '', 'designer': '', 'designer_url': '', 'unique_font_identifier': 'FontForge 2.0 : Gonville-18 : 17-3-2010', 'license_url': '', 'license_description': '', 'manufacturer_name': '', 'font_sub_family_name': '18' }, 'descender': -2066, 'familyName': 'Gonville-18', 'lineHeight': 4093, 'underlineThickness': 50 };\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './fonts/vexflow_font';\n\nfunction processOutline(outline, originX, originY, scaleX, scaleY, outlineFns) {\n  let command;\n  let x;\n  let y;\n  let i = 0;\n\n  function nextX() { return originX + outline[i++] * scaleX; }\n  function nextY() { return originY + outline[i++] * scaleY; }\n\n  while (i < outline.length) {\n    command = outline[i++];\n    switch (command) {\n      case 'm':\n      case 'l':\n        outlineFns[command](nextX(), nextY());\n        break;\n      case 'q':\n        x = nextX();\n        y = nextY();\n        outlineFns.q(nextX(), nextY(), x, y);\n        break;\n      case 'b':\n        x = nextX();\n        y = nextY();\n        outlineFns.b(nextX(), nextY(), nextX(), nextY(), x, y);\n        break;\n    }\n  }\n}\n\nexport class Glyph {\n  /* Static methods used to implement loading / unloading of glyphs */\n  static loadMetrics(font, code, cache) {\n    const glyph = font.glyphs[code];\n    if (!glyph) throw new Vex.RuntimeError('BadGlyph', 'Glyph ' + code +\n        ' does not exist in font.');\n\n    const x_min = glyph.x_min;\n    const x_max = glyph.x_max;\n    const ha = glyph.ha;\n\n    let outline;\n\n    if (glyph.o) {\n      if (cache) {\n        if (glyph.cached_outline) {\n          outline = glyph.cached_outline;\n        } else {\n          outline = glyph.o.split(' ');\n          glyph.cached_outline = outline;\n        }\n      } else {\n        if (glyph.cached_outline) delete glyph.cached_outline;\n        outline = glyph.o.split(' ');\n      }\n\n      return {\n        x_min,\n        x_max,\n        ha,\n        outline,\n      };\n    } else {\n      throw new Vex.RuntimeError('BadGlyph', 'Glyph ' + code +\n          ' has no outline defined.');\n    }\n  }\n\n  /**\n   * A quick and dirty static glyph renderer. Renders glyphs from the default\n   * font defined in Vex.Flow.Font.\n   *\n   * @param {!Object} ctx The canvas context.\n   * @param {number} x_pos X coordinate.\n   * @param {number} y_pos Y coordinate.\n   * @param {number} point The point size to use.\n   * @param {string} val The glyph code in Vex.Flow.Font.\n   * @param {boolean} nocache If set, disables caching of font outline.\n   */\n  static renderGlyph(ctx, x_pos, y_pos, point, val, nocache) {\n    const scale = point * 72.0 / (Font.resolution * 100.0);\n    const metrics = Glyph.loadMetrics(Font, val, !nocache);\n    Glyph.renderOutline(ctx, metrics.outline, scale, x_pos, y_pos);\n  }\n\n  static renderOutline(ctx, outline, scale, x_pos, y_pos) {\n    ctx.beginPath();\n    ctx.moveTo(x_pos, y_pos);\n    processOutline(outline, x_pos, y_pos, scale, -scale, {\n      m: ctx.moveTo.bind(ctx),\n      l: ctx.lineTo.bind(ctx),\n      q: ctx.quadraticCurveTo.bind(ctx),\n      b: ctx.bezierCurveTo.bind(ctx),\n    });\n    ctx.fill();\n  }\n\n  static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {\n    const bboxComp = new BoundingBoxComputation(x_pos, y_pos);\n\n    processOutline(outline, x_pos, y_pos, scale, -scale, {\n      m: bboxComp.addPoint.bind(bboxComp),\n      l: bboxComp.addPoint.bind(bboxComp),\n      q: bboxComp.addQuadraticCurve.bind(bboxComp),\n      b: bboxComp.addBezierCurve.bind(bboxComp),\n    });\n\n    return new BoundingBox(\n      bboxComp.x1,\n      bboxComp.y1,\n      bboxComp.width(),\n      bboxComp.height()\n    );\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(code, point, options) {\n    this.code = code;\n    this.point = point;\n    this.context = null;\n    this.options = {\n      cache: true,\n      font: Font,\n    };\n\n    this.metrics = null;\n    this.x_shift = 0;\n    this.y_shift = 0;\n\n    if (options) {\n      this.setOptions(options);\n    } else {\n      this.reset();\n    }\n  }\n\n  setOptions(options) {\n    Vex.Merge(this.options, options);\n    this.reset();\n  }\n\n  setPoint(point) { this.point = point; return this; }\n  setStave(stave) { this.stave = stave; return this; }\n  setXShift(x_shift) { this.x_shift = x_shift; return this; }\n  setYShift(y_shift) { this.y_shift = y_shift; return this; }\n  setContext(context) { this.context = context; return this; }\n  getContext() { return this.context; }\n\n  reset() {\n    this.scale = this.point * 72 / (this.options.font.resolution * 100);\n    this.metrics = Glyph.loadMetrics(\n      this.options.font,\n      this.code,\n      this.options.cache\n    );\n    this.bbox = Glyph.getOutlineBoundingBox(\n      this.metrics.outline,\n      this.scale,\n      0,\n      0\n    );\n  }\n\n  getMetrics() {\n    if (!this.metrics) throw new Vex.RuntimeError('BadGlyph', 'Glyph ' +\n      this.code + ' is not initialized.');\n\n    return {\n      x_min: this.metrics.x_min * this.scale,\n      x_max: this.metrics.x_max * this.scale,\n      width: this.bbox.getW(),\n      height: this.bbox.getH(),\n    };\n  }\n\n  render(ctx, x_pos, y_pos) {\n    if (!this.metrics) throw new Vex.RuntimeError('BadGlyph', 'Glyph ' +\n        this.code + ' is not initialized.');\n\n    const outline = this.metrics.outline;\n    const scale = this.scale;\n\n    Glyph.renderOutline(ctx, outline, scale, x_pos, y_pos);\n  }\n\n  renderToStave(x) {\n    if (!this.metrics) throw new Vex.RuntimeError('BadGlyph', 'Glyph ' +\n        this.code + ' is not initialized.');\n    if (!this.stave) throw new Vex.RuntimeError('GlyphError', 'No valid stave');\n    if (!this.context) throw new Vex.RERR('GlyphError', 'No valid context');\n\n    const outline = this.metrics.outline;\n    const scale = this.scale;\n\n    Glyph.renderOutline(this.context, outline, scale,\n        x + this.x_shift, this.stave.getYForGlyphs() + this.y_shift);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\n\n// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.\nfunction L() { if (Stem.DEBUG) Vex.L('Vex.Flow.Stem', arguments); }\n\nexport class Stem {\n  static get CATEGORY() { return 'stem'; }\n\n  // Stem directions\n  static get UP() {\n    return 1;\n  }\n  static get DOWN() {\n    return -1;\n  }\n\n  // Theme\n  static get WIDTH() {\n    return Flow.STEM_WIDTH;\n  }\n  static get HEIGHT() {\n    return Flow.STEM_HEIGHT;\n  }\n\n  constructor(options = null) {\n    if (options === null) {\n      return;\n    }\n    // Default notehead x bounds\n    this.x_begin = options.x_begin || 0;\n    this.x_end = options.x_end || 0;\n\n    // Y bounds for top/bottom most notehead\n    this.y_top = options.y_top || 0;\n    this.y_bottom = options.y_bottom || 0;\n\n    // Stem base extension\n    this.y_extend = options.y_extend || 0;\n    // Stem top extension\n    this.stem_extension = options.stem_extension || 0;\n\n    // Direction of the stem\n    this.stem_direction = options.stem_direction || 0;\n\n    // Flag to override all draw calls\n    this.hide = false;\n  }\n\n  // Set the x bounds for the default notehead\n  setNoteHeadXBounds(x_begin, x_end) {\n    this.x_begin = x_begin;\n    this.x_end = x_end;\n    return this;\n  }\n\n  // Set the direction of the stem in relation to the noteheads\n  setDirection(direction) { this.stem_direction = direction; }\n\n  // Set the extension for the stem, generally for flags or beams\n  setExtension(ext) { this.stem_extension = ext; }\n\n  // The the y bounds for the top and bottom noteheads\n  setYBounds(y_top, y_bottom) {\n    this.y_top = y_top;\n    this.y_bottom = y_bottom;\n  }\n\n  // The category of the object\n  getCategory() { return Stem.CATEGORY; }\n\n  // Set the canvas context to render on\n  setContext(context) { this.context = context; return this; }\n\n  // Gets the entire height for the stem\n  getHeight() {\n    return ((this.y_bottom - this.y_top) * this.stem_direction) +\n           ((Stem.HEIGHT + this.stem_extension) * this.stem_direction);\n  }\n  getBoundingBox() {\n    throw new Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');\n  }\n\n  // Get the y coordinates for the very base of the stem to the top of\n  // the extension\n  getExtents() {\n    const ys = [this.y_top, this.y_bottom];\n\n    let top_pixel = this.y_top;\n    let base_pixel = this.y_bottom;\n    const stem_height = Stem.HEIGHT + this.stem_extension;\n\n    for (let i = 0; i < ys.length; ++i) {\n      const stem_top = ys[i] + (stem_height * -this.stem_direction);\n\n      if (this.stem_direction == Stem.DOWN) {\n        top_pixel = Math.max(top_pixel, stem_top);\n        base_pixel = Math.min(base_pixel, ys[i]);\n      } else {\n        top_pixel = Math.min(top_pixel, stem_top);\n        base_pixel = Math.max(base_pixel, ys[i]);\n      }\n    }\n\n    return { topY: top_pixel, baseY: base_pixel };\n  }\n\n  // set the draw style of a stem:\n  setStyle(style) { this.style = style; return this; }\n  getStyle() { return this.style; }\n\n  // Apply current style to Canvas `context`\n  applyStyle(context) {\n    const style = this.getStyle();\n    if (style) {\n      if (style.shadowColor) context.setShadowColor(style.shadowColor);\n      if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n      if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    }\n    return this;\n  }\n\n  // Render the stem onto the canvas\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw without a canvas context.\");\n\n    if (this.hide) return;\n\n    const ctx = this.context;\n    let stem_x, stem_y;\n    const stem_direction = this.stem_direction;\n\n    if (stem_direction == Stem.DOWN) {\n      // Down stems are rendered to the left of the head.\n      stem_x = this.x_begin + (Stem.WIDTH / 2);\n      stem_y = this.y_top + 2;\n    } else {\n      // Up stems are rendered to the right of the head.\n      stem_x = this.x_end + (Stem.WIDTH / 2);\n      stem_y = this.y_bottom - 2;\n    }\n\n    stem_y += this.y_extend * stem_direction;\n\n    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n\n    // Draw the stem\n    ctx.save();\n    this.applyStyle(ctx);\n    ctx.beginPath();\n    ctx.setLineWidth(Stem.WIDTH);\n    ctx.moveTo(stem_x, stem_y);\n    ctx.lineTo(stem_x, stem_y - this.getHeight());\n    ctx.stroke();\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\n\nimport { Vex } from './vex';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\n\nexport class Tuplet {\n  static get LOCATION_TOP() {\n    return 1;\n  }\n  static get LOCATION_BOTTOM() {\n    return -1;\n  }\n  static get NESTING_OFFSET() {\n    return 15;\n  }\n\n  constructor(notes, options) {\n    if (!notes || !notes.length) {\n      throw new Vex.RuntimeError('BadArguments', 'No notes provided for tuplet.');\n    }\n\n    if (notes.length == 1) {\n      throw new Vex.RuntimeError('BadArguments', 'Too few notes for tuplet.');\n    }\n\n    this.options = Vex.Merge({}, options);\n    this.notes = notes;\n    this.num_notes = 'num_notes' in this.options ?\n      this.options.num_notes : notes.length;\n\n    // We accept beats_occupied, but warn that it's deprecated:\n    // the preferred property name is now notes_occupied.\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied ||\n      this.options.beats_occupied ||\n      2;\n    if ('bracketed' in this.options) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed =\n        notes.some(note => note.beam === null);\n    }\n\n    this.ratioed = 'ratioed' in this.options ?\n      this.options.ratioed :\n      (Math.abs(this.notes_occupied - this.num_notes) > 1);\n    this.point = 28;\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n    this.location = this.options.location || Tuplet.LOCATION_TOP;\n\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  attach() {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n\n  detach() {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n\n  setContext(context) {\n    this.context = context;\n    return this;\n  }\n\n  /**\n   * Set whether or not the bracket is drawn.\n   */\n  setBracketed(bracketed) {\n    this.bracketed = bracketed ? true : false;\n    return this;\n  }\n\n  /**\n   * Set whether or not the ratio is shown.\n   */\n  setRatioed(ratioed) {\n    this.ratioed = ratioed ? true : false;\n    return this;\n  }\n\n  /**\n   * Set the tuplet to be displayed either on the top or bottom of the stave\n   */\n  setTupletLocation(location) {\n    if (!location) location = Tuplet.LOCATION_TOP;\n    else if (location != Tuplet.LOCATION_TOP &&\n        location != Tuplet.LOCATION_BOTTOM) {\n      throw new Vex.RERR('BadArgument', 'Invalid tuplet location: ' + location);\n    }\n\n    this.location = location;\n    return this;\n  }\n\n  getNotes() {\n    return this.notes;\n  }\n\n  getNoteCount() {\n    return this.num_notes;\n  }\n\n  beatsOccupiedDeprecationWarning() {\n    const msg = 'beats_occupied has been deprecated as an ' +\n        'option for tuplets. Please use notes_occupied ' +\n        'instead. Calls to getBeatsOccupied and ' +\n        'setBeatsOccupied should now be routed to ' +\n        'getNotesOccupied and setNotesOccupied instead.';\n    if (console && console.warn) console.warn(msg);\n    else if (console) console.log(msg);\n  }\n\n  getBeatsOccupied() {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n\n  setBeatsOccupied(beats) {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n\n  getNotesOccupied() {\n    return this.notes_occupied;\n  }\n\n  setNotesOccupied(notes) {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n\n  resolveGlyphs() {\n    this.num_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.num_glyphs.push(new Glyph('v' + (n % 10), this.point));\n      n = parseInt(n / 10, 10);\n    }\n\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.push(new Glyph('v' + (n % 10), this.point));\n      n = parseInt(n / 10, 10);\n    }\n  }\n\n  // determine how many tuplets are nested within this tuplet\n  // on the same side (above/below), to calculate a y\n  // offset for this tuplet:\n  getNestedTupletCount() {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n\n    // Count the tuplets that are on the same side (above/below)\n    // as this tuplet:\n    function countTuplets(note, location) {\n      return note.tupletStack.filter(tuplet => tuplet.location === location).length;\n    }\n\n    this.notes.forEach(note => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = (tupletCount > maxTupletCount) ?\n        tupletCount : maxTupletCount;\n      minTupletCount = (tupletCount < minTupletCount) ?\n        tupletCount : minTupletCount;\n    });\n\n    return maxTupletCount - minTupletCount;\n  }\n\n  // determine the y position of the tuplet:\n  getYPosition() {\n    let i, y_pos;\n\n    // offset the tuplet for any nested tuplets between\n    // it and the notes:\n    const nested_tuplet_y_offset =\n      this.getNestedTupletCount() *\n      Tuplet.NESTING_OFFSET *\n      (-this.location);\n\n    // offset the tuplet for any manual y_offset:\n    const y_offset = this.options.y_offset || 0;\n\n    // now iterate through the notes and find our highest\n    // or lowest locations, to form a base y_pos\n    const first_note = this.notes[0];\n    if (this.location == Tuplet.LOCATION_TOP) {\n      y_pos = first_note.getStave().getYForLine(0) - 15;\n      // y_pos = first_note.getStemExtents().topY - 10;\n\n      for (i = 0; i < this.notes.length; ++i) {\n        const top_y = this.notes[i].getStemDirection() === Stem.UP ?\n            this.notes[i].getStemExtents().topY - 10\n          : this.notes[i].getStemExtents().baseY - 20;\n        if (top_y < y_pos)\n          y_pos = top_y;\n      }\n    }\n    else {\n      y_pos = first_note.getStave().getYForLine(4) + 20;\n\n      for (i = 0; i < this.notes.length; ++i) {\n        const bottom_y = this.notes[i].getStemDirection() === Stem.UP ?\n            this.notes[i].getStemExtents().baseY + 20\n          : this.notes[i].getStemExtents().topY + 10;\n        if (bottom_y > y_pos)\n          y_pos = bottom_y;\n      }\n    }\n\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw without a canvas context.\");\n\n    // determine x value of left bound of tuplet\n    const first_note = this.notes[0];\n    const last_note = this.notes[this.notes.length - 1];\n\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    }\n    else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n\n    // determine y value for tuplet\n    this.y_pos = this.getYPosition();\n\n    // calculate total width of tuplet notation\n    let width = 0;\n    let glyph;\n    for (glyph in this.num_glyphs) {\n      width += this.num_glyphs[glyph].getMetrics().width;\n    }\n    if (this.ratioed) {\n      for (glyph in this.denom_glyphs) {\n        width += this.denom_glyphs[glyph].getMetrics().width;\n      }\n      width += this.point * 0.32;\n    }\n\n    const notation_center_x = this.x_pos + (this.width / 2);\n    const notation_start_x = notation_center_x - (width / 2);\n\n    // draw bracket if the tuplet is not beamed\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n\n      // only draw the bracket if it has positive length\n      if (line_width > 0) {\n        this.context.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        this.context.fillRect(this.x_pos + this.width / 2 + width / 2 + 5,\n                              this.y_pos, line_width, 1);\n        this.context.fillRect(this.x_pos,\n            this.y_pos + (this.location == Tuplet.LOCATION_BOTTOM),\n            1, this.location * 10);\n        this.context.fillRect(this.x_pos + this.width,\n            this.y_pos + (this.location == Tuplet.LOCATION_BOTTOM),\n            1, this.location * 10);\n      }\n    }\n\n    // draw numerator glyphs\n    let x_offset = 0;\n    let size = this.num_glyphs.length;\n    for (glyph in this.num_glyphs) {\n      this.num_glyphs[size - glyph - 1].render(\n          this.context, notation_start_x + x_offset,\n          this.y_pos + (this.point / 3) - 2);\n      x_offset += this.num_glyphs[size - glyph - 1].getMetrics().width;\n    }\n\n    // display colon and denominator if the ratio is to be shown\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      this.context.beginPath();\n      this.context.arc(colon_x, this.y_pos - this.point * 0.08,\n                       colon_radius, 0, Math.PI * 2, true);\n      this.context.closePath();\n      this.context.fill();\n      this.context.beginPath();\n      this.context.arc(colon_x, this.y_pos + this.point * 0.12,\n                       colon_radius, 0, Math.PI * 2, true);\n      this.context.closePath();\n      this.context.fill();\n      x_offset += this.point * 0.32;\n      size = this.denom_glyphs.length;\n      for (glyph in this.denom_glyphs) {\n        this.denom_glyphs[size - glyph - 1].render(\n            this.context, notation_start_x + x_offset,\n            this.y_pos + (this.point / 3) - 2);\n        x_offset += this.denom_glyphs[size - glyph - 1].getMetrics().width;\n      }\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `Beams` that span over a set of `StemmableNotes`.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\nimport { Tuplet } from './tuplet';\nimport { Stem } from './stem';\n\nfunction calculateStemDirection(notes) {\n  let lineSum = 0;\n  notes.forEach(note => {\n    if (note.keyProps) {\n      note.keyProps.forEach(keyProp => {\n        lineSum += (keyProp.line - 3);\n      });\n    }\n  });\n\n  if (lineSum >= 0) {\n    return Stem.DOWN;\n  }\n  return Stem.UP;\n}\n\nexport class Beam {\n  // Gets the default beam groups for a provided time signature.\n  // Attempts to guess if the time signature is not found in table.\n  // Currently this is fairly naive.\n  static getDefaultBeamGroups(time_sig) {\n    if (!time_sig || time_sig === 'c') {\n      time_sig = '4/4';\n    }\n\n    const defaults = {\n      '1/2': ['1/2'],\n      '2/2': ['1/2'],\n      '3/2': ['1/2'],\n      '4/2': ['1/2'],\n\n      '1/4': ['1/4'],\n      '2/4': ['1/4'],\n      '3/4': ['1/4'],\n      '4/4': ['1/4'],\n\n      '1/8': ['1/8'],\n      '2/8': ['2/8'],\n      '3/8': ['3/8'],\n      '4/8': ['2/8'],\n\n      '1/16': ['1/16'],\n      '2/16': ['2/16'],\n      '3/16': ['3/16'],\n      '4/16': ['2/16'],\n    };\n\n    const groups = defaults[time_sig];\n\n    if (!groups) {\n      // If no beam groups found, naively determine\n      // the beam groupings from the time signature\n      const beatTotal = parseInt(time_sig.split('/')[0], 10);\n      const beatValue = parseInt(time_sig.split('/')[1], 10);\n\n      const tripleMeter = beatTotal % 3 === 0;\n\n      if (tripleMeter) {\n        return [new Fraction(3, beatValue)];\n      } else if (beatValue > 4) {\n        return [new Fraction(2, beatValue)];\n      } else if (beatValue <= 4) {\n        return [new Fraction(1, beatValue)];\n      }\n    }\n    return groups.map(group => new Fraction().parse(group));\n  }\n\n  // A helper function to automatically build basic beams for a voice. For more\n  // complex auto-beaming use `Beam.generateBeams()`.\n  //\n  // Parameters:\n  // * `voice` - The voice to generate the beams for\n  // * `stem_direction` - A stem direction to apply to the entire voice\n  // * `groups` - An array of `Fraction` representing beat groupings for the beam\n  static applyAndGetBeams(voice, stem_direction, groups) {\n    return Beam.generateBeams(voice.getTickables(), {\n      groups,\n      stem_direction,\n    });\n  }\n\n  // A helper function to autimatically build beams for a voice with\n  // configuration options.\n  //\n  // Example configuration object:\n  //\n  // ```\n  // config = {\n  //   groups: [new Vex.Flow.Fraction(2, 8)],\n  //   stem_direction: -1,\n  //   beam_rests: true,\n  //   beam_middle_only: true,\n  //   show_stemlets: false\n  // };\n  // ```\n  //\n  // Parameters:\n  // * `notes` - An array of notes to create the beams for\n  // * `config` - The configuration object\n  //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes\n  //    * `stem_direction` - Set to apply the same direction to all notes\n  //    * `beam_rests` - Set to `true` to include rests in the beams\n  //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat\n  //    * `show_stemlets` - Set to `true` to draw stemlets for rests\n  //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions\n  //\n  static generateBeams(notes, config) {\n    if (!config) config = {};\n\n    if (!config.groups || !config.groups.length) {\n      config.groups = [new Fraction(2, 8)];\n    }\n\n    // Convert beam groups to tick amounts\n    const tickGroups = config.groups.map(group => {\n      if (!group.multiply) {\n        throw new Vex.RuntimeError('InvalidBeamGroups',\n          'The beam groups must be an array of Vex.Flow.Fractions');\n      }\n      return group.clone().multiply(Flow.RESOLUTION, 1);\n    });\n\n    const unprocessedNotes = notes;\n    let currentTickGroup = 0;\n    let noteGroups       = [];\n    let currentGroup     = [];\n\n    function getTotalTicks(vf_notes) {\n      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n    }\n\n    function nextTickGroup() {\n      if (tickGroups.length - 1 > currentTickGroup) {\n        currentTickGroup += 1;\n      } else {\n        currentTickGroup = 0;\n      }\n    }\n\n    function createGroups() {\n      let nextGroup = [];\n\n      unprocessedNotes.forEach(unprocessedNote => {\n        nextGroup    = [];\n        if (unprocessedNote.shouldIgnoreTicks()) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          return; // Ignore untickables (like bar notes)\n        }\n\n        currentGroup.push(unprocessedNote);\n        const ticksPerGroup = tickGroups[currentTickGroup].clone();\n        const totalTicks = getTotalTicks(currentGroup);\n\n        // Double the amount of ticks in a group, if it's an unbeamable tuplet\n        const unbeamable = Flow.durationToNumber(unprocessedNote.duration) < 8;\n        if (unbeamable && unprocessedNote.tuplet) {\n          ticksPerGroup.numerator *= 2;\n        }\n\n        // If the note that was just added overflows the group tick total\n        if (totalTicks.greaterThan(ticksPerGroup)) {\n          // If the overflow note can be beamed, start the next group\n          // with it. Unbeamable notes leave the group overflowed.\n          if (!unbeamable) {\n            nextGroup.push(currentGroup.pop());\n          }\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        } else if (totalTicks.equals(ticksPerGroup)) {\n          noteGroups.push(currentGroup);\n          currentGroup = nextGroup;\n          nextTickGroup();\n        }\n      });\n\n      // Adds any remainder notes\n      if (currentGroup.length > 0) {\n        noteGroups.push(currentGroup);\n      }\n    }\n\n    function getBeamGroups() {\n      return noteGroups.filter(group => {\n        if (group.length > 1) {\n          let beamable = true;\n          group.forEach(note => {\n            if (note.getIntrinsicTicks() >= Flow.durationToTicks('4')) {\n              beamable = false;\n            }\n          });\n          return beamable;\n        }\n        return false;\n      });\n    }\n\n    // Splits up groups by Rest\n    function sanitizeGroups() {\n      const sanitizedGroups = [];\n      noteGroups.forEach(group => {\n        let tempGroup = [];\n        group.forEach((note, index, group) => {\n          const isFirstOrLast = index === 0 || index === group.length - 1;\n          const prevNote = group[index - 1];\n\n          const breaksOnEachRest = !config.beam_rests && note.isRest();\n          const breaksOnFirstOrLastRest = (config.beam_rests &&\n            config.beam_middle_only && note.isRest() && isFirstOrLast);\n\n          let breakOnStemChange = false;\n          if (config.maintain_stem_directions && prevNote &&\n              !note.isRest() && !prevNote.isRest()) {\n            const prevDirection = prevNote.getStemDirection();\n            const currentDirection = note.getStemDirection();\n            breakOnStemChange = currentDirection !== prevDirection;\n          }\n\n          const isUnbeamableDuration = parseInt(note.duration, 10) < 8;\n\n          // Determine if the group should be broken at this note\n          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest ||\n                            breakOnStemChange || isUnbeamableDuration;\n\n          if (shouldBreak) {\n            // Add current group\n            if (tempGroup.length > 0) {\n              sanitizedGroups.push(tempGroup);\n            }\n\n            // Start a new group. Include the current note if the group\n            // was broken up by stem direction, as that note needs to start\n            // the next group of notes\n            tempGroup = breakOnStemChange ? [note] : [];\n          } else {\n            // Add note to group\n            tempGroup.push(note);\n          }\n        });\n\n        // If there is a remaining group, add it as well\n        if (tempGroup.length > 0) {\n          sanitizedGroups.push(tempGroup);\n        }\n      });\n\n      noteGroups = sanitizedGroups;\n    }\n\n    function formatStems() {\n      noteGroups.forEach(group => {\n        let stemDirection;\n        if (config.maintain_stem_directions) {\n          const note = findFirstNote(group);\n          stemDirection = note ? note.getStemDirection() : Stem.UP;\n        } else {\n          if (config.stem_direction) {\n            stemDirection = config.stem_direction;\n          } else {\n            stemDirection = calculateStemDirection(group);\n          }\n        }\n        applyStemDirection(group, stemDirection);\n      });\n    }\n\n    function findFirstNote(group) {\n      for (let i = 0; i < group.length; i++) {\n        const note = group[i];\n        if (!note.isRest()) {\n          return note;\n        }\n      }\n\n      return false;\n    }\n\n    function applyStemDirection(group, direction) {\n      group.forEach(note => {\n        note.setStemDirection(direction);\n      });\n    }\n\n    function getTupletGroups() {\n      return noteGroups.filter(group => {\n        if (group[0]) {\n          return group[0].tuplet;\n        }\n        return false;\n      });\n    }\n\n\n    // Using closures to store the variables throughout the various functions\n    // IMO Keeps it this process lot cleaner - but not super consistent with\n    // the rest of the API's style - Silverwolf90 (Cyril)\n    createGroups();\n    sanitizeGroups();\n    formatStems();\n\n    // Get the notes to be beamed\n    const beamedNoteGroups = getBeamGroups();\n\n    // Get the tuplets in order to format them accurately\n    const tupletGroups = getTupletGroups();\n\n    // Create a Vex.Flow.Beam from each group of notes to be beamed\n    const beams = [];\n    beamedNoteGroups.forEach(group => {\n      const beam = new Beam(group);\n\n      if (config.show_stemlets) {\n        beam.render_options.show_stemlets = true;\n      }\n      if (config.secondary_breaks) {\n        beam.render_options.secondary_break_ticks = Flow.durationToTicks(config.secondary_breaks);\n      }\n      if (config.flat_beams === true) {\n        beam.render_options.flat_beams = true;\n        beam.render_options.flat_beam_offset = config.flat_beam_offset;\n      }\n      beams.push(beam);\n    });\n\n    // Reformat tuplets\n    tupletGroups.forEach(group => {\n      let firstNote = group[0];\n      for (let i = 0; i < group.length; ++i) {\n        if (group[i].hasStem()) {\n          firstNote = group[i];\n          break;\n        }\n      }\n\n      const tuplet = firstNote.tuplet;\n\n      if (firstNote.beam) tuplet.setBracketed(false);\n      if (firstNote.stem_direction === Stem.DOWN) {\n        tuplet.setTupletLocation(Tuplet.LOCATION_BOTTOM);\n      }\n    });\n\n    return beams;\n  }\n\n  constructor(notes, auto_stem) {\n    if (!notes || notes === []) {\n      throw new Vex.RuntimeError('BadArguments', 'No notes provided for beam.');\n    }\n\n    if (notes.length === 1) {\n      throw new Vex.RuntimeError('BadArguments', 'Too few notes for beam.');\n    }\n\n    // Validate beam line, direction and ticks.\n    this.ticks = notes[0].getIntrinsicTicks();\n\n    if (this.ticks >= Flow.durationToTicks('4')) {\n      throw new Vex.RuntimeError('BadArguments',\n          'Beams can only be applied to notes shorter than a quarter note.');\n    }\n\n    let i; // shared iterator\n    let note;\n\n    this.stem_direction = Stem.UP;\n\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (note.hasStem()) {\n        this.stem_direction = note.getStemDirection();\n        break;\n      }\n    }\n\n    let stem_direction = this.stem_direction;\n    // Figure out optimal stem direction based on given notes\n    if (auto_stem && notes[0].getCategory() === 'stavenotes')  {\n      stem_direction = calculateStemDirection(notes);\n    } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {\n      // Auto Stem TabNotes\n      const stem_weight = notes.reduce((memo, note) => memo + note.stem_direction, 0);\n\n      stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n    }\n\n    // Apply stem directions and attach beam to notes\n    for (i = 0; i < notes.length; ++i) {\n      note = notes[i];\n      if (auto_stem) {\n        note.setStemDirection(stem_direction);\n        this.stem_direction = stem_direction;\n      }\n      note.setBeam(this);\n    }\n\n    this.postFormatted = false;\n    this.notes = notes;\n    this.beam_count = this.getBeamCount();\n    this.break_on_indices = [];\n    this.render_options = {\n      beam_width: 5,\n      max_slope: 0.25,\n      min_slope: -0.25,\n      slope_iterations: 20,\n      slope_cost: 100,\n      show_stemlets: false,\n      stemlet_extension: 7,\n      partial_beam_length: 10,\n      flat_beams: false,\n      min_flat_beam_offset: 15,\n    };\n  }\n\n  // The the rendering `context`\n  setContext(context) { this.context = context; return this; }\n\n  // Get the notes in this beam\n  getNotes() { return this.notes; }\n\n  // Get the max number of beams in the set of notes\n  getBeamCount() {\n    const beamCounts =  this.notes.map(note => note.getGlyph().beam_count);\n\n    const maxBeamCount =  beamCounts.reduce((max, beamCount) => beamCount > max ? beamCount : max);\n\n    return maxBeamCount;\n  }\n\n  // Set which note `indices` to break the secondary beam at\n  breakSecondaryAt(indices) {\n    this.break_on_indices = indices;\n    return this;\n  }\n\n  // Return the y coordinate for linear function\n  getSlopeY(x, first_x_px, first_y_px, slope) {\n    return first_y_px + ((x - first_x_px) * slope);\n  }\n\n  // Calculate the best possible slope for the provided notes\n  calculateSlope() {\n    const first_note = this.notes[0];\n    const first_y_px = first_note.getStemExtents().topY;\n    const first_x_px = first_note.getStemX();\n\n    const inc = (this.render_options.max_slope - this.render_options.min_slope) /\n        this.render_options.slope_iterations;\n    let min_cost = Number.MAX_VALUE;\n    let best_slope = 0;\n    let y_shift = 0;\n\n    // iterate through slope values to find best weighted fit\n    for (let slope = this.render_options.min_slope;\n         slope <= this.render_options.max_slope;\n         slope += inc) {\n      let total_stem_extension = 0;\n      let y_shift_tmp = 0;\n\n      // iterate through notes, calculating y shift and stem extension\n      for (let i = 1; i < this.notes.length; ++i) {\n        const note = this.notes[i];\n\n        const x_px = note.getStemX();\n        const y_px = note.getStemExtents().topY;\n        const slope_y_px = this.getSlopeY(x_px, first_x_px, first_y_px, slope) + y_shift_tmp;\n\n        // beam needs to be shifted up to accommodate note\n        if (y_px * this.stem_direction < slope_y_px * this.stem_direction) {\n          const diff =  Math.abs(y_px - slope_y_px);\n          y_shift_tmp += diff * -this.stem_direction;\n          total_stem_extension += (diff * i);\n        } else { // beam overshoots note, account for the difference\n          total_stem_extension += (y_px - slope_y_px) * this.stem_direction;\n        }\n      }\n\n      const last_note = this.notes[this.notes.length - 1];\n      const first_last_slope = ((last_note.getStemExtents().topY - first_y_px) /\n              (last_note.getStemX() - first_x_px));\n      // most engraving books suggest aiming for a slope about half the angle of the\n      // difference between the first and last notes' stem length;\n      const ideal_slope = first_last_slope / 2;\n      const distance_from_ideal = Math.abs(ideal_slope - slope);\n\n      // This tries to align most beams to something closer to the ideal_slope, but\n      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n      const cost = this.render_options.slope_cost * distance_from_ideal +\n          Math.abs(total_stem_extension);\n\n      // update state when a more ideal slope is found\n      if (cost < min_cost) {\n        min_cost = cost;\n        best_slope = slope;\n        y_shift = y_shift_tmp;\n      }\n    }\n\n    this.slope = best_slope;\n    this.y_shift = y_shift;\n  }\n\n  // Calculate a slope and y-shift for flat beams\n  calculateFlatSlope() {\n    // If a flat beam offset has not yet been supplied or calculated,\n    // generate one based on the notes in this particular note group\n    let total = 0;\n    let extreme_y = 0;  // Store the highest or lowest note here\n    let extreme_beam_count = 0;  // The beam count of the extreme note\n    let current_extreme = 0;\n    for (let i = 0; i < this.notes.length; i++) {\n      // Total up all of the offsets so we can average them out later\n      const note = this.notes[i];\n      const top_y = note.getStemExtents().topY;\n      total += top_y;\n\n      // Store the highest (stems-up) or lowest (stems-down) note so the\n      //  offset can be adjusted in case the average isn't enough\n      if (this.stem_direction === Stem.DOWN && current_extreme < top_y) {\n        current_extreme = top_y;\n        extreme_y = note.getNoteHeadBounds().y_bottom;\n        extreme_beam_count = note.getBeamCount();\n      } else if (this.stem_direction === Stem.UP &&\n          (current_extreme === 0 || current_extreme > top_y)) {\n        current_extreme = top_y;\n        extreme_y = note.getNoteHeadBounds().y_top;\n        extreme_beam_count = note.getBeamCount();\n      }\n    }\n\n    // Average the offsets to try and come up with a reasonable one that\n    //  works for all of the notes in the beam group.\n    let offset = total / this.notes.length;\n\n    // In case the average isn't long enough, add or subtract some more\n    //  based on the highest or lowest note (again, based on the stem\n    //  direction). This also takes into account the added height due to\n    //  the width of the beams.\n    const beam_width = this.render_options.beam_width * 1.5;\n    const extreme_test = this.render_options.min_flat_beam_offset +\n        (extreme_beam_count * beam_width);\n    const new_offset = extreme_y + (extreme_test * -this.stem_direction);\n    if (this.stem_direction === Stem.DOWN && offset < new_offset) {\n      offset = extreme_y + extreme_test;\n    } else if (this.stem_direction === Stem.UP && offset > new_offset) {\n      offset = extreme_y - extreme_test;\n    }\n    if (!this.render_options.flat_beam_offset) {\n      // Set the offset for the group based on the calculations above.\n      this.render_options.flat_beam_offset = offset;\n    } else if (this.stem_direction === Stem.DOWN && offset > this.render_options.flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    } else if (this.stem_direction === Stem.UP && offset < this.render_options.flat_beam_offset) {\n      this.render_options.flat_beam_offset = offset;\n    }\n\n    // for flat beams, the slope and y_shift are simply 0\n    this.slope = 0;\n    this.y_shift = 0;\n  }\n\n  // Create new stems for the notes in the beam, so that each stem\n  // extends into the beams.\n  applyStemExtensions() {\n    const first_note = this.notes[0];\n    let first_y_px = first_note.getStemExtents().topY;\n\n    // If rendering flat beams, and an offset exists, set the y-coordinate to\n    //  the offset so the stems all end at the beam offset.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n      first_y_px = this.render_options.flat_beam_offset;\n    }\n    const first_x_px = first_note.getStemX();\n\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      const x_px = note.getStemX();\n      const y_extents = note.getStemExtents();\n      let base_y_px = y_extents.baseY;\n      let top_y_px = y_extents.topY;\n\n      // If flat beams, set the top of the stem to the offset, rather than\n      //  relying on the topY value from above.\n      if (this.render_options.flat_beams) {\n        top_y_px = first_y_px;\n      }\n\n      // For harmonic note heads, shorten stem length by 3 pixels\n      base_y_px += this.stem_direction * note.glyph.stem_offset;\n\n      // Don't go all the way to the top (for thicker stems)\n      const y_displacement = Flow.STEM_WIDTH;\n\n      if (!note.hasStem()) {\n        if (note.isRest() && this.render_options.show_stemlets) {\n          const centerGlyphX = note.getCenterGlyphX();\n\n          const width = this.render_options.beam_width;\n          const total_width = ((this.beam_count - 1) * width * 1.5) + width;\n\n          const stemlet_height = (total_width - y_displacement +\n            this.render_options.stemlet_extension);\n\n          const beam_y = this.getSlopeY(centerGlyphX, first_x_px,\n                          first_y_px, this.slope) + this.y_shift;\n          const start_y = beam_y + (Stem.HEIGHT * this.stem_direction);\n          const end_y = beam_y + (stemlet_height * this.stem_direction);\n\n          // Draw Stemlet\n          note.setStem(new Stem({\n            x_begin: centerGlyphX,\n            x_end: centerGlyphX,\n            y_bottom: this.stem_direction === Stem.UP ? end_y : start_y,\n            y_top: this.stem_direction === Stem.UP ? start_y : end_y,\n            y_extend: y_displacement,\n            stem_extension: -1, // To avoid protruding through the beam\n            stem_direction: this.stem_direction,\n          }));\n        }\n\n        continue;\n      }\n\n      const slope_y = this.getSlopeY(x_px, first_x_px, first_y_px,\n                      this.slope) + this.y_shift;\n\n      note.setStem(new Stem({\n        x_begin: x_px - (Flow.STEM_WIDTH / 2),\n        x_end: x_px,\n        y_top: this.stem_direction === Stem.UP ? top_y_px : base_y_px,\n        y_bottom: this.stem_direction === Stem.UP ? base_y_px :  top_y_px,\n        y_extend: y_displacement,\n        stem_extension: Math.abs(top_y_px - slope_y) - Stem.HEIGHT - 1,\n        stem_direction: this.stem_direction,\n      }));\n    }\n  }\n\n  // Get the x coordinates for the beam lines of specific `duration`\n  getBeamLines(duration) {\n    const beam_lines = [];\n    let beam_started = false;\n    let current_beam = null;\n    const partial_beam_length = this.render_options.partial_beam_length;\n    let previous_should_break = false;\n    let tick_tally = 0;\n    for (let i = 0; i < this.notes.length; ++i) {\n      const note = this.notes[i];\n\n      // See if we need to break secondary beams on this note.\n      const ticks = note.getIntrinsicTicks();\n      tick_tally += ticks;\n      let should_break = false;\n\n      // 8th note beams are always drawn.\n      if (parseInt(duration, 10) >= 8) {\n        // First, check to see if any indices were set up through breakSecondaryAt()\n        should_break = this.break_on_indices.indexOf(i) !== -1;\n\n        // If the secondary breaks were auto-configured in the render options,\n        //  handle that as well.\n        if (this.render_options.secondary_break_ticks && tick_tally >=\n            this.render_options.secondary_break_ticks) {\n          tick_tally = 0;\n          should_break = true;\n        }\n      }\n      const note_gets_beam = ticks < Flow.durationToTicks(duration);\n      const stem_x = note.isRest() ? note.getCenterGlyphX() : note.getStemX();\n\n      // Check to see if the next note in the group will get a beam at this\n      //  level. This will help to inform the partial beam logic below.\n      const next_note = this.notes[i + 1];\n      const beam_next = next_note && next_note.getIntrinsicTicks() < Flow.durationToTicks(duration);\n      if (note_gets_beam) {\n        // This note gets a beam at the current level\n        if (beam_started) {\n          // We're currently in the middle of a beam. Just continue it on to\n          //  the stem X of the current note.\n          current_beam = beam_lines[beam_lines.length - 1];\n          current_beam.end = stem_x;\n\n          // If a secondary beam break is set up, end the beam right now.\n          if (should_break) {\n            beam_started = false;\n            if (next_note && !beam_next && current_beam.end === null) {\n              // This note gets a beam,.but the next one does not. This means\n              //  we need a partial pointing right.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          }\n        } else {\n          // No beam started yet. Start a new one.\n          current_beam = { start: stem_x, end: null };\n          beam_started = true;\n          if (!beam_next) {\n            // The next note doesn't get a beam. Draw a partial.\n            if ((previous_should_break || i === 0) && next_note) {\n              // This is the first note (but not the last one), or it is\n              //  following a secondary break. Draw a partial to the right.\n              current_beam.end = current_beam.start + partial_beam_length;\n            } else {\n              // By default, draw a partial to the left.\n              current_beam.end = current_beam.start - partial_beam_length;\n            }\n          } else if (should_break) {\n            // This note should have a secondary break after it. Even though\n            //  we just started a beam, it needs to end immediately.\n            current_beam.end = current_beam.start - partial_beam_length;\n            beam_started = false;\n          }\n          beam_lines.push(current_beam);\n        }\n      } else {\n        // The current note does not get a beam.\n        beam_started = false;\n      }\n\n      // Store the secondary break flag to inform the partial beam logic in\n      //  the next iteration of the loop.\n      previous_should_break = should_break;\n    }\n\n    // Add a partial beam pointing left if this is the last note in the group\n    const last_beam = beam_lines[beam_lines.length - 1];\n    if (last_beam && last_beam.end === null) {\n      last_beam.end = last_beam.start - partial_beam_length;\n    }\n    return beam_lines;\n  }\n\n  // Render the stems for each notes\n  drawStems() {\n    this.notes.forEach(note => {\n      if (note.getStem()) {\n        note.getStem().setContext(this.context).draw();\n      }\n    }, this);\n  }\n\n  // Render the beam lines\n  drawBeamLines() {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const valid_beam_durations = ['4', '8', '16', '32', '64'];\n\n    const first_note = this.notes[0];\n    const last_note = this.notes[this.notes.length - 1];\n\n    let first_y_px = first_note.getStemExtents().topY;\n    let last_y_px = last_note.getStemExtents().topY;\n\n    // For flat beams, set the first and last Y to the offset, rather than\n    //  using the note's stem extents.\n    if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n      first_y_px = this.render_options.flat_beam_offset;\n      last_y_px = this.render_options.flat_beam_offset;\n    }\n\n    const first_x_px = first_note.getStemX();\n\n    const beam_width = this.render_options.beam_width * this.stem_direction;\n\n    // Draw the beams.\n    for (let i = 0; i < valid_beam_durations.length; ++i) {\n      const duration = valid_beam_durations[i];\n      const beam_lines = this.getBeamLines(duration);\n\n      for (let j = 0; j < beam_lines.length; ++j) {\n        const beam_line = beam_lines[j];\n        const first_x = beam_line.start -\n          (this.stem_direction === Stem.DOWN ? Flow.STEM_WIDTH / 2 : 0);\n        const first_y = this.getSlopeY(first_x, first_x_px, first_y_px, this.slope);\n\n        const last_x = beam_line.end +\n          (this.stem_direction === 1 ? (Flow.STEM_WIDTH / 3) : (-Flow.STEM_WIDTH / 3));\n        const last_y = this.getSlopeY(last_x, first_x_px, first_y_px, this.slope);\n\n        this.context.beginPath();\n        this.context.moveTo(first_x, first_y + this.y_shift);\n        this.context.lineTo(first_x, first_y + beam_width + this.y_shift);\n        this.context.lineTo(last_x + 1, last_y + beam_width + this.y_shift);\n        this.context.lineTo(last_x + 1, last_y + this.y_shift);\n        this.context.closePath();\n        this.context.fill();\n      }\n\n      first_y_px += beam_width * 1.5;\n      last_y_px += beam_width * 1.5;\n    }\n  }\n\n  // Pre-format the beam\n  preFormat() { return this; }\n\n  // Post-format the beam. This can only be called after\n  // the notes in the beam have both `x` and `y` values. ie: they've\n  // been formatted and have staves\n  postFormat() {\n    if (this.postFormatted) return;\n\n    // Calculate a smart slope if we're not forcing the beams to be flat.\n    if (this.render_options.flat_beams) {\n      this.calculateFlatSlope();\n    } else {\n      this.calculateSlope();\n    }\n    this.applyStemExtensions();\n\n    this.postFormatted = true;\n  }\n\n  // Render the beam to the canvas context\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (this.unbeamable) return;\n\n    if (!this.postFormatted) {\n      this.postFormat();\n    }\n\n    this.drawStems();\n    this.drawBeamLines();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Glyph } from './glyph';\n\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n  if (\n    type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n    type !== StaveConnector.type.BOLD_DOUBLE_RIGHT\n  ) {\n    throw new Vex.RERR(\n      'InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.'\n    );\n  }\n\n  let x_shift = 3;\n  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n  const thickLineOffset = 2; // For aesthetics\n\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5; // Flips the side of the thin line\n    variableWidth = 3;\n  }\n\n  // Thin line\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  // Thick line\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n\nexport class StaveConnector {\n  // SINGLE_LEFT and SINGLE are the same value for compatibility\n  // with older versions of vexflow which didn't have right sided\n  // stave connectors\n  static get type() {\n    return {\n      SINGLE_RIGHT: 0,\n      SINGLE_LEFT: 1,\n      SINGLE: 1,\n      DOUBLE: 2,\n      BRACE: 3,\n      BRACKET: 4,\n      BOLD_DOUBLE_LEFT: 5,\n      BOLD_DOUBLE_RIGHT: 6,\n      THIN_DOUBLE: 7,\n      NONE: 8,\n    };\n  }\n\n  constructor(top_stave, bottom_stave) {\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n    // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n    // 2. Offset BRACE type not to overlap with another StaveConnector\n    this.x_shift = 0;\n    this.texts = [];\n  }\n\n  setContext(ctx) {\n    this.ctx = ctx;\n    return this;\n  }\n\n  setType(type) {\n    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n      this.type = type;\n    }\n    return this;\n  }\n\n  setText(text, options) {\n    this.texts.push({\n      content: text,\n      options: Vex.Merge({ shift_x: 0, shift_y: 0 }, options),\n    });\n    return this;\n  }\n\n  setFont(font) {\n    Vex.Merge(this.font, font);\n  }\n\n  setXShift(x_shift) {\n    if (typeof x_shift !== 'number') {\n      throw Vex.RERR('InvalidType', 'x_shift must be a Number');\n    }\n\n    this.x_shift = x_shift;\n    return this;\n  }\n\n  draw() {\n    if (!this.ctx) {\n      throw new Vex.RERR('NoContext', \"Can't draw without a context.\");\n    }\n\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) +\n      this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n\n    const isRightSidedConnector = (\n      this.type === StaveConnector.type.SINGLE_RIGHT ||\n      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n      this.type === StaveConnector.type.THIN_DOUBLE\n    );\n\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.width;\n    }\n\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= (this.width + 2);\n        break;\n      case StaveConnector.type.BRACE: {\n        width = 12;\n        // May need additional code to draw brace\n        const x1 = this.top_stave.getX() - 2 + this.x_shift;\n        const y1 = topY;\n        const x3 = x1;\n        const y3 = botY;\n        const x2 = x1 - width;\n        const y2 = y1 + attachment_height / 2.0;\n        const cpx1 = x2 - (0.90 * width);\n        const cpy1 = y1 + (0.2 * attachment_height);\n        const cpx2 = x1 + (1.10 * width);\n        const cpy2 = y2 - (0.135 * attachment_height);\n        const cpx3 = cpx2;\n        const cpy3 = y2 + (0.135 * attachment_height);\n        const cpx4 = cpx1;\n        const cpy4 = y3 - (0.2 * attachment_height);\n        const cpx5 = x2 - width;\n        const cpy5 = cpy4;\n        const cpx6 = x1 + (0.40 * width);\n        const cpy6 = y2 + (0.135 * attachment_height);\n        const cpx7 = cpx6;\n        const cpy7 = y2 - (0.135 * attachment_height);\n        const cpx8 = cpx5;\n        const cpy8 = cpy1;\n        this.ctx.beginPath();\n        this.ctx.moveTo(x1, y1);\n        this.ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n        this.ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n        this.ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n        this.ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n        this.ctx.fill();\n        this.ctx.stroke();\n        break;\n      } case StaveConnector.type.BRACKET:\n        topY -= 4;\n        botY += 4;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(this.ctx, topX - 5, topY - 3, 40, 'v1b', true);\n        Glyph.renderGlyph(this.ctx, topX - 5, botY + 3, 40, 'v10', true);\n        topX -= (this.width + 2);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(this.ctx, this.type, topX + this.x_shift, topY, botY);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(this.ctx, this.type, topX, topY, botY);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new Vex.RERR(\n          'InvalidType', `The provided StaveConnector.type (${this.type}) is invalid`\n        );\n    }\n\n    if (\n      this.type !== StaveConnector.type.BRACE &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n      this.type !== StaveConnector.type.NONE\n    ) {\n      this.ctx.fillRect(topX, topY, width, attachment_height);\n    }\n\n    // If the connector is a thin double barline, draw the paralell line\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      this.ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n\n    this.ctx.save();\n    this.ctx.lineWidth = 2;\n    this.ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    // Add stave connector text\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = this.ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 +\n        text.options.shift_y;\n\n      this.ctx.fillText('' + text.content, x, y + 4);\n    }\n    this.ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// The tickable interface. Tickables are things that sit on a score and\n// have a duration, i.e., they occupy space in the musical rendering dimension.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\n\nexport class Tickable {\n  constructor() {\n    this.intrinsicTicks = 0;\n    this.tickMultiplier = new Fraction(1, 1);\n    this.ticks = new Fraction(0, 1);\n    this.width = 0;\n    this.x_shift = 0; // Shift from tick context\n    this.voice = null;\n    this.tickContext = null;\n    this.modifierContext = null;\n    this.modifiers = [];\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.tuplet = null;\n    this.tupletStack = [];\n\n    // For interactivity\n    this.id = null;\n    this.elem = null;\n\n    this.align_center = false;\n    this.center_x_shift = 0; // Shift from tick context if center aligned\n\n    // This flag tells the formatter to ignore this tickable during\n    // formatting and justification. It is set by tickables such as BarNote.\n    this.ignore_ticks = false;\n    this.context = null;\n  }\n  setContext(context) { this.context = context; }\n\n  // Set the DOM ID of the element. Must be called before draw(). TODO: Update\n  // ID of element if has already been rendered.\n  setId(id) { this.id = id; }\n  getId() { return this.id; }\n  getElem() { return this.elem; }\n  getBoundingBox() { return null; }\n  getTicks() { return this.ticks; }\n  shouldIgnoreTicks() { return this.ignore_ticks; }\n  getWidth() { return this.width; }\n  setXShift(x) { this.x_shift = x; }\n  getCenterXShift() {\n    if (this.isCenterAligned()) {\n      return this.center_x_shift;\n    }\n\n    return 0;\n  }\n  isCenterAligned() { return this.align_center; }\n  setCenterAlignment(align_center) {\n    this.align_center = align_center;\n    return this;\n  }\n\n  // Every tickable must be associated with a voice. This allows formatters\n  // and preFormatter to associate them with the right modifierContexts.\n  getVoice() {\n    if (!this.voice) throw new Vex.RERR('NoVoice', 'Tickable has no voice.');\n    return this.voice;\n  }\n  setVoice(voice) { this.voice = voice; }\n  getTuplet() { return this.tuplet; }\n\n  /*\n   * resetTuplet\n   * @param tuplet -- the specific tuplet to reset\n   *   if this is not provided, all tuplets are reset.\n   * @returns this\n   *\n   * Removes any prior tuplets from the tick calculation and\n   * resets the intrinsic tick value to\n   */\n  resetTuplet(tuplet) {\n    let noteCount, notesOccupied;\n    if (tuplet) {\n      const i = this.tupletStack.indexOf(tuplet);\n      if (i !== -1) {\n        this.tupletStack.splice(i, 1);\n        noteCount = tuplet.getNoteCount();\n        notesOccupied = tuplet.getNotesOccupied();\n\n        // Revert old multiplier by inverting numerator & denom.:\n        this.applyTickMultiplier(noteCount, notesOccupied);\n      }\n      return this;\n    }\n\n    while (this.tupletStack.length) {\n      tuplet = this.tupletStack.pop();\n      noteCount = tuplet.getNoteCount();\n      notesOccupied = tuplet.getNotesOccupied();\n\n      // Revert old multiplier by inverting numerator & denom.:\n      this.applyTickMultiplier(noteCount, notesOccupied);\n    }\n    return this;\n  }\n  setTuplet(tuplet) {\n    // Attach to new tuplet\n\n    if (tuplet) {\n      this.tupletStack.push(tuplet);\n\n      const noteCount = tuplet.getNoteCount();\n      const notesOccupied = tuplet.getNotesOccupied();\n\n      this.applyTickMultiplier(notesOccupied, noteCount);\n    }\n\n    this.tuplet = tuplet;\n\n    return this;\n  }\n\n  /** optional, if tickable has modifiers **/\n  addToModifierContext(mc) {\n    this.modifierContext = mc;\n    // Add modifiers to modifier context (if any)\n    this.preFormatted = false;\n  }\n\n  /** optional, if tickable has modifiers **/\n  addModifier(mod) {\n    this.modifiers.push(mod);\n    this.preFormatted = false;\n    return this;\n  }\n  setTickContext(tc) {\n    this.tickContext = tc;\n    this.preFormatted = false;\n  }\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.width = 0;\n    if (this.modifierContext) {\n      this.modifierContext.preFormat();\n      this.width += this.modifierContext.getWidth();\n    }\n  }\n  postFormat() {\n    if (this.postFormatted) return;\n    this.postFormatted = true;\n    return this;\n  }\n  getIntrinsicTicks() {\n    return this.intrinsicTicks;\n  }\n  setIntrinsicTicks(intrinsicTicks) {\n    this.intrinsicTicks = intrinsicTicks;\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n  getTickMultiplier() {\n    return this.tickMultiplier;\n  }\n  applyTickMultiplier(numerator, denominator) {\n    this.tickMultiplier.multiply(numerator, denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n  }\n  setDuration(duration) {\n    const ticks = duration.numerator * (Flow.RESOLUTION / duration.denominator);\n    this.ticks = this.tickMultiplier.clone().multiply(ticks);\n    this.intrinsicTicks = this.ticks.value();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements an abstract interface for notes and chords that\n// are rendered on a stave. Notes have some common properties: All of them\n// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n//\n// Some notes have stems, heads, dots, etc. Most notational elements that\n// surround a note are called *modifiers*, and every note has an associated\n// array of them. All notes also have a rendering context and belong to a stave.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Tickable } from './tickable';\n\nexport class Note extends Tickable {\n  static get CATEGORY() { return 'note'; }\n\n  // Debug helper. Displays various note metrics for the given\n  // note.\n  static plotMetrics(ctx, note, yPos) {\n    const metrics = note.getMetrics();\n    const w = metrics.width;\n    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;\n    const xPre1 = note.getAbsoluteX() - metrics.extraLeftPx;\n    const xAbs = note.getAbsoluteX();\n    const xPost1 = note.getAbsoluteX() + metrics.noteWidth;\n    const xPost2 = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx;\n    const xEnd = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx + metrics.modRightPx;\n\n    const xWidth = xEnd - xStart;\n    ctx.save();\n    ctx.setFont('Arial', 8, '');\n    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n\n    const y = (yPos + 7);\n    function stroke(x1, x2, color) {\n      ctx.beginPath();\n      ctx.setStrokeStyle(color);\n      ctx.setFillStyle(color);\n      ctx.setLineWidth(3);\n      ctx.moveTo(x1 + note.getXShift(), y);\n      ctx.lineTo(x2 + note.getXShift(), y);\n      ctx.stroke();\n    }\n\n    stroke(xStart, xPre1, 'red');\n    stroke(xPre1, xAbs, '#999');\n    stroke(xAbs, xPost1, 'green');\n    stroke(xPost1, xPost2, '#999');\n    stroke(xPost2, xEnd, 'red');\n    stroke(xStart - note.getXShift(), xStart, '#DDD'); // Shift\n    Vex.drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n    ctx.restore();\n  }\n\n  // Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n  // positioning and layout.\n  // To create a new note you need to provide a `note_struct`, which consists\n  // of the following fields:\n  //\n  // `type`: The note type (e.g., `r` for rest, `s` for slash notes, etc.)\n  // `dots`: The number of dots, which affects the duration.\n  // `duration`: The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.)\n  //\n  // The range of values for these parameters are available in `src/tables.js`.\n  constructor(note_struct) {\n    super();\n\n    if (!note_struct) {\n      throw new Vex.RuntimeError('BadArguments',\n          'Note must have valid initialization data to identify ' +\n          'duration and type.');\n    }\n\n    // Parse `note_struct` and get note properties.\n    const initData = Flow.parseNoteData(note_struct);\n    if (!initData) {\n      throw new Vex.RuntimeError('BadArguments',\n          'Invalid note initialization object: ' + JSON.stringify(note_struct));\n    }\n\n    // Set note properties from parameters.\n    this.duration = initData.duration;\n    this.dots = initData.dots;\n    this.noteType = initData.type;\n\n    if (note_struct.duration_override) {\n      // Custom duration\n      this.setDuration(note_struct.duration_override);\n    } else {\n      // Default duration\n      this.setIntrinsicTicks(initData.ticks);\n    }\n\n    this.modifiers = [];\n\n    // Get the glyph code for this note from the font.\n    this.glyph = Flow.durationToGlyph(this.duration, this.noteType);\n\n    if (this.positions &&\n        (typeof(this.positions) != 'object' || !this.positions.length)) {\n      throw new Vex.RuntimeError(\n        'BadArguments', 'Note keys must be array type.');\n    }\n\n    // Note to play for audio players.\n    this.playNote = null;\n\n    // Positioning contexts used by the Formatter.\n    this.tickContext = null;    // The current tick context.\n    this.modifierContext = null;\n    this.ignore_ticks = false;\n\n    // Positioning variables\n    this.width = 0;             // Width in pixels calculated after preFormat\n    this.extraLeftPx = 0;       // Extra room on left for offset note head\n    this.extraRightPx = 0;      // Extra room on right for offset note head\n    this.x_shift = 0;           // X shift from tick context X\n    this.left_modPx = 0;        // Max width of left modifiers\n    this.right_modPx = 0;       // Max width of right modifiers\n    this.voice = null;          // The voice that this note is in\n    this.preFormatted = false;  // Is this note preFormatted?\n    this.ys = [];               // list of y coordinates for each note\n                                // we need to hold on to these for ties and beams.\n\n    if (note_struct.align_center) {\n      this.setCenterAlignment(note_struct.align_center);\n    }\n\n    // The render surface.\n    this.context = null;\n    this.stave = null;\n    this.render_options = {\n      annotation_spacing: 5,\n      stave_padding: 12,\n    };\n  }\n\n  // Get and set the play note, which is arbitrary data that can be used by an\n  // audio player.\n  getPlayNote() { return this.playNote; }\n  setPlayNote(note) { this.playNote = note; return this; }\n\n  // Don't play notes by default, call them rests. This is also used by things like\n  // beams and dots for positioning.\n  isRest() { return false; }\n\n  // TODO(0xfe): Why is this method here?\n  addStroke(index, stroke) {\n    stroke.setNote(this);\n    stroke.setIndex(index);\n    this.modifiers.push(stroke);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Get and set the target stave.\n  getStave() { return this.stave; }\n  setStave(stave) {\n    this.stave = stave;\n    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n    this.context = this.stave.context;\n    return this;\n  }\n\n  // `Note` is not really a modifier, but is used in\n  // a `ModifierContext`.\n  getCategory() { return Note.CATEGORY; }\n\n  // Set the rendering context for the note.\n  setContext(context) { this.context = context; return this; }\n\n  // Get and set spacing to the left and right of the notes.\n  getExtraLeftPx() { return this.extraLeftPx; }\n  getExtraRightPx() { return this.extraRightPx; }\n  setExtraLeftPx(x) { this.extraLeftPx = x; return this; }\n  setExtraRightPx(x) { this.extraRightPx = x; return this; }\n\n  // Returns true if this note has no duration (e.g., bar notes, spacers, etc.)\n  shouldIgnoreTicks() { return this.ignore_ticks; }\n\n  // Get the stave line number for the note.\n  getLineNumber() { return 0; }\n\n  // Get the stave line number for rest.\n  getLineForRest() { return 0; }\n\n  // Get the glyph associated with this note.\n  getGlyph() { return this.glyph; }\n\n  // Set and get Y positions for this note. Each Y value is associated with\n  // an individual pitch/key within the note/chord.\n  setYs(ys) { this.ys = ys; return this; }\n  getYs() {\n    if (this.ys.length === 0) throw new Vex.RERR('NoYValues',\n        'No Y-values calculated for this note.');\n    return this.ys;\n  }\n\n  // Get the Y position of the space above the stave onto which text can\n  // be rendered.\n  getYForTopText(text_line) {\n    if (!this.stave) throw new Vex.RERR('NoStave',\n        'No stave attached to this note.');\n    return this.stave.getYForTopText(text_line);\n  }\n\n  // Get a `BoundingBox` for this note.\n  getBoundingBox() { return null; }\n\n  // Returns the voice that this note belongs in.\n  getVoice() {\n    if (!this.voice) throw new Vex.RERR('NoVoice', 'Note has no voice.');\n    return this.voice;\n  }\n\n  // Attach this note to `voice`.\n  setVoice(voice) {\n    this.voice = voice;\n    this.preFormatted = false;\n    return this;\n  }\n\n  // Get and set the `TickContext` for this note.\n  getTickContext() { return this.tickContext; }\n  setTickContext(tc) {\n    this.tickContext = tc;\n    this.preFormatted = false;\n    return this;\n  }\n\n  // Accessors for the note type.\n  getDuration() { return this.duration; }\n  isDotted() { return (this.dots > 0); }\n  hasStem() { return false; }\n  getDots() { return this.dots; }\n  getNoteType() { return this.noteType; }\n  setBeam() { return this; } // ignore parameters\n\n  // Attach this note to a modifier context.\n  setModifierContext(mc) { this.modifierContext = mc; return this; }\n\n  // Attach a modifier to this note.\n  addModifier(modifier, index = 0) {\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Get the coordinates for where modifiers begin.\n  getModifierStartXY() {\n    if (!this.preFormatted) throw new Vex.RERR('UnformattedNote',\n        \"Can't call GetModifierStartXY on an unformatted note\");\n    return { x: this.getAbsoluteX(), y: this.ys[0] };\n  }\n\n  // Get bounds and metrics for this note.\n  //\n  // Returns a struct with fields:\n  // `width`: The total width of the note (including modifiers.)\n  // `noteWidth`: The width of the note head only.\n  // `left_shift`: The horizontal displacement of the note.\n  // `modLeftPx`: Start `X` for left modifiers.\n  // `modRightPx`: Start `X` for right modifiers.\n  // `extraLeftPx`: Extra space on left of note.\n  // `extraRightPx`: Extra space on right of note.\n  getMetrics() {\n    if (!this.preFormatted) throw new Vex.RERR('UnformattedNote',\n        \"Can't call getMetrics on an unformatted note.\");\n    let modLeftPx = 0;\n    let modRightPx = 0;\n    if (this.modifierContext != null) {\n      modLeftPx = this.modifierContext.state.left_shift;\n      modRightPx = this.modifierContext.state.right_shift;\n    }\n\n    const width = this.getWidth();\n    return { width,\n             noteWidth: width -\n                        modLeftPx - modRightPx -\n                        this.extraLeftPx - this.extraRightPx,\n             left_shift: this.x_shift, // TODO(0xfe): Make style consistent\n\n\n             // Modifiers, accidentals etc.\n             modLeftPx,\n             modRightPx,\n\n             // Displaced note head on left or right.\n             extraLeftPx: this.extraLeftPx,\n             extraRightPx: this.extraRightPx };\n  }\n\n  // Get and set width of note. Used by the formatter for positioning.\n  setWidth(width) { this.width = width; }\n  getWidth() {\n    if (!this.preFormatted) throw new Vex.RERR('UnformattedNote',\n        \"Can't call GetWidth on an unformatted note.\");\n    return this.width +\n      (this.modifierContext ?  this.modifierContext.getWidth() : 0);\n  }\n\n  // Displace note by `x` pixels. Used by the formatter.\n  setXShift(x) { this.x_shift = x; return this; }\n  getXShift() { return this.x_shift; }\n\n  // Get `X` position of this tick context.\n  getX() {\n    if (!this.tickContext) throw new Vex.RERR('NoTickContext',\n        'Note needs a TickContext assigned for an X-Value');\n    return this.tickContext.getX() + this.x_shift;\n  }\n\n  // Get the absolute `X` position of this note's tick context. This\n  // excludes x_shift, so you'll need to factor it in if you're\n  // looking for the post-formatted x-position.\n  getAbsoluteX() {\n    if (!this.tickContext) throw new Vex.RERR('NoTickContext',\n        'Note needs a TickContext assigned for an X-Value');\n\n    // Position note to left edge of tick context.\n    let x = this.tickContext.getX();\n    if (this.stave) {\n      x += this.stave.getNoteStartX() + this.render_options.stave_padding;\n    }\n\n    if (this.isCenterAligned()) {\n      x += this.getCenterXShift();\n    }\n\n    return x;\n  }\n  setPreFormatted(value) {\n    this.preFormatted = value;\n\n    // Maintain the width of left and right modifiers in pixels.\n    if (this.preFormatted) {\n      const extra = this.tickContext.getExtraPx();\n      this.left_modPx = Math.max(this.left_modPx, extra.left);\n      this.right_modPx = Math.max(this.right_modPx, extra.right);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated\n// directly, but used internally in `StaveNote`.\n//\n// See `tests/notehead_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Note } from './note';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.\nfunction L() { if (NoteHead.DEBUG) Vex.L('Vex.Flow.NoteHead', arguments); }\n\n// Draw slashnote head manually. No glyph exists for this.\n//\n// Parameters:\n// * `ctx`: the Canvas context\n// * `duration`: the duration of the note. ex: \"4\"\n// * `x`: the x coordinate to draw at\n// * `y`: the y coordinate to draw at\n// * `stem_direction`: the direction of the stem\nfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction) {\n  const width = 15 + (Flow.STEM_WIDTH / 2);\n  ctx.save();\n  ctx.setLineWidth(Flow.STEM_WIDTH);\n\n  let fill = false;\n\n  if (Flow.durationToNumber(duration) > 2) {\n    fill = true;\n  }\n\n  if (!fill) x -= (Flow.STEM_WIDTH / 2) * stem_direction;\n\n  ctx.beginPath();\n  ctx.moveTo(x, y + 11);\n  ctx.lineTo(x, y + 1);\n  ctx.lineTo(x + width, y - 10);\n  ctx.lineTo(x + width, y);\n  ctx.lineTo(x, y + 11);\n  ctx.closePath();\n\n  if (fill) {\n    ctx.fill();\n  } else {\n    ctx.stroke();\n  }\n\n  if (Flow.durationToFraction(duration).equals(0.5)) {\n    const breve_lines = [-3, -1, width + 1, width + 3];\n    for (let i = 0; i < breve_lines.length; i++) {\n      ctx.beginPath();\n      ctx.moveTo(x + breve_lines[i], y - 10);\n      ctx.lineTo(x + breve_lines[i], y + 11);\n      ctx.stroke();\n    }\n  }\n\n  ctx.restore();\n}\n\nexport class NoteHead extends Note {\n  static get CATEGORY() { return 'notehead'; }\n\n  constructor(head_options) {\n    super(head_options);\n    this.index = head_options.index;\n    this.x = head_options.x || 0;\n    this.y = head_options.y || 0;\n    this.note_type = head_options.note_type;\n    this.duration = head_options.duration;\n    this.displaced = head_options.displaced || false;\n    this.stem_direction = head_options.stem_direction || StaveNote.STEM_UP;\n    this.line = head_options.line;\n\n    // Get glyph code based on duration and note type. This could be\n    // regular notes, rests, or other custom codes.\n    this.glyph = Flow.durationToGlyph(this.duration, this.note_type);\n    if (!this.glyph) {\n      throw new Vex.RuntimeError('BadArguments',\n          \"No glyph found for duration '\" + this.duration +\n          \"' and type '\" + this.note_type + \"'\");\n    }\n\n    this.glyph_code = this.glyph.code_head;\n    this.x_shift = head_options.x_shift;\n    if (head_options.custom_glyph_code) {\n      this.custom_glyph = true;\n      this.glyph_code = head_options.custom_glyph_code;\n    }\n\n    this.context = null;\n    this.style = head_options.style;\n    this.slashed = head_options.slashed;\n\n    Vex.Merge(this.render_options, {\n      glyph_font_scale: 35, // font size for note heads\n      stroke_px: 3,         // number of stroke px to the left and right of head\n    });\n\n    if (head_options.glyph_font_scale) {\n      this.render_options.glyph_font_scale = head_options.glyph_font_scale;\n    }\n\n    this.setWidth(this.glyph.head_width);\n  }\n\n  getCategory() { return NoteHead.CATEGORY; }\n\n  // Set the Cavnas context for drawing\n  setContext(context) { this.context = context; return this; }\n\n  // Get the width of the notehead\n  getWidth() { return this.width; }\n\n  // Determine if the notehead is displaced\n  isDisplaced() { return this.displaced === true; }\n\n  // Get/set the notehead's style\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  getStyle() { return this.style; }\n  setStyle(style) { this.style = style; return this; }\n\n  // Get the glyph data\n  getGlyph() { return this.glyph; }\n\n  // Set the X coordinate\n  setX(x) { this.x = x; return this; }\n\n  // get/set the Y coordinate\n  getY() { return this.y; }\n  setY(y) { this.y = y;  return this; }\n\n  // Get/set the stave line the notehead is placed on\n  getLine() { return this.line; }\n  setLine(line) { this.line = line; return this; }\n\n  // Get the canvas `x` coordinate position of the notehead.\n  getAbsoluteX() {\n    // If the note has not been preformatted, then get the static x value\n    // Otherwise, it's been formatted and we should use it's x value relative\n    // to its tick context\n    const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n\n    return x + (this.displaced ? this.width * this.stem_direction : 0);\n  }\n\n  // Get the `BoundingBox` for the `NoteHead`\n  getBoundingBox() {\n    if (!this.preFormatted) throw new Vex.RERR('UnformattedNote',\n        \"Can't call getBoundingBox on an unformatted note.\");\n\n    const spacing = this.stave.getSpacingBetweenLines();\n    const half_spacing = spacing / 2;\n    const min_y = this.y - half_spacing;\n\n    return new Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n  }\n\n  // Apply current style to Canvas `context`\n  applyStyle(context) {\n    const style = this.getStyle();\n    if (style.shadowColor) context.setShadowColor(style.shadowColor);\n    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);\n    if (style.fillStyle) context.setFillStyle(style.fillStyle);\n    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);\n    return this;\n  }\n\n  // Set notehead to a provided `stave`\n  setStave(stave) {\n    const line = this.getLine();\n\n    this.stave = stave;\n    this.setY(stave.getYForNote(line));\n    this.context = this.stave.context;\n    return this;\n  }\n\n  // Pre-render formatting\n  preFormat() {\n    if (this.preFormatted) return this;\n\n    const glyph = this.getGlyph();\n    const width = glyph.head_width + this.extraLeftPx + this.extraRightPx;\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Draw the notehead\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw without a canvas context.\");\n\n    const ctx = this.context;\n    const head_x = this.getAbsoluteX();\n    const y = this.y;\n\n    L(\"Drawing note head '\", this.note_type, this.duration, \"' at\", head_x, y);\n\n    // Begin and end positions for head.\n    const stem_direction = this.stem_direction;\n    const glyph_font_scale = this.render_options.glyph_font_scale;\n\n    const line = this.line;\n\n    // If note above/below the staff, draw the small staff\n    if (line <= 0 || line >= 6) {\n      let line_y = y;\n      const floor = Math.floor(line);\n      if (line < 0 && floor - line == -0.5)\n        line_y -= 5;\n      else if (line > 6 &&  floor - line == -0.5)\n        line_y += 5;\n      if (this.note_type != 'r') {\n        ctx.fillRect(\n          head_x - this.render_options.stroke_px, line_y,\n          (this.getGlyph().head_width) +\n          (this.render_options.stroke_px * 2), 1);\n      }\n    }\n\n    if (this.note_type == 's') {\n      drawSlashNoteHead(ctx, this.duration,\n        head_x, y, stem_direction);\n    } else {\n      if (this.style) {\n        ctx.save();\n        this.applyStyle(ctx);\n        Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);\n        ctx.restore();\n      } else {\n        Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);\n      }\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Stem } from './stem';\nimport { Note } from './note';\n\n// To enable logging for this class. Set `Vex.Flow.StemmableNote.DEBUG` to `true`.\nfunction L() { if (StemmableNote.DEBUG) Vex.L('Vex.Flow.StemmableNote', arguments); }\n\nexport class StemmableNote extends Note {\n  constructor(note_struct) {\n    super(note_struct);\n\n    this.stem = null;\n    this.stem_extension_override = null;\n    this.beam = null;\n  }\n\n  // Get and set the note's `Stem`\n  getStem() { return this.stem; }\n  setStem(stem) { this.stem = stem; return this; }\n\n  // Builds and sets a new stem\n  buildStem() {\n    const stem = new Stem();\n    this.setStem(stem);\n    return this;\n  }\n\n  // Get the full length of stem\n  getStemLength() {\n    return Stem.HEIGHT + this.getStemExtension();\n  }\n\n  // Get the number of beams for this duration\n  getBeamCount() {\n    const glyph = this.getGlyph();\n\n    if (glyph) {\n      return glyph.beam_count;\n    } else {\n      return 0;\n    }\n  }\n\n  // Get the minimum length of stem\n  getStemMinumumLength() {\n    const frac = Flow.durationToFraction(this.duration);\n    let length = (frac.value() <= 1) ? 0 : 20;\n    // if note is flagged, cannot shorten beam\n    switch (this.duration) {\n      case '8':\n        if (this.beam == null) length = 35;\n        break;\n      case '16':\n        if (this.beam == null)\n          length = 35;\n        else\n         length = 25;\n        break;\n      case '32':\n        if (this.beam == null)\n          length = 45;\n        else\n         length = 35;\n        break;\n      case '64':\n        if (this.beam == null)\n          length = 50;\n        else\n         length = 40;\n        break;\n      case '128':\n        if (this.beam == null)\n          length = 55;\n        else\n         length = 45;\n    }\n    return length;\n  }\n\n  // Get/set the direction of the stem\n  getStemDirection() { return this.stem_direction; }\n  setStemDirection(direction) {\n    if (!direction) direction = Stem.UP;\n    if (direction != Stem.UP &&\n        direction != Stem.DOWN) {\n      throw new Vex.RERR('BadArgument', 'Invalid stem direction: ' +\n          direction);\n    }\n\n    this.stem_direction = direction;\n    if (this.stem) {\n      this.stem.setDirection(direction);\n      this.stem.setExtension(this.getStemExtension());\n    }\n\n    this.beam = null;\n    if (this.preFormatted) {\n      this.preFormat();\n    }\n    return this;\n  }\n\n  // Get the `x` coordinate of the stem\n  getStemX() {\n    const x_begin = this.getAbsoluteX() + this.x_shift;\n    const x_end = this.getAbsoluteX() + this.x_shift + this.glyph.head_width;\n\n    let stem_x = this.stem_direction == Stem.DOWN ?\n      x_begin : x_end;\n\n    stem_x -= ((Stem.WIDTH / 2) * this.stem_direction);\n\n    return stem_x;\n  }\n\n  // Get the `x` coordinate for the center of the glyph.\n  // Used for `TabNote` stems and stemlets over rests\n  getCenterGlyphX() {\n    return this.getAbsoluteX() + this.x_shift + (this.glyph.head_width / 2);\n  }\n\n  // Get the stem extension for the current duration\n  getStemExtension() {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.stem_up_extension :\n        glyph.stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Set the stem length to a specific. Will override the default length.\n  setStemLength(height) {\n    this.stem_extension_override = (height - Stem.HEIGHT);\n    return this;\n  }\n\n  // Get the top and bottom `y` values of the stem.\n  getStemExtents() {\n    if (!this.ys || this.ys.length === 0) throw new Vex.RERR('NoYValues',\n        \"Can't get top stem Y when note has no Y values.\");\n\n    let top_pixel = this.ys[0];\n    let base_pixel = this.ys[0];\n    const stem_height = Stem.HEIGHT + this.getStemExtension();\n\n    for (let i = 0; i < this.ys.length; ++i) {\n      const stem_top = this.ys[i] + (stem_height * -this.stem_direction);\n\n      if (this.stem_direction == Stem.DOWN) {\n        top_pixel = Math.max(top_pixel, stem_top);\n        base_pixel = Math.min(base_pixel, this.ys[i]);\n      } else {\n        top_pixel = Math.min(top_pixel, stem_top);\n        base_pixel = Math.max(base_pixel, this.ys[i]);\n      }\n\n      if (this.noteType == 's' || this.noteType == 'x') {\n        top_pixel -= this.stem_direction * 7;\n        base_pixel -= this.stem_direction * 7;\n      }\n    }\n\n    L('Stem extents: ', top_pixel, base_pixel);\n    return { topY: top_pixel, baseY: base_pixel };\n  }\n\n  // Sets the current note's beam\n  setBeam(beam) { this.beam = beam; return this; }\n\n  // Get the `y` value for the top/bottom modifiers at a specific `text_line`\n  getYForTopText(text_line) {\n    const extents = this.getStemExtents();\n    if (this.hasStem()) {\n      return Vex.Min(this.stave.getYForTopText(text_line),\n          extents.topY - (this.render_options.annotation_spacing * (text_line + 1)));\n    } else {\n      return this.stave.getYForTopText(text_line);\n    }\n  }\n\n  getYForBottomText(text_line) {\n    const extents = this.getStemExtents();\n    if (this.hasStem()) {\n      return Vex.Max(this.stave.getYForTopText(text_line),\n        extents.baseY + (this.render_options.annotation_spacing * (text_line)));\n    } else {\n      return this.stave.getYForBottomText(text_line);\n    }\n  }\n\n  hasFlag() {\n    return Flow.durationToGlyph(this.duration).flag;\n  }\n\n  // Post format the note\n  postFormat() {\n    if (this.beam) {\n      this.beam.postFormat();\n    }\n    this.postFormatted = true;\n    return this;\n  }\n\n  // Render the stem onto the canvas\n  drawStem(stem_struct) {\n    if (!this.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw without a canvas context.\");\n\n    this.setStem(new Stem(stem_struct));\n    this.stem.setContext(this.context).draw();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// `Modifier` is an abstract interface for notational elements that modify\n// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n//\n// For a `Modifier` instance to be positioned correctly, it must be part of\n// a `ModifierContext`. All modifiers in the same context are rendered relative to\n// one another.\n//\n// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n// `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n\nimport { Vex } from './vex';\n\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\nfunction L() { if (Modifier.DEBUG) Vex.L('Vex.Flow.Modifier', arguments); }\n\nexport class Modifier {\n  static get CATEGORY() { return 'none'; }\n\n  // Modifiers can be positioned almost anywhere, relative to a note.\n  static get Position() {\n    return {\n      LEFT: 1,\n      RIGHT: 2,\n      ABOVE: 3,\n      BELOW: 4,\n    };\n  }\n\n  constructor() {\n    this.width = 0;\n    this.context = null;\n\n    // Modifiers are attached to a note and an index. An index is a\n    // specific head in a chord.\n    this.note = null;\n    this.index = null;\n\n    // The `text_line` is reserved space above or below a stave.\n    this.text_line = 0;\n    this.position = Modifier.Position.LEFT;\n    this.modifier_context = null;\n    this.x_shift = 0;\n    this.y_shift = 0;\n    this.spacingFromNextModifier = 0;\n    L('Created new modifier');\n  }\n\n  // Every modifier has a category. The `ModifierContext` uses this to determine\n  // the type and order of the modifiers.\n  getCategory() { return Modifier.CATEGORY; }\n\n  // Get and set modifier widths.\n  getWidth() { return this.width; }\n  setWidth(width) { this.width = width; return this; }\n\n  // Get and set attached note (`StaveNote`, `TabNote`, etc.)\n  getNote() { return this.note; }\n  setNote(note) { this.note = note; return this; }\n\n  // Get and set note index, which is a specific note in a chord.\n  getIndex() { return this.index; }\n  setIndex(index) { this.index = index; return this; }\n\n  // Get and set rendering context.\n  getContext() { return this.context; }\n  setContext(context) { this.context = context; return this; }\n\n  // Every modifier must be part of a `ModifierContext`.\n  getModifierContext() { return this.modifier_context; }\n  setModifierContext(c) { this.modifier_context = c; return this; }\n\n  // Get and set articulation position.\n  getPosition() { return this.position; }\n  setPosition(position) { this.position = position; return this; }\n\n  // Set the `text_line` for the modifier.\n  setTextLine(line) { this.text_line = line; return this; }\n\n  // Shift modifier down `y` pixels. Negative values shift up.\n  setYShift(y) { this.y_shift = y; return this; }\n\n  setSpacingFromNextModifier(x) {\n    this.spacingFromNextModifier = x;\n  }\n\n  getSpacingFromNextModifier() { return this.spacingFromNextModifier; }\n\n  // Shift modifier `x` pixels in the direction of the modifier. Negative values\n  // shift reverse.\n  setXShift(x) {\n    this.x_shift = 0;\n    if (this.position == Modifier.Position.LEFT) {\n      this.x_shift -= x;\n    } else {\n      this.x_shift += x;\n    }\n  }\n  getXShift() { return this.x_shift; }\n\n  // Render the modifier onto the canvas.\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw without a canvas context.\");\n    throw new Vex.RERR('MethodNotImplemented',\n        'Draw() not implemented for this modifier.');\n  }\n}\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n//\r\n// This class implements dot modifiers for notes.\r\n\r\nimport { Vex } from './vex';\r\nimport { Modifier } from './modifier';\r\n\r\nexport class Dot extends Modifier {\r\n  static get CATEGORY() { return 'dots'; }\r\n\r\n  // Arrange dots inside a ModifierContext.\r\n  static format(dots, state) {\r\n    const right_shift = state.right_shift;\r\n    const dot_spacing = 1;\r\n\r\n    if (!dots || dots.length === 0) return false;\r\n\r\n    let i, dot, note, shift;\r\n    const dot_list = [];\r\n    for (i = 0; i < dots.length; ++i) {\r\n      dot = dots[i];\r\n      note = dot.getNote();\r\n\r\n      let props;\r\n      // Only StaveNote has .getKeyProps()\r\n      if (typeof note.getKeyProps === 'function') {\r\n        props = note.getKeyProps()[dot.getIndex()];\r\n        shift = (props.displaced ? note.getExtraRightPx() : 0);\r\n      } else { // Else it's a TabNote\r\n        props = { line: 0.5 }; // Shim key props for dot placement\r\n        shift = 0;\r\n      }\r\n\r\n      dot_list.push({ line: props.line, shift, note, dot });\r\n    }\r\n\r\n    // Sort dots by line number.\r\n    dot_list.sort((a, b) => b.line - a.line);\r\n\r\n    let dot_shift = right_shift;\r\n    let x_width = 0;\r\n    let last_line = null;\r\n    let last_note = null;\r\n    let prev_dotted_space = null;\r\n    let half_shiftY = 0;\r\n\r\n    for (i = 0; i < dot_list.length; ++i) {\r\n      dot = dot_list[i].dot;\r\n      note = dot_list[i].note;\r\n      shift = dot_list[i].shift;\r\n      const line = dot_list[i].line;\r\n\r\n      // Reset the position of the dot every line.\r\n      if (line != last_line || note != last_note) {\r\n        dot_shift = shift;\r\n      }\r\n\r\n      if (!note.isRest() && line != last_line) {\r\n        if (Math.abs(line % 1) == 0.5) {\r\n          // note is on a space, so no dot shift\r\n          half_shiftY = 0;\r\n        } else if (!note.isRest()) {\r\n          // note is on a line, so shift dot to space above the line\r\n          half_shiftY = 0.5;\r\n          if (last_note != null &&\r\n              !last_note.isRest() && last_line - line == 0.5) {\r\n            // previous note on a space, so shift dot to space below the line\r\n            half_shiftY = -0.5;\r\n          } else if (line + half_shiftY == prev_dotted_space) {\r\n            // previous space is dotted, so shift dot to space below the line\r\n            half_shiftY = -0.5;\r\n          }\r\n        }\r\n      }\r\n\r\n      // convert half_shiftY to a multiplier for dots.draw()\r\n      dot.dot_shiftY = (-half_shiftY);\r\n      prev_dotted_space = line + half_shiftY;\r\n\r\n      dot.setXShift(dot_shift);\r\n      dot_shift += dot.getWidth() + dot_spacing; // spacing\r\n      x_width = (dot_shift > x_width) ? dot_shift : x_width;\r\n      last_line = line;\r\n      last_note = note;\r\n    }\r\n\r\n    // Update state.\r\n    state.right_shift += x_width;\r\n  }\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this.note = null;\r\n    this.index = null;\r\n    this.position = Modifier.Position.RIGHT;\r\n\r\n    this.radius = 2;\r\n    this.setWidth(5);\r\n    this.dot_shiftY = 0;\r\n  }\r\n  getCategory() { return Dot.CATEGORY; }\r\n  setNote(note) {\r\n    this.note = note;\r\n\r\n    if (this.note.getCategory() === 'gracenotes') {\r\n      this.radius *= 0.50;\r\n      this.setWidth(3);\r\n    }\r\n  }\r\n  setDotShiftY(y) { this.dot_shiftY = y; return this; }\r\n  draw() {\r\n    if (!this.context) throw new Vex.RERR('NoContext',\r\n      \"Can't draw dot without a context.\");\r\n    if (!(this.note && (this.index != null))) throw new Vex.RERR('NoAttachedNote',\r\n      \"Can't draw dot without a note and index.\");\r\n\r\n    const line_space = this.note.stave.options.spacing_between_lines_px;\r\n\r\n    const start = this.note.getModifierStartXY(this.position, this.index);\r\n\r\n    // Set the starting y coordinate to the base of the stem for TabNotes\r\n    if (this.note.getCategory() === 'tabnotes') {\r\n      start.y = this.note.getStemExtents().baseY;\r\n    }\r\n\r\n    const dot_x = (start.x + this.x_shift) + this.width - this.radius;\r\n    const dot_y = start.y + this.y_shift + (this.dot_shiftY * line_space);\r\n    const ctx = this.context;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\r\n    ctx.fill();\r\n  }\r\n}\r\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// *Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.*\n//\n// See `tests/stavenote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { BoundingBox } from './boundingbox';\nimport { Stem } from './stem';\nimport { NoteHead } from './notehead';\nimport { StemmableNote } from './stemmablenote';\nimport { Modifier } from './modifier';\nimport { Dot } from './dot';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\nfunction L(...args) { if (StaveNote.DEBUG) Vex.L('Vex.Flow.StaveNote', args); }\n\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n  const delta = (note.isrest ? 0.0 : 1.0) * dir;\n\n  rest.line += delta;\n  rest.maxLine += delta;\n  rest.minLine += delta;\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + (delta));\n}\n\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n  const delta = rest.line - Vex.MidLine(noteU.minLine, noteL.maxLine);\n  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n  rest.line -= delta;\n  rest.maxLine -= delta;\n  rest.minLine -= delta;\n}\n\nexport class StaveNote extends StemmableNote {\n  static get CATEGORY() { return 'stavenotes'; }\n  static get STEM_UP() { return Stem.UP; }\n  static get STEM_DOWN() { return Stem.DOWN; }\n\n  // ## Static Methods\n  //\n  // Format notes inside a ModifierContext.\n  static format(notes, state) {\n    if (!notes || notes.length < 2) return false;\n\n    if (notes[0].getStave() != null) return StaveNote.formatByY(notes, state);\n\n    const notesList = [];\n\n    for (let i = 0; i < notes.length; i++) {\n      const props = notes[i].getKeyProps();\n      const line = props[0].line;\n      let minL = props[props.length - 1].line;\n      const stemDirection = notes[i].getStemDirection();\n      const stemMax = notes[i].getStemLength() / 10;\n      const stemMin = notes[i].getStemMinumumLength() / 10;\n\n      let maxL;\n      if (notes[i].isRest()) {\n        maxL = line + notes[i].glyph.line_above;\n        minL = line - notes[i].glyph.line_below;\n      } else {\n        maxL = stemDirection === 1\n          ? props[props.length - 1].line + stemMax\n          : props[props.length - 1].line;\n\n        minL = stemDirection === 1\n          ? props[0].line\n          : props[0].line - stemMax;\n      }\n\n      notesList.push({\n        line: props[0].line, // note/rest base line\n        maxLine: maxL, // note/rest upper bounds line\n        minLine: minL, // note/rest lower bounds line\n        isrest: notes[i].isRest(),\n        stemDirection,\n        stemMax, // Maximum (default) note stem length;\n        stemMin, // minimum note stem length\n        voice_shift: notes[i].getVoiceShiftWidth(),\n        is_displaced: notes[i].isDisplaced(), // note manually displaced\n        note: notes[i],\n      });\n    }\n\n    const voices = notesList.length;\n\n    let noteU = notesList[0];\n    const noteM = voices > 2 ? notesList[1] : null;\n    let noteL = voices > 2 ? notesList[2] : notesList[1];\n\n    // for two voice backward compatibility, ensure upper voice is stems up\n    // for three voices, the voices must be in order (upper, middle, lower)\n    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n      noteU = notesList[1];\n      noteL = notesList[0];\n    }\n\n    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n    let xShift = 0;\n    let stemDelta;\n\n    // Test for two voice note intersection\n    if (voices === 2) {\n      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n      // if top voice is a middle voice, check stem intersection with lower voice\n      if (noteU.stemDirection === noteL.stemDirection &&\n          noteU.minLine <= noteL.maxLine) {\n        if (!noteU.isrest) {\n          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));\n          stemDelta = Math.max(stemDelta, noteU.stemMin);\n          noteU.minLine = noteU.line - stemDelta;\n          noteU.note.setStemLength(stemDelta * 10);\n        }\n      }\n      if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n        if (noteU.isrest) {\n          // shift rest up\n          shiftRestVertical(noteU, noteL, 1);\n        } else if (noteL.isrest) {\n          // shift rest down\n          shiftRestVertical(noteL, noteU, -1);\n        } else {\n          xShift = voiceXShift;\n          if (noteU.stemDirection === noteL.stemDirection) {\n            // upper voice is middle voice, so shift it right\n            noteU.note.setXShift(xShift + 3);\n          } else {\n            // shift lower voice right\n            noteL.note.setXShift(xShift);\n          }\n        }\n      }\n\n      // format complete\n      return true;\n    }\n\n    // Check middle voice stem intersection with lower voice\n    if (noteM !== null && noteM.minLine < noteL.maxLine + 0.5) {\n      if (!noteM.isrest) {\n        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));\n        stemDelta = Math.max(stemDelta, noteM.stemMin);\n        noteM.minLine = noteM.line - stemDelta;\n        noteM.note.setStemLength(stemDelta * 10);\n      }\n    }\n\n    // For three voices, test if rests can be repositioned\n    //\n    // Special case 1 :: middle voice rest between two notes\n    //\n    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n        const restHeight = noteM.maxLine - noteM.minLine;\n        const space = noteU.minLine - noteL.maxLine;\n        if (restHeight < space) {\n           // center middle voice rest between the upper and lower voices\n          centerRest(noteM, noteU, noteL);\n        } else {\n          xShift = voiceXShift + 3;    // shift middle rest right\n          noteM.note.setXShift(xShift);\n        }\n         // format complete\n        return true;\n      }\n    }\n\n    // Special case 2 :: all voices are rests\n    if (noteU.isrest && noteM.isrest && noteL.isrest) {\n      // Shift upper voice rest up\n      shiftRestVertical(noteU, noteM, 1);\n      // Shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n      // format complete\n      return true;\n    }\n\n    // Test if any other rests can be repositioned\n    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n      // Shift middle voice rest up\n      shiftRestVertical(noteM, noteL, 1);\n    }\n    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n      // Shift middle voice rest down\n      shiftRestVertical(noteM, noteU, -1);\n    }\n    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n      // shift upper voice rest up;\n      shiftRestVertical(noteU, noteM, 1);\n    }\n    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n      // shift lower voice rest down\n      shiftRestVertical(noteL, noteM, -1);\n    }\n\n    // If middle voice intersects upper or lower voice\n    if ((!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||\n        (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)) {\n      xShift = voiceXShift + 3;      // shift middle note right\n      noteM.note.setXShift(xShift);\n    }\n\n    return true;\n  }\n\n  static formatByY(notes, state) {\n    // NOTE: this function does not support more than two voices per stave\n    // use with care.\n    let hasStave = true;\n\n    for (let i = 0; i < notes.length; i++) {\n      hasStave = hasStave && notes[i].getStave() != null;\n    }\n\n    if (!hasStave) {\n      throw new Vex.RERR(\n        'Stave Missing',\n        'All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!'\n      );\n    }\n\n    let xShift = 0;\n\n    for (let i = 0; i < notes.length - 1; i++) {\n      let topNote = notes[i];\n      let bottomNote = notes[i + 1];\n\n      if (topNote.getStemDirection() === Stem.DOWN) {\n        topNote = notes[i + 1];\n        bottomNote = notes[i];\n      }\n\n      const topKeys = topNote.getKeyProps();\n      const bottomKeys = bottomNote.getKeyProps();\n\n      const topY = topNote.getStave().getYForLine(topKeys[0].line);\n      const bottomY = bottomNote.getStave().getYForLine(bottomKeys[bottomKeys.length - 1].line);\n\n      const lineSpace = topNote.getStave().options.spacing_between_lines_px;\n      if (Math.abs(topY - bottomY) === lineSpace / 2) {\n        xShift = topNote.getVoiceShiftWidth();\n        bottomNote.setXShift(xShift);\n      }\n    }\n\n    state.right_shift += xShift;\n  }\n\n  static postFormat(notes) {\n    if (!notes) return false;\n\n    notes.forEach(note => note.postFormat());\n\n    return true;\n  }\n\n  constructor(noteStruct) {\n    super(noteStruct);\n\n    this.keys = noteStruct.keys;\n    this.clef = noteStruct.clef;\n    this.octave_shift = noteStruct.octave_shift;\n    this.beam = null;\n\n    // Pull note rendering properties\n    this.glyph = Flow.durationToGlyph(this.duration, this.noteType);\n\n    if (!this.glyph) {\n      throw new Vex.RuntimeError(\n        'BadArguments',\n        `Invalid note initialization data (No glyph found): ${JSON.stringify(noteStruct)}`\n      );\n    }\n\n    // if true, displace note to right\n    this.displaced = false;\n    this.dot_shiftY = 0;\n    // per-pitch properties\n    this.keyProps = [];\n    // for displaced ledger lines\n    this.use_default_head_x = false;\n\n    // Drawing\n    this.note_heads = [];\n    this.modifiers = [];\n\n    Vex.Merge(this.render_options, {\n      // font size for note heads and rests\n      glyph_font_scale: 35,\n      // number of stroke px to the left and right of head\n      stroke_px: 3,\n    });\n\n    this.calculateKeyProps();\n\n    this.buildStem();\n\n    // Set the stem direction\n    if (noteStruct.auto_stem) {\n      this.autoStem();\n    } else {\n      this.setStemDirection(noteStruct.stem_direction);\n    }\n\n    this.buildNoteHeads();\n\n    // Calculate left/right padding\n    this.calcExtraPx();\n  }\n\n  getCategory() { return StaveNote.CATEGORY; }\n\n  // Builds a `Stem` for the note\n  buildStem() {\n    const glyph = this.getGlyph();\n    const yExtend = glyph.code_head === 'v95' || glyph.code_head === 'v3e' ? -4 : 0;\n    const stem = new Stem({ yExtend });\n\n    if (this.isRest()) {\n      stem.hide = true;\n    }\n\n    this.setStem(stem);\n  }\n\n  // Builds a `NoteHead` for each key in the note\n  buildNoteHeads() {\n    const stemDirection = this.getStemDirection();\n    const keys = this.getKeys();\n\n    let lastLine = null;\n    let lineDiff = null;\n    let displaced = false;\n\n    // Draw notes from bottom to top.\n\n    // For down-stem notes, we draw from top to bottom.\n    let start;\n    let end;\n    let step;\n    if (stemDirection === Stem.UP) {\n      start = 0;\n      end = keys.length;\n      step = 1;\n    } else if (stemDirection === Stem.DOWN) {\n      start = keys.length - 1;\n      end = -1;\n      step = -1;\n    }\n\n    for (let i = start; i !== end; i += step) {\n      const noteProps = this.keyProps[i];\n      const line = noteProps.line;\n\n      // Keep track of last line with a note head, so that consecutive heads\n      // are correctly displaced.\n      if (lastLine === null) {\n        lastLine = line;\n      } else {\n        lineDiff = Math.abs(lastLine - line);\n        if (lineDiff === 0 || lineDiff === 0.5) {\n          displaced = !displaced;\n        } else {\n          displaced = false;\n          this.use_default_head_x = true;\n        }\n      }\n      lastLine = line;\n\n      const notehead = new NoteHead({\n        duration: this.duration,\n        note_type: this.noteType,\n        displaced,\n        stem_direction: stemDirection,\n        custom_glyph_code: noteProps.code,\n        glyph_font_scale: this.render_options.glyph_font_scale,\n        x_shift: noteProps.shift_right,\n        line: noteProps.line,\n      });\n\n      this.note_heads[i] = notehead;\n    }\n  }\n\n  // Automatically sets the stem direction based on the keys in the note\n  autoStem() {\n    // Figure out optimal stem direction based on given notes\n    this.minLine = this.keyProps[0].line;\n    this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n\n    const MIDDLE_LINE = 3;\n    const decider = (this.minLine + this.maxLine) / 2;\n    const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n\n    this.setStemDirection(stemDirection);\n  }\n\n  // Calculates and stores the properties for each key in the note\n  calculateKeyProps() {\n    let lastLine = null;\n    for (let i = 0; i < this.keys.length; ++i) {\n      const key = this.keys[i];\n\n      // All rests use the same position on the line.\n      // if (this.glyph.rest) key = this.glyph.position;\n      if (this.glyph.rest) this.glyph.position = key;\n\n      const options = { octave_shift: this.octave_shift || 0 };\n      const props = Flow.keyProperties(key, this.clef, options);\n\n      if (!props) {\n        throw new Vex.RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n      }\n\n      // Override line placement for default rests\n      if (props.key === 'R') {\n        if (this.duration === '1' || this.duration === 'w') {\n          props.line = 4;\n        } else {\n          props.line = 3;\n        }\n      }\n\n      // Calculate displacement of this note\n      const line = props.line;\n      if (lastLine === null) {\n        lastLine = line;\n      } else {\n        if (Math.abs(lastLine - line) === 0.5) {\n          this.displaced = true;\n          props.displaced = true;\n\n          // Have to mark the previous note as\n          // displaced as well, for modifier placement\n          if (this.keyProps.length > 0) {\n            this.keyProps[i - 1].displaced = true;\n          }\n        }\n      }\n\n      lastLine = line;\n      this.keyProps.push(props);\n    }\n\n    // Sort the notes from lowest line to highest line\n    lastLine = -1000;\n    this.keyProps.forEach(key => {\n      if (key.line < lastLine) {\n        Vex.W(\n          'Unsorted keys in note will be sorted. ' +\n          'See https://github.com/0xfe/vexflow/issues/104 for details.'\n        );\n      }\n      lastLine = key.line;\n    });\n    this.keyProps.sort((a, b) => a.line - b.line);\n  }\n\n  // Get the `BoundingBox` for the entire note\n  getBoundingBox() {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n    }\n\n    const { width: w, modLeftPx, extraLeftPx } = this.getMetrics();\n    const x = this.getAbsoluteX() - modLeftPx - extraLeftPx;\n\n    let minY = 0;\n    let maxY = 0;\n    const halfLineSpacing = this.getStave().getSpacingBetweenLines() / 2;\n    const lineSpacing = halfLineSpacing * 2;\n\n    if (this.isRest()) {\n      const y = this.ys[0];\n      const frac = Flow.durationToFraction(this.duration);\n      if (frac.equals(1) || frac.equals(2)) {\n        minY = y - halfLineSpacing;\n        maxY = y + halfLineSpacing;\n      } else {\n        minY = y - (this.glyph.line_above * lineSpacing);\n        maxY = y + (this.glyph.line_below * lineSpacing);\n      }\n    } else if (this.glyph.stem) {\n      const ys = this.getStemExtents();\n      ys.baseY += halfLineSpacing * this.stem_direction;\n      minY = Vex.Min(ys.topY, ys.baseY);\n      maxY = Vex.Max(ys.topY, ys.baseY);\n    } else {\n      minY = null;\n      maxY = null;\n\n      for (let i = 0; i < this.ys.length; ++i) {\n        const yy = this.ys[i];\n        if (i === 0) {\n          minY = yy;\n          maxY = yy;\n        } else {\n          minY = Vex.Min(yy, minY);\n          maxY = Vex.Max(yy, maxY);\n        }\n      }\n      minY -= halfLineSpacing;\n      maxY += halfLineSpacing;\n    }\n\n    return new BoundingBox(x, minY, w, maxY - minY);\n  }\n\n  // Gets the line number of the top or bottom note in the chord.\n  // If `isTopNote` is `true` then get the top note\n  getLineNumber(isTopNote) {\n    if (!this.keyProps.length) {\n      throw new Vex.RERR(\n        'NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\"\n      );\n    }\n\n    let resultLine = this.keyProps[0].line;\n\n    // No precondition assumed for sortedness of keyProps array\n    for (let i = 0; i < this.keyProps.length; i++) {\n      const thisLine = this.keyProps[i].line;\n      if (isTopNote) {\n        if (thisLine > resultLine) resultLine = thisLine;\n      } else {\n        if (thisLine < resultLine) resultLine = thisLine;\n      }\n    }\n\n    return resultLine;\n  }\n\n  // Determine if current note is a rest\n  isRest() { return this.glyph.rest; }\n\n  // Determine if the current note is a chord\n  isChord() { return !this.isRest() && this.keys.length > 1; }\n\n  // Determine if the `StaveNote` has a stem\n  hasStem() { return this.glyph.stem; }\n\n  // Get the `y` coordinate for text placed on the top/bottom of a\n  // note at a desired `text_line`\n  getYForTopText(textLine) {\n    const extents = this.getStemExtents();\n    return Math.min(\n      this.stave.getYForTopText(textLine),\n      extents.topY - (this.render_options.annotation_spacing * (textLine + 1))\n    );\n  }\n  getYForBottomText(textLine) {\n    const extents = this.getStemExtents();\n    return Math.max(\n      this.stave.getYForTopText(textLine),\n      extents.baseY + (this.render_options.annotation_spacing * (textLine))\n    );\n  }\n\n  // Sets the current note to the provided `stave`. This applies\n  // `y` values to the `NoteHeads`.\n  setStave(stave) {\n    super.setStave(stave);\n\n    const ys = this.note_heads.map(notehead => {\n      notehead.setStave(stave);\n      return notehead.getY();\n    });\n\n    this.setYs(ys);\n\n    if (this.hasStem()) {\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      this.stem.setYBounds(y_top, y_bottom);\n    }\n\n    return this;\n  }\n\n  // Get the pitches in the note\n  getKeys() { return this.keys; }\n\n  // Get the properties for all the keys in the note\n  getKeyProps() {\n    return this.keyProps;\n  }\n\n  // Check if note is shifted to the right\n  isDisplaced() {\n    return this.displaced;\n  }\n\n  // Sets whether shift note to the right. `displaced` is a `boolean`\n  setNoteDisplaced(displaced) {\n    this.displaced = displaced;\n    return this;\n  }\n\n  // Get the starting `x` coordinate for a `StaveTie`\n  getTieRightX() {\n    let tieStartX = this.getAbsoluteX();\n    tieStartX += this.glyph.head_width + this.x_shift + this.extraRightPx;\n    if (this.modifierContext) tieStartX += this.modifierContext.getExtraRightPx();\n    return tieStartX;\n  }\n\n  // Get the ending `x` coordinate for a `StaveTie`\n  getTieLeftX() {\n    let tieEndX = this.getAbsoluteX();\n    tieEndX += this.x_shift - this.extraLeftPx;\n    return tieEndX;\n  }\n\n  // Get the stave line on which to place a rest\n  getLineForRest() {\n    let restLine = this.keyProps[0].line;\n    if (this.keyProps.length > 1) {\n      const lastLine  = this.keyProps[this.keyProps.length - 1].line;\n      const top = Math.max(restLine, lastLine);\n      const bot = Math.min(restLine, lastLine);\n      restLine = Vex.MidLine(top, bot);\n    }\n\n    return restLine;\n  }\n\n  // Get the default `x` and `y` coordinates for the provided `position`\n  // and key `index`\n  getModifierStartXY(position, index) {\n    if (!this.preFormatted) {\n      throw new Vex.RERR('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n    }\n\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');\n    }\n\n    let x = 0;\n    if (position === Modifier.Position.LEFT) {\n      // extra_left_px\n      x = -1 * 2;\n    } else if (position === Modifier.Position.RIGHT) {\n      // extra_right_px\n      x = this.glyph.head_width + this.x_shift + 2;\n    } else if (position === Modifier.Position.BELOW ||\n               position === Modifier.Position.ABOVE) {\n      x = this.glyph.head_width / 2;\n    }\n\n    return { x: this.getAbsoluteX() + x, y: this.ys[index] };\n  }\n\n  // Sets the style of the complete StaveNote, including all keys\n  // and the stem.\n  setStyle(style) {\n    this.note_heads.forEach(notehead => {\n      notehead.setStyle(style);\n    }, this);\n    this.stem.setStyle(style);\n  }\n\n  // Sets the notehead at `index` to the provided coloring `style`.\n  //\n  // `style` is an `object` with the following properties: `shadowColor`,\n  // `shadowBlur`, `fillStyle`, `strokeStyle`\n  setKeyStyle(index, style) {\n    this.note_heads[index].setStyle(style);\n    return this;\n  }\n\n  setKeyLine(index, line) {\n    this.keyProps[index].line = line;\n    this.note_heads[index].setLine(line);\n    return this;\n  }\n\n  getKeyLine(index) {\n    return this.keyProps[index].line;\n  }\n\n  // Add self to modifier context. `mContext` is the `ModifierContext`\n  // to be added to.\n  addToModifierContext(mContext) {\n    this.setModifierContext(mContext);\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addModifier(this.modifiers[i]);\n    }\n    this.modifierContext.addModifier(this);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Generic function to add modifiers to a note\n  //\n  // Parameters:\n  // * `index`: The index of the key that we're modifying\n  // * `modifier`: The modifier to add\n  addModifier(index, modifier) {\n    modifier.setNote(this);\n    modifier.setIndex(index);\n    this.modifiers.push(modifier);\n    this.setPreFormatted(false);\n    return this;\n  }\n\n  // Helper function to add an accidental to a key\n  addAccidental(index, accidental) {\n    return this.addModifier(index, accidental);\n  }\n\n  // Helper function to add an articulation to a key\n  addArticulation(index, articulation) {\n    return this.addModifier(index, articulation);\n  }\n\n  // Helper function to add an annotation to a key\n  addAnnotation(index, annotation) {\n    return this.addModifier(index, annotation);\n  }\n\n  // Helper function to add a dot on a specific key\n  addDot(index) {\n    const dot = new Dot();\n    dot.setDotShiftY(this.glyph.dot_shiftY);\n    this.dots++;\n    return this.addModifier(index, dot);\n  }\n\n  // Convenience method to add dot to all keys in note\n  addDotToAll() {\n    for (let i = 0; i < this.keys.length; ++i) {\n      this.addDot(i);\n    }\n    return this;\n  }\n\n  // Get all accidentals in the `ModifierContext`\n  getAccidentals() {\n    return this.modifierContext.getModifiers('accidentals');\n  }\n\n  // Get all dots in the `ModifierContext`\n  getDots() {\n    return this.modifierContext.getModifiers('dots');\n  }\n\n  // Get the width of the note if it is displaced. Used for `Voice`\n  // formatting\n  getVoiceShiftWidth() {\n    // TODO: may need to accomodate for dot here.\n    return this.glyph.head_width * (this.displaced ? 2 : 1);\n  }\n\n  // Calculates and sets the extra pixels to the left or right\n  // if the note is displaced.\n  calcExtraPx() {\n    this.setExtraLeftPx(\n      this.displaced && this.stem_direction === Stem.DOWN\n        ? this.glyph.head_width\n        : 0\n    );\n\n    // For upstems with flags, the extra space is unnecessary, since it's taken\n    // up by the flag.\n    this.setExtraRightPx(\n      !this.hasFlag() && this.displaced && this.stem_direction === Stem.UP\n        ? this.glyph.head_width\n        : 0\n    );\n  }\n\n  // Pre-render formatting\n  preFormat() {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n\n    let width = this.glyph.head_width + this.extraLeftPx + this.extraRightPx;\n\n    // For upward flagged notes, the width of the flag needs to be added\n    if (this.glyph.flag && this.beam === null && this.stem_direction === Stem.UP) {\n      width += this.glyph.head_width;\n    }\n\n    this.setWidth(width);\n    this.setPreFormatted(true);\n  }\n\n  // Gets the staff line and y value for the highest and lowest noteheads\n  getNoteHeadBounds() {\n    // Top and bottom Y values for stem.\n    let yTop = null;\n    let yBottom = null;\n\n    let highestLine = this.stave.getNumLines();\n    let lowestLine = 1;\n\n    this.note_heads.forEach(notehead => {\n      const line = notehead.getLine();\n      const y = notehead.getY();\n\n      if (yTop === null || y < yTop)  {\n        yTop = y;\n      }\n\n      if (yBottom === null || y > yBottom) {\n        yBottom = y;\n      }\n\n      highestLine = line > highestLine ? line : highestLine;\n      lowestLine = line < lowestLine ? line : lowestLine;\n    }, this);\n\n    return {\n      y_top: yTop,\n      y_bottom: yBottom,\n      highest_line: highestLine,\n      lowest_line: lowestLine,\n    };\n  }\n\n  // Get the starting `x` coordinate for the noteheads\n  getNoteHeadBeginX() {\n    return this.getAbsoluteX() + this.x_shift;\n  }\n\n  // Get the ending `x` coordinate for the noteheads\n  getNoteHeadEndX() {\n    const xBegin = this.getNoteHeadBeginX();\n    return xBegin + this.glyph.head_width - (Flow.STEM_WIDTH / 2);\n  }\n\n  // Draw the ledger lines between the stave and the highest/lowest keys\n  drawLedgerLines() {\n    const {\n      note_heads, stave, use_default_head_x, x_shift, glyph,\n      render_options: { stroke_px },\n      context: ctx,\n    } = this;\n\n    if (this.isRest()) return;\n    if (!ctx) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const { highest_line, lowest_line } = this.getNoteHeadBounds();\n    let headX = note_heads[0].getAbsoluteX();\n\n    const drawLedgerLine = (y) => {\n      if (use_default_head_x === true)  {\n        headX = this.getAbsoluteX() + x_shift;\n      }\n      const x = headX - stroke_px;\n      const length = ((headX + glyph.head_width) - headX) + (stroke_px * 2);\n\n      ctx.fillRect(x, y, length, 1);\n    };\n\n    for (let line = 6; line <= highest_line; ++line) {\n      drawLedgerLine(stave.getYForNote(line));\n    }\n\n    for (let line = 0; line >= lowest_line; --line) {\n      drawLedgerLine(stave.getYForNote(line));\n    }\n  }\n\n  // Draw all key modifiers\n  drawModifiers() {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const ctx = this.context;\n    ctx.openGroup('modifiers');\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const modifier = this.modifiers[i];\n      const notehead = this.note_heads[modifier.getIndex()];\n      const noteheadStyle = notehead.getStyle();\n      if (noteheadStyle) {\n        ctx.save();\n        notehead.applyStyle(ctx);\n      }\n      modifier.setContext(ctx);\n      modifier.draw();\n      if (noteheadStyle) {\n        ctx.restore();\n      }\n    }\n    ctx.closeGroup();\n  }\n\n  // Draw the flag for the note\n  drawFlag() {\n    const {\n      stem, beam,\n      context: ctx,\n      render_options: { glyph_font_scale },\n    } = this;\n\n    if (!ctx) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    const shouldRenderFlag = beam === null;\n    const glyph = this.getGlyph();\n\n    if (glyph.flag && shouldRenderFlag) {\n      let flagX;\n      let flagY;\n      let flagCode;\n\n      const xBegin = this.getNoteHeadBeginX();\n      const xEnd = this.getNoteHeadEndX();\n      const { y_top, y_bottom } = this.getNoteHeadBounds();\n      const noteStemHeight = stem.getHeight();\n      if (this.getStemDirection() === Stem.DOWN) {\n        // Down stems have flags on the left.\n        flagX = xBegin + 1;\n        flagY = y_top - noteStemHeight + 2;\n        flagCode = glyph.code_flag_downstem;\n      } else {\n        // Up stems have flags on the left.\n        flagX = xEnd + 1;\n        flagY = y_bottom - noteStemHeight - 2;\n        flagCode = glyph.code_flag_upstem;\n      }\n\n      // Draw the Flag\n      ctx.openGroup('flag', null, { pointerBBox: true });\n      Glyph.renderGlyph(ctx, flagX, flagY, glyph_font_scale, flagCode);\n      ctx.closeGroup();\n    }\n  }\n\n  // Draw the NoteHeads\n  drawNoteHeads() {\n    this.note_heads.forEach(notehead => {\n      this.context.openGroup('notehead', null, { pointerBBox: true });\n      notehead.setContext(this.context).draw();\n      this.context.closeGroup();\n    });\n  }\n\n  // Render the stem onto the canvas\n  drawStem(stemStruct) {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n\n    if (stemStruct) {\n      this.setStem(new Stem(stemStruct));\n    }\n\n    this.context.openGroup('stem', null, { pointerBBox: true });\n    this.stem.setContext(this.context).draw();\n    this.context.closeGroup();\n  }\n\n  // Draws all the `StaveNote` parts. This is the main drawing method.\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw without a canvas context.\");\n    }\n    if (!this.stave) {\n      throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    }\n    if (this.ys.length === 0) {\n      throw new Vex.RERR('NoYValues', \"Can't draw note without Y values.\");\n    }\n\n    const xBegin = this.getNoteHeadBeginX();\n    const xEnd = this.getNoteHeadEndX();\n    const shouldRenderStem = this.hasStem() && !this.beam;\n\n    // Format note head x positions\n    this.note_heads.forEach(notehead => notehead.setX(xBegin));\n\n    // Format stem x positions\n    this.stem.setNoteHeadXBounds(xBegin, xEnd);\n\n    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n\n    // Draw each part of the note\n    this.drawLedgerLines();\n\n    this.elem = this.context.openGroup('stavenote', this.id);\n    this.context.openGroup('note', null, { pointerBBox: true });\n    if (shouldRenderStem) this.drawStem();\n    this.drawNoteHeads();\n    this.drawFlag();\n    this.context.closeGroup();\n    this.drawModifiers();\n    this.context.closeGroup();\n  }\n}\n","// VexFlow - Music Engraving for HTML5\r\n// Copyright Mohit Muthanna 2010\r\n// Author Larry Kuhns 2013\r\n// Class to draws string numbers into the notation.\r\n\r\nimport { Vex } from './vex';\r\nimport { Modifier } from './modifier';\r\n\r\n/**\r\n * @constructor\r\n */\r\nexport class FretHandFinger extends Modifier {\r\n  static get CATEGORY() { return 'frethandfinger'; }\r\n\r\n  // Arrange fingerings inside a ModifierContext.\r\n  static format(nums, state) {\r\n    const left_shift = state.left_shift;\r\n    const right_shift = state.right_shift;\r\n    const num_spacing = 1;\r\n\r\n    if (!nums || nums.length === 0) return false;\r\n\r\n    const nums_list = [];\r\n    let prev_note = null;\r\n    let shift_left = 0;\r\n    let shift_right = 0;\r\n\r\n    let i, num, note, pos, props_tmp;\r\n    for (i = 0; i < nums.length; ++i) {\r\n      num = nums[i];\r\n      note = num.getNote();\r\n      pos = num.getPosition();\r\n      const props = note.getKeyProps()[num.getIndex()];\r\n      if (note != prev_note) {\r\n        for (let n = 0; n < note.keys.length; ++n) {\r\n          props_tmp = note.getKeyProps()[n];\r\n          if (left_shift === 0)\r\n            shift_left = (props_tmp.displaced ? note.getExtraLeftPx() : shift_left);\r\n          if (right_shift === 0)\r\n            shift_right = (props_tmp.displaced ? note.getExtraRightPx() : shift_right);\r\n        }\r\n        prev_note = note;\r\n      }\r\n\r\n      nums_list.push({ line: props.line, pos, shiftL: shift_left, shiftR: shift_right, note, num });\r\n    }\r\n\r\n    // Sort fingernumbers by line number.\r\n    nums_list.sort((a, b) => b.line - a.line);\r\n\r\n    let num_shiftL = 0;\r\n    let num_shiftR = 0;\r\n    let x_widthL = 0;\r\n    let x_widthR = 0;\r\n    let last_line = null;\r\n    let last_note = null;\r\n\r\n    for (i = 0; i < nums_list.length; ++i) {\r\n      let num_shift = 0;\r\n      note = nums_list[i].note;\r\n      pos = nums_list[i].pos;\r\n      num = nums_list[i].num;\r\n      const line = nums_list[i].line;\r\n      const shiftL = nums_list[i].shiftL;\r\n      const shiftR = nums_list[i].shiftR;\r\n\r\n      // Reset the position of the string number every line.\r\n      if (line != last_line || note != last_note) {\r\n        num_shiftL = left_shift + shiftL;\r\n        num_shiftR = right_shift + shiftR;\r\n      }\r\n\r\n      const num_width = num.getWidth() + num_spacing;\r\n      if (pos == Modifier.Position.LEFT) {\r\n        num.setXShift(left_shift + num_shiftL);\r\n        num_shift = left_shift + num_width; // spacing\r\n        x_widthL = (num_shift > x_widthL) ? num_shift : x_widthL;\r\n      } else if (pos == Modifier.Position.RIGHT) {\r\n        num.setXShift(num_shiftR);\r\n        num_shift = shift_right + num_width; // spacing\r\n        x_widthR = (num_shift > x_widthR) ? num_shift : x_widthR;\r\n      }\r\n      last_line = line;\r\n      last_note = note;\r\n    }\r\n\r\n    state.left_shift += x_widthL;\r\n    state.right_shift += x_widthR;\r\n  }\r\n\r\n  constructor(number) {\r\n    super();\r\n\r\n    this.note = null;\r\n    this.index = null;\r\n    this.finger = number;\r\n    this.width = 7;\r\n    this.position = Modifier.Position.LEFT;  // Default position above stem or note head\r\n    this.x_shift = 0;\r\n    this.y_shift = 0;\r\n    this.x_offset = 0;       // Horizontal offset from default\r\n    this.y_offset = 0;       // Vertical offset from default\r\n    this.font = {\r\n      family: 'sans-serif',\r\n      size: 9,\r\n      weight: 'bold',\r\n    };\r\n  }\r\n  getCategory() { return FretHandFinger.CATEGORY; }\r\n  getNote() { return this.note; }\r\n  setNote(note) { this.note = note; return this; }\r\n  getIndex() { return this.index; }\r\n  setIndex(index) { this.index = index; return this; }\r\n  getPosition() { return this.position; }\r\n  setPosition(position) {\r\n    if (position >= Modifier.Position.LEFT &&\r\n        position <= Modifier.Position.BELOW)\r\n      this.position = position;\r\n    return this;\r\n  }\r\n  setFretHandFinger(number) { this.finger = number; return this; }\r\n  setOffsetX(x) { this.x_offset = x; return this; }\r\n  setOffsetY(y) { this.y_offset = y; return this; }\r\n\r\n  draw() {\r\n    if (!this.context) throw new Vex.RERR('NoContext',\r\n      \"Can't draw string number without a context.\");\r\n    if (!(this.note && (this.index != null))) throw new Vex.RERR('NoAttachedNote',\r\n      \"Can't draw string number without a note and index.\");\r\n\r\n    const ctx = this.context;\r\n    const start = this.note.getModifierStartXY(this.position, this.index);\r\n    let dot_x = (start.x + this.x_shift + this.x_offset);\r\n    let dot_y = start.y + this.y_shift + this.y_offset + 5;\r\n\r\n    switch (this.position) {\r\n      case Modifier.Position.ABOVE:\r\n        dot_x -= 4;\r\n        dot_y -= 12;\r\n        break;\r\n      case Modifier.Position.BELOW:\r\n        dot_x -= 2;\r\n        dot_y += 10;\r\n        break;\r\n      case Modifier.Position.LEFT:\r\n        dot_x -= this.width;\r\n        break;\r\n      case Modifier.Position.RIGHT:\r\n        dot_x += 1;\r\n        break;\r\n    }\r\n\r\n    ctx.save();\r\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\r\n    ctx.fillText('' + this.finger, dot_x, dot_y);\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements some standard music theory routines.\n\nimport { Vex } from './vex';\n\nexport class Music {\n  static get NUM_TONES() {\n    return 12;\n  }\n  static get roots() {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n  static get root_values() {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n  static get root_indices() {\n    return {\n      'c': 0,\n      'd': 1,\n      'e': 2,\n      'f': 3,\n      'g': 4,\n      'a': 5,\n      'b': 6,\n    };\n  }\n  static get canonical_notes() {\n    return [\n      'c', 'c#', 'd', 'd#',\n      'e', 'f', 'f#', 'g',\n      'g#', 'a', 'a#', 'b',\n    ];\n  }\n  static get diatonic_intervals() {\n    return [\n      'unison', 'm2', 'M2', 'm3', 'M3',\n      'p4', 'dim5', 'p5', 'm6', 'M6',\n      'b7', 'M7', 'octave',\n    ];\n  }\n  static get diatonic_accidentals() {\n    return {\n      'unison': { note: 0, accidental: 0 },\n      'm2': { note: 1, accidental: -1 },\n      'M2': { note: 1, accidental: 0 },\n      'm3': { note: 2, accidental: -1 },\n      'M3': { note: 2, accidental: 0 },\n      'p4': { note: 3, accidental: 0 },\n      'dim5': { note: 4, accidental: -1 },\n      'p5': { note: 4, accidental: 0 },\n      'm6': { note: 5, accidental: -1 },\n      'M6': { note: 5, accidental: 0 },\n      'b7': { note: 6, accidental: -1 },\n      'M7': { note: 6, accidental: 0 },\n      'octave': { note: 7, accidental: 0 },\n    };\n  }\n  static get intervals() {\n    return {\n      'u': 0, 'unison': 0,\n      'm2': 1, 'b2': 1, 'min2': 1, 'S': 1, 'H': 1,\n      '2': 2, 'M2': 2, 'maj2': 2, 'T': 2, 'W': 2,\n      'm3': 3, 'b3': 3, 'min3': 3,\n      'M3': 4, '3': 4, 'maj3': 4,\n      '4': 5, 'p4': 5,\n      '#4': 6, 'b5': 6, 'aug4': 6, 'dim5': 6,\n      '5': 7, 'p5': 7,\n      '#5': 8, 'b6': 8, 'aug5': 8,\n      '6': 9, 'M6': 9, 'maj6': 9,\n      'b7': 10, 'm7': 10, 'min7': 10, 'dom7': 10,\n      'M7': 11, 'maj7': 11,\n      '8': 12, 'octave': 12,\n    };\n  }\n  static get scales() {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n    };\n  }\n  static get scaleTypes() {\n    return {\n      'M': Music.scales.major,\n      'm': Music.scales.minor,\n    };\n  }\n  static get accidentals() {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n  static get noteValues() {\n    return {\n      'c': { root_index: 0, int_val: 0 },\n      'cn': { root_index: 0, int_val: 0 },\n      'c#': { root_index: 0, int_val: 1 },\n      'c##': { root_index: 0, int_val: 2 },\n      'cb': { root_index: 0, int_val: 11 },\n      'cbb': { root_index: 0, int_val: 10 },\n      'd': { root_index: 1, int_val: 2 },\n      'dn': { root_index: 1, int_val: 2 },\n      'd#': { root_index: 1, int_val: 3 },\n      'd##': { root_index: 1, int_val: 4 },\n      'db': { root_index: 1, int_val: 1 },\n      'dbb': { root_index: 1, int_val: 0 },\n      'e': { root_index: 2, int_val: 4 },\n      'en': { root_index: 2, int_val: 4 },\n      'e#': { root_index: 2, int_val: 5 },\n      'e##': { root_index: 2, int_val: 6 },\n      'eb': { root_index: 2, int_val: 3 },\n      'ebb': { root_index: 2, int_val: 2 },\n      'f': { root_index: 3, int_val: 5 },\n      'fn': { root_index: 3, int_val: 5 },\n      'f#': { root_index: 3, int_val: 6 },\n      'f##': { root_index: 3, int_val: 7 },\n      'fb': { root_index: 3, int_val: 4 },\n      'fbb': { root_index: 3, int_val: 3 },\n      'g': { root_index: 4, int_val: 7 },\n      'gn': { root_index: 4, int_val: 7 },\n      'g#': { root_index: 4, int_val: 8 },\n      'g##': { root_index: 4, int_val: 9 },\n      'gb': { root_index: 4, int_val: 6 },\n      'gbb': { root_index: 4, int_val: 5 },\n      'a': { root_index: 5, int_val: 9 },\n      'an': { root_index: 5, int_val: 9 },\n      'a#': { root_index: 5, int_val: 10 },\n      'a##': { root_index: 5, int_val: 11 },\n      'ab': { root_index: 5, int_val: 8 },\n      'abb': { root_index: 5, int_val: 7 },\n      'b': { root_index: 6, int_val: 11 },\n      'bn': { root_index: 6, int_val: 11 },\n      'b#': { root_index: 6, int_val: 0 },\n      'b##': { root_index: 6, int_val: 1 },\n      'bb': { root_index: 6, int_val: 10 },\n      'bbb': { root_index: 6, int_val: 9 },\n    };\n  }\n\n  isValidNoteValue(note) {\n    if (note == null || note < 0 || note >= Music.NUM_TONES)\n      return false;\n    return true;\n  }\n  isValidIntervalValue(interval) {\n    return this.isValidNoteValue(interval);\n  }\n  getNoteParts(noteString) {\n    if (!noteString || noteString.length < 1)\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n\n    if (noteString.length > 3)\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n\n    const note = noteString.toLowerCase();\n\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n\n    if (match != null) {\n      const root = match[1];\n      const accidental = match[2];\n\n      return {\n        root,\n        accidental,\n      };\n    } else {\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n  getKeyParts(keyString) {\n    if (!keyString || keyString.length < 1)\n      throw new Vex.RERR('BadArguments', 'Invalid key: ' + keyString);\n\n    const key = keyString.toLowerCase();\n\n    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n\n    if (match != null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n\n      // Unspecified type implies major\n      if (!type) type = 'M';\n\n      return {\n        root,\n        accidental,\n        type,\n      };\n    } else {\n      throw new Vex.RERR('BadArguments', 'Invalid key: ' + keyString);\n    }\n  }\n  getNoteValue(noteString) {\n    const value = Music.noteValues[noteString];\n    if (value == null)\n      throw new Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);\n\n    return value.int_val;\n  }\n  getIntervalValue(intervalString) {\n    const value = Music.intervals[intervalString];\n    if (value == null)\n      throw new Vex.RERR('BadArguments',\n                         'Invalid interval name: ' + intervalString);\n\n    return value;\n  }\n  getCanonicalNoteName(noteValue) {\n    if (!this.isValidNoteValue(noteValue))\n      throw new Vex.RERR('BadArguments',\n                         'Invalid note value: ' + noteValue);\n\n    return Music.canonical_notes[noteValue];\n  }\n  getCanonicalIntervalName(intervalValue) {\n    if (!this.isValidIntervalValue(intervalValue))\n      throw new Vex.RERR('BadArguments',\n                         'Invalid interval value: ' + intervalValue);\n\n    return Music.diatonic_intervals[intervalValue];\n  }\n\n  /* Given a note, interval, and interval direction, product the\n   * relative note.\n   */\n  getRelativeNoteValue(noteValue, intervalValue, direction) {\n    if (direction == null) direction = 1;\n    if (direction != 1 && direction != -1)\n      throw new Vex.RERR('BadArguments', 'Invalid direction: ' + direction);\n\n    let sum = (noteValue + (direction * intervalValue)) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n\n    return sum;\n  }\n  getRelativeNoteName(root, noteValue) {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n\n      // Possibly wrap around. (Add +1 for modulo operator)\n      const reverse_interval = (((noteValue + 1) + (rootValue + 1)) %\n        Music.NUM_TONES) * multiplier;\n\n      if (Math.abs(reverse_interval) > 2) {\n        throw new Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' +\n                          noteValue);\n      } else {\n        interval = reverse_interval;\n      }\n    }\n\n    if (Math.abs(interval) > 2)\n      throw new Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' +\n                          noteValue);\n\n    let relativeNoteName = parts.root;\n    let i;\n    if (interval > 0) {\n      for (i = 1; i <= interval; ++i)\n        relativeNoteName += '#';\n    } else if (interval < 0) {\n      for (i = -1; i >= interval; --i)\n        relativeNoteName += 'b';\n    }\n\n    return relativeNoteName;\n  }\n\n  /* Return scale tones, given intervals. Each successive interval is\n   * relative to the previous one, e.g., Major Scale:\n   *\n   *   TTSTTTS = [2,2,1,2,2,2,1]\n   *\n   * When used with key = 0, returns C scale (which is isomorphic to\n   * interval list).\n   */\n  getScaleTones(key, intervals) {\n    const tones = [];\n    tones.push(key);\n\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; ++i) {\n      nextNote = this.getRelativeNoteValue(nextNote,\n                                           intervals[i]);\n      if (nextNote != key) tones.push(nextNote);\n    }\n\n    return tones;\n  }\n\n  /* Returns the interval of a note, given a diatonic scale.\n   *\n   * E.g., Given the scale C, and the note E, returns M3\n   */\n  getIntervalBetween(note1, note2, direction) {\n    if (direction == null) direction = 1;\n    if (direction != 1 && direction != -1)\n      throw new Vex.RERR('BadArguments', 'Invalid direction: ' + direction);\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2))\n      throw new Vex.RERR('BadArguments',\n                         'Invalid notes: ' + note1 + ', ' + note2);\n\n    let difference;\n    if (direction == 1)\n      difference = note2 - note1;\n    else\n      difference = note1 - note2;\n\n    if (difference < 0) difference += Music.NUM_TONES;\n    return difference;\n  }\n\n  // Create a scale map that represents the pitch state for a\n  // `keySignature`. For example, passing a `G` to `keySignature` would\n  // return a scale map with every note naturalized except for `F` which\n  // has an `F#` state.\n  createScaleMap(keySignature) {\n    const keySigParts = this.getKeyParts(keySignature);\n    const scaleName = Music.scaleTypes[keySigParts.type];\n\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n\n    if (!scaleName) throw new Vex.RERR('BadArguments', 'Unsupported key type: ' + keySignature);\n\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n\n    const scaleMap = {};\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n\n      scaleMap[rootName] = noteName;\n    }\n\n    return scaleMap;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\n//\n// ## Description\n//\n// This file implements accidentals as modifiers that can be attached to\n// notes. Support is included for both western and microtonal accidentals.\n//\n// See `tests/accidental_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\nimport { Flow } from './tables';\nimport { Music } from './music';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.\nfunction L(...args) { if (Accidental.DEBUG) Vex.L('Vex.Flow.Accidental', args); }\n\n// An `Accidental` inherits from `Modifier`, and is formatted within a\n// `ModifierContext`.\nexport class Accidental extends Modifier {\n  static get CATEGORY() { return 'accidentals'; }\n\n  // Arrange accidentals inside a ModifierContext.\n  static format(accidentals, state) {\n    const leftShift = state.left_shift;\n    const accidentalSpacing = 2;\n\n    // If there are no accidentals, we needn't format their positions\n    if (!accidentals || accidentals.length === 0) return;\n\n    const accList = [];\n    let prevNote = null;\n    let shiftL = 0;\n\n    // First determine the accidentals' Y positions from the note.keys\n    let propsTemp;\n    for (let i = 0; i < accidentals.length; ++i) {\n      const acc = accidentals[i];\n      const note = acc.getNote();\n      const stave = note.getStave();\n      const props = note.getKeyProps()[acc.getIndex()];\n      if (note !== prevNote) {\n         // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          propsTemp = note.getKeyProps()[n];\n          shiftL = propsTemp.displaced ? note.getExtraLeftPx() : shiftL;\n        }\n        prevNote = note;\n      }\n      if (stave !== null) {\n        const lineSpace = stave.options.spacing_between_lines_px;\n        const y = stave.getYForLine(props.line);\n        const accLine = Math.round(y / lineSpace * 2) / 2;\n        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n      } else {\n        accList.push({ line: props.line, shift: shiftL, acc });\n      }\n    }\n\n    // Sort accidentals by line number.\n    accList.sort((a, b) => b.line - a.line);\n\n    // FIXME: Confusing name. Each object in this array has a property called `line`.\n    // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n    const lineList = [];\n\n    // amount by which all accidentals must be shifted right or left for\n    // stem flipping, notehead shifting concerns.\n    let accShift = 0;\n    let previousLine = null;\n\n    // Create an array of unique line numbers (lineList) from accList\n    for (let i = 0; i < accList.length; i++) {\n      const acc = accList[i];\n\n      // if this is the first line, or a new line, add a lineList\n      if (previousLine === null || previousLine !== acc.line) {\n        lineList.push({\n          line: acc.line,\n          flatLine: true,\n          dblSharpLine: true,\n          numAcc: 0,\n          width: 0,\n        });\n      }\n      // if this accidental is not a flat, the accidental needs 3.0 lines lower\n      // clearance instead of 2.5 lines for b or bb.\n      // FIXME: Naming could use work. acc.acc is very awkward\n      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n        lineList[lineList.length - 1].flatLine = false;\n      }\n\n      // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n      if (acc.acc.type !== '##') {\n        lineList[lineList.length - 1].dblSharpLine = false;\n      }\n\n      // Track how many accidentals are on this line:\n      lineList[lineList.length - 1].numAcc++;\n\n      // Track the total x_offset needed for this line which will be needed\n      // for formatting lines w/ multiple accidentals:\n\n      // width = accidental width + universal spacing between accidentals\n      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n\n      // if this accShift is larger, use it to keep first column accidentals in the same line\n      accShift = acc.shift > accShift ? acc.shift : accShift;\n\n      previousLine = acc.line;\n    }\n\n    // ### Place Accidentals in Columns\n    //\n    // Default to a classic triangular layout (middle accidental farthest left),\n    // but follow exceptions as outlined in G. Read's _Music Notation_ and\n    // Elaine Gould's _Behind Bars_.\n    //\n    // Additionally, this implements different vertical collision rules for\n    // flats (only need 2.5 lines clearance below) and double sharps (only\n    // need 2.5 lines of clearance above or below).\n    //\n    // Classic layouts and exception patterns are found in the 'tables.js'\n    // in 'Vex.Flow.accidentalColumnsTable'\n    //\n    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n    // using as few columns as possible for the verticle structure.\n    //\n    // TODO (?): Allow column to be specified for an accidental at run-time?\n\n    let totalColumns = 0;\n\n    // establish the boundaries for a group of notes with clashing accidentals:\n    for (let i = 0; i < lineList.length; i++) {\n      let noFurtherConflicts = false;\n      const groupStart = i;\n      let groupEnd = i;\n\n      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n        // if this note conflicts with the next:\n        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n        // include the next note in the group:\n          groupEnd++;\n        } else {\n          noFurtherConflicts = true;\n        }\n      }\n\n      // Gets an a line from the `lineList`, relative to the current group\n      const getGroupLine = (index) => lineList[groupStart + index];\n      const getGroupLines = (indexes) => indexes.map(getGroupLine);\n      const lineDifference = (indexA, indexB) => {\n        const [a, b] = getGroupLines([indexA, indexB]).map(item => item.line);\n        return a - b;\n      };\n\n      const notColliding = (...indexPairs) =>\n        indexPairs\n          .map(getGroupLines)\n          .every(lines => !this.checkCollision(...lines));\n\n      // Set columns for the lines in this group:\n      const groupLength = groupEnd - groupStart + 1;\n\n      // Set the accidental column for each line of the group\n      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n\n      switch (groupLength) {\n        case 3:\n          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n            endCase = 'second_on_bottom';\n          }\n          break;\n        case 4:\n          if (notColliding([0, 2], [1, 3])) {\n            endCase = 'spaced_out_tetrachord';\n          }\n          break;\n        case 5:\n          if (endCase === 'b' && notColliding([1, 3])) {\n            endCase = 'spaced_out_pentachord';\n            if (notColliding([0, 2], [2, 4])) {\n              endCase = 'very_spaced_out_pentachord';\n            }\n          }\n          break;\n        case 6:\n          if (notColliding([0, 3], [1, 4], [2, 5])) {\n            endCase = 'spaced_out_hexachord';\n          }\n          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n            endCase = 'very_spaced_out_hexachord';\n          }\n          break;\n        default:\n          break;\n      }\n\n      let groupMember;\n      let column;\n      // If the group contains more than seven members, use ascending parallel lines\n      // of accidentals, using as few columns as possible while avoiding collisions.\n      if (groupLength >= 7) {\n        // First, determine how many columns to use:\n        let patternLength = 2;\n        let collisionDetected = true;\n        while (collisionDetected === true) {\n          collisionDetected = false;\n          for (let line = 0; line + patternLength < lineList.length; line++) {\n            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n              collisionDetected = true;\n              patternLength++;\n              break;\n            }\n          }\n        }\n        // Then, assign a column to each line of accidentals\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = ((groupMember - i) % patternLength) + 1;\n          lineList[groupMember].column = column;\n          totalColumns = (totalColumns > column) ? totalColumns : column;\n        }\n\n      // Otherwise, if the group contains fewer than seven members, use the layouts from\n      // the accidentalsColumnsTable housed in tables.js.\n      } else {\n        for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n          column = Flow.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n          lineList[groupMember].column = column;\n          totalColumns = (totalColumns > column) ? totalColumns : column;\n        }\n      }\n\n      // Increment i to the last note that was set, so that if a lower set of notes\n      // does not conflict at all with this group, it can have its own classic shape.\n      i = groupEnd;\n    }\n\n    // ### Convert Columns to x_offsets\n    //\n    // This keeps columns aligned, even if they have different accidentals within them\n    // which sometimes results in a larger x_offset than is an accidental might need\n    // to preserve the symmetry of the accidental shape.\n    //\n    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n    // music with complex chord clusters.\n    //\n    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n    // parallel columns.\n\n    // track each column's max width, which will be used as initial shift of later columns:\n    const columnWidths = [];\n    const columnXOffsets = [];\n    for (let i = 0; i <= totalColumns; i++) {\n      columnWidths[i] = 0;\n      columnXOffsets[i] = 0;\n    }\n\n    columnWidths[0] = accShift + leftShift;\n    columnXOffsets[0] = accShift + leftShift;\n\n    // Fill columnWidths with widest needed x-space;\n    // this is what keeps the columns parallel.\n    lineList.forEach(line => {\n      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;\n    });\n\n    for (let i = 1; i < columnWidths.length; i++) {\n      // this column's offset = this column's width + previous column's offset\n      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n    }\n\n    const totalShift = columnXOffsets[columnXOffsets.length - 1];\n    // Set the xShift for each accidental according to column offsets:\n    let accCount = 0;\n    lineList.forEach(line => {\n      let lineWidth = 0;\n      const lastAccOnLine = accCount + line.numAcc;\n      // handle all of the accidentals on a given line:\n      for (accCount; accCount < lastAccOnLine; accCount++) {\n        const xShift = (columnXOffsets[line.column - 1] + lineWidth);\n        accList[accCount].acc.setXShift(xShift);\n        // keep track of the width of accidentals we've added so far, so that when\n        // we loop, we add space for them.\n        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n        L('Line, accCount, shift: ', line.line, accCount, xShift);\n      }\n    });\n\n    // update the overall layout with the full width of the accidental shapes:\n    state.left_shift += totalShift;\n  }\n\n  // Helper function to determine whether two lines of accidentals collide vertically\n  static checkCollision(line1, line2) {\n    let clearance = line2.line - line1.line;\n    let clearanceRequired = 3;\n    // But less clearance is required for certain accidentals: b, bb and ##.\n    if (clearance > 0) { // then line 2 is on top\n      clearanceRequired = (line2.flatLine || line2.dblSharpLine) ? 2.5 : 3.0;\n      if (line1.dblSharpLine) clearance -= 0.5;\n    } else { // line 1 is on top\n      clearanceRequired = (line1.flatLine || line1.dblSharpLine) ? 2.5 : 3.0;\n      if (line2.dblSharpLine) clearance -= 0.5;\n    }\n    const collision = Math.abs(clearance) < clearanceRequired;\n    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n    return collision;\n  }\n\n  // Use this method to automatically apply accidentals to a set of `voices`.\n  // The accidentals will be remembered between all the voices provided.\n  // Optionally, you can also provide an initial `keySignature`.\n  static applyAccidentals(voices, keySignature) {\n    const tickPositions = [];\n    const tickNoteMap = {};\n\n    // Sort the tickables in each voice by their tick position in the voice\n    voices.forEach(voice => {\n      const tickPosition = new Fraction(0, 1);\n      const notes = voice.getTickables();\n      notes.forEach(note => {\n        const notesAtPosition = tickNoteMap[tickPosition.value()];\n\n        if (!notesAtPosition) {\n          tickPositions.push(tickPosition.value());\n          tickNoteMap[tickPosition.value()] = [note];\n        } else {\n          notesAtPosition.push(note);\n        }\n\n        tickPosition.add(note.getTicks());\n      });\n    });\n\n    const music = new Music();\n\n    // Default key signature is C major\n    if (!keySignature) keySignature = 'C';\n\n    // Get the scale map, which represents the current state of each pitch\n    const scaleMap = music.createScaleMap(keySignature);\n\n    tickPositions.forEach(tick => {\n      const notes = tickNoteMap[tick];\n\n      // Array to store all pitches that modified accidental states\n      // at this tick position\n      const modifiedPitches = [];\n\n      notes.forEach(note => {\n        if (note.isRest()) return;\n\n        // Go through each key and determine if an accidental should be\n        // applied\n        note.keys.forEach((keyString, keyIndex) => {\n          const key = music.getNoteParts(keyString.split('/')[0]);\n\n          // Force a natural for every key without an accidental\n          const accidentalString = key.accidental || 'n';\n          const pitch = key.root + accidentalString;\n\n          // Determine if the current pitch has the same accidental\n          // as the scale state\n          const sameAccidental = scaleMap[key.root] === pitch;\n\n          // Determine if an identical pitch in the chord already\n          // modified the accidental state\n          const previouslyModified = modifiedPitches.indexOf(pitch) > -1;\n\n            // Add the accidental to the StaveNote\n          if (!sameAccidental || (sameAccidental && previouslyModified)) {\n            // Modify the scale map so that the root pitch has an\n            // updated state\n            scaleMap[key.root] = pitch;\n\n            // Create the accidental\n            const accidental = new Accidental(accidentalString);\n\n            // Attach the accidental to the StaveNote\n            note.addAccidental(keyIndex, accidental);\n\n            // Add the pitch to list of pitches that modified accidentals\n            modifiedPitches.push(pitch);\n          }\n        });\n      });\n    });\n  }\n\n  // Create accidental. `type` can be a value from the\n  // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For\n  // example: `#`, `##`, `b`, `n`, etc.\n  constructor(type = null) {\n    super();\n    L('New accidental: ', type);\n\n    this.note = null;\n    // The `index` points to a specific note in a chord.\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.LEFT;\n\n    this.render_options = {\n      // Font size for glyphs\n      font_scale: 38,\n\n      // Length of stroke across heads above or below the stave.\n      stroke_px: 3,\n    };\n\n    this.accidental = Flow.accidentalCodes(this.type);\n    if (!this.accidental) {\n      throw new Vex.RERR('ArgumentError', `Unknown accidental type: ${type}`);\n    }\n\n    // Cautionary accidentals have parentheses around them\n    this.cautionary = false;\n    this.parenLeft = null;\n    this.parenRight = null;\n\n    // Initial width is set from table.\n    this.setWidth(this.accidental.width);\n  }\n\n  getCategory() { return Accidental.CATEGORY; }\n\n  // Attach this accidental to `note`, which must be a `StaveNote`.\n  setNote(note) {\n    if (!note) {\n      throw new Vex.RERR('ArgumentError', `Bad note value: ${note}`);\n    }\n\n    this.note = note;\n\n    // Accidentals attached to grace notes are rendered smaller.\n    if (this.note.getCategory() === 'gracenotes') {\n      this.render_options.font_scale = 25;\n      this.setWidth(this.accidental.gracenote_width);\n    }\n  }\n\n  // If called, draws parenthesis around accidental.\n  setAsCautionary() {\n    this.cautionary = true;\n    this.render_options.font_scale = 28;\n    this.parenLeft = Flow.accidentalCodes('{');\n    this.parenRight = Flow.accidentalCodes('}');\n    const widthAdjust = (this.type === '##' || this.type === 'bb') ? 6 : 4;\n\n    // Make sure `width` accomodates for parentheses.\n    this.setWidth(\n      this.parenLeft.width\n      + this.accidental.width\n      + this.parenRight.width\n      - widthAdjust\n    );\n\n    return this;\n  }\n\n  // Render accidental onto canvas.\n  draw() {\n    const {\n      context,\n      type, position, note, index, cautionary,\n      x_shift, y_shift, width,\n      accidental, parenLeft, parenRight,\n      render_options: { font_scale },\n    } = this;\n\n    if (!context) {\n      throw new Vex.RERR('NoContext', \"Can't draw accidental without a context.\");\n    }\n\n    if (!(note && (index != null))) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw accidental without a note and index.\");\n    }\n\n    // Figure out the start `x` and `y` coordinates for note and index.\n    const start = note.getModifierStartXY(position, index);\n    let accX = ((start.x + x_shift) - width);\n    const accY = start.y + y_shift;\n    L('Rendering: ', type, accX, accY);\n\n    const renderGlyphToContext = Glyph.renderGlyph.bind(null, context);\n\n    if (!cautionary) {\n      // Render the accidental alone.\n      renderGlyphToContext(accX, accY, font_scale, accidental.code);\n    } else {\n      // Render the accidental in parentheses.\n      accX += 3;\n      renderGlyphToContext(accX, accY, font_scale, parenLeft.code);\n      accX += 2;\n      renderGlyphToContext(accX, accY, font_scale, accidental.code);\n      accX += accidental.width - 2;\n      if (type === '##' || type === 'bb') accX -= 2;\n      renderGlyphToContext(accX, accY, font_scale, parenRight.code);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Vex } from './vex';\n\nexport class StaveTie {\n  constructor(notes, text) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    this.notes = notes;\n    this.context = null;\n    this.text = text;\n    this.direction = null;\n\n    this.render_options = {\n      cp1: 8,      // Curve control point 1\n      cp2: 12,      // Curve control point 2\n      text_shift_x: 0,\n      first_x_shift: 0,\n      last_x_shift: 0,\n      y_shift: 7,\n      tie_spacing: 0,\n      font: { family: 'Arial', size: 10, style: '' },\n    };\n\n    this.font = this.render_options.font;\n    this.setNotes(notes);\n  }\n\n  setContext(context) { this.context = context; return this; }\n  setFont(font) { this.font = font; return this; }\n  setDirection(direction) { this.direction = direction; return this; }\n\n  /**\n   * Set the notes to attach this tie to.\n   *\n   * @param {!Object} notes The notes to tie up.\n   */\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note)\n      throw new Vex.RuntimeError('BadArguments',\n          'Tie needs to have either first_note or last_note set.');\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length != notes.last_indices.length)\n      throw new Vex.RuntimeError('BadArguments', 'Tied notes must have similar' +\n      ' index sizes');\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial() {\n    return (!this.first_note || !this.last_note);\n  }\n\n  renderTie(params) {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0)\n      throw new Vex.RERR('BadArguments', 'No Y-values to render');\n\n    const ctx = this.context;\n    let cp1 = this.render_options.cp1;\n    let cp2 = this.render_options.cp2;\n\n    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n      cp1 = 2; cp2 = 8;\n    }\n\n    const first_x_shift = this.render_options.first_x_shift;\n    const last_x_shift = this.render_options.last_x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    for (let i = 0; i < this.first_indices.length; ++i) {\n      const cp_x = ((params.last_x_px + last_x_shift) +\n          (params.first_x_px + first_x_shift)) / 2;\n      const first_y_px = params.first_ys[this.first_indices[i]] + y_shift;\n      const last_y_px = params.last_ys[this.last_indices[i]] + y_shift;\n\n      if (isNaN(first_y_px) || isNaN(last_y_px))\n        throw new Vex.RERR('BadArguments', 'Bad indices for tie rendering.');\n\n      const top_cp_y = ((first_y_px + last_y_px) / 2) + (cp1 * params.direction);\n      const bottom_cp_y = ((first_y_px + last_y_px) / 2) + (cp2 * params.direction);\n\n      ctx.beginPath();\n      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n      ctx.quadraticCurveTo(cp_x, top_cp_y,\n          params.last_x_px + last_x_shift, last_y_px);\n      ctx.quadraticCurveTo(cp_x, bottom_cp_y,\n          params.first_x_px + first_x_shift, first_y_px);\n\n      ctx.closePath();\n      ctx.fill();\n    }\n  }\n\n  renderText(first_x_px, last_x_px) {\n    if (!this.text) return;\n    let center_x = (first_x_px + last_x_px) / 2;\n    center_x -= this.context.measureText(this.text).width / 2;\n\n    this.context.save();\n    this.context.setFont(this.font.family, this.font.size, this.font.style);\n    this.context.fillText(\n        this.text, center_x + this.render_options.text_shift_x,\n        (this.first_note || this.last_note).getStave().getYForTopText() - 1);\n    this.context.restore();\n  }\n\n  draw() {\n    if (!this.context)\n      throw new Vex.RERR('NoContext', 'No context to render tie.');\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    let first_x_px, last_x_px, first_ys, last_ys, stem_direction;\n\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      stem_direction = first_note.getStemDirection();\n      first_ys = first_note.getYs();\n    } else {\n      first_x_px = last_note.getStave().getTieStartX();\n      first_ys = last_note.getYs();\n      this.first_indices = this.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      stem_direction = last_note.getStemDirection();\n      last_ys = last_note.getYs();\n    } else {\n      last_x_px = first_note.getStave().getTieEndX();\n      last_ys = first_note.getYs();\n      this.last_indices = this.first_indices;\n    }\n\n    if (this.direction) {\n      stem_direction = this.direction;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: stem_direction,\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Formatter } from './formatter';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\n\nexport class GraceNoteGroup extends Modifier {\n  static get CATEGORY() { return 'gracenotegroups'; }\n\n  // Arrange groups inside a `ModifierContext`\n  static format(gracenote_groups, state) {\n    const gracenote_spacing = 4;\n\n    if (!gracenote_groups || gracenote_groups.length === 0) return false;\n\n    const group_list = [];\n    let hasStave = false;\n    let prev_note = null;\n    let shiftL = 0;\n\n    let i, gracenote_group, props_tmp;\n    for (i = 0; i < gracenote_groups.length; ++i) {\n      gracenote_group = gracenote_groups[i];\n      const note = gracenote_group.getNote();\n      const stave = note.getStave();\n      if (note != prev_note) {\n         // Iterate through all notes to get the displaced pixels\n        for (let n = 0; n < note.keys.length; ++n) {\n          props_tmp = note.getKeyProps()[n];\n          shiftL = (props_tmp.displaced ? note.getExtraLeftPx() : shiftL);\n        }\n        prev_note = note;\n      }\n      if (stave != null) {\n        hasStave = true;\n        group_list.push({ shift: shiftL, gracenote_group });\n      } else {\n        group_list.push({ shift: shiftL, gracenote_group });\n      }\n    }\n\n    // If first note left shift in case it is displaced\n    let group_shift = group_list[0].shift;\n    let formatWidth;\n    for (i = 0; i < group_list.length; ++i) {\n      gracenote_group = group_list[i].gracenote_group;\n      gracenote_group.preFormat();\n      formatWidth = gracenote_group.getWidth() + gracenote_spacing;\n      group_shift = Math.max(formatWidth, group_shift);\n    }\n\n    for (i = 0; i < group_list.length; ++i) {\n      gracenote_group = group_list[i].gracenote_group;\n      formatWidth = gracenote_group.getWidth() + gracenote_spacing;\n      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n    }\n\n    state.left_shift += group_shift;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // `GraceNoteGroup` inherits from `Modifier` and is placed inside a\n  // `ModifierContext`.\n  constructor(grace_notes, show_slur) {\n    super();\n\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.LEFT;\n    this.grace_notes = grace_notes;\n    this.width = 0;\n\n    this.preFormatted = false;\n\n    this.show_slur = show_slur;\n    this.slur = null;\n\n    this.formatter = new Formatter();\n    this.voice = new Voice({\n      num_beats: 4,\n      beat_value: 4,\n      resolution: Flow.RESOLUTION,\n    }).setStrict(false);\n\n    this.voice.addTickables(this.grace_notes);\n\n    return this;\n  }\n\n  getCategory() { return GraceNoteGroup.CATEGORY; }\n\n  preFormat() {\n    if (this.preFormatted) return;\n\n    this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n    this.setWidth(this.formatter.getMinTotalWidth());\n    this.preFormatted = true;\n  }\n\n  beamNotes() {\n    if (this.grace_notes.length > 1) {\n      const beam = new Beam(this.grace_notes);\n\n      beam.render_options.beam_width = 3;\n      beam.render_options.partial_beam_length = 4;\n\n      this.beam = beam;\n    }\n\n    return this;\n  }\n\n  setNote(note) {\n    this.note = note;\n  }\n  setWidth(width) {\n    this.width = width;\n  }\n  getWidth() {\n    return this.width;\n  }\n  draw() {\n    if (!this.context)  {\n      throw new Vex.RuntimeError('NoContext',\n        \"Can't draw Grace note without a context.\");\n    }\n\n    const note = this.getNote();\n\n    L('Drawing grace note group for:', note);\n\n    if (!(note && (this.index !== null))) {\n      throw new Vex.RuntimeError('NoAttachedNote',\n        \"Can't draw grace note without a parent note and parent note index.\");\n    }\n\n    const that = this;\n    function alignGraceNotesWithNote(grace_notes, note, groupWidth) {\n      // Shift over the tick contexts of each note\n      // So that th aligned with the note\n      const tickContext = note.getTickContext();\n      const extraPx = tickContext.getExtraPx();\n      const x = tickContext.getX() - extraPx.left - extraPx.extraLeft + that.getSpacingFromNextModifier();\n      grace_notes.forEach(graceNote => {\n        const tick_context = graceNote.getTickContext();\n        const x_offset = tick_context.getX();\n        graceNote.setStave(note.stave);\n        tick_context.setX(x + x_offset);\n      });\n    }\n\n    alignGraceNotesWithNote(this.grace_notes, note, this.width);\n\n    // Draw notes\n    this.grace_notes.forEach(function(graceNote) {\n      graceNote.setContext(this.context).draw();\n    }, this);\n\n    // Draw beam\n    if (this.beam) {\n      this.beam.setContext(this.context).draw();\n    }\n\n    if (this.show_slur) {\n      // Create and draw slur\n      this.slur = new StaveTie({\n        last_note: this.grace_notes[0],\n        first_note: note,\n        first_indices: [0],\n        last_indices: [0],\n      });\n\n      this.slur.render_options.cp2 = 12;\n      this.slur.setContext(this.context).draw();\n    }\n  }\n}\n\n// To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.\nfunction L() { if (GraceNoteGroup.DEBUG) Vex.L('Vex.Flow.GraceNoteGroup', arguments); }\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Larry Kuhns\r\n//\r\n// ## Description\r\n// This file implements the `Stroke` class which renders chord strokes\r\n// that can be arpeggiated, brushed, rasquedo, etc.\r\n\r\nimport { Vex } from './vex';\r\nimport { Flow } from './tables';\r\nimport { Modifier } from './modifier';\r\nimport { StaveNote } from './stavenote';\r\nimport { Glyph } from './glyph';\r\n\r\nexport class Stroke extends Modifier {\r\n  static get CATEGORY() { return 'strokes'; }\r\n  static get Type() {\r\n    return {\r\n      BRUSH_DOWN: 1,\r\n      BRUSH_UP: 2,\r\n      ROLL_DOWN: 3,        // Arpegiated chord\r\n      ROLL_UP: 4,          // Arpegiated chord\r\n      RASQUEDO_DOWN: 5,\r\n      RASQUEDO_UP: 6,\r\n    };\r\n  }\r\n\r\n  // Arrange strokes inside `ModifierContext`\r\n  static format(strokes, state) {\r\n    const left_shift = state.left_shift;\r\n    const stroke_spacing = 0;\r\n\r\n    if (!strokes || strokes.length === 0) return this;\r\n\r\n    const str_list = [];\r\n    let i, str, shift;\r\n    for (i = 0; i < strokes.length; ++i) {\r\n      str = strokes[i];\r\n      const note = str.getNote();\r\n      let props;\r\n      if (note instanceof StaveNote) {\r\n        props = note.getKeyProps()[str.getIndex()];\r\n        shift = (props.displaced ? note.getExtraLeftPx() : 0);\r\n        str_list.push({ line: props.line, shift, str });\r\n      } else {\r\n        props = note.getPositions()[str.getIndex()];\r\n        str_list.push({ line: props.str, shift: 0, str });\r\n      }\r\n    }\r\n\r\n    const str_shift = left_shift;\r\n    let x_shift = 0;\r\n\r\n    // There can only be one stroke .. if more than one, they overlay each other\r\n    for (i = 0; i < str_list.length; ++i) {\r\n      str = str_list[i].str;\r\n      shift = str_list[i].shift;\r\n\r\n      str.setXShift(str_shift + shift);\r\n      x_shift = Math.max(str.getWidth() + stroke_spacing, x_shift);\r\n    }\r\n\r\n    state.left_shift += x_shift;\r\n    return true;\r\n  }\r\n\r\n  constructor(type, options) {\r\n    super();\r\n\r\n    this.note = null;\r\n    this.options = Vex.Merge({}, options);\r\n\r\n    // multi voice - span stroke across all voices if true\r\n    this.all_voices = 'all_voices' in this.options ?\r\n      this.options.all_voices : true;\r\n\r\n    // multi voice - end note of stroke, set in draw()\r\n    this.note_end = null;\r\n    this.index = null;\r\n    this.type = type;\r\n    this.position = Modifier.Position.LEFT;\r\n\r\n    this.render_options = {\r\n      font_scale: 38,\r\n      stroke_px: 3,\r\n      stroke_spacing: 10,\r\n    };\r\n\r\n    this.font = {\r\n      family: 'serif',\r\n      size: 10,\r\n      weight: 'bold italic',\r\n    };\r\n\r\n    this.setXShift(0);\r\n    this.setWidth(10);\r\n  }\r\n  getCategory() { return Stroke.CATEGORY; }\r\n  getPosition() { return this.position; }\r\n  addEndNote(note) { this.note_end = note; return this; }\r\n\r\n  draw() {\r\n    if (!this.context) throw new Vex.RERR('NoContext',\r\n      \"Can't draw stroke without a context.\");\r\n    if (!(this.note && (this.index != null))) throw new Vex.RERR('NoAttachedNote',\r\n      \"Can't draw stroke without a note and index.\");\r\n    const start = this.note.getModifierStartXY(this.position, this.index);\r\n    let ys = this.note.getYs();\r\n    let topY = start.y;\r\n    let botY = start.y;\r\n    const x = start.x - 5;\r\n    const line_space = this.note.stave.options.spacing_between_lines_px;\r\n\r\n    const notes = this.getModifierContext().getModifiers(this.note.getCategory());\r\n    let i;\r\n    for (i = 0; i < notes.length; i++) {\r\n      ys = notes[i].getYs();\r\n      for (let n = 0; n < ys.length; n++) {\r\n        if (this.note == notes[i] || this.all_voices) {\r\n          topY = Vex.Min(topY, ys[n]);\r\n          botY = Vex.Max(botY, ys[n]);\r\n        }\r\n      }\r\n    }\r\n\r\n    let arrow, arrow_shift_x, arrow_y, text_shift_x, text_y;\r\n    switch (this.type) {\r\n      case Stroke.Type.BRUSH_DOWN:\r\n        arrow = 'vc3';\r\n        arrow_shift_x = -3;\r\n        arrow_y = topY - (line_space / 2) + 10;\r\n        botY += (line_space / 2);\r\n        break;\r\n      case Stroke.Type.BRUSH_UP:\r\n        arrow = 'v11';\r\n        arrow_shift_x = 0.5;\r\n        arrow_y = botY + (line_space / 2);\r\n        topY -= (line_space / 2);\r\n        break;\r\n      case Stroke.Type.ROLL_DOWN:\r\n      case Stroke.Type.RASQUEDO_DOWN:\r\n        arrow = 'vc3';\r\n        arrow_shift_x = -3;\r\n        text_shift_x = this.x_shift + arrow_shift_x - 2;\r\n        if (this.note instanceof StaveNote) {\r\n          topY += 1.5 * line_space;\r\n          if ((botY - topY) % 2 !== 0) {\r\n            botY += 0.5 * line_space;\r\n          } else {\r\n            botY += line_space;\r\n          }\r\n          arrow_y = topY - line_space;\r\n          text_y = botY + line_space + 2;\r\n        } else {\r\n          topY += 1.5 * line_space;\r\n          botY += line_space;\r\n          arrow_y = topY - 0.75 * line_space;\r\n          text_y = botY + 0.25 * line_space;\r\n        }\r\n        break;\r\n      case Stroke.Type.ROLL_UP:\r\n      case Stroke.Type.RASQUEDO_UP:\r\n        arrow = 'v52';\r\n        arrow_shift_x = -4;\r\n        text_shift_x = this.x_shift + arrow_shift_x - 1;\r\n        if (this.note instanceof StaveNote) {\r\n          arrow_y = line_space / 2;\r\n          topY += 0.5 * line_space;\r\n          if ((botY - topY) % 2 === 0) {\r\n            botY += line_space / 2;\r\n          }\r\n          arrow_y = botY + 0.5 * line_space;\r\n          text_y = topY - 1.25 * line_space;\r\n        } else {\r\n          topY += 0.25 * line_space;\r\n          botY += 0.5 * line_space;\r\n          arrow_y = botY + 0.25 * line_space;\r\n          text_y = topY - line_space;\r\n        }\r\n        break;\r\n    }\r\n\r\n    // Draw the stroke\r\n    if (this.type == Stroke.Type.BRUSH_DOWN ||\r\n        this.type == Stroke.Type.BRUSH_UP) {\r\n      this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);\r\n    } else {\r\n      if (this.note instanceof StaveNote) {\r\n        for (i = topY; i <= botY; i += line_space) {\r\n          Glyph.renderGlyph(this.context, x + this.x_shift - 4,\r\n                               i,\r\n                               this.render_options.font_scale, 'va3');\r\n        }\r\n      } else {\r\n        for (i = topY; i <= botY; i += 10) {\r\n          Glyph.renderGlyph(this.context, x + this.x_shift - 4,\r\n                               i,\r\n                               this.render_options.font_scale, 'va3');\r\n        }\r\n        if (this.type == Stroke.Type.RASQUEDO_DOWN)\r\n          text_y = i + 0.25 * line_space;\r\n      }\r\n    }\r\n\r\n    // Draw the arrow head\r\n    Glyph.renderGlyph(this.context, x + this.x_shift + arrow_shift_x, arrow_y,\r\n                         this.render_options.font_scale, arrow);\r\n\r\n    // Draw the rasquedo \"R\"\r\n    if (this.type == Stroke.Type.RASQUEDO_DOWN ||\r\n        this.type == Stroke.Type.RASQUEDO_UP) {\r\n      this.context.save();\r\n      this.context.setFont(this.font.family, this.font.size, this.font.weight);\r\n      this.context.fillText('R', x + text_shift_x, text_y);\r\n      this.context.restore();\r\n    }\r\n  }\r\n}\r\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\r\n// Author: Larry Kuhns\r\n//\r\n// ## Description\r\n// This file implements the `StringNumber` class which renders string\r\n// number annotations beside notes.\r\n\r\nimport { Vex } from './vex';\r\nimport { Modifier } from './modifier';\r\nimport { Renderer } from './renderer';\r\nimport { StaveNote } from './stavenote';\r\n\r\nexport class StringNumber extends Modifier {\r\n  static get CATEGORY() { return 'stringnumber'; }\r\n\r\n  // ## Static Methods\r\n  // Arrange string numbers inside a `ModifierContext`\r\n  static format(nums, state) {\r\n    const left_shift = state.left_shift;\r\n    const right_shift = state.right_shift;\r\n    const num_spacing = 1;\r\n\r\n    if (!nums || nums.length === 0) return this;\r\n\r\n    const nums_list = [];\r\n    let prev_note = null;\r\n    let shift_left = 0;\r\n    let shift_right = 0;\r\n\r\n    let i;\r\n    let num;\r\n    let note;\r\n    let pos;\r\n    let props_tmp;\r\n    for (i = 0; i < nums.length; ++i) {\r\n      num = nums[i];\r\n      note = num.getNote();\r\n\r\n      for (i = 0; i < nums.length; ++i) {\r\n        num = nums[i];\r\n        note = num.getNote();\r\n        pos = num.getPosition();\r\n        const props = note.getKeyProps()[num.getIndex()];\r\n\r\n        if (note !== prev_note) {\r\n          for (let n = 0; n < note.keys.length; ++n) {\r\n            props_tmp = note.getKeyProps()[n];\r\n            if (left_shift === 0) {\r\n              shift_left = props_tmp.displaced ? note.getExtraLeftPx() : shift_left;\r\n            }\r\n            if (right_shift === 0) {\r\n              shift_right = props_tmp.displaced ? note.getExtraRightPx() : shift_right;\r\n            }\r\n          }\r\n          prev_note = note;\r\n        }\r\n\r\n        nums_list.push({\r\n          pos,\r\n          note,\r\n          num,\r\n          line: props.line,\r\n          shiftL: shift_left,\r\n          shiftR: shift_right,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Sort string numbers by line number.\r\n    nums_list.sort((a, b) => b.line - a.line);\r\n\r\n    // TODO: This variable never gets assigned to anything. Is that a bug or can this be removed?\r\n    let num_shiftL = 0; // eslint-disable-line\r\n    let num_shiftR = 0;\r\n    let x_widthL = 0;\r\n    let x_widthR = 0;\r\n    let last_line = null;\r\n    let last_note = null;\r\n    for (i = 0; i < nums_list.length; ++i) {\r\n      let num_shift = 0;\r\n      note = nums_list[i].note;\r\n      pos = nums_list[i].pos;\r\n      num = nums_list[i].num;\r\n      const line = nums_list[i].line;\r\n      const shiftL = nums_list[i].shiftL;\r\n      const shiftR = nums_list[i].shiftR;\r\n\r\n      // Reset the position of the string number every line.\r\n      if (line !== last_line || note !== last_note) {\r\n        num_shiftL = left_shift + shiftL;\r\n        num_shiftR = right_shift + shiftR;\r\n      }\r\n\r\n      const num_width = num.getWidth() + num_spacing;\r\n      if (pos === Modifier.Position.LEFT) {\r\n        num.setXShift(left_shift);\r\n        num_shift = shift_left + num_width; // spacing\r\n        x_widthL = (num_shift > x_widthL) ? num_shift : x_widthL;\r\n      } else if (pos === Modifier.Position.RIGHT) {\r\n        num.setXShift(num_shiftR);\r\n        num_shift += num_width; // spacing\r\n        x_widthR = (num_shift > x_widthR) ? num_shift : x_widthR;\r\n      }\r\n      last_line = line;\r\n      last_note = note;\r\n    }\r\n\r\n    state.left_shift += x_widthL;\r\n    state.right_shift += x_widthR;\r\n    return true;\r\n  }\r\n\r\n  constructor(number) {\r\n    super();\r\n\r\n    this.note = null;\r\n    this.last_note = null;\r\n    this.index = null;\r\n    this.string_number = number;\r\n    this.setWidth(20); // ???\r\n    this.position = Modifier.Position.ABOVE; // Default position above stem or note head\r\n    this.x_shift = 0;\r\n    this.y_shift = 0;\r\n    this.x_offset = 0; // Horizontal offset from default\r\n    this.y_offset = 0; // Vertical offset from default\r\n    this.dashed = true; // true - draw dashed extension  false - no extension\r\n    this.leg = Renderer.LineEndType.NONE;   // draw upward/downward leg at the of extension line\r\n    this.radius = 8;\r\n    this.font = {\r\n      family: 'sans-serif',\r\n      size: 10,\r\n      weight: 'bold',\r\n    };\r\n  }\r\n  getCategory() { return StringNumber.CATEGORY; }\r\n  getNote() { return this.note; }\r\n  setNote(note) { this.note = note; return this; }\r\n  getIndex() { return this.index; }\r\n  setIndex(index) { this.index = index; return this; }\r\n\r\n  setLineEndType(leg) {\r\n    if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\r\n      this.leg = leg;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  getPosition() { return this.position; }\r\n  setPosition(position) {\r\n    if (position >= Modifier.Position.LEFT && position <= Modifier.Position.BELOW) {\r\n      this.position = position;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  setStringNumber(number) { this.string_number = number; return this; }\r\n  setOffsetX(x) { this.x_offset = x; return this; }\r\n  setOffsetY(y) { this.y_offset = y; return this; }\r\n  setLastNote(note) { this.last_note = note; return this; }\r\n  setDashed(dashed) { this.dashed = dashed; return this; }\r\n\r\n  draw() {\r\n    if (!this.context) {\r\n      throw new Vex.RERR('NoContext', \"Can't draw string number without a context.\");\r\n    }\r\n    if (!(this.note && (this.index != null))) {\r\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw string number without a note and index.\");\r\n    }\r\n\r\n    const ctx = this.context;\r\n    const line_space = this.note.stave.options.spacing_between_lines_px;\r\n\r\n    const start = this.note.getModifierStartXY(this.position, this.index);\r\n    let dot_x = (start.x + this.x_shift + this.x_offset);\r\n    let dot_y = start.y + this.y_shift + this.y_offset;\r\n\r\n    switch (this.position) {\r\n      case Modifier.Position.ABOVE:\r\n      case Modifier.Position.BELOW: {\r\n        const stem_ext = this.note.getStemExtents();\r\n        let top = stem_ext.topY;\r\n        let bottom = stem_ext.baseY + 2;\r\n\r\n        if (this.note.stem_direction === StaveNote.STEM_DOWN) {\r\n          top = stem_ext.baseY;\r\n          bottom = stem_ext.topY - 2;\r\n        }\r\n\r\n        if (this.position === Modifier.Position.ABOVE) {\r\n          dot_y = this.note.hasStem()\r\n            ? top - (line_space * 1.75)\r\n            : start.y - (line_space * 1.75);\r\n        } else {\r\n          dot_y = this.note.hasStem()\r\n            ? bottom + (line_space * 1.5)\r\n            : start.y + (line_space * 1.75);\r\n        }\r\n\r\n        dot_y += this.y_shift + this.y_offset;\r\n\r\n        break;\r\n      } case Modifier.Position.LEFT:\r\n        dot_x -= (this.radius / 2) + 5;\r\n        break;\r\n      case Modifier.Position.RIGHT:\r\n        dot_x += (this.radius / 2) + 6;\r\n        break;\r\n      default:\r\n        throw new Vex.RERR(\r\n          'InvalidPosition', `The position ${this.position} is invalid`\r\n        );\r\n    }\r\n\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\r\n    ctx.lineWidth = 1.5;\r\n    ctx.stroke();\r\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\r\n    const x = dot_x - ctx.measureText(this.string_number).width / 2;\r\n    ctx.fillText('' + this.string_number, x, dot_y + 4.5);\r\n\r\n    if (this.last_note != null) {\r\n      const end = this.last_note.getStemX() - this.note.getX() + 5;\r\n      ctx.strokeStyle = '#000000';\r\n      ctx.lineCap = 'round';\r\n      ctx.lineWidth = 0.6;\r\n      if (this.dashed) {\r\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\r\n      } else {\r\n        Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\r\n      }\r\n\r\n      let len;\r\n      let pattern;\r\n      switch (this.leg) {\r\n        case Renderer.LineEndType.UP:\r\n          len = -10;\r\n          pattern = this.dashed ? [3, 3] : [3, 0];\r\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\r\n          break;\r\n        case Renderer.LineEndType.DOWN:\r\n          len = 10;\r\n          pattern = this.dashed ? [3, 3] : [3, 0];\r\n          Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n//\n// ## Description\n//\n// This file implements articulations and accents as modifiers that can be\n// attached to notes. The complete list of articulations is available in\n// `tables.js` under `Vex.Flow.articulationCodes`.\n//\n// See `tests/articulation_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.\nfunction L(...args) { if (Articulation.DEBUG) Vex.L('Vex.Flow.Articulation', args); }\n\nexport class Articulation extends Modifier {\n  static get CATEGORY() { return 'articulations'; }\n\n  static format(articulations, state) {\n    if (!articulations || articulations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < articulations.length; ++i) {\n      let increment = 1;\n      const articulation = articulations[i];\n      width = Math.max(articulation.getWidth(), width);\n\n      const type = Flow.articulationCodes(articulation.type);\n\n      if (!type.between_lines) increment += 1.5;\n\n      if (articulation.getPosition() === Modifier.Position.ABOVE) {\n        articulation.setTextLine(state.top_text_line);\n        state.top_text_line += increment;\n      } else {\n        articulation.setTextLine(state.text_line);\n        state.text_line += increment;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // Create a new articulation of type `type`, which is an entry in\n  // `Vex.Flow.articulationCodes` in `tables.js`.\n  constructor(type) {\n    super();\n\n    this.note = null;\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.articulation = Flow.articulationCodes(this.type);\n    if (!this.articulation) {\n      throw new Vex.RERR('ArgumentError', \"Articulation not found: '\" + this.type + \"'\");\n    }\n\n    // Default width comes from articulation table.\n    this.setWidth(this.articulation.width);\n  }\n\n  getCategory() { return Articulation.CATEGORY; }\n\n  // Render articulation in position next to note.\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', \"Can't draw Articulation without a context.\");\n    }\n    if (!(this.note && (this.index !== null))) {\n      throw new Vex.RERR('NoAttachedNote', \"Can't draw Articulation without a note and index.\");\n    }\n\n    const stem_direction = this.note.getStemDirection();\n    const stave = this.note.getStave();\n\n    const is_on_head = (this.position === Modifier.Position.ABOVE &&\n                      stem_direction === StaveNote.STEM_DOWN) ||\n                     (this.position === Modifier.Position.BELOW &&\n                      stem_direction === StaveNote.STEM_UP);\n\n    const needsLineAdjustment = (articulation, note_line, line_spacing) => {\n      const offset_direction = (articulation.position === Modifier.Position.ABOVE) ? 1 : -1;\n      const duration = articulation.getNote().getDuration();\n      if (!is_on_head && Flow.durationToNumber(duration) <= 1) {\n        // Add stem length, unless it's on a whole note.\n        note_line += offset_direction * 3.5;\n      }\n\n      const articulation_line = note_line + (offset_direction * line_spacing);\n\n      if (articulation_line >= 1 &&\n         articulation_line <= 5 &&\n         articulation_line % 1 === 0) {\n        return true;\n      }\n\n      return false;\n    };\n\n    // Articulations are centered over/under the note head.\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let glyph_y = start.y;\n    let shiftY = 0;\n    let line_spacing = 1;\n    const spacing = stave.getSpacingBetweenLines();\n    const is_tabnote = this.note.getCategory() === 'tabnotes';\n    const stem_ext = this.note.getStem().getExtents();\n\n    let top = stem_ext.topY;\n    let bottom = stem_ext.baseY;\n\n    if (stem_direction === StaveNote.STEM_DOWN) {\n      top = stem_ext.baseY;\n      bottom = stem_ext.topY;\n    }\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered\n    // outside the stave.\n    if (is_tabnote) {\n      if (this.note.hasStem()) {\n        if (stem_direction === StaveNote.STEM_UP) {\n          bottom = stave.getYForBottomText(this.text_line - 2);\n        } else if (stem_direction === StaveNote.STEM_DOWN) {\n          top = stave.getYForTopText(this.text_line - 1.5);\n        }\n      } else { // Without a stem\n        top = stave.getYForTopText(this.text_line - 1);\n        bottom = stave.getYForBottomText(this.text_line - 2);\n      }\n    }\n\n    const is_above = (this.position === Modifier.Position.ABOVE);\n    const note_line = this.note.getLineNumber(is_above);\n\n    // Beamed stems are longer than quarter note stems.\n    if (!is_on_head && this.note.beam) line_spacing += 0.5;\n\n    // If articulation will overlap a line, reposition it.\n    if (needsLineAdjustment(this, note_line, line_spacing)) line_spacing += 0.5;\n\n    let glyph_y_between_lines;\n    if (this.position === Modifier.Position.ABOVE) {\n      shiftY = this.articulation.shift_up;\n      glyph_y_between_lines = (top - 7) - (spacing * (this.text_line + line_spacing));\n\n      if (this.articulation.between_lines) {\n        glyph_y = glyph_y_between_lines;\n      } else {\n        glyph_y = Math.min(stave.getYForTopText(this.text_line) - 3, glyph_y_between_lines);\n      }\n    } else {\n      shiftY = this.articulation.shift_down - 10;\n\n      glyph_y_between_lines = bottom + 10 + spacing * (this.text_line + line_spacing);\n      if (this.articulation.between_lines) {\n        glyph_y = glyph_y_between_lines;\n      } else {\n        glyph_y = Math.max(stave.getYForBottomText(this.text_line), glyph_y_between_lines);\n      }\n    }\n\n    const glyph_x = start.x + this.articulation.shift_right;\n    glyph_y += shiftY + this.y_shift;\n\n    L('Rendering articulation: ', this.articulation, glyph_x, glyph_y);\n    Glyph.renderGlyph(this.context, glyph_x, glyph_y,\n                         this.render_options.font_scale, this.articulation.code);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\n\nimport { Vex } from './vex';\nimport { Fraction } from './fraction';\n\nexport class TickContext {\n  static getNextContext(tContext) {\n    const contexts = tContext.tContexts;\n    const index = contexts.indexOf(tContext);\n\n    return contexts[index + 1];\n  }\n\n  constructor() {\n    this.currentTick = new Fraction(0, 1);\n    this.maxTicks = new Fraction(0, 1);\n    this.minTicks = null;\n    this.width = 0;\n    this.padding = 3;     // padding on each side (width += padding * 2)\n    this.pixelsUsed = 0;\n    this.x = 0;\n    this.tickables = [];   // Notes, tabs, chords, lyrics.\n    this.notePx = 0;       // width of widest note in this context\n    this.extraLeftPx = 0;  // Extra left pixels for modifers & displace notes\n    this.extraRightPx = 0; // Extra right pixels for modifers & displace notes\n    this.align_center = false;\n\n    this.tContexts = [];   // Parent array of tick contexts\n\n    // Ignore this tick context for formatting and justification\n    this.ignore_ticks = true;\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.context = null; // Rendering context\n  }\n  setContext(context) { this.context = context; return this; }\n  getContext() { return this.context; }\n  shouldIgnoreTicks() { return this.ignore_ticks; }\n  getWidth() { return this.width + (this.padding * 2); }\n  getX() { return this.x; }\n  setX(x) { this.x = x; return this; }\n  getPixelsUsed() { return this.pixelsUsed; }\n  setPixelsUsed(pixelsUsed) { this.pixelsUsed = pixelsUsed; return this; }\n  setPadding(padding) { this.padding = padding; return this; }\n  getMaxTicks() { return this.maxTicks; }\n  getMinTicks() { return this.minTicks; }\n  getTickables() { return this.tickables; }\n  getCenterAlignedTickables() {\n    return this.tickables.filter(tickable => tickable.isCenterAligned());\n  }\n\n  // Get widths context, note and left/right modifiers for formatting\n  getMetrics() {\n    return { width: this.width, notePx: this.notePx,\n             extraLeftPx: this.extraLeftPx, extraRightPx: this.extraRightPx };\n  }\n  getCurrentTick() { return this.currentTick; }\n  setCurrentTick(tick) {\n    this.currentTick = tick;\n    this.preFormatted = false;\n  }\n\n  // Get left & right pixels used for modifiers\n  getExtraPx() {\n    let left_shift = 0;\n    let right_shift = 0;\n    let extraLeftPx = 0;\n    let extraRightPx = 0;\n    for (let i = 0; i < this.tickables.length; i++) {\n      extraLeftPx = Math.max(this.tickables[i].extraLeftPx, extraLeftPx);\n      extraRightPx = Math.max(this.tickables[i].extraRightPx, extraRightPx);\n      const mContext = this.tickables[i].modifierContext;\n      if (mContext && mContext != null) {\n        left_shift = Math.max(left_shift, mContext.state.left_shift);\n        right_shift = Math.max(right_shift, mContext.state.right_shift);\n      }\n    }\n    return { left: left_shift, right: right_shift,\n             extraLeft: extraLeftPx, extraRight: extraRightPx };\n  }\n  addTickable(tickable) {\n    if (!tickable) {\n      throw new Vex.RERR('BadArgument', 'Invalid tickable added.');\n    }\n\n    if (!tickable.shouldIgnoreTicks()) {\n      this.ignore_ticks = false;\n\n      const ticks = tickable.getTicks();\n\n      if (ticks.greaterThan(this.maxTicks)) {\n        this.maxTicks = ticks.clone();\n      }\n\n      if (this.minTicks == null) {\n        this.minTicks = ticks.clone();\n      } else if (ticks.lessThan(this.minTicks)) {\n        this.minTicks = ticks.clone();\n      }\n    }\n\n    tickable.setTickContext(this);\n    this.tickables.push(tickable);\n    this.preFormatted = false;\n    return this;\n  }\n  preFormat() {\n    if (this.preFormatted) return;\n\n    for (let i = 0; i < this.tickables.length; ++i) {\n      const tickable = this.tickables[i];\n      tickable.preFormat();\n      const metrics = tickable.getMetrics();\n\n      // Maintain max extra pixels from all tickables in the context\n      this.extraLeftPx = Math.max(this.extraLeftPx,\n                                  metrics.extraLeftPx + metrics.modLeftPx);\n      this.extraRightPx = Math.max(this.extraRightPx,\n                                   metrics.extraRightPx + metrics.modRightPx);\n\n      // Maintain the widest note for all tickables in the context\n      this.notePx = Math.max(this.notePx, metrics.noteWidth);\n\n      // Recalculate the tick context total width\n      this.width = this.notePx +\n                   this.extraLeftPx +\n                   this.extraRightPx;\n    }\n\n    return this;\n  }\n  postFormat() {\n    if (this.postFormatted) return this;\n    this.postFormatted = true;\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements ornaments as modifiers that can be\n// attached to notes. The complete list of ornaments is available in\n// `tables.js` under `Vex.Flow.ornamentCodes`.\n//\n// See `tests/ornament_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { TickContext } from './tickcontext';\nimport { StaveNote } from './stavenote';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.\nfunction L() { if (Ornament.DEBUG) Vex.L('Vex.Flow.Ornament', arguments); }\n\n// Accidental position modifications for each glyph\nconst acc_mods = {\n  'n': {\n    shift_x: 1,\n    shift_y_upper: 0,\n    shift_y_lower: 0,\n    height: 17,\n  },\n  '#': {\n    shift_x: 0,\n    shift_y_upper: -2,\n    shift_y_lower: -2,\n    height: 20,\n  },\n  'b': {\n    shift_x: 1,\n    shift_y_upper: 0,\n    shift_y_lower: 3,\n    height: 18,\n  },\n  '##': {\n    shift_x: 0,\n    shift_y_upper: 0,\n    shift_y_lower: 0,\n    height: 12,\n  },\n  'bb': {\n    shift_x: 0,\n    shift_y_upper: 0,\n    shift_y_lower: 4,\n    height: 17,\n  },\n  'db': {\n    shift_x: -3,\n    shift_y_upper: 0,\n    shift_y_lower: 4,\n    height: 17,\n  },\n  'bbs': {\n    shift_x: 0,\n    shift_y_upper: 0,\n    shift_y_lower: 4,\n    height: 17,\n  },\n  'd': {\n    shift_x: 0,\n    shift_y_upper: 0,\n    shift_y_lower: 0,\n    height: 17,\n  },\n  '++': {\n    shift_x: -2,\n    shift_y_upper: -6,\n    shift_y_lower: -3,\n    height: 22,\n  },\n  '+': {\n    shift_x: 1,\n    shift_y_upper: -4,\n    shift_y_lower: -2,\n    height: 20,\n  },\n  'bs': {\n    shift_x: 0,\n    shift_y_upper: 0,\n    shift_y_lower: 4,\n    height: 17,\n  },\n  'bss': {\n    shift_x: 0,\n    shift_y_upper: 0,\n    shift_y_lower: 4,\n    height: 17,\n  },\n  '++-': {\n    shift_x: -2,\n    shift_y_upper: -6,\n    shift_y_lower: -3,\n    height: 22,\n  },\n  '+-': {\n    shift_x: 1,\n    shift_y_upper: -4,\n    shift_y_lower: -2,\n    height: 20,\n  },\n};\n\nexport class Ornament extends Modifier {\n  static get CATEGORY() { return 'ornaments'; }\n\n  // ## Static Methods\n  // Arrange ornaments inside `ModifierContext`\n  static format(ornaments, state) {\n    if (!ornaments || ornaments.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < ornaments.length; ++i) {\n      const ornament = ornaments[i];\n      let increment = 1;\n      width = Math.max(ornament.getWidth(), width);\n\n      const type = Flow.ornamentCodes(ornament.type);\n\n      if (!type.between_lines) increment += 1.5;\n\n      if (ornament.getPosition() === Modifier.Position.ABOVE) {\n        ornament.setTextLine(state.top_text_line);\n        state.top_text_line += increment;\n      } else {\n        ornament.setTextLine(state.text_line);\n        state.text_line += increment;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // Create a new ornament of type `type`, which is an entry in\n  // `Vex.Flow.ornamentCodes` in `tables.js`.\n  constructor(type) {\n    super();\n\n    this.note = null;\n    this.index = null;\n    this.type = type;\n    this.position = Modifier.Position.ABOVE;\n    this.delayed = false;\n\n    this.accidental_upper = '';\n    this.accidental_lower = '';\n\n    this.render_options = {\n      font_scale: 38,\n    };\n\n    this.ornament = Flow.ornamentCodes(this.type);\n    if (!this.ornament) throw new Vex.RERR('ArgumentError',\n       \"Ornament not found: '\" + this.type + \"'\");\n\n    // Default width comes from ornament table.\n    this.setWidth(this.ornament.width);\n  }\n\n  getCategory() { return Ornament.CATEGORY; }\n\n  // Set whether the ornament is to be delayed\n  setDelayed(delayed) { this.delayed = delayed; return this; }\n\n  // Set the upper accidental for the ornament\n  setUpperAccidental(acc) {\n    this.accidental_upper = acc;\n    return this;\n  }\n\n  // Set the lower accidental for the ornament\n  setLowerAccidental(acc) {\n    this.accidental_lower = acc;\n    return this;\n  }\n\n  // Render ornament in position next to note.\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoContext',\n      \"Can't draw Ornament without a context.\");\n    if (!(this.note && (this.index !== null))) throw new Vex.RERR('NoAttachedNote',\n      \"Can't draw Ornament without a note and index.\");\n\n    const ctx = this.context;\n    const stem_direction = this.note.getStemDirection();\n    const stave = this.note.getStave();\n\n    // Get stem extents\n    const stem_ext = this.note.getStem().getExtents();\n    let top, bottom;\n    if (stem_direction === StaveNote.STEM_DOWN) {\n      top = stem_ext.baseY;\n      bottom = stem_ext.topY;\n    } else {\n      top = stem_ext.topY;\n      bottom = stem_ext.baseY;\n    }\n\n    // TabNotes don't have stems attached to them. Tab stems are rendered\n    // outside the stave.\n    const is_tabnote = this.note.getCategory() === 'tabnotes';\n    if (is_tabnote) {\n      if (this.note.hasStem()) {\n        if (stem_direction === StaveNote.STEM_UP) {\n          bottom = stave.getYForBottomText(this.text_line - 2);\n        } else if (stem_direction === StaveNote.STEM_DOWN) {\n          top = stave.getYForTopText(this.text_line - 1.5);\n        }\n      } else { // Without a stem\n        top = stave.getYForTopText(this.text_line - 1);\n        bottom = stave.getYForBottomText(this.text_line - 2);\n      }\n    }\n\n    const is_on_head = stem_direction === StaveNote.STEM_DOWN;\n    const spacing = stave.getSpacingBetweenLines();\n    let line_spacing = 1;\n\n    // Beamed stems are longer than quarter note stems, adjust accordingly\n    if (!is_on_head && this.note.beam) {\n      line_spacing += 0.5;\n    }\n\n    const total_spacing = spacing * (this.text_line + line_spacing);\n    const glyph_y_between_lines = (top - 7) - total_spacing;\n\n    // Get initial coordinates for the modifier position\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let glyph_x = start.x + this.ornament.shift_right;\n    let glyph_y = Math.min(stave.getYForTopText(this.text_line) - 3, glyph_y_between_lines);\n    glyph_y += this.ornament.shift_up + this.y_shift;\n\n    // Ajdust x position if ornament is delayed\n    if (this.delayed) {\n      glyph_x += this.ornament.width;\n      const next_context = TickContext.getNextContext(this.note.getTickContext());\n      if (next_context) {\n        glyph_x += (next_context.getX() - glyph_x) * 0.5;\n      } else {\n        glyph_x += (stave.x + stave.width - glyph_x) * 0.5;\n      }\n    }\n\n    const ornament = this;\n    function drawAccidental(ctx, code, upper) {\n      const accidental = Flow.accidentalCodes(code);\n\n      let acc_x = glyph_x - 3;\n      let acc_y = glyph_y + 2;\n\n      // Special adjustments for trill glyph\n      if (upper) {\n        acc_y -= mods ? mods.height : 18;\n        acc_y +=  ornament.type === 'tr' ? -8 : 0;\n      } else {\n        acc_y +=  ornament.type === 'tr' ? -6 : 0;\n      }\n\n      // Fine tune position of accidental glyph\n      var mods = acc_mods[code];\n      if (mods) {\n        acc_x += mods.shift_x;\n        acc_y += upper ? mods.shift_y_upper : mods.shift_y_lower;\n      }\n\n      // Render the glyph\n      const scale = ornament.render_options.font_scale / 1.3;\n      Glyph.renderGlyph(ctx, acc_x, acc_y, scale, accidental.code);\n\n      // If rendered a bottom accidental, increase the y value by the\n      // accidental height so that the ornament's glyph is shifted up\n      if (!upper) {\n        glyph_y -= mods ? mods.height : 18;\n      }\n    }\n\n    // Draw lower accidental for ornament\n    if (this.accidental_lower) {\n      drawAccidental(ctx, this.accidental_lower, false, glyph_x, glyph_y);\n    }\n\n    L('Rendering ornament: ', this.ornament, glyph_x, glyph_y);\n    Glyph.renderGlyph(ctx, glyph_x, glyph_y,\n                         this.render_options.font_scale, this.ornament.code);\n\n    // Draw upper accidental for ornament\n    if (this.accidental_upper) {\n      drawAccidental(ctx, this.accidental_upper, true, glyph_x, glyph_y);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements text annotations as modifiers that can be attached to\n// notes.\n//\n// See `tests/annotation_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\n\n// To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.\nfunction L(...args) { if (Annotation.DEBUG) Vex.L('Vex.Flow.Annotation', args); }\n\nexport class Annotation extends Modifier {\n  static get CATEGORY() { return 'annotations'; }\n\n  // Text annotations can be positioned and justified relative to the note.\n  static get Justify() {\n    return {\n      LEFT: 1,\n      CENTER: 2,\n      RIGHT: 3,\n      CENTER_STEM: 4,\n    };\n  }\n  static get VerticalJustify() {\n    return {\n      TOP: 1,\n      CENTER: 2,\n      BOTTOM: 3,\n      CENTER_STEM: 4,\n    };\n  }\n\n  // Arrange annotations within a `ModifierContext`\n  static format(annotations, state) {\n    if (!annotations || annotations.length === 0) return false;\n\n    let width = 0;\n    for (let i = 0; i < annotations.length; ++i) {\n      const annotation = annotations[i];\n      width = Math.max(annotation.getWidth(), width);\n      if (annotation.getPosition() === Modifier.Position.ABOVE) {\n        annotation.setTextLine(state.top_text_line);\n        state.top_text_line++;\n      } else {\n        annotation.setTextLine(state.text_line);\n        state.text_line++;\n      }\n    }\n\n    state.left_shift += width / 2;\n    state.right_shift += width / 2;\n    return true;\n  }\n\n  // ## Prototype Methods\n  //\n  // Annotations inherit from `Modifier` and is positioned correctly when\n  // in a `ModifierContext`.\n  // Create a new `Annotation` with the string `text`.\n  constructor(text) {\n    super();\n\n    this.note = null;\n    this.index = null;\n    this.text = text;\n    this.justification = Annotation.Justify.CENTER;\n    this.vert_justification = Annotation.VerticalJustify.TOP;\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    // The default width is calculated from the text.\n    this.setWidth(Flow.textWidth(text));\n  }\n\n  getCategory() { return Annotation.CATEGORY; }\n\n  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.\n  setFont(family, size, weight) {\n    this.font = { family, size, weight };\n    return this;\n  }\n\n  // Set vertical position of text (above or below stave). `just` must be\n  // a value in `Annotation.VerticalJustify`.\n  setVerticalJustification(just) {\n    this.vert_justification = just;\n    return this;\n  }\n\n  // Get and set horizontal justification. `justification` is a value in\n  // `Annotation.Justify`.\n  getJustification() { return this.justification; }\n  setJustification(justification) {\n    this.justification = justification;\n    return this;\n  }\n\n  // Render text beside the note.\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', \"Can't draw text annotation without a context.\");\n    }\n    if (!this.note) {\n      throw new Vex.RERR(\n        'NoNoteForAnnotation', \"Can't draw text annotation without an attached note.\"\n      );\n    }\n\n    const start = this.note.getModifierStartXY(Modifier.Position.ABOVE,\n        this.index);\n\n    // We're changing context parameters. Save current state.\n    this.context.save();\n    this.context.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = this.context.measureText(this.text).width;\n\n    // Estimate text height to be the same as the width of an 'm'.\n    //\n    // This is a hack to work around the inability to measure text height\n    // in HTML5 Canvas (and SVG).\n    const text_height = this.context.measureText('m').width;\n    let x;\n    let y;\n\n    if (this.justification === Annotation.Justify.LEFT) {\n      x = start.x;\n    } else if (this.justification === Annotation.Justify.RIGHT) {\n      x = start.x - text_width;\n    } else if (this.justification === Annotation.Justify.CENTER) {\n      x = start.x - text_width / 2;\n    } else /* CENTER_STEM */ {\n      x = this.note.getStemX() - text_width / 2;\n    }\n\n    let stem_ext;\n    let spacing;\n    const has_stem = this.note.hasStem();\n    const stave = this.note.getStave();\n\n    // The position of the text varies based on whether or not the note\n    // has a stem.\n    if (has_stem) {\n      stem_ext = this.note.getStem().getExtents();\n      spacing = stave.getSpacingBetweenLines();\n    }\n\n    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {\n      y = stave.getYForBottomText(this.text_line);\n      if (has_stem) {\n        const stem_base = (this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY);\n        y = Math.max(y, stem_base + (spacing * (this.text_line + 2)));\n      }\n    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {\n      const yt = this.note.getYForTopText(this.text_line) - 1;\n      const yb = stave.getYForBottomText(this.text_line);\n      y = yt + (yb - yt) / 2 + text_height / 2;\n    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {\n      y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);\n      if (has_stem) {\n        y = Math.min(y, (stem_ext.topY - 5) - (spacing * this.text_line));\n      }\n    } else /* CENTER_STEM */{\n      const extents = this.note.getStemExtents();\n      y = extents.topY + (extents.baseY - extents.topY) / 2 +\n        text_height / 2;\n    }\n\n    L('Rendering annotation: ', this.text, x, y);\n    this.context.fillText(this.text, x, y);\n    this.context.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements tablature bends.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\n/**\n   @param text Text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n   @param release If true, render a release. (DEPRECATED)\n   @param phrase If set, ignore \"text\" and \"release\", and use the more\n                 sophisticated phrase specified.\n\n   Example of a phrase:\n\n     [{\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"half\"\n       width: 8;\n     },\n     {\n       type: UP,\n       text: \"whole\"\n       width: 8;\n     },\n     {\n       type: DOWN,\n       text: \"1 1/2\"\n       width: 8;\n     }]\n */\nexport class Bend extends Modifier {\n  static get CATEGORY() { return 'bends'; }\n\n  static get UP() {\n    return 0;\n  }\n  static get DOWN() {\n    return 1;\n  }\n\n  // ## Static Methods\n  // Arrange bends in `ModifierContext`\n  static format(bends, state) {\n    if (!bends || bends.length === 0) return false;\n\n    let last_width = 0;\n    // Bends are always on top.\n    const text_line = state.top_text_line;\n\n    // Format Bends\n    for (let i = 0; i < bends.length; ++i) {\n      const bend = bends[i];\n      bend.setXShift(last_width);\n      last_width = bend.getWidth();\n      bend.setTextLine(text_line);\n    }\n\n    state.right_shift += last_width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  // ## Prototype Methods\n  constructor(text, release, phrase) {\n    super();\n\n    this.text = text;\n    this.x_shift = 0;\n    this.release = release || false;\n    this.font = '10pt Arial';\n    this.render_options = {\n      line_width: 1.5,\n      line_style: '#777777',\n      bend_width: 8,\n      release_width: 8,\n    };\n\n    if (phrase) {\n      this.phrase = phrase;\n    } else {\n      // Backward compatibility\n      this.phrase = [{ type: Bend.UP, text: this.text }];\n      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });\n    }\n\n    this.updateWidth();\n  }\n\n  getCategory() { return Bend.CATEGORY; }\n\n  setXShift(value) {\n    this.x_shift = value;\n    this.updateWidth();\n  }\n  setFont(font) { this.font = font; return this; }\n  getText() { return this.text; }\n  updateWidth() {\n    const that = this;\n\n    function measure_text(text) {\n      let text_width;\n      if (that.context) {\n        text_width = that.context.measureText(text).width;\n      } else {\n        text_width = Flow.textWidth(text);\n      }\n\n      return text_width;\n    }\n\n    let total_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if ('width' in bend) {\n        total_width += bend.width;\n      } else {\n        const additional_width = (bend.type === Bend.UP) ?\n          this.render_options.bend_width : this.render_options.release_width;\n\n        bend.width = Vex.Max(additional_width, measure_text(bend.text)) + 3;\n        bend.draw_width = bend.width / 2;\n        total_width += bend.width;\n      }\n    }\n\n    this.setWidth(total_width + this.x_shift);\n    return this;\n  }\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', \"Can't draw bend without a context.\");\n    }\n    if (!(this.note && (this.index != null))) {\n      throw new Vex.RERR('NoNoteForBend', \"Can't draw bend without a note or index.\");\n    }\n\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT,\n        this.index);\n    start.x += 3;\n    start.y += 0.5;\n    const x_shift = this.x_shift;\n\n    const ctx = this.context;\n    const bend_height = this.note.getStave().getYForTopText(this.text_line) + 3;\n    const annotation_y = this.note.getStave().getYForTopText(this.text_line) - 1;\n    const that = this;\n\n    function renderBend(x, y, width, height) {\n      const cp_x = x + width;\n      const cp_y = y;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, y);\n      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderRelease(x, y, width, height) {\n      ctx.save();\n      ctx.beginPath();\n      ctx.setLineWidth(that.render_options.line_width);\n      ctx.setStrokeStyle(that.render_options.line_style);\n      ctx.setFillStyle(that.render_options.line_style);\n      ctx.moveTo(x, height);\n      ctx.quadraticCurveTo(\n          x + width, height,\n          x + width, y);\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    function renderArrowHead(x, y, direction) {\n      const width = 4;\n      const dir = direction || 1;\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(x - width, y + width * dir);\n      ctx.lineTo(x + width, y + width * dir);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    function renderText(x, text) {\n      ctx.save();\n      ctx.setRawFont(that.font);\n      const render_x = x - (ctx.measureText(text).width / 2);\n      ctx.fillText(text, render_x, annotation_y);\n      ctx.restore();\n    }\n\n    let last_bend = null;\n    let last_drawn_width = 0;\n    for (let i = 0; i < this.phrase.length; ++i) {\n      const bend = this.phrase[i];\n      if (i === 0) bend.draw_width += x_shift;\n\n      last_drawn_width = bend.draw_width +\n        (last_bend ? last_bend.draw_width : 0) -\n        (i === 1 ? x_shift : 0);\n      if (bend.type === Bend.UP) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderArrowHead(start.x, bend_height);\n        }\n\n        renderBend(start.x, start.y, last_drawn_width, bend_height);\n      }\n\n      if (bend.type === Bend.DOWN) {\n        if (last_bend && last_bend.type === Bend.UP) {\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend && last_bend.type === Bend.DOWN) {\n          renderArrowHead(start.x, start.y, -1);\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n\n        if (last_bend === null) {\n          last_drawn_width = bend.draw_width;\n          renderRelease(start.x, start.y, last_drawn_width, bend_height);\n        }\n      }\n\n      renderText(start.x + last_drawn_width, bend.text);\n      last_bend = bend;\n      last_bend.x = start.x;\n\n      start.x += last_drawn_width;\n    }\n\n    // Final arrowhead and text\n    if (last_bend.type === Bend.UP) {\n      renderArrowHead(last_bend.x + last_drawn_width, bend_height);\n    } else if (last_bend.type === Bend.DOWN) {\n      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements vibratos.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\nimport { Bend } from './bend';\n\nexport class Vibrato extends Modifier {\n  static get CATEGORY() { return 'vibratos'; }\n\n  // ## Static Methods\n  // Arrange vibratos inside a `ModifierContext`.\n  static format(vibratos, state, context) {\n    if (!vibratos || vibratos.length === 0) return false;\n\n    // Vibratos are always on top.\n    let text_line = state.top_text_line;\n    let width = 0;\n    let shift = state.right_shift - 7;\n\n    // If there's a bend, drop the text line\n    const bends = context.getModifiers(Bend.CATEGORY);\n    if (bends && bends.length > 0) {\n      text_line--;\n    }\n\n    // Format Vibratos\n    for (let i = 0; i < vibratos.length; ++i) {\n      const vibrato = vibratos[i];\n      vibrato.setXShift(shift);\n      vibrato.setTextLine(text_line);\n      width += vibrato.getWidth();\n      shift += width;\n    }\n\n    state.right_shift += width;\n    state.top_text_line += 1;\n    return true;\n  }\n\n  // ## Prototype Methods\n  constructor() {\n    super();\n\n    this.harsh = false;\n    this.position = Modifier.Position.RIGHT;\n    this.render_options = {\n      vibrato_width: 20,\n      wave_height: 6,\n      wave_width: 4,\n      wave_girth: 2,\n    };\n\n    this.setVibratoWidth(this.render_options.vibrato_width);\n  }\n  getCategory() { return Vibrato.CATEGORY; }\n  setHarsh(harsh) { this.harsh = harsh; return this; }\n  setVibratoWidth(width) {\n    this.vibrato_width = width;\n    this.setWidth(this.vibrato_width);\n    return this;\n  }\n\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', \"Can't draw vibrato without a context.\");\n    }\n\n    if (!this.note) {\n      throw new Vex.RERR('NoNoteForVibrato', \"Can't draw vibrato without an attached note.\");\n    }\n\n    const start = this.note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n\n    const ctx = this.context;\n    const vibrato_width = this.vibrato_width;\n\n    const renderVibrato = (x, y) => {\n      const { wave_width, wave_girth, wave_height } = this.render_options;\n      const num_waves = vibrato_width / wave_width;\n\n      ctx.beginPath();\n\n      let i;\n      if (this.harsh) {\n        ctx.moveTo(x, y + wave_girth + 1);\n        for (i = 0; i < num_waves / 2; ++i) {\n          ctx.lineTo(x + wave_width, y - (wave_height / 2));\n          x += wave_width;\n          ctx.lineTo(x + wave_width, y + (wave_height / 2));\n          x += wave_width;\n        }\n        for (i = 0; i < num_waves / 2; ++i) {\n          ctx.lineTo(x - wave_width, (y - (wave_height / 2)) + wave_girth + 1);\n          x -= wave_width;\n          ctx.lineTo(x - wave_width, (y + (wave_height / 2)) + wave_girth + 1);\n          x -= wave_width;\n        }\n        ctx.fill();\n      } else {\n        ctx.moveTo(x, y + wave_girth);\n        for (i = 0; i < num_waves / 2; ++i) {\n          ctx.quadraticCurveTo(x + (wave_width / 2), y - (wave_height / 2), x + wave_width, y);\n          x += wave_width;\n          ctx.quadraticCurveTo(x + (wave_width / 2), y + (wave_height / 2), x + wave_width, y);\n          x += wave_width;\n        }\n\n        for (i = 0; i < num_waves / 2; ++i) {\n          ctx.quadraticCurveTo(\n            x - (wave_width / 2),\n            (y + (wave_height / 2)) + wave_girth,\n            x - wave_width, y + wave_girth);\n          x -= wave_width;\n          ctx.quadraticCurveTo(\n            x - (wave_width / 2),\n            (y - (wave_height / 2)) + wave_girth,\n            x - wave_width, y + wave_girth);\n          x -= wave_width;\n        }\n        ctx.fill();\n      }\n    };\n\n    const vx = start.x + this.x_shift;\n    const vy = this.note.getYForTopText(this.text_line) + 2;\n\n    renderVibrato(vx, vy);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of modifiers to notes (e.g. bends,\n// fingering positions etc.)\n\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Accidental } from './accidental';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Stroke } from './strokes';\nimport { StringNumber } from './stringnumber';\nimport { Articulation } from './articulation';\nimport { Ornament } from './ornament';\nimport { Annotation } from './annotation';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\n\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\nfunction L(...args) { if (ModifierContext.DEBUG) Vex.L('Vex.Flow.ModifierContext', args); }\n\nexport class ModifierContext {\n  constructor() {\n    // Current modifiers\n    this.modifiers = {};\n\n    // Formatting data.\n    this.preFormatted = false;\n    this.postFormatted = false;\n    this.width = 0;\n    this.spacing = 0;\n    this.state = {\n      left_shift: 0,\n      right_shift: 0,\n      text_line: 0,\n      top_text_line: 0,\n    };\n\n    // Add new modifiers to this array. The ordering is significant -- lower\n    // modifiers are formatted and rendered before higher ones.\n    this.PREFORMAT = [\n      StaveNote,\n      Dot,\n      FretHandFinger,\n      Accidental,\n      GraceNoteGroup,\n      Stroke,\n      StringNumber,\n      Articulation,\n      Ornament,\n      Annotation,\n      Bend,\n      Vibrato,\n    ];\n\n    // If post-formatting is required for an element, add it to this array.\n    this.POSTFORMAT = [StaveNote];\n  }\n\n  addModifier(modifier) {\n    const type = modifier.getCategory();\n    if (!this.modifiers[type]) this.modifiers[type] = [];\n    this.modifiers[type].push(modifier);\n    modifier.setModifierContext(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  getModifiers(type) { return this.modifiers[type]; }\n  getWidth() { return this.width; }\n  getExtraLeftPx() { return this.state.left_shift; }\n  getExtraRightPx() { return this.state.right_shift; }\n  getState() { return this.state; }\n\n  getMetrics() {\n    if (!this.formatted) {\n      throw new Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');\n    }\n\n    return {\n      width: this.state.left_shift + this.state.right_shift + this.spacing,\n      spacing: this.spacing,\n      extra_left_px: this.state.left_shift,\n      extra_right_px: this.state.right_shift,\n    };\n  }\n\n  preFormat() {\n    if (this.preFormatted) return;\n    this.PREFORMAT.forEach((modifier) => {\n      L('Preformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.format(this.getModifiers(modifier.CATEGORY), this.state, this);\n    });\n\n    // Update width of this modifier context\n    this.width = this.state.left_shift + this.state.right_shift;\n    this.preFormatted = true;\n  }\n\n  postFormat() {\n    if (this.postFormatted) return;\n    this.POSTFORMAT.forEach((modifier) => {\n      L('Postformatting ModifierContext: ', modifier.CATEGORY);\n      modifier.postFormat(this.getModifiers(modifier.CATEGORY), this);\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the formatting and layout algorithms that are used\n// to position notes in a voice. The algorithm can align multiple voices both\n// within a stave, and across multiple staves.\n//\n// To do this, the formatter breaks up voices into a grid of rational-valued\n// `ticks`, to which each note is assigned. Then, minimum widths are assigned\n// to each tick based on the widths of the notes and modifiers in that tick. This\n// establishes the smallest amount of space required for each tick.\n//\n// Finally, the formatter distributes the left over space proportionally to\n// all the ticks, setting the `x` values of the notes in each tick.\n//\n// See `tests/formatter_tests.js` for usage examples. The helper functions included\n// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\nimport { Voice } from './voice';\nimport { Beam } from './beam';\nimport { StaveConnector } from './staveconnector';\nimport { StaveNote } from './stavenote';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\n\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nfunction L(...args) { if (Formatter.DEBUG) Vex.L('Vex.Flow.Formatter', args); }\n\n// Helper function to locate the next non-rest note(s).\nfunction lookAhead(notes, restLine, i, compare) {\n  // If no valid next note group, nextRestLine is same as current.\n  let nextRestLine = restLine;\n\n  // Get the rest line for next valid non-rest note group.\n  for (i += 1; i < notes.length; i += 1) {\n    const note = notes[i];\n    if (!note.isRest() && !note.shouldIgnoreTicks()) {\n      nextRestLine = note.getLineForRest();\n      break;\n    }\n  }\n\n  // Locate the mid point between two lines.\n  if (compare && restLine !== nextRestLine) {\n    const top = Math.max(restLine, nextRestLine);\n    const bot = Math.min(restLine, nextRestLine);\n    nextRestLine = Vex.MidLine(top, bot);\n  }\n  return nextRestLine;\n}\n\n// Take an array of `voices` and place aligned tickables in the same context. Returns\n// a mapping from `tick` to `ContextType`, a list of `tick`s, and the resolution\n// multiplier.\n//\n// Params:\n// * `voices`: Array of `Voice` instances.\n// * `ContextType`: A context class (e.g., `ModifierContext`, `TickContext`)\n// * `addToContext`: Function to add tickable to context.\nfunction createContexts(voices, ContextType, addToContext) {\n  if (!voices || !voices.length) {\n    throw new Vex.RERR('BadArgument', 'No voices to format');\n  }\n\n  // Find out highest common multiple of resolution multipliers.\n  // The purpose of this is to find out a common denominator\n  // for all fractional tick values in all tickables of all voices,\n  // so that the values can be expanded and the numerator used\n  // as an integer tick value.\n  const totalTicks = voices[0].getTotalTicks();\n  const resolutionMultiplier = voices.reduce((resolutionMultiplier, voice) => {\n    if (!voice.getTotalTicks().equals(totalTicks)) {\n      throw new Vex.RERR(\n        'TickMismatch', 'Voices should have same total note duration in ticks.'\n       );\n    }\n\n    if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n      throw new Vex.RERR(\n        'IncompleteVoice', 'Voice does not have enough notes.'\n      );\n    }\n\n    return Math.max(\n      resolutionMultiplier,\n      Fraction.LCM(resolutionMultiplier, voice.getResolutionMultiplier())\n    );\n  }, 1);\n\n  // Initialize tick maps.\n  const tickToContextMap = {};\n  const tickList = [];\n  const contexts = [];\n\n  // For each voice, extract notes and create a context for every\n  // new tick that hasn't been seen before.\n  voices.forEach(voice => {\n    // Use resolution multiplier as denominator to expand ticks\n    // to suitable integer values, so that no additional expansion\n    // of fractional tick values is needed.\n    const ticksUsed = new Fraction(0, resolutionMultiplier);\n\n    voice.getTickables().forEach(tickable => {\n      const integerTicks = ticksUsed.numerator;\n\n      // If we have no tick context for this tick, create one.\n      if (!tickToContextMap[integerTicks]) {\n        const newContext = new ContextType();\n        contexts.push(newContext);\n        tickToContextMap[integerTicks] = newContext;\n      }\n\n      // Add this tickable to the TickContext.\n      addToContext(tickable, tickToContextMap[integerTicks]);\n\n      // Maintain a sorted list of tick contexts.\n      tickList.push(integerTicks);\n      ticksUsed.add(tickable.getTicks());\n    });\n  });\n\n  return {\n    map: tickToContextMap,\n    array: contexts,\n    list: Vex.SortAndUnique(tickList, (a, b) => a - b, (a, b) => a === b),\n    resolutionMultiplier,\n  };\n}\n\nexport class Formatter {\n\n  // Helper function to format and draw a single voice. Returns a bounding\n  // box for the notation.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `stave` - The stave to which to draw (`Stave` or `TabStave`)\n  // * `notes` - Array of `Note` instances (`StaveNote`, `TextNote`, `TabNote`, etc.)\n  // * `params` - One of below:\n  //    * Setting `autobeam` only `(context, stave, notes, true)` or\n  //      `(ctx, stave, notes, {autobeam: true})`\n  //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n  //    * Setting both a struct is needed `(context, stave, notes, {\n  //      autobeam: true, align_rests: true})`\n  //\n  // `autobeam` automatically generates beams for the notes.\n  // `align_rests` aligns rests with nearby notes.\n  static FormatAndDraw(ctx, stave, notes, params) {\n    const options = {\n      auto_beam: false,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      Vex.Merge(options, params);\n    } else if (typeof params === 'boolean') {\n      options.auto_beam = params;\n    }\n\n    // Start by creating a voice and adding all the notes to it.\n    const voice = new Voice(Flow.TIME4_4)\n      .setMode(Voice.Mode.SOFT)\n      .addTickables(notes);\n\n    // Then create beams, if requested.\n    const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n\n    // Instantiate a `Formatter` and format the notes.\n    new Formatter()\n      .joinVoices([voice], { align_rests: options.align_rests })\n      .formatToStave([voice], stave, { align_rests: options.align_rests });\n\n    // Render the voice and beams to the stave.\n    voice.setStave(stave).draw(ctx, stave);\n    beams.forEach(beam => beam.setContext(ctx).draw());\n\n    // Return the bounding box of the voice.\n    return voice.getBoundingBox();\n  }\n\n  // Helper function to format and draw aligned tab and stave notes in two\n  // separate staves.\n  //\n  // Parameters:\n  // * `ctx` - The rendering context\n  // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.\n  // * `stave` - A `Stave` instance on which to render `Note`s.\n  // * `notes` - Array of `Note` instances for the stave (`StaveNote`, `BarNote`, etc.)\n  // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n  // * `autobeam` - Automatically generate beams.\n  // * `params` - A configuration object:\n  //    * `autobeam` automatically generates beams for the notes.\n  //    * `align_rests` aligns rests with nearby notes.\n  static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n    const opts = {\n      auto_beam: autobeam,\n      align_rests: false,\n    };\n\n    if (typeof params === 'object') {\n      Vex.Merge(opts, params);\n    } else if (typeof params === 'boolean') {\n      opts.auto_beam = params;\n    }\n\n    // Create a `4/4` voice for `notes`.\n    const notevoice = new Voice(Flow.TIME4_4)\n      .setMode(Voice.Mode.SOFT)\n      .addTickables(notes);\n\n    // Create a `4/4` voice for `tabnotes`.\n    const tabvoice = new Voice(Flow.TIME4_4)\n      .setMode(Voice.Mode.SOFT)\n      .addTickables(tabnotes);\n\n      // Then create beams, if requested.\n    const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n\n    // Instantiate a `Formatter` and align tab and stave notes.\n    new Formatter()\n      .joinVoices([notevoice], { align_rests: opts.align_rests })\n      .joinVoices([tabvoice])\n      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n\n    // Render voices and beams to staves.\n    notevoice.draw(ctx, stave);\n    tabvoice.draw(ctx, tabstave);\n    beams.forEach(beam => beam.setContext(ctx).draw());\n\n    // Draw a connector between tab and note staves.\n    new StaveConnector(stave, tabstave).setContext(ctx).draw();\n  }\n\n  // Auto position rests based on previous/next note positions.\n  //\n  // Params:\n  // * `notes`: An array of notes.\n  // * `alignAllNotes`: If set to false, only aligns non-beamed notes.\n  // * `alignTuplets`: If set to false, ignores tuplets.\n  static AlignRestsToNotes(notes, alignAllNotes, alignTuplets) {\n    notes.forEach((note, index) => {\n      if (note instanceof StaveNote && note.isRest()) {\n        if (note.tuplet && !alignTuplets) return;\n\n        // If activated rests not on default can be rendered as specified.\n        const position = note.getGlyph().position.toUpperCase();\n        if (position !== 'R/4' && position !== 'B/4') return;\n\n        if (alignAllNotes || note.beam != null) {\n          // Align rests with previous/next notes.\n          const props = note.getKeyProps()[0];\n          if (index === 0) {\n            props.line = lookAhead(notes, props.line, index, false);\n            note.setKeyLine(0, props.line);\n          } else if (index > 0 && index < notes.length) {\n            // If previous note is a rest, use its line number.\n            let restLine;\n            if (notes[index - 1].isRest()) {\n              restLine = notes[index - 1].getKeyProps()[0].line;\n              props.line = restLine;\n            } else {\n              restLine = notes[index - 1].getLineForRest();\n              // Get the rest line for next valid non-rest note group.\n              props.line = lookAhead(notes, restLine, index, true);\n            }\n            note.setKeyLine(0, props.line);\n          }\n        }\n      }\n    });\n\n    return this;\n  }\n\n  constructor() {\n    // Minimum width required to render all the notes in the voices.\n    this.minTotalWidth = 0;\n\n    // This is set to `true` after `minTotalWidth` is calculated.\n    this.hasMinTotalWidth = false;\n\n    // The suggested amount of space for each tick.\n    this.pixelsPerTick = 0;\n\n    // Total number of ticks in the voice.\n    this.totalTicks = new Fraction(0, 1);\n\n    // Arrays of tick and modifier contexts.\n    this.tickContexts = null;\n    this.modiferContexts = null;\n  }\n\n  // Find all the rests in each of the `voices` and align them\n  // to neighboring notes. If `alignAllNotes` is `false`, then only\n  // align non-beamed notes.\n  alignRests(voices, alignAllNotes) {\n    if (!voices || !voices.length) {\n      throw new Vex.RERR('BadArgument', 'No voices to format rests');\n    }\n\n    voices.forEach(voice =>\n      Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n  }\n\n  // Calculate the minimum width required to align and format `voices`.\n  preCalculateMinTotalWidth(voices) {\n    // Cache results.\n    if (this.hasMinTotalWidth) return this.minTotalWidth;\n\n    // Create tick contexts if not already created.\n    if (!this.tickContexts) {\n      if (!voices) {\n        throw new Vex.RERR(\n          'BadArgument', \"'voices' required to run preCalculateMinTotalWidth\"\n        );\n      }\n\n      this.createTickContexts(voices);\n    }\n\n    const { list: contextList, map: contextMap } = this.tickContexts;\n\n    // Go through each tick context and calculate total width.\n    this.minTotalWidth = contextList\n      .map(tick => {\n        const context = contextMap[tick];\n        context.preFormat();\n        return context.getWidth();\n      })\n      .reduce((a, b) => a + b, 0);\n\n    this.hasMinTotalWidth = true;\n\n    return this.minTotalWidth;\n  }\n\n  // Get minimum width required to render all voices. Either `format` or\n  // `preCalculateMinTotalWidth` must be called before this method.\n  getMinTotalWidth() {\n    if (!this.hasMinTotalWidth) {\n      throw new Vex.RERR(\n        'NoMinTotalWidth',\n        \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\"\n      );\n    }\n\n    return this.minTotalWidth;\n  }\n\n  // Create `ModifierContext`s for each tick in `voices`.\n  createModifierContexts(voices) {\n    const contexts = createContexts(\n      voices,\n      ModifierContext,\n      (tickable, context) => tickable.addToModifierContext(context)\n    );\n\n    this.modiferContexts = contexts;\n    return contexts;\n  }\n\n  // Create `TickContext`s for each tick in `voices`. Also calculate the\n  // total number of ticks in voices.\n  createTickContexts(voices) {\n    const contexts = createContexts(\n      voices,\n      TickContext,\n      (tickable, context) => context.addTickable(tickable)\n    );\n\n    contexts.array.forEach(context => {\n      context.tContexts = contexts.array;\n    });\n\n    this.totalTicks = voices[0].getTicksUsed().clone();\n    this.tickContexts = contexts;\n    return contexts;\n  }\n\n  // This is the core formatter logic. Format voices and justify them\n  // to `justifyWidth` pixels. `renderingContext` is required to justify elements\n  // that can't retreive widths without a canvas. This method sets the `x` positions\n  // of all the tickables/notes in the formatter.\n  preFormat(justifyWidth, renderingContext, voices, stave) {\n    // Initialize context maps.\n    const contexts = this.tickContexts;\n    const { list: contextList, map: contextMap, resolutionMultiplier } = contexts;\n\n    // If voices and a stave were provided, set the Stave for each voice\n    // and preFormat to apply Y values to the notes;\n    if (voices && stave) {\n      voices.forEach(voice => voice.setStave(stave).preFormat());\n    }\n\n    // Figure out how many pixels to allocate per tick.\n    if (!justifyWidth) {\n      justifyWidth = 0;\n      this.pixelsPerTick = 0;\n    } else {\n      this.pixelsPerTick = justifyWidth / (this.totalTicks.value() * resolutionMultiplier);\n    }\n\n    // Now distribute the ticks to each tick context, and assign them their\n    // own X positions.\n    let x = 0;\n    const centerX = justifyWidth / 2;\n    let whiteSpace = 0; // White space to right of previous note\n    let tickSpace = 0;  // Pixels from prev note x-pos to curent note x-pos\n    let prevTick = 0;\n    let prevWidth = 0;\n    let lastMetrics = null;\n    const initialJustifyWidth = justifyWidth;\n    this.minTotalWidth = 0;\n\n    // Pass 1: Give each note maximum width requested by context.\n    contextList.forEach((tick, index) => {\n      const context = contextMap[tick];\n      if (renderingContext) context.setContext(renderingContext);\n\n      // Make sure that all tickables in this context have calculated their\n      // space requirements.\n      context.preFormat();\n\n      const thisMetrics = context.getMetrics();\n      const width = context.getWidth();\n      this.minTotalWidth += width;\n      let minX = 0;\n      const pxUsed = width;\n\n      // Calculate space between last note and next note.\n      tickSpace = Math.min((tick - prevTick) * this.pixelsPerTick, pxUsed);\n\n      // Shift next note up `tickSpace` pixels.\n      let setX = x + tickSpace;\n\n      // Calculate the minimum next note position to allow for right modifiers.\n      if (lastMetrics != null) {\n        minX = x + prevWidth - lastMetrics.extraLeftPx;\n      }\n\n      // Determine the space required for the previous tick.\n      // The `shouldIgnoreTicks` bool is true for elements in the stave\n      // that don't consume ticks (bar lines, key and time signatures, etc.)\n      setX = context.shouldIgnoreTicks()\n        ? minX + context.getWidth()\n        : Math.max(setX, minX);\n\n      if (context.shouldIgnoreTicks() && justifyWidth) {\n          // This note stole room... recalculate with new justification width.\n        justifyWidth -= context.getWidth();\n        this.pixelsPerTick = justifyWidth / (this.totalTicks.value() * resolutionMultiplier);\n      }\n\n      // Determine pixels needed for left modifiers.\n      let leftPx = thisMetrics.extraLeftPx;\n\n      // Determine white space to right of previous tick (from right modifiers.)\n      if (lastMetrics != null) {\n        whiteSpace = (setX - x) - (prevWidth - lastMetrics.extraLeftPx);\n      }\n\n      // Deduct pixels from white space quota.\n      if (index > 0 && whiteSpace > 0) {\n        if (whiteSpace >= leftPx) {\n          // Have enough white space for left modifiers - no offset needed.\n          leftPx = 0;\n        } else {\n          // Decrease left modifier offset by amount of white space.\n          leftPx -= whiteSpace;\n        }\n      }\n\n      // Adjust the tick x position with the left modifier offset.\n      setX += leftPx;\n\n      // Set the `x` value for the context, which sets the `x` value for all\n      // tickables in this context.\n      context.setX(setX);\n      context.setPixelsUsed(pxUsed);  // ??? Remove this if nothing breaks\n\n      lastMetrics = thisMetrics;\n      prevWidth = width;\n      prevTick = tick;\n      x = setX;\n    });\n\n    this.hasMinTotalWidth = true;\n    if (justifyWidth > 0) {\n      // Pass 2: Take leftover width, and distribute it to proportionately to\n      // all notes.\n      const remainingX = initialJustifyWidth - (x + prevWidth);\n      const leftoverPxPerTick = remainingX / (this.totalTicks.value() * resolutionMultiplier);\n      let spaceAccum = 0;\n\n      contextList.forEach((tick, index) => {\n        const prevTick = contextList[index - 1] || 0;\n        const context = contextMap[tick];\n        const tickSpace = (tick - prevTick) * leftoverPxPerTick;\n        spaceAccum += tickSpace;\n\n        context.setX(context.getX() + spaceAccum);\n\n        // Move center aligned tickables to middle\n        context\n          .getCenterAlignedTickables()\n          .forEach(tickable => { // eslint-disable-line\n            tickable.center_x_shift = centerX - context.getX();\n          });\n      });\n    }\n  }\n\n  // This is the top-level call for all formatting logic completed\n  // after `x` *and* `y` values have been computed for the notes\n  // in the voices.\n  postFormat() {\n    const postFormatContexts = (contexts) =>\n      contexts.list.forEach(tick => contexts.map[tick].postFormat());\n\n    postFormatContexts(this.modiferContexts);\n    postFormatContexts(this.tickContexts);\n\n    return this;\n  }\n\n  // Take all `voices` and create `ModifierContext`s out of them. This tells\n  // the formatters that the voices belong on a single stave.\n  joinVoices(voices) {\n    this.createModifierContexts(voices);\n    this.hasMinTotalWidth = false;\n    return this;\n  }\n\n  // Align rests in voices, justify the contexts, and position the notes\n  // so voices are aligned and ready to render onto the stave. This method\n  // mutates the `x` positions of all tickables in `voices`.\n  //\n  // Voices are full justified to fit in `justifyWidth` pixels.\n  //\n  // Set `options.context` to the rendering context. Set `options.align_rests`\n  // to true to enable rest alignment.\n  format(voices, justifyWidth, options) {\n    const opts = {\n      align_rests: false,\n      context: null,\n      stave: null,\n    };\n\n    Vex.Merge(opts, options);\n    this.alignRests(voices, opts.align_rests);\n    this.createTickContexts(voices);\n    this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n\n    // Only postFormat if a stave was supplied for y value formatting\n    if (opts.stave) this.postFormat();\n\n    return this;\n  }\n\n  // This method is just like `format` except that the `justifyWidth` is inferred\n  // from the `stave`.\n  formatToStave(voices, stave, options) {\n    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - 10;\n    L('Formatting voices to width: ', justifyWidth);\n    const opts = { context: stave.getContext() };\n    Vex.Merge(opts, options);\n    return this.format(voices, justifyWidth, opts);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\n\nexport class StaveModifier {\n  static get Position() {\n    return {\n      LEFT: 1,\n      RIGHT: 2,\n      ABOVE: 3,\n      BELOW: 4,\n      BEGIN: 5,\n      END: 6,\n    };\n  }\n\n  constructor() {\n    this.padding = 10;\n    this.position = StaveModifier.Position.ABOVE;\n  }\n\n  getPosition() { return this.position; }\n  setPosition(position) { this.position = position; return this; }\n  getStave() { return this.stave; }\n  setStave(stave) { this.stave = stave; return this; }\n  getWidth() { return this.width; }\n  setWidth(width) { this.width = width; return this; }\n  getX() { return this.x; }\n  setX(x) { this.x = x; return this; }\n  getCategory() { return ''; }\n  makeSpacer(padding) {\n    return {\n      getContext() { return true; },\n      setStave() {},\n      renderToStave() {},\n      getMetrics() {\n        return { width: padding };\n      },\n    };\n  }\n  placeGlyphOnLine(glyph, stave, line) {\n    glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs());\n  }\n  getPadding(index) {\n    return (index !== undefined && index < 2 ? 0 : this.padding);\n  }\n  setPadding(padding) { this.padding = padding; return this; }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\n\nexport class Barline extends StaveModifier {\n  static get CATEGORY() { return 'barlines'; }\n  static get type() {\n    return {\n      SINGLE: 1,\n      DOUBLE: 2,\n      END: 3,\n      REPEAT_BEGIN: 4,\n      REPEAT_END: 5,\n      REPEAT_BOTH: 6,\n      NONE: 7,\n    };\n  }\n\n  /**\n   * @constructor\n   */\n  constructor(type) {\n    super();\n    this.thickness = Flow.STAVE_LINE_THICKNESS;\n\n    const TYPE = Barline.type;\n    this.widths = {};\n    this.widths[TYPE.SINGLE] = 5;\n    this.widths[TYPE.DOUBLE] = 5;\n    this.widths[TYPE.END] = 5;\n    this.widths[TYPE.REPEAT_BEGIN] = 5;\n    this.widths[TYPE.REPEAT_END] = 5;\n    this.widths[TYPE.REPEAT_BOTH] = 5;\n    this.widths[TYPE.NONE] = 5;\n\n    this.paddings = {};\n    this.paddings[TYPE.SINGLE] = 0;\n    this.paddings[TYPE.DOUBLE] = 0;\n    this.paddings[TYPE.END] = 0;\n    this.paddings[TYPE.REPEAT_BEGIN] = 15;\n    this.paddings[TYPE.REPEAT_END] = 15;\n    this.paddings[TYPE.REPEAT_BOTH] = 15;\n    this.paddings[TYPE.NONE] = 0;\n\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type);\n  }\n  getCategory() { return Barline.CATEGORY; }\n  getType() { return this.type; }\n  setType(type) {\n    this.type = type;\n    this.setWidth(this.widths[this.type]);\n    this.setPadding(this.paddings[this.type]);\n    return this;\n  }\n\n  // Draw barlines\n  draw(stave) {\n    switch (this.type) {\n      case Barline.type.SINGLE:\n        this.drawVerticalBar(stave, this.x, false);\n        break;\n      case Barline.type.DOUBLE:\n        this.drawVerticalBar(stave, this.x, true);\n        break;\n      case Barline.type.END:\n        this.drawVerticalEndBar(stave, this.x);\n        break;\n      case Barline.type.REPEAT_BEGIN:\n        // If the barline is shifted over (in front of clef/time/key)\n        // Draw vertical bar at the beginning.\n        this.drawRepeatBar(stave, this.x, true);\n        if (stave.getX() !== this.x) {\n          this.drawVerticalBar(stave, stave.getX());\n        }\n\n        break;\n      case Barline.type.REPEAT_END:\n        this.drawRepeatBar(stave, this.x, false);\n        break;\n      case Barline.type.REPEAT_BOTH:\n        this.drawRepeatBar(stave, this.x, false);\n        this.drawRepeatBar(stave, this.x, true);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n  }\n  drawVerticalBar(stave, x, double_bar) {\n    if (!stave.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw stave without canvas context.\");\n    const topY = stave.getYForLine(0);\n    const botY = stave.getYForLine(stave.getNumLines() - 1) + this.thickness;\n    if (double_bar)\n      stave.context.fillRect(x - 3, topY, 1, botY - topY);\n    stave.context.fillRect(x, topY, 1, botY - topY);\n  }\n  drawVerticalEndBar(stave, x) {\n    if (!stave.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw stave without canvas context.\");\n\n    const topY = stave.getYForLine(0);\n    const botY = stave.getYForLine(stave.getNumLines() - 1) + this.thickness;\n    stave.context.fillRect(x - 5, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n  }\n  drawRepeatBar(stave, x, begin) {\n    if (!stave.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw stave without canvas context.\");\n\n    const topY = stave.getYForLine(0);\n    const botY = stave.getYForLine(stave.getNumLines() - 1) + this.thickness;\n    let x_shift = 3;\n\n    if (!begin) {\n      x_shift = -5;\n    }\n\n    stave.context.fillRect(x + x_shift, topY, 1, botY - topY);\n    stave.context.fillRect(x - 2, topY, 3, botY - topY);\n\n    const dot_radius = 2;\n\n    // Shift dots left or right\n    if (begin) {\n      x_shift += 4;\n    } else {\n      x_shift -= 4;\n    }\n\n    const dot_x = (x + x_shift) + (dot_radius / 2);\n\n    // calculate the y offset based on number of stave lines\n    let y_offset = (stave.getNumLines() - 1) *\n      stave.getSpacingBetweenLines();\n    y_offset = (y_offset / 2) -\n               (stave.getSpacingBetweenLines() / 2);\n    let dot_y = topY + y_offset + (dot_radius / 2);\n\n    // draw the top repeat dot\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill();\n\n    // draw the bottom repeat dot\n    dot_y += stave.getSpacingBetweenLines();\n    stave.context.beginPath();\n    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n    stave.context.fill();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class Repetition extends StaveModifier {\n  static get CATEGORY() { return 'repetitions'; }\n  static get type() {\n    return {\n      NONE: 1,         // no coda or segno\n      CODA_LEFT: 2,    // coda at beginning of stave\n      CODA_RIGHT: 3,   // coda at end of stave\n      SEGNO_LEFT: 4,   // segno at beginning of stave\n      SEGNO_RIGHT: 5,  // segno at end of stave\n      DC: 6,           // D.C. at end of stave\n      DC_AL_CODA: 7,   // D.C. al coda at end of stave\n      DC_AL_FINE: 8,   // D.C. al Fine end of stave\n      DS: 9,           // D.S. at end of stave\n      DS_AL_CODA: 10,  // D.S. al coda at end of stave\n      DS_AL_FINE: 11,  // D.S. al Fine at end of stave\n      FINE: 12,         // Fine at end of stave\n    };\n  }\n\n  constructor(type, x, y_shift) {\n    super();\n\n    this.symbol_type = type;\n    this.x = x;\n    this.x_shift = 0;\n    this.y_shift = y_shift;\n    this.font = {\n      family: 'times',\n      size: 12,\n      weight: 'bold italic',\n    };\n  }\n\n  getCategory() { return Repetition.CATEGORY; }\n  setShiftX(x) { this.x_shift = x; return this; }\n  setShiftY(y) { this.y_shift = y; return this; }\n  draw(stave, x) {\n    switch (this.symbol_type) {\n      case Repetition.type.CODA_RIGHT:\n        this.drawCodaFixed(stave, x + stave.width);\n        break;\n      case Repetition.type.CODA_LEFT:\n        this.drawSymbolText(stave, x, 'Coda', true);\n        break;\n      case Repetition.type.SEGNO_LEFT:\n        this.drawSignoFixed(stave, x);\n        break;\n      case Repetition.type.SEGNO_RIGHT:\n        this.drawSignoFixed(stave, x + stave.width);\n        break;\n      case Repetition.type.DC:\n        this.drawSymbolText(stave, x, 'D.C.', false);\n        break;\n      case Repetition.type.DC_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.C. al', true);\n        break;\n      case Repetition.type.DC_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n        break;\n      case Repetition.type.DS:\n        this.drawSymbolText(stave, x, 'D.S.', false);\n        break;\n      case Repetition.type.DS_AL_CODA:\n        this.drawSymbolText(stave, x, 'D.S. al', true);\n        break;\n      case Repetition.type.DS_AL_FINE:\n        this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n        break;\n      case Repetition.type.FINE:\n        this.drawSymbolText(stave, x, 'Fine', false);\n        break;\n      default:\n        break;\n    }\n\n    return this;\n  }\n  drawCodaFixed(stave, x) {\n    if (!stave.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw stave without canvas context.\");\n\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift,\n                         y + 25, 40, 'v4d', true);\n    return this;\n  }\n  drawSignoFixed(stave, x) {\n    if (!stave.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw stave without canvas context.\");\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    Glyph.renderGlyph(stave.context, this.x + x + this.x_shift,\n                         y + 25, 30, 'v8c', true);\n    return this;\n  }\n  drawSymbolText(stave, x, text, draw_coda) {\n    if (!stave.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw stave without canvas context.\");\n\n    const ctx = stave.context;\n    ctx.save();\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      // Default to right symbol\n    let text_x = 0 + this.x_shift;\n    let symbol_x = x + this.x_shift;\n    if (this.symbol_type == Repetition.type.CODA_LEFT) {\n        // Offset Coda text to right of stave beginning\n      text_x = this.x + stave.options.vertical_bar_width;\n      symbol_x = text_x + ctx.measureText(text).width + 12;\n    } else {\n        // Offset Signo text to left stave end\n      symbol_x = this.x + x + stave.width - 5 + this.x_shift;\n      text_x = symbol_x - + ctx.measureText(text).width - 12;\n    }\n    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    if (draw_coda) {\n      Glyph.renderGlyph(ctx, symbol_x, y, 40, 'v4d', true);\n    }\n\n    ctx.fillText(text, text_x, y + 5);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\n\nexport class StaveSection extends StaveModifier {\n  static get CATEGORY() { return 'stavesection'; }\n\n  constructor(section, x, shift_y) {\n    super();\n\n    this.setWidth(16);\n    this.section = section;\n    this.x = x;\n    this.shift_x = 0;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'sans-serif',\n      size: 12,\n      weight: 'bold',\n    };\n  }\n  getCategory() { return StaveSection.CATEGORY; }\n  setStaveSection(section) { this.section = section; return this; }\n  setShiftX(x) { this.shift_x = x; return this; }\n  setShiftY(y) { this.shift_y = y; return this; }\n  draw(stave, shift_x) {\n    if (!stave.context) throw new Vex.RERR('NoContext',\n      \"Can't draw stave section without a context.\");\n\n    const ctx = stave.context;\n\n    ctx.save();\n    ctx.lineWidth = 2;\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.section).width;\n    let width = text_width + 6;  // add left & right padding\n    if (width < 18) width = 18;\n    const height = 20;\n      //  Seems to be a good default y\n    const y = stave.getYForTopText(3) + this.shift_y;\n    let x = this.x + shift_x;\n    ctx.beginPath();\n    ctx.lineWidth = 2;\n    ctx.rect(x, y, width, height);\n    ctx.stroke();\n    x += (width - text_width) / 2;\n    ctx.fillText('' + this.section, x, y + 16);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class StaveTempo extends StaveModifier {\n  static get CATEGORY() { return 'stavetempo'; }\n\n  constructor(tempo, x, shift_y) {\n    super();\n\n    this.tempo = tempo;\n    this.position = Modifier.Position.ABOVE;\n    this.x = x;\n    this.shift_x = 10;\n    this.shift_y = shift_y;\n    this.font = {\n      family: 'times',\n      size: 14,\n      weight: 'bold',\n    };\n    this.render_options = {\n      glyph_font_scale: 30,  // font size for note\n    };\n  }\n  getCategory() { return StaveTempo.CATEGORY; }\n  setTempo(tempo) { this.tempo = tempo; return this; }\n  setShiftX(x) { this.shift_x = x; return this; }\n  setShiftY(y) { this.shift_y = y; return this; }\n\n  draw(stave, shift_x) {\n    if (!stave.context) throw new Vex.RERR('NoContext',\n      \"Can't draw stave tempo without a context.\");\n\n    const options = this.render_options;\n    const scale = options.glyph_font_scale / 38;\n    const name = this.tempo.name;\n    const duration = this.tempo.duration;\n    const dots = this.tempo.dots;\n    const bpm = this.tempo.bpm;\n    const font = this.font;\n    const ctx = stave.context;\n    let x = this.x + this.shift_x + shift_x;\n    const y = stave.getYForTopText(1) + this.shift_y;\n\n    ctx.save();\n\n    if (name) {\n      ctx.setFont(font.family, font.size, font.weight);\n      ctx.fillText(name, x, y);\n      x += ctx.measureText(name).width;\n    }\n\n    if (duration && bpm) {\n      ctx.setFont(font.family, font.size, 'normal');\n\n      if (name) {\n        x += ctx.measureText(' ').width;\n        ctx.fillText('(', x, y);\n        x += ctx.measureText('(').width;\n      }\n\n      const code = Flow.durationToGlyph(duration);\n\n      x += 3 * scale;\n      Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n      x += code.head_width * scale;\n\n      // Draw stem and flags\n      if (code.stem) {\n        let stem_height = 30;\n\n        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);\n\n        stem_height *= scale;\n\n        const y_top = y - stem_height;\n        ctx.fillRect(x, y_top, scale, stem_height);\n\n        if (code.flag) {\n          Glyph.renderGlyph(ctx, x + scale, y_top, options.glyph_font_scale,\n                               code.code_flag_upstem);\n\n          if (!dots) x += 6 * scale;\n        }\n      }\n\n      // Draw dot\n      for (let i = 0; i < dots; i++) {\n        x += 6 * scale;\n        ctx.beginPath();\n        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n        ctx.fill();\n      }\n\n      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n    }\n\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `TextNote` is a notation element that is positioned in time. Generally\n// meant for objects that sit above/below the staff and inline with each other.\n// Examples of this would be such as dynamics, lyrics, chord changes, etc.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Note } from './note';\nimport { Glyph } from './glyph';\n\nexport class TextNote extends Note {\n  static get Justification() {\n    return {\n      LEFT: 1,\n      CENTER: 2,\n      RIGHT: 3,\n    };\n  }\n\n  // Glyph data\n  static get GLYPHS() {\n    return {\n      'segno': {\n        code: 'v8c',\n        point: 40,\n        x_shift: 0,\n        y_shift: -10,\n        // width: 10 // optional\n      },\n      'tr': {\n        code: 'v1f',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'mordent_upper': {\n        code: 'v1e',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'mordent_lower': {\n        code: 'v45',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'f': {\n        code: 'vba',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'p': {\n        code: 'vbf',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'm': {\n        code: 'v62',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      's': {\n        code: 'v4a',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'z': {\n        code: 'v80',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n      'coda': {\n        code: 'v4d',\n        point: 40,\n        x_shift: 0,\n        y_shift: -8,\n        // width: 10 // optional\n      },\n      'pedal_open': {\n        code: 'v36',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'pedal_close': {\n        code: 'v5d',\n        point: 40,\n        x_shift: 0,\n        y_shift: 3,\n      },\n      'caesura_straight': {\n        code: 'v34',\n        point: 40,\n        x_shift: 0,\n        y_shift: 2,\n      },\n      'caesura_curved': {\n        code: 'v4b',\n        point: 40,\n        x_shift: 0,\n        y_shift: 2,\n      },\n      'breath': {\n        code: 'v6c',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'tick': {\n        code: 'v6f',\n        point: 50,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'turn': {\n        code: 'v72',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n      'turn_inverted': {\n        code: 'v33',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n      },\n\n      // DEPRECATED - please use \"mordent_upper\" or \"mordent_lower\"\n      'mordent': {\n        code: 'v1e',\n        point: 40,\n        x_shift: 0,\n        y_shift: 0,\n        // width: 10 // optional\n      },\n    };\n  }\n\n  constructor(text_struct) {\n    super(text_struct);\n\n    // Note properties\n    this.text = text_struct.text;\n    this.superscript = text_struct.superscript;\n    this.subscript = text_struct.subscript;\n    this.glyph_type = text_struct.glyph;\n    this.glyph = null;\n    this.font = {\n      family: 'Arial',\n      size: 12,\n      weight: '',\n    };\n\n    // Set font\n    if (text_struct.font) this.font = text_struct.font;\n\n    // Determine and set initial note width. Note that the text width is\n    // an approximation and isn't very accurate. The only way to accurately\n    // measure the length of text is with `canvasContext.measureText()`\n    if (this.glyph_type) {\n      const struct = TextNote.GLYPHS[this.glyph_type];\n      if (!struct) throw new Vex.RERR('Invalid glyph type: ' + this.glyph_type);\n\n      this.glyph = new Glyph(struct.code, struct.point, { cache: false });\n\n      if (struct.width)\n        this.setWidth(struct.width);\n      else\n        this.setWidth(this.glyph.getMetrics().width);\n\n      this.glyph_struct = struct;\n    } else {\n      this.setWidth(Flow.textWidth(this.text));\n    }\n    this.line = text_struct.line || 0;\n    this.smooth = text_struct.smooth || false;\n    this.ignore_ticks = text_struct.ignore_ticks || false;\n    this.justification = TextNote.Justification.LEFT;\n  }\n\n  // Set the horizontal justification of the TextNote\n  setJustification(just) {\n    this.justification = just;\n    return this;\n  }\n\n  // Set the Stave line on which the note should be placed\n  setLine(line) {\n    this.line = line;\n    return this;\n  }\n\n  // Pre-render formatting\n  preFormat() {\n    if (!this.context) throw new Vex.RERR('NoRenderContext',\n        \"Can't measure text without rendering context.\");\n    if (this.preFormatted) return;\n\n    if (this.smooth) {\n      this.setWidth(0);\n    } else {\n      if (this.glyph) {\n        // Width already set.\n      } else {\n        this.setWidth(this.context.measureText(this.text).width);\n      }\n    }\n\n    if (this.justification == TextNote.Justification.CENTER) {\n      this.extraLeftPx = this.width / 2;\n    } else if (this.justification == TextNote.Justification.RIGHT) {\n      this.extraLeftPx = this.width;\n    }\n\n    this.setPreFormatted(true);\n  }\n\n  // Renders the TextNote\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw without a canvas context.\");\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    const ctx = this.context;\n    let x = this.getAbsoluteX();\n    if (this.justification == TextNote.Justification.CENTER) {\n      x -= this.getWidth() / 2;\n    } else if (this.justification == TextNote.Justification.RIGHT) {\n      x -= this.getWidth();\n    }\n\n    let y;\n    if (this.glyph) {\n      y = this.stave.getYForLine(this.line + (-3));\n      this.glyph.render(this.context,\n                        x + this.glyph_struct.x_shift,\n                        y + this.glyph_struct.y_shift);\n    } else {\n      y = this.stave.getYForLine(this.line + (-3));\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.text, x, y);\n\n      // Width of the letter M gives us the approximate height of the text\n      const height = ctx.measureText('M').width;\n      // Get accurate width of text\n      const width = ctx.measureText(this.text).width;\n\n      // Write superscript\n      if (this.superscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.superscript, x + width + 2, y - (height / 2.2));\n      }\n\n      // Write subscript\n      if (this.subscript) {\n        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);\n        ctx.fillText(this.subscript, x + width + 2, y + (height / 2.2) - 1);\n      }\n\n      ctx.restore();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { TextNote } from './textnote';\n\nexport class StaveText extends StaveModifier {\n  static get CATEGORY() { return 'stavetext'; }\n\n  constructor(text, position, options) {\n    super();\n\n    this.setWidth(16);\n    this.text = text;\n    this.position = position;\n    this.options = {\n      shift_x: 0,\n      shift_y: 0,\n      justification: TextNote.Justification.CENTER,\n    };\n    Vex.Merge(this.options, options);\n\n    this.font = {\n      family: 'times',\n      size: 16,\n      weight: 'normal',\n    };\n  }\n\n  getCategory() { return StaveText.CATEGORY; }\n  setStaveText(text) { this.text = text; return this; }\n  setShiftX(x) { this.shift_x = x; return this; }\n  setShiftY(y) { this.shift_y = y; return this; }\n\n  setFont(font) {\n    Vex.Merge(this.font, font);\n  }\n\n  setText(text) {\n    this.text = text;\n  }\n\n  draw(stave) {\n    if (!stave.context) throw new Vex.RERR('NoContext',\n      \"Can't draw stave text without a context.\");\n\n    const ctx = stave.context;\n\n    ctx.save();\n    ctx.lineWidth = 2;\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    const text_width = ctx.measureText('' + this.text).width;\n\n    let x, y;\n    const Position = StaveModifier.Position;\n    switch (this.position) {\n      case Position.LEFT:\n      case Position.RIGHT:\n        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n        if (this.position == Position.LEFT) {\n          x = stave.getX() - text_width - 24 + this.options.shift_x;\n        }\n        else {\n          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n        }\n        break;\n      case Position.ABOVE:\n      case Position.BELOW:\n        const Justification = TextNote.Justification;\n        x = stave.getX() + this.options.shift_x;\n        if (this.options.justification == Justification.CENTER) {\n          x += stave.getWidth() / 2 - text_width / 2;\n        }\n        else if (this.options.justification == Justification.RIGHT) {\n          x += stave.getWidth() - text_width;\n        }\n\n        if (this.position == Position.ABOVE) {\n          y = stave.getYForTopText(2) + this.options.shift_y;\n        }\n        else {\n          y = stave.getYForBottomText(2) + this.options.shift_y;\n        }\n        break;\n      default:\n        throw new Vex.RERR('InvalidPosition',\n          'Value Must be in Modifier.Position.');\n    }\n\n    ctx.fillText('' + this.text, x, y + 4);\n    ctx.restore();\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n//\n// ## Description\n//\n// This file implements various types of clefs that can be rendered on a stave.\n//\n// See `tests/clef_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.\nfunction L(...args) { if (Clef.DEBUG) Vex.L('Vex.Flow.Clef', args); }\n\nexport class Clef extends StaveModifier {\n  static get CATEGORY() { return 'clefs'; }\n\n  // Every clef name is associated with a glyph code from the font file\n  // and a default stave line number.\n  static get types() {\n    return {\n      'treble': {\n        code: 'v83',\n        line: 3,\n      },\n      'bass': {\n        code: 'v79',\n        line: 1,\n      },\n      'alto': {\n        code: 'vad',\n        line: 2,\n      },\n      'tenor': {\n        code: 'vad',\n        line: 1,\n      },\n      'percussion': {\n        code: 'v59',\n        line: 2,\n      },\n      'soprano': {\n        code: 'vad',\n        line: 4,\n      },\n      'mezzo-soprano': {\n        code: 'vad',\n        line: 3,\n      },\n      'baritone-c': {\n        code: 'vad',\n        line: 0,\n      },\n      'baritone-f': {\n        code: 'v79',\n        line: 2,\n      },\n      'subbass': {\n        code: 'v79',\n        line: 0,\n      },\n      'french': {\n        code: 'v83',\n        line: 4,\n      },\n      'tab': {\n        code: 'v2f',\n      },\n    };\n  }\n\n  // Sizes affect the point-size of the clef.\n  static get sizes() {\n    return {\n      'default': 40,\n      'small': 32,\n    };\n  }\n\n  // Annotations attach to clefs -- such as \"8\" for octave up or down.\n  static get annotations() {\n    return {\n      '8va': {\n        code: 'v8',\n        sizes: {\n          'default': {\n            point: 20,\n            attachments: {\n              'treble': {\n                line: -1.2,\n                x_shift: 11,\n              },\n            },\n          },\n          'small': {\n            point: 18,\n            attachments: {\n              'treble': {\n                line: -0.4,\n                x_shift: 8,\n              },\n            },\n          },\n        },\n      },\n      '8vb': {\n        code: 'v8',\n        sizes: {\n          'default': {\n            point: 20,\n            attachments: {\n              'treble': {\n                line: 6.3,\n                x_shift: 10,\n              },\n              'bass': {\n                line: 4,\n                x_shift: 1,\n              },\n            },\n          },\n          'small': {\n            point: 18,\n            attachments: {\n              'treble': {\n                line: 5.8,\n                x_shift: 6,\n              },\n              'bass': {\n                line: 3.5,\n                x_shift: 0.5,\n              },\n            },\n          },\n        },\n      },\n    };\n  }\n\n  // Create a new clef. The parameter `clef` must be a key from\n  // `Clef.types`.\n  constructor(type, size, annotation) {\n    super();\n\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setType(type, size, annotation);\n    this.setWidth(this.glyph.getMetrics().width);\n    L('Creating clef:', type);\n  }\n\n  getCategory() { return Clef.CATEGORY; }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef = Clef.types[type];\n    if (size === undefined) {\n      this.size = 'default';\n    } else {\n      this.size = size;\n    }\n    this.clef.point = Clef.sizes[this.size];\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n\n    // If an annotation, such as 8va, is specified, add it to the Clef object.\n    if (annotation !== undefined) {\n      const anno_dict = Clef.annotations[annotation];\n      this.annotation = {\n        code: anno_dict.code,\n        point: anno_dict.sizes[this.size].point,\n        line: anno_dict.sizes[this.size].attachments[this.type].line,\n        x_shift: anno_dict.sizes[this.size].attachments[this.type].x_shift,\n      };\n\n      this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n      this.attachment.metrics.x_max = 0;\n      this.attachment.setXShift(this.annotation.x_shift);\n    } else {\n      this.annotation = undefined;\n    }\n\n    return this;\n  }\n\n  getWidth() {\n    if (this.type === 'tab' && !this.stave) {\n      throw new Vex.RERR('ClefError', \"Can't get width without stave.\");\n    }\n\n    return this.width;\n  }\n\n  setStave(stave) {\n    this.stave = stave;\n\n    if (this.type !== 'tab') return this;\n\n    let glyphScale;\n    let glyphOffset;\n    const numLines = this.stave.getOptions().num_lines;\n    switch (numLines) {\n      case 8:\n        glyphScale = 55;\n        glyphOffset = 14;\n        break;\n      case 7:\n        glyphScale = 47;\n        glyphOffset = 8;\n        break;\n      case 6:\n        glyphScale = 40;\n        glyphOffset = 1;\n        break;\n      case 5:\n        glyphScale = 30;\n        glyphOffset = -6;\n        break;\n      case 4:\n        glyphScale = 23;\n        glyphOffset = -12;\n        break;\n      default:\n        throw new Vex.RERR('ClefError', `Invalid number of lines: ${numLines}`);\n    }\n\n    this.glyph.setPoint(glyphScale);\n    this.glyph.setYShift(glyphOffset);\n\n    return this;\n  }\n\n  draw() {\n    if (!this.x) throw new Vex.RERR('ClefError', \"Can't draw clef without x.\");\n    if (!this.stave) throw new Vex.RERR('ClefError', \"Can't draw clef without stave.\");\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setContext(this.stave.context);\n    if (this.clef.line !== undefined) {\n      this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);\n    }\n\n    this.glyph.renderToStave(this.x);\n\n    if (this.annotation !== undefined) {\n      this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);\n      this.attachment.setStave(this.stave);\n      this.attachment.setContext(this.stave.context);\n      this.attachment.renderToStave(this.x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { StaveModifier } from './stavemodifier';\nimport { Glyph } from './glyph';\n\nexport class KeySignature extends StaveModifier {\n  static get CATEGORY() { return 'keysignatures'; }\n\n  // Space between natural and following accidental depending\n  // on vertical position\n  static get accidentalSpacing() {\n    return {\n      '#': {\n        above: 6,\n        below: 4,\n      },\n      'b': {\n        above: 4,\n        below: 7,\n      },\n      'n': {\n        above: 3,\n        below: -1,\n      },\n      '##': {\n        above: 6,\n        below: 4,\n      },\n      'bb': {\n        above: 4,\n        below: 7,\n      },\n      'db': {\n        above: 4,\n        below: 7,\n      },\n      'd': {\n        above: 4,\n        below: 7,\n      },\n      'bbs': {\n        above: 4,\n        below: 7,\n      },\n      '++': {\n        above: 6,\n        below: 4,\n      },\n      '+': {\n        above: 6,\n        below: 4,\n      },\n      '+-': {\n        above: 6,\n        below: 4,\n      },\n      '++-': {\n        above: 6,\n        below: 4,\n      },\n      'bs': {\n        above: 4,\n        below: 10,\n      },\n      'bss': {\n        above: 4,\n        below: 10,\n      },\n    };\n  }\n\n  // Create a new Key Signature based on a `key_spec`\n  constructor(keySpec, cancelKeySpec, alterKeySpec) {\n    super();\n\n    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n    this.glyphs = [];\n    this.xPositions = []; // relative to this.x\n    this.paddingForced = false;\n  }\n\n  getCategory() { return KeySignature.CATEGORY; }\n\n  // Add an accidental glyph to the `KeySignature` instance which represents\n  // the provided `acc`. If `nextAcc` is also provided, the appropriate\n  // spacing will be included in the glyph's position\n  convertToGlyph(acc, nextAcc) {\n    const accGlyphData = Flow.accidentalCodes(acc.type);\n    const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n\n    // Determine spacing between current accidental and the next accidental\n    let extraWidth = 0;\n    if (acc.type === 'n' && nextAcc) {\n      const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n      if (spacing) {\n        const isAbove = nextAcc.line >= acc.line;\n        extraWidth = isAbove ? spacing.above : spacing.below;\n      }\n    }\n\n    // Place the glyph on the stave\n    this.placeGlyphOnLine(glyph, this.stave, acc.line);\n    this.glyphs.push(glyph);\n\n    const xPosition = this.xPositions[this.xPositions.length - 1];\n    const glyphWidth = accGlyphData.width + extraWidth;\n    // Store the next accidental's x position\n    this.xPositions.push(xPosition + glyphWidth);\n    // Expand size of key signature\n    this.width += glyphWidth;\n  }\n\n  // Cancel out a key signature provided in the `spec` parameter. This will\n  // place appropriate natural accidentals before the key signature.\n  cancelKey(spec) {\n    this.formatted = false;\n    this.cancelKeySpec = spec;\n\n    return this;\n  }\n\n  convertToCancelAccList(spec) {\n    // Get the accidental list for the cancelled key signature\n    const cancel_accList = Flow.keySignature(spec);\n\n    // If the cancelled key has a different accidental type, ie: # vs b\n    const different_types = this.accList.length > 0 && cancel_accList.length > 0 &&\n                          cancel_accList[0].type !== this.accList[0].type;\n\n    // Determine how many naturals needed to add\n    let naturals = 0;\n    if (different_types) {\n      naturals = cancel_accList.length;\n    } else {\n      naturals = cancel_accList.length - this.accList.length;\n    }\n\n    // Return if no naturals needed\n    if (naturals < 1) return;\n\n    // Get the line position for each natural\n    const cancelled = [];\n    for (let i = 0; i < naturals; i++) {\n      let index = i;\n      if (!different_types) {\n        index = cancel_accList.length - naturals + i;\n      }\n\n      const acc = cancel_accList[index];\n      cancelled.push({ type: 'n', line: acc.line });\n    }\n\n    // Combine naturals with main accidental list for the key signature\n    this.accList = cancelled.concat(this.accList);\n  }\n\n  // Deprecated\n  addToStave(stave, firstGlyph) {\n    this.paddingForced = true;\n    stave.addModifier(this);\n\n    return this;\n  }\n\n  // Apply the accidental staff line placement based on the `clef` and\n  // the  accidental `type` for the key signature ('# or 'b').\n  convertAccLines(clef, type) {\n    let offset = 0.0; // if clef === \"treble\"\n    let customLines; // when clef doesn't follow treble key sig shape\n\n    switch (clef) {\n      // Treble & Subbass both have offsets of 0, so are not included.\n      case 'soprano':\n        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n        else offset = -1;\n        break;\n      case 'mezzo-soprano':\n        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n        else offset = 1.5;\n        break;\n      case 'alto':\n        offset = 0.5;\n        break;\n      case 'tenor':\n        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n        else offset = -0.5;\n        break;\n      case 'baritone-f':\n      case 'baritone-c':\n        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n        else offset = 2;\n        break;\n      case 'bass':\n      case 'french':\n        offset = 1;\n        break;\n    }\n\n    // If there's a special case, assign those lines/spaces:\n    let i;\n    if (typeof customLines !== 'undefined') {\n      for (i = 0; i < this.accList.length; ++i) {\n        this.accList[i].line = customLines[i];\n      }\n    } else if (offset !== 0) {\n      for (i = 0; i < this.accList.length; ++i) {\n        this.accList[i].line += offset;\n      }\n    }\n  }\n\n  getPadding(index) {\n    if (!this.formatted) this.format();\n\n    return (\n      this.glyphs.length === 0 || (!this.paddingForced && index < 2) ?\n        0 : this.padding\n    );\n  }\n\n  getWidth() {\n    if (!this.formatted) this.format();\n\n    return this.width;\n  }\n\n  setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n    this.formatted = false;\n    this.keySpec = keySpec;\n    this.cancelKeySpec = cancelKeySpec;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  // Alter the accidentals of a key spec one by one.\n  // Each alteration is a new accidental that replaces the\n  // original accidental (or the canceled one).\n  alterKey(alterKeySpec) {\n    this.formatted = false;\n    this.alterKeySpec = alterKeySpec;\n\n    return this;\n  }\n\n  convertToAlterAccList(alterKeySpec) {\n    const max = Math.min(alterKeySpec.length, this.accList.length);\n    for (let i = 0; i < max; ++i) {\n      if (alterKeySpec[i]) {\n        this.accList[i].type = alterKeySpec[i];\n      }\n    }\n  }\n\n  format() {\n    if (!this.stave) throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n\n    this.width = 0;\n    this.glyphs = [];\n    this.xPositions = [0]; // initialize with initial x position\n    this.accList = Flow.keySignature(this.keySpec);\n    if (this.cancelKeySpec) {\n      this.convertToCancelAccList(this.cancelKeySpec);\n    }\n    const firstAccidentalType = this.accList.length > 0 ? this.accList[0].type : null;\n    if (this.alterKeySpec) {\n      this.convertToAlterAccList(this.alterKeySpec);\n    }\n\n    if (this.accList.length > 0) {\n      this.convertAccLines(this.stave.clef, firstAccidentalType);\n      for (let i = 0; i < this.accList.length; ++i) {\n        this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n      }\n    }\n\n    this.formatted = true;\n  }\n\n  draw() {\n    if (!this.x) throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without x.\");\n    if (!this.stave) throw new Vex.RERR('KeySignatureError', \"Can't draw key signature without stave.\");\n    if (!this.formatted) this.format();\n\n    for (let i = 0; i < this.glyphs.length; i++) {\n      const glyph = this.glyphs[i];\n      const x = this.x + this.xPositions[i];\n      glyph.setStave(this.stave);\n      glyph.setContext(this.stave.context);\n      glyph.renderToStave(x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\n\nimport { Vex } from './vex';\nimport { Glyph } from './glyph';\nimport { StaveModifier } from './stavemodifier';\n\nexport class TimeSignature extends StaveModifier {\n  static get CATEGORY() { return 'timesignatures'; }\n  static get glyphs() {\n    return {\n      'C': {\n        code: 'v41',\n        point: 40,\n        line: 2,\n      },\n      'C|': {\n        code: 'vb6',\n        point: 40,\n        line: 2,\n      },\n    };\n  }\n\n  constructor(timeSpec = null, customPadding = 15) {\n    super();\n    if (timeSpec === null) {\n      return;\n    }\n    const padding = customPadding;\n\n    this.point = 40;\n    this.topLine = 2;\n    this.bottomLine = 4;\n    this.setPosition(StaveModifier.Position.BEGIN);\n    this.setTimeSig(timeSpec);\n    this.setWidth(this.timeSig.glyph.getMetrics().width);\n    this.setPadding(padding);\n  }\n\n  getCategory() { return TimeSignature.CATEGORY; }\n\n  parseTimeSpec(timeSpec) {\n    if (timeSpec == 'C' || timeSpec == 'C|') {\n      const glyphInfo = TimeSignature.glyphs[timeSpec];\n      return { num: false, line: glyphInfo.line,\n        glyph: new Glyph(glyphInfo.code, glyphInfo.point) };\n    }\n\n    const topNums = [];\n    let i, c;\n    for (i = 0; i < timeSpec.length; ++i) {\n      c = timeSpec.charAt(i);\n      if (c == '/') {\n        break;\n      }\n      else if (/[0-9]/.test(c)) {\n        topNums.push(c);\n      }\n      else {\n        throw new Vex.RERR('BadTimeSignature',\n            'Invalid time spec: ' + timeSpec);\n      }\n    }\n\n    if (i === 0) {\n      throw new Vex.RERR('BadTimeSignature',\n            'Invalid time spec: ' + timeSpec);\n    }\n\n    // skip the \"/\"\n    ++i;\n\n    if (i == timeSpec.length) {\n      throw new Vex.RERR('BadTimeSignature',\n            'Invalid time spec: ' + timeSpec);\n    }\n\n\n    const botNums = [];\n    for (; i < timeSpec.length; ++i) {\n      c = timeSpec.charAt(i);\n      if (/[0-9]/.test(c)) {\n        botNums.push(c);\n      }\n      else {\n        throw new Vex.RERR('BadTimeSignature',\n            'Invalid time spec: ' + timeSpec);\n      }\n    }\n\n\n    return { num: true, glyph: this.makeTimeSignatureGlyph(topNums, botNums) };\n  }\n\n  makeTimeSignatureGlyph(topNums, botNums) {\n    const glyph = new Glyph('v0', this.point);\n    glyph['topGlyphs'] = [];\n    glyph['botGlyphs'] = [];\n\n    let topWidth = 0;\n    let i, num;\n    for (i = 0; i < topNums.length; ++i) {\n      num = topNums[i];\n      const topGlyph = new Glyph('v' + num, this.point);\n\n      glyph.topGlyphs.push(topGlyph);\n      topWidth += topGlyph.getMetrics().width;\n    }\n\n    let botWidth = 0;\n    for (i = 0; i < botNums.length; ++i) {\n      num = botNums[i];\n      const botGlyph = new Glyph('v' + num, this.point);\n\n      glyph.botGlyphs.push(botGlyph);\n      botWidth += botGlyph.getMetrics().width;\n    }\n\n    const width = (topWidth > botWidth ? topWidth : botWidth);\n    const xMin = glyph.getMetrics().x_min;\n\n    glyph.getMetrics = () => ({\n      x_min: xMin,\n      x_max: xMin + width,\n      width,\n    });\n\n    const topStartX = (width - topWidth) / 2.0;\n    const botStartX = (width - botWidth) / 2.0;\n\n    const that = this;\n    glyph.renderToStave = function(x) {\n      let start_x = x + topStartX;\n      let i, g;\n      for (i = 0; i < this.topGlyphs.length; ++i) {\n        g = this.topGlyphs[i];\n        Glyph.renderOutline(this.context, g.metrics.outline,\n            g.scale, start_x + g.x_shift, this.stave.getYForLine(that.topLine) + 1);\n        start_x += g.getMetrics().width;\n      }\n\n      start_x = x + botStartX;\n      for (i = 0; i < this.botGlyphs.length; ++i) {\n        g = this.botGlyphs[i];\n        that.placeGlyphOnLine(g, this.stave, g.line);\n        Glyph.renderOutline(this.context, g.metrics.outline,\n            g.scale, start_x + g.x_shift, this.stave.getYForLine(that.bottomLine) + 1);\n        start_x += g.getMetrics().width;\n      }\n    };\n\n    return glyph;\n  }\n\n  getTimeSig() {\n    return this.timeSig;\n  }\n\n  setTimeSig(timeSpec) {\n    this.timeSig = this.parseTimeSpec(timeSpec);\n    return this;\n  }\n\n  draw() {\n    if (!this.x) throw new Vex.RERR('TimeSignatureError', \"Can't draw time signature without x.\");\n    if (!this.stave) throw new Vex.RERR('TimeSignatureError', \"Can't draw time signature without stave.\");\n\n    this.timeSig.glyph.setStave(this.stave);\n    this.timeSig.glyph.setContext(this.stave.context);\n    this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);\n    this.timeSig.glyph.renderToStave(this.x);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\n\nimport { Vex } from './vex';\nimport { StaveModifier } from './stavemodifier';\n\nexport class Volta extends StaveModifier {\n  static get CATEGORY() { return 'voltas'; }\n  static get type() {\n    return {\n      NONE: 1,\n      BEGIN: 2,\n      MID: 3,\n      END: 4,\n      BEGIN_END: 5,\n    };\n  }\n\n  constructor(type, number, x, y_shift) {\n    super();\n    this.volta = type;\n    this.x = x;\n    this.y_shift = y_shift;\n    this.number = number;\n    this.font = {\n      family: 'sans-serif',\n      size: 9,\n      weight: 'bold',\n    };\n  }\n\n  getCategory() { return Volta.CATEGORY; }\n  setShiftY(y) { this.y_shift = y; return this; }\n  draw(stave, x) {\n    if (!stave.context) throw new Vex.RERR('NoCanvasContext',\n      \"Can't draw stave without canvas context.\");\n    const ctx = stave.context;\n    let width = stave.width;\n    const top_y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;\n    const vert_height = 1.5 * stave.options.spacing_between_lines_px;\n    switch (this.volta) {\n      case Volta.type.BEGIN:\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        break;\n      case Volta.type.END:\n        width -= 5;\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n      case Volta.type.BEGIN_END:\n        width -= 3;\n        ctx.fillRect(this.x + x, top_y, 1, vert_height);\n        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n        break;\n    }\n      // If the beginning of a volta, draw measure number\n    if (this.volta == Volta.type.BEGIN ||\n        this.volta == Volta.type.BEGIN_END) {\n      ctx.save();\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n      ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n      ctx.restore();\n    }\n    ctx.fillRect(this.x + x, top_y, width, 1);\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Barline } from './stavebarline';\nimport { StaveModifier } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { KeySignature } from './keysignature';\nimport { TimeSignature } from './timesignature';\nimport { Volta } from './stavevolta';\n\nconst THICKNESS = (Flow.STAVE_LINE_THICKNESS > 1 ?\n      Flow.STAVE_LINE_THICKNESS : 0);\n\nexport class Stave {\n  constructor(x, y, width, options) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.formatted = false;\n    this.start_x = x + 5;\n    this.end_x = x + width;\n    this.context = null;\n    this.modifiers = [];  // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n    this.measure = 0;\n    this.clef = 'treble';\n    this.font = {\n      family: 'sans-serif',\n      size: 8,\n      weight: '',\n    };\n    this.options = {\n      vertical_bar_width: 10,       // Width around vertical bar end-marker\n      glyph_spacing_px: 10,\n      num_lines: 5,\n      fill_style: '#999999',\n      left_bar: true,               // draw vertical bar on left\n      right_bar: true,               // draw vertical bar on right\n      spacing_between_lines_px: 10, // in pixels\n      space_above_staff_ln: 4,      // in staff lines\n      space_below_staff_ln: 4,      // in staff lines\n      top_text_position: 1,          // in staff lines\n    };\n    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n    Vex.Merge(this.options, options);\n\n    this.resetLines();\n\n    const BARTYPE = Barline.type;\n    // beg bar\n    this.addModifier(new Barline(this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n    // end bar\n    this.addEndModifier(new Barline(this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE));\n  }\n\n  resetLines() {\n    this.options.line_config = [];\n    for (let i = 0; i < this.options.num_lines; i++) {\n      this.options.line_config.push({ visible: true });\n    }\n    this.height = (this.options.num_lines + this.options.space_above_staff_ln) *\n       this.options.spacing_between_lines_px;\n    this.options.bottom_text_position = this.options.num_lines + 1;\n  }\n\n  getOptions() { return this.options; }\n\n  setNoteStartX(x) {\n    if (!this.formatted) this.format();\n\n    this.start_x = x;\n    return this;\n  }\n  getNoteStartX() {\n    if (!this.formatted) this.format();\n\n    return this.start_x;\n  }\n\n  getNoteEndX() {\n    if (!this.formatted) this.format();\n\n    return this.end_x;\n  }\n  getTieStartX() { return this.start_x; }\n  getTieEndX() { return this.x + this.width; }\n  setContext(context) { this.context = context; return this; }\n  getContext() { return this.context; }\n  getX() { return this.x; }\n  getNumLines() { return this.options.num_lines; }\n  setNumLines(lines) {\n    this.options.num_lines = parseInt(lines, 10);\n    this.resetLines();\n    return this;\n  }\n  setY(y) { this.y = y; return this; }\n\n  setX(x) {\n    const shift = x - this.x;\n    this.formatted = false;\n    this.x = x;\n    this.start_x += shift;\n    this.end_x += shift;\n    for (let i = 0; i < this.modifiers.length; i++) {\n      const mod = this.modifiers[i];\n      if (mod.x !== undefined) {\n        mod.x += shift;\n      }\n    }\n    return this;\n  }\n\n  setWidth(width) {\n    this.formatted = false;\n    this.width = width;\n    this.end_x = this.x + width;\n\n    // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n    // this.modifiers[1].setX(this.end_x);\n    return this;\n  }\n\n  getWidth() {\n    return this.width;\n  }\n\n  setMeasure(measure) { this.measure = measure; return this; }\n\n  /**\n   * Gets the pixels to shift from the beginning of the stave\n   * following the modifier at the provided index\n   * @param  {Number} index The index from which to determine the shift\n   * @return {Number}       The amount of pixels shifted\n   */\n  getModifierXShift(index = 0) {\n    if (typeof index !== 'number') {\n      throw new Vex.RERR('InvalidIndex', 'Must be of number type');\n    }\n\n    if (!this.formatted) this.format();\n\n    if (this.getModifiers(StaveModifier.Position.BEGIN).length === 1) {\n      return 0;\n    }\n\n    let start_x = this.start_x - this.x;\n    const begBarline = this.modifiers[0];\n    if (begBarline.getType() === Barline.type.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n      start_x -= begBarline.getWidth();\n    }\n\n    return start_x;\n  }\n\n  // Coda & Segno Symbol functions\n  setRepetitionTypeLeft(type, y) {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  setRepetitionTypeRight(type, y) {\n    this.modifiers.push(new Repetition(type, this.x, y));\n    return this;\n  }\n\n  // Volta functions\n  setVoltaType(type, number_t, y) {\n    this.modifiers.push(new Volta(type, number_t, this.x, y));\n    return this;\n  }\n\n  // Section functions\n  setSection(section, y) {\n    this.modifiers.push(new StaveSection(section, this.x, y));\n    return this;\n  }\n\n  // Tempo functions\n  setTempo(tempo, y) {\n    this.modifiers.push(new StaveTempo(tempo, this.x, y));\n    return this;\n  }\n\n  // Text functions\n  setText(text, position, options) {\n    this.modifiers.push(new StaveText(text, position, options));\n    return this;\n  }\n\n  getHeight() {\n    return this.height;\n  }\n\n  getSpacingBetweenLines() {\n    return this.options.spacing_between_lines_px;\n  }\n\n  getBoundingBox() {\n    return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n  }\n\n  getBottomY() {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const score_bottom = this.getYForLine(options.num_lines) +\n       (options.space_below_staff_ln * spacing);\n\n    return score_bottom;\n  }\n\n  getBottomLineY() {\n    return this.getYForLine(this.options.num_lines);\n  }\n\n  getYForLine(line) {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n\n    const y = this.y + ((line * spacing) + (headroom * spacing)) - (THICKNESS / 2);\n\n    return y;\n  }\n\n  getLineForY(y) {\n    // Does the reverse of getYForLine - somewhat dumb and just calls\n    // getYForLine until the right value is reaches\n\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    return ((y - this.y + (THICKNESS / 2)) / spacing) - headroom;\n  }\n\n  getYForTopText(line) {\n    const l = line || 0;\n    return this.getYForLine(-l - this.options.top_text_position);\n  }\n\n  getYForBottomText(line) {\n    const l = line || 0;\n    return this.getYForLine(this.options.bottom_text_position + l);\n  }\n\n  getYForNote(line) {\n    const options = this.options;\n    const spacing = options.spacing_between_lines_px;\n    const headroom = options.space_above_staff_ln;\n    const y = this.y + (headroom * spacing) + (5 * spacing) - (line * spacing);\n\n    return y;\n  }\n\n  getYForGlyphs() {\n    return this.getYForLine(3);\n  }\n\n  addModifier(modifier, position) {\n    if (position !== undefined) {\n      modifier.setPosition(position);\n    }\n\n    modifier.setStave(this);\n    this.formatted = false;\n    this.modifiers.push(modifier);\n    return this;\n  }\n\n  addEndModifier(modifier) {\n    this.addModifier(modifier, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Bar Line functions\n  setBegBarType(type) {\n    // Only valid bar types at beginning of stave is none, single or begin repeat\n    const { SINGLE, REPEAT_BEGIN, NONE } = Barline.type;\n    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n      this.modifiers[0].setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setEndBarType(type) {\n    // Repeat end not valid at end of stave\n    if (type !== Barline.type.REPEAT_BEGIN) {\n      this.modifiers[1].setType(type);\n      this.formatted = false;\n    }\n    return this;\n  }\n\n  setClef(clefSpec, size, annotation, position) {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    this.clef = clefSpec;\n    const clefs = this.getModifiers(position, Clef.CATEGORY);\n    if (clefs.length === 0) {\n      this.addClef(clefSpec, size, annotation, position);\n    } else {\n      clefs[0].setType(clefSpec, size, annotation);\n    }\n\n    return this;\n  }\n\n  setEndClef(clefSpec, size, annotation) {\n    this.setClef(clefSpec, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  setKeySignature(keySpec, cancelKeySpec, position) {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n    if (keySignatures.length === 0) {\n      this.addKeySignature(keySpec, cancelKeySpec, position);\n    } else {\n      keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n    }\n\n    return this;\n  }\n\n  setEndKeySignature(keySpec, cancelKeySpec) {\n    this.setKeySignature(keySpec, cancelKeySpec, StaveModifier.Position.END);\n    return this;\n  }\n\n  setTimeSignature(timeSpec, customPadding, position) {\n    if (position === undefined) {\n      position = StaveModifier.Position.BEGIN;\n    }\n\n    const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n    if (timeSignatures.length === 0) {\n      this.addTimeSignature(timeSpec, customPadding, position);\n    } else {\n      timeSignatures[0].setTimeSig(timeSpec);\n    }\n\n    return this;\n  }\n\n  setEndTimeSignature(timeSpec, customPadding) {\n    this.setTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  addKeySignature(keySpec, cancelKeySpec, position) {\n    this.addModifier(new KeySignature(keySpec, cancelKeySpec), position);\n    return this;\n  }\n\n  addClef(clef, size, annotation, position) {\n    if (position === undefined || position === StaveModifier.Position.BEGIN) {\n      this.clef = clef;\n    }\n\n    this.addModifier(new Clef(clef, size, annotation), position);\n    return this;\n  }\n\n  addEndClef(clef, size, annotation) {\n    this.addClef(clef, size, annotation, StaveModifier.Position.END);\n    return this;\n  }\n\n  addTimeSignature(timeSpec, customPadding, position) {\n    this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n    return this;\n  }\n\n  addEndTimeSignature(timeSpec, customPadding) {\n    this.addTimeSignature(timeSpec, customPadding, StaveModifier.Position.END);\n    return this;\n  }\n\n  // Deprecated\n  addTrebleGlyph() {\n    this.addClef('treble');\n    return this;\n  }\n\n  getModifiers(position, category) {\n    if (position === undefined) return this.modifiers;\n\n    return this.modifiers.filter(modifier =>\n      position === modifier.getPosition() &&\n      (category === undefined || category === modifier.getCategory())\n    );\n  }\n\n  sortByCategory(items, order) {\n    for (let i = items.length - 1; i >= 0; i--) {\n      for (let j = 0; j < i; j++) {\n        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n          const temp = items[j];\n          items[j] = items[j + 1];\n          items[j + 1] = temp;\n        }\n      }\n    }\n  }\n\n  format() {\n    const begBarline = this.modifiers[0];\n    const endBarline = this.modifiers[1];\n\n    const begModifiers = this.getModifiers(StaveModifier.Position.BEGIN);\n    const endModifiers = this.getModifiers(StaveModifier.Position.END);\n\n    this.sortByCategory(begModifiers, {\n      barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3,\n    });\n\n    this.sortByCategory(endModifiers, {\n      timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3,\n    });\n\n    if (begModifiers.length > 1 &&\n        begBarline.getType() === Barline.type.REPEAT_BEGIN) {\n      begModifiers.push(begModifiers.splice(0, 1)[0]);\n      begModifiers.splice(0, 0, new Barline(Barline.type.SINGLE));\n    }\n\n    if (endModifiers.indexOf(endBarline) > 0) {\n      endModifiers.splice(0, 0, new Barline(Barline.type.NONE));\n    }\n\n    let width;\n    let padding;\n    let modifier;\n    let offset = 0;\n    let x = this.x;\n    for (let i = 0; i < begModifiers.length; i++) {\n      modifier = begModifiers[i];\n      padding = modifier.getPadding(i + offset);\n      width = modifier.getWidth();\n\n      x += padding;\n      modifier.setX(x);\n      x += width;\n\n      if (padding + width === 0) offset--;\n    }\n\n    this.start_x = x;\n    x = this.x + this.width;\n\n    for (let i = 0; i < endModifiers.length; i++) {\n      modifier = endModifiers[i];\n      x -= modifier.getPadding(i);\n      if (i !== 0) {\n        x -= modifier.getWidth();\n      }\n\n      modifier.setX(x);\n\n      if (i === 0) {\n        x -= modifier.getWidth();\n      }\n    }\n\n    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n    this.formatted = true;\n  }\n\n  /**\n   * All drawing functions below need the context to be set.\n   */\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw stave without canvas context.\");\n    }\n\n    if (!this.formatted) this.format();\n\n    const num_lines = this.options.num_lines;\n    const width = this.width;\n    const x = this.x;\n    let y;\n\n    // Render lines\n    for (let line = 0; line < num_lines; line++) {\n      y = this.getYForLine(line);\n\n      this.context.save();\n      this.context.setFillStyle(this.options.fill_style);\n      this.context.setStrokeStyle(this.options.fill_style);\n      if (this.options.line_config[line].visible) {\n        this.context.fillRect(x, y, width, Flow.STAVE_LINE_THICKNESS);\n      }\n      this.context.restore();\n    }\n\n    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n    for (let i = 0; i < this.modifiers.length; i++) {\n      // Only draw modifier if it has a draw function\n      if (typeof this.modifiers[i].draw === 'function') {\n        this.modifiers[i].draw(this, this.getModifierXShift(i));\n      }\n    }\n\n    // Render measure numbers\n    if (this.measure > 0) {\n      this.context.save();\n      this.context.setFont(this.font.family, this.font.size, this.font.weight);\n      const text_width = this.context.measureText('' + this.measure).width;\n      y = this.getYForTopText(0) + 3;\n      this.context.fillText('' + this.measure, this.x - text_width / 2, y);\n      this.context.restore();\n    }\n\n    return this;\n  }\n\n  // Draw Simple barlines for backward compatability\n  // Do not delete - draws the beginning bar of the stave\n  drawVertical(x, isDouble) {\n    this.drawVerticalFixed(this.x + x, isDouble);\n  }\n\n  drawVerticalFixed(x, isDouble) {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw stave without canvas context.\");\n    }\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    if (isDouble) {\n      this.context.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);\n    }\n    this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  drawVerticalBar(x) {\n    this.drawVerticalBarFixed(this.x + x, false);\n  }\n\n  drawVerticalBarFixed(x) {\n    if (!this.context) {\n      throw new Vex.RERR('NoCanvasContext', \"Can't draw stave without canvas context.\");\n    }\n\n    const top_line = this.getYForLine(0);\n    const bottom_line = this.getYForLine(this.options.num_lines - 1);\n    this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);\n  }\n\n  /**\n   * Get the current configuration for the Stave.\n   * @return {Array} An array of configuration objects.\n   */\n  getConfigForLines() {\n    return this.options.line_config;\n  }\n\n  /**\n   * Configure properties of the lines in the Stave\n   * @param line_number The index of the line to configure.\n   * @param line_config An configuration object for the specified line.\n   * @throws Vex.RERR \"StaveConfigError\" When the specified line number is out of\n   *   range of the number of lines specified in the constructor.\n   */\n  setConfigForLine(line_number, line_config) {\n    if (line_number >= this.options.num_lines || line_number < 0) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        'The line number must be within the range of the number of lines in the Stave.'\n      );\n    }\n\n    if (!line_config.hasOwnProperty('visible')) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        \"The line configuration object is missing the 'visible' property.\"\n      );\n    }\n\n    if (typeof(line_config.visible) !== 'boolean') {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        \"The line configuration objects 'visible' property must be true or false.\"\n      );\n    }\n\n    this.options.line_config[line_number] = line_config;\n\n    return this;\n  }\n\n  /**\n   * Set the staff line configuration array for all of the lines at once.\n   * @param lines_configuration An array of line configuration objects.  These objects\n   *   are of the same format as the single one passed in to setLineConfiguration().\n   *   The caller can set null for any line config entry if it is desired that the default be used\n   * @throws Vex.RERR \"StaveConfigError\" When the lines_configuration array does not have\n   *   exactly the same number of elements as the num_lines configuration object set in\n   *   the constructor.\n   */\n  setConfigForLines(lines_configuration) {\n    if (lines_configuration.length !== this.options.num_lines) {\n      throw new Vex.RERR(\n        'StaveConfigError',\n        'The length of the lines configuration array must match the number of lines in the Stave'\n      );\n    }\n\n    // Make sure the defaults are present in case an incomplete set of\n    //  configuration options were supplied.\n    for (const line_config in lines_configuration) {\n      // Allow 'null' to be used if the caller just wants the default for a particular node.\n      if (!lines_configuration[line_config]) {\n        lines_configuration[line_config] = this.options.line_config[line_config];\n      }\n      Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);\n    }\n\n    this.options.line_config = lines_configuration;\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Stave } from './stave';\n\nexport class TabStave extends Stave {\n  constructor(x, y, width, options) {\n    const tab_options = {\n      spacing_between_lines_px: 13,\n      num_lines: 6,\n      top_text_position: 1,\n    };\n\n    Vex.Merge(tab_options, options);\n    super(x, y, width, tab_options);\n  }\n\n  getYForGlyphs() {\n    return this.getYForLine(2.5);\n  }\n\n  // Deprecated\n  addTabGlyph() {\n    this.addClef('tab');\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.js` for usage examples\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Dot } from './dot';\nimport { Glyph } from './glyph';\n\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines, strings_used) {\n  const stem_through = [];\n  let group = [];\n  for (let string = 1; string <= num_lines; string++) {\n    const is_used = strings_used.indexOf(string) > -1;\n\n    if (!is_used) {\n      group.push(string);\n    } else {\n      stem_through.push(group);\n      group = [];\n    }\n  }\n  if (group.length > 0) stem_through.push(group);\n\n  return stem_through;\n}\n\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {\n  const up_stem = stem_direction !== 1;\n  const down_stem = stem_direction !== -1;\n\n  const line_spacing = stave.getSpacingBetweenLines();\n  const total_lines = stave.getNumLines();\n\n  const stem_lines = [];\n\n  unused_strings.forEach(strings => {\n    const containsLastString = strings.indexOf(total_lines) > -1;\n    const containsFirstString =  strings.indexOf(1) > -1;\n\n    if ((up_stem && containsFirstString) ||\n       (down_stem && containsLastString)) {\n      return;\n    }\n\n    // If there's only one string in the group, push a duplicate value.\n    // We do this because we need 2 strings to convert into upper/lower y\n    // values.\n    if (strings.length === 1) {\n      strings.push(strings[0]);\n    }\n\n    const line_ys = [];\n    // Iterate through each group string and store it's y position\n    strings.forEach((string, index, strings) => {\n      const isTopBound = string === 1;\n      const isBottomBound = string === total_lines;\n\n      // Get the y value for the appropriate staff line,\n      // we adjust for a 0 index array, since string numbers are index 1\n      let y = stave.getYForLine(string - 1);\n\n      // Unless the string is the first or last, add padding to each side\n      // of the line\n      if (index === 0 && !isTopBound) {\n        y -= line_spacing / 2 - 1;\n      } else if (index === strings.length - 1 && !isBottomBound) {\n        y += line_spacing / 2 - 1;\n      }\n\n      // Store the y value\n      line_ys.push(y);\n\n      // Store a subsequent y value connecting this group to the main\n      // stem above/below the stave if it's the top/bottom string\n      if (stem_direction === 1 && isTopBound) {\n        line_ys.push(stem_y - 2);\n      } else if (stem_direction === -1 && isBottomBound) {\n        line_ys.push(stem_y + 2);\n      }\n    });\n\n    // Add the sorted y values to the\n    stem_lines.push(line_ys.sort((a, b) => a - b));\n  });\n\n  return stem_lines;\n}\n\nexport class TabNote extends StemmableNote {\n  static get CATEGORY() { return 'tabnotes'; }\n\n  // Initialize the TabNote with a `tab_struct` full of properties\n  // and whether to `draw_stem` when rendering the note\n  constructor(tab_struct, draw_stem) {\n    super(tab_struct);\n\n    this.ghost = false; // Renders parenthesis around notes\n    // Note properties\n    //\n    // The fret positions in the note. An array of `{ str: X, fret: X }`\n    this.positions = tab_struct.positions;\n\n    // Render Options\n    Vex.Merge(this.render_options, {\n      // font size for note heads and rests\n      glyph_font_scale: 30,\n      // Flag to draw a stem\n      draw_stem,\n      // Flag to draw dot modifiers\n      draw_dots: draw_stem,\n      // Flag to extend the main stem through the stave and fret positions\n      draw_stem_through_stave: false,\n    });\n\n    this.glyph =\n      Flow.durationToGlyph(this.duration, this.noteType);\n    if (!this.glyph) {\n      throw new Vex.RuntimeError('BadArguments',\n          'Invalid note initialization data (No glyph found): ' +\n          JSON.stringify(tab_struct));\n    }\n\n    this.buildStem();\n\n    if (tab_struct.stem_direction) {\n      this.setStemDirection(tab_struct.stem_direction);\n    } else {\n      this.setStemDirection(Stem.UP);\n    }\n\n    // Renders parenthesis around notes\n    this.ghost = false;\n    this.updateWidth();\n  }\n\n  // The ModifierContext category\n  getCategory() { return TabNote.CATEGORY; }\n\n  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n  // Often used for indicating frets that are being bent to\n  setGhost(ghost) {\n    this.ghost = ghost;\n    this.updateWidth();\n    return this;\n  }\n\n  // Determine if the note has a stem\n  hasStem() { return this.render_options.draw_stem; }\n\n  // Get the default stem extension for the note\n  getStemExtension() {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension :\n        glyph.tabnote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  // Add a dot to the note\n  addDot() {\n    const dot = new Dot();\n    this.dots++;\n    return this.addModifier(dot, 0);\n  }\n\n  // Calculate and store the width of the note\n  updateWidth() {\n    this.glyphs = [];\n    this.width = 0;\n    for (let i = 0; i < this.positions.length; ++i) {\n      let fret = this.positions[i].fret;\n      if (this.ghost) fret = '(' + fret + ')';\n      const glyph = Flow.tabToGlyph(fret);\n      this.glyphs.push(glyph);\n      this.width = (glyph.width > this.width) ? glyph.width : this.width;\n    }\n  }\n\n  // Set the `stave` to the note\n  setStave(stave) {\n    super.setStave(stave);\n    this.context = stave.context;\n    this.width = 0;\n\n    // Calculate the fret number width based on font used\n    let i;\n    if (this.context) {\n      for (i = 0; i < this.glyphs.length; ++i) {\n        const text = '' + this.glyphs[i].text;\n        if (text.toUpperCase() != 'X')\n          this.glyphs[i].width = this.context.measureText(text).width;\n        this.width = (this.glyphs[i].width > this.width) ?\n          this.glyphs[i].width : this.width;\n      }\n    }\n\n    const ys = [];\n\n    // Setup y coordinates for score.\n    for (i = 0; i < this.positions.length; ++i) {\n      const line = this.positions[i].str;\n      ys.push(this.stave.getYForLine(line - 1));\n    }\n\n    return this.setYs(ys);\n  }\n\n  // Get the fret positions for the note\n  getPositions() { return this.positions; }\n\n  // Add self to the provided modifier context `mc`\n  addToModifierContext(mc) {\n    this.setModifierContext(mc);\n    for (let i = 0; i < this.modifiers.length; ++i) {\n      this.modifierContext.addModifier(this.modifiers[i]);\n    }\n    this.modifierContext.addModifier(this);\n    this.preFormatted = false;\n    return this;\n  }\n\n  // Get the `x` coordinate to the right of the note\n  getTieRightX() {\n    let tieStartX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.head_width;\n    tieStartX += (note_glyph_width / 2);\n    tieStartX += ((-this.width / 2) + this.width + 2);\n\n    return tieStartX;\n  }\n\n  // Get the `x` coordinate to the left of the note\n  getTieLeftX() {\n    let tieEndX = this.getAbsoluteX();\n    const note_glyph_width = this.glyph.head_width;\n    tieEndX += (note_glyph_width / 2);\n    tieEndX -= ((this.width / 2) + 2);\n\n    return tieEndX;\n  }\n\n  // Get the default `x` and `y` coordinates for a modifier at a specific\n  // `position` at a fret position `index`\n  getModifierStartXY(position, index) {\n    if (!this.preFormatted) throw new Vex.RERR('UnformattedNote',\n        \"Can't call GetModifierStartXY on an unformatted note\");\n\n    if (this.ys.length === 0) throw new Vex.RERR('NoYValues',\n        'No Y-Values calculated for this note.');\n\n    let x = 0;\n    if (position == Modifier.Position.LEFT) {\n      x = -1 * 2;  // extra_left_px\n    } else if (position == Modifier.Position.RIGHT) {\n      x = this.width + 2; // extra_right_px\n    } else if (position == Modifier.Position.BELOW ||\n               position == Modifier.Position.ABOVE) {\n      const note_glyph_width = this.glyph.head_width;\n      x = note_glyph_width / 2;\n    }\n\n    return { x: this.getAbsoluteX() + x, y: this.ys[index] };\n  }\n\n  // Get the default line for rest\n  getLineForRest() { return this.positions[0].str; }\n\n  // Pre-render formatting\n  preFormat() {\n    if (this.preFormatted) return;\n    if (this.modifierContext) this.modifierContext.preFormat();\n    // width is already set during init()\n    this.setPreFormatted(true);\n  }\n\n  // Get the x position for the stem\n  getStemX() { return this.getCenterGlyphX(); }\n\n  // Get the y position for the stem\n  getStemY() {\n    const num_lines = this.stave.getNumLines();\n\n    // The decimal staff line amounts provide optimal spacing between the\n    // fret number and the stem\n    const stemUpLine = -0.5;\n    const stemDownLine = num_lines - 0.5;\n    const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n\n    return this.stave.getYForLine(stemStartLine);\n  }\n\n  // Get the stem extents for the tabnote\n  getStemExtents() {\n    const stem_base_y = this.getStemY();\n    const stem_top_y = stem_base_y + (Stem.HEIGHT * -this.stem_direction);\n\n    return { topY: stem_top_y, baseY: stem_base_y };\n  }\n\n  // Draw the fal onto the context\n  drawFlag() {\n    const render_stem = this.beam == null && this.render_options.draw_stem;\n    const render_flag = this.beam == null && render_stem;\n\n    // Now it's the flag's turn.\n    if (this.glyph.flag && render_flag) {\n      const flag_x = this.getStemX() + 1;\n      const flag_y = this.getStemY() - (this.stem.getHeight());\n      let flag_code;\n\n      if (this.stem_direction == Stem.DOWN) {\n        // Down stems have flags on the left.\n        flag_code = this.glyph.code_flag_downstem;\n      } else {\n        // Up stems have flags on the left.\n        flag_code = this.glyph.code_flag_upstem;\n      }\n\n      // Draw the Flag\n      Glyph.renderGlyph(this.context, flag_x, flag_y,\n          this.render_options.glyph_font_scale, flag_code);\n    }\n  }\n\n  // Render the modifiers onto the context\n  drawModifiers() {\n    // Draw the modifiers\n    this.modifiers.forEach(function(modifier) {\n      // Only draw the dots if enabled\n      if (modifier.getCategory() === 'dots' && !this.render_options.draw_dots) return;\n\n      modifier.setContext(this.context);\n      modifier.draw();\n    }, this);\n  }\n\n  // Render the stem extension through the fret positions\n  drawStemThrough() {\n    let stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    const ctx = this.context;\n\n    const stem_through = this.render_options.draw_stem_through_stave;\n    const draw_stem = this.render_options.draw_stem;\n    if (draw_stem && stem_through) {\n      const total_lines = this.stave.getNumLines();\n      const strings_used = this.positions.map(position => position.str);\n\n      const unused_strings = getUnusedStringGroups(total_lines, strings_used);\n      const stem_lines = getPartialStemLines(stem_y, unused_strings,\n                            this.getStave(), this.getStemDirection());\n\n      // Fine tune x position to match default stem\n      if (!this.beam || this.getStemDirection() === 1) {\n        stem_x += (Stem.WIDTH / 2);\n      }\n\n      ctx.save();\n      ctx.setLineWidth(Stem.WIDTH);\n      stem_lines.forEach(bounds => {\n        if (bounds.length === 0) return;\n\n        ctx.beginPath();\n        ctx.moveTo(stem_x, bounds[0]);\n        ctx.lineTo(stem_x, bounds[bounds.length - 1]);\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    }\n  }\n\n  // Render the fret positions onto the context\n  drawPositions() {\n    const ctx = this.context;\n    const x = this.getAbsoluteX();\n    const ys = this.ys;\n    let y;\n\n    for (let i = 0; i < this.positions.length; ++i) {\n      y = ys[i];\n\n      const glyph = this.glyphs[i];\n\n      // Center the fret text beneath the notation note head\n      const note_glyph_width = this.glyph.head_width;\n      const tab_x = x + (note_glyph_width / 2) - (glyph.width / 2);\n\n      ctx.clearRect(tab_x - 2, y - 3, glyph.width + 4, 6);\n\n      if (glyph.code) {\n        Glyph.renderGlyph(ctx, tab_x, y + 5 + glyph.shift_y,\n            this.render_options.glyph_font_scale, glyph.code);\n      } else {\n        const text = glyph.text.toString();\n        ctx.fillText(text, tab_x, y + 5);\n      }\n    }\n  }\n\n  // The main rendering function for the entire note\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoCanvasContext',\n        \"Can't draw without a canvas context.\");\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    if (this.ys.length === 0) throw new Vex.RERR('NoYValues',\n        \"Can't draw note without Y values.\");\n\n    const render_stem = this.beam == null && this.render_options.draw_stem;\n\n    this.drawPositions();\n    this.drawStemThrough();\n\n    const stem_x = this.getStemX();\n    const stem_y = this.getStemY();\n    if (render_stem) {\n      this.drawStem({\n        x_begin: stem_x,\n        x_end: stem_x,\n        y_top: stem_y,\n        y_bottom: stem_y,\n        y_extend: 0,\n        stem_extension: this.getStemExtension(),\n        stem_direction: this.stem_direction,\n      });\n    }\n\n    this.drawFlag();\n    this.drawModifiers();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Copyright Mohit Muthanna 2010\n//\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { BoundingBox } from './boundingbox';\nimport { Note } from './note';\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\n\n/** @constructor */\nexport class ClefNote extends Note {\n  static get CATEGORY() { return 'clefnote'; }\n\n  constructor(type, size, annotation) {\n    super({ duration: 'b' });\n\n    this.setType(type, size, annotation);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  setType(type, size, annotation) {\n    this.type = type;\n    this.clef_obj = new Clef(type, size, annotation);\n    this.clef = this.clef_obj.clef;\n    this.glyph = new Glyph(this.clef.code, this.clef.point);\n    this.setWidth(this.glyph.getMetrics().width);\n    return this;\n  }\n\n  getClef() {\n    return this.clef;\n  }\n\n  setContext(context) {\n    this.context = context;\n    this.glyph.setContext(this.context);\n    return this;\n  }\n\n  getBoundingBox() {\n    return new BoundingBox(0, 0, 0, 0);\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  getCategory() { return ClefNote.CATEGORY; }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    if (!this.glyph.getContext()) {\n      this.glyph.setContext(this.context);\n    }\n    const abs_x = this.getAbsoluteX();\n\n    this.glyph.setStave(this.stave);\n    this.glyph.setYShift(\n      this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());\n    this.glyph.renderToStave(abs_x);\n\n    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n    if (this.clef_obj.annotation !== undefined) {\n      const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n      if (!attachment.getContext()) {\n        attachment.setContext(this.context);\n      }\n      attachment.setStave(this.stave);\n      attachment.setYShift(\n        this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());\n      attachment.setXShift(this.clef_obj.annotation.x_shift);\n      attachment.renderToStave(abs_x);\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n\nimport { Vex } from './vex';\nimport { BoundingBox } from './boundingbox';\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\n\nexport class TimeSigNote extends Note {\n  constructor(timeSpec, customPadding) {\n    super({ duration: 'b' });\n\n    const timeSignature = new TimeSignature(timeSpec, customPadding);\n    this.timeSig = timeSignature.getTimeSig();\n    this.setWidth(this.timeSig.glyph.getMetrics().width);\n\n    // Note properties\n    this.ignore_ticks = true;\n  }\n\n  getBoundingBox() {\n    return new BoundingBox(0, 0, 0, 0);\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat() {\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n\n    if (!this.timeSig.glyph.getContext()) {\n      this.timeSig.glyph.setContext(this.context);\n    }\n\n    this.timeSig.glyph.setStave(this.stave);\n    this.timeSig.glyph.setYShift(\n      this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs());\n    this.timeSig.glyph.renderToStave(this.getAbsoluteX());\n  }\n}\n","// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Vex } from './vex';\nimport { StaveTie } from './stavetie';\n\nexport class TabTie extends StaveTie {\n  static createHammeron(notes) {\n    return new TabTie(notes, 'H');\n  }\n\n  static createPulloff(notes) {\n    return new TabTie(notes, 'P');\n  }\n\n  constructor(notes, text) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, text);\n    this.render_options.cp1 = 9;\n    this.render_options.cp2 = 11;\n    this.render_options.y_shift = 3;\n\n    this.setNotes(notes);\n  }\n\n  draw() {\n    if (!this.context)\n      throw new Vex.RERR('NoContext', 'No context to render tie.');\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    let first_x_px, last_x_px, first_ys, last_ys;\n\n    if (first_note) {\n      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n      first_ys = first_note.getYs();\n    } else {\n      first_x_px = last_note.getStave().getTieStartX();\n      first_ys = last_note.getYs();\n      this.first_indices = this.last_indices;\n    }\n\n    if (last_note) {\n      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n      last_ys = last_note.getYs();\n    } else {\n      last_x_px = first_note.getStave().getTieEndX();\n      last_ys = first_note.getYs();\n      this.last_indices = this.first_indices;\n    }\n\n    this.renderTie({\n      first_x_px,\n      last_x_px,\n      first_ys,\n      last_ys,\n      direction: -1,           // Tab tie's are always face up.\n    });\n\n    this.renderText(first_x_px, last_x_px);\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\n\nimport { Vex } from './vex';\nimport { TabTie } from './tabtie';\n\nexport class TabSlide extends TabTie {\n  static get SLIDE_UP() {\n    return 1;\n  }\n  static get SLIDE_DOWN() {\n    return -1;\n  }\n\n  static createSlideUp(notes) {\n    return new TabSlide(notes, TabSlide.SLIDE_UP);\n  }\n\n  static createSlideDown(notes) {\n    return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n  }\n\n  constructor(notes, direction) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     **/\n    super(notes, 'sl.');\n    if (!direction) {\n      const first_fret = notes.first_note.getPositions()[0].fret;\n      const last_fret = notes.last_note.getPositions()[0].fret;\n\n      direction = ((parseInt(first_fret, 10) > parseInt(last_fret, 10)) ?\n        TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP);\n    }\n\n    this.slide_direction = direction;\n    this.render_options.cp1 = 11;\n    this.render_options.cp2 = 14;\n    this.render_options.y_shift = 0.5;\n\n    this.setFont({ font: 'Times', size: 10, style: 'bold italic' });\n    this.setNotes(notes);\n  }\n\n  renderTie(params) {\n    if (params.first_ys.length === 0 || params.last_ys.length === 0)\n      throw new Vex.RERR('BadArguments', 'No Y-values to render');\n\n    const ctx = this.context;\n    const first_x_px = params.first_x_px;\n    const first_ys = params.first_ys;\n    const last_x_px = params.last_x_px;\n\n    const direction = this.slide_direction;\n    if (direction != TabSlide.SLIDE_UP &&\n        direction != TabSlide.SLIDE_DOWN) {\n      throw new Vex.RERR('BadSlide', 'Invalid slide direction');\n    }\n\n    for (let i = 0; i < this.first_indices.length; ++i) {\n      const slide_y = first_ys[this.first_indices[i]] +\n        this.render_options.y_shift;\n\n      if (isNaN(slide_y))\n        throw new Vex.RERR('BadArguments', 'Bad indices for slide rendering.');\n\n      ctx.beginPath();\n      ctx.moveTo(first_x_px, slide_y + (3 * direction));\n      ctx.lineTo(last_x_px, slide_y - (3 * direction));\n      ctx.closePath();\n      ctx.stroke();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { StaveNote } from './stavenote';\n\nexport class GraceNote extends StaveNote {\n  static get CATEGORY() { return 'gracenotes'; }\n\n  constructor(note_struct) {\n    super(note_struct);\n\n    this.render_options.glyph_font_scale = 22;\n    this.render_options.stem_height = 20;\n    this.render_options.stroke_px = 2;\n    this.glyph.head_width = 6;\n\n    this.slash = note_struct.slash;\n    this.slur = true;\n\n    this.buildNoteHeads();\n\n    this.width = 3;\n  }\n\n  getStemExtension() {\n    const glyph = this.getGlyph();\n\n    if (this.stem_extension_override != null) {\n      return this.stem_extension_override;\n    }\n\n    if (glyph) {\n      return this.getStemDirection() === 1 ? glyph.gracenote_stem_up_extension :\n        glyph.gracenote_stem_down_extension;\n    }\n\n    return 0;\n  }\n\n  getCategory() { return GraceNote.CATEGORY; }\n\n  draw() {\n    super.draw();\n    const ctx = this.context;\n    const stem_direction = this.getStemDirection();\n\n    if (this.slash) {\n      ctx.beginPath();\n\n      let x = this.getAbsoluteX();\n      let y = this.getYs()[0] - (this.stem.getHeight() / 2.8);\n      if (stem_direction === 1) {\n        x += 1;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + 13, y - 9);\n      } else if (stem_direction === -1) {\n        x -= 4;\n        y += 1;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x + 13, y + 9);\n      }\n\n      ctx.closePath();\n      ctx.stroke();\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of tunings for tablature.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\n\nexport class Tuning {\n  static get names() {\n    return {\n      'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',\n      'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',\n      'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',\n      'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n      'standardBanjo': 'D/5,B/4,G/4,D/4,G/5',\n    };\n  }\n\n  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n    // Default to standard tuning.\n    this.setTuning(tuningString);\n  }\n\n  noteToInteger(noteString) {\n    return Flow.keyProperties(noteString).int_value;\n  }\n\n  setTuning(noteString) {\n    if (Tuning.names[noteString]) {\n      noteString = Tuning.names[noteString];\n    }\n\n    this.tuningString = noteString;\n    this.tuningValues = [];\n    this.numStrings = 0;\n\n    const keys = noteString.split(/\\s*,\\s*/);\n    if (keys.length === 0) {\n      throw new Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);\n    }\n\n    this.numStrings = keys.length;\n    for (let i = 0; i < this.numStrings; ++i) {\n      this.tuningValues[i] = this.noteToInteger(keys[i]);\n    }\n  }\n\n  getValueForString(stringNum) {\n    const s = parseInt(stringNum, 10);\n    if (s < 1 || s > this.numStrings) {\n      throw new Vex.RERR(\n        'BadArguments', `String number must be between 1 and ${this.numStrings}:${stringNum}`\n      );\n    }\n\n    return this.tuningValues[s - 1];\n  }\n\n  getValueForFret(fretNum, stringNum) {\n    const stringValue = this.getValueForString(stringNum);\n    const f = parseInt(fretNum, 10);\n\n    if (f < 0) {\n      throw new Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' +\n          fretNum);\n    }\n\n    return stringValue + f;\n  }\n\n  getNoteForFret(fretNum, stringNum) {\n    const noteValue = this.getValueForFret(fretNum, stringNum);\n\n    const octave = Math.floor(noteValue / 12);\n    const value = noteValue % 12;\n\n    return Flow.integerToNote(value) + '/' + octave;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\n\nimport { Vex } from './vex';\nimport { Music } from './music';\n\nexport class KeyManager {\n  constructor(key) {\n    this.music = new Music();\n    this.setKey(key);\n  }\n\n  setKey(key) {\n    this.key = key;\n    this.reset();\n    return this;\n  }\n\n  getKey() { return this.key; }\n\n  reset() {\n    this.keyParts = this.music.getKeyParts(this.key);\n\n    this.keyString = this.keyParts.root;\n    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;\n\n    const is_supported_type = Music.scaleTypes[this.keyParts.type];\n    if (!is_supported_type)\n      throw new Vex.RERR('BadArguments', 'Unsupported key type: ' + this.key);\n\n    this.scale = this.music.getScaleTones(\n        this.music.getNoteValue(this.keyString),\n        Music.scaleTypes[this.keyParts.type]);\n\n    this.scaleMap = {};\n    this.scaleMapByValue = {};\n    this.originalScaleMapByValue = {};\n\n    const noteLocation = Music.root_indices[this.keyParts.root];\n\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n\n      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n      this.scaleMap[rootName] = noteName;\n      this.scaleMapByValue[this.scale[i]] = noteName;\n      this.originalScaleMapByValue[this.scale[i]] = noteName;\n    }\n\n    return this;\n  }\n\n  getAccidental(key) {\n    const root = this.music.getKeyParts(key).root;\n    const parts = this.music.getNoteParts(this.scaleMap[root]);\n\n    return {\n      note: this.scaleMap[root],\n      accidental: parts.accidental,\n    };\n  }\n\n  selectNote(note) {\n    note = note.toLowerCase();\n    const parts = this.music.getNoteParts(note);\n\n    // First look for matching note in our altered scale\n    const scaleNote = this.scaleMap[parts.root];\n    const modparts = this.music.getNoteParts(scaleNote);\n\n    if (scaleNote == note) return {\n      'note': scaleNote,\n      'accidental': parts.accidental,\n      'change': false,\n    };\n\n    // Then search for a note of equivalent value in our altered scale\n    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n    if (valueNote != null) {\n      return {\n        'note': valueNote,\n        'accidental': this.music.getNoteParts(valueNote).accidental,\n        'change': false,\n      };\n    }\n\n    // Then search for a note of equivalent value in the original scale\n    const originalValueNote = this.originalScaleMapByValue[\n      this.music.getNoteValue(note)];\n    if (originalValueNote != null) {\n      this.scaleMap[modparts.root] = originalValueNote;\n      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n      return {\n        'note': originalValueNote,\n        'accidental': this.music.getNoteParts(originalValueNote).accidental,\n        'change': true,\n      };\n    }\n\n    // Then try to unmodify a currently modified note.\n    if (modparts.root == note) {\n      delete this.scaleMapByValue[\n        this.music.getNoteValue(this.scaleMap[parts.root])];\n      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] =\n        modparts.root;\n      this.scaleMap[modparts.root] = modparts.root;\n      return {\n        'note': modparts.root,\n        'accidental': null,\n        'change': true,\n      };\n    }\n\n    // Last resort -- shitshoot\n    delete this.scaleMapByValue[\n      this.music.getNoteValue(this.scaleMap[parts.root])];\n    this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n\n    delete this.scaleMap[modparts.root];\n    this.scaleMap[modparts.root] = note;\n\n    return {\n      note,\n      'accidental': parts.accidental,\n      'change': true,\n    };\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either Crescendo or Descrescendo.\n\nimport { Vex } from './vex';\nimport { Modifier } from './modifier';\n\nexport class StaveHairpin {\n  static get type() {\n    return {\n      CRESC: 1,\n      DECRESC: 2,\n    };\n  }\n\n  /* Helper function to convert ticks into pixels.\n   * Requires a Formatter with voices joined and formatted (to\n   * get pixels per tick)\n   *\n   * options is struct that has:\n   *\n   *  {\n   *   height: px,\n   *   y_shift: px, //vertical offset\n   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks\n   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n   *  }\n   *\n   **/\n  static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n    const ppt = formatter.pixelsPerTick;\n\n    if (ppt == null) {\n      throw new Vex.RuntimeError('BadArguments',\n          'A valid Formatter must be provide to draw offsets by ticks.'); }\n\n    const l_shift_px = ppt * options.left_shift_ticks;\n    const r_shift_px = ppt * options.right_shift_ticks;\n\n    const hairpin_options = {\n      height: options.height,\n      y_shift: options.y_shift,\n      left_shift_px: l_shift_px,\n      right_shift_px: r_shift_px };\n\n    new StaveHairpin({\n      first_note: notes.first_note,\n      last_note: notes.last_note,\n    }, type)\n      .setContext(ctx)\n      .setRenderOptions(hairpin_options)\n      .setPosition(position)\n      .draw();\n  }\n\n  /**\n   * Create a new hairpin from the specified notes.\n   *\n   * @constructor\n   * @param {!Object} notes The notes to tie up.\n   * @param {!Object} type The type of hairpin\n   */\n  constructor(notes, type) {\n    /**\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *  }\n     *\n     **/\n\n    this.notes = notes;\n    this.hairpin = type;\n    this.position = Modifier.Position.BELOW;\n\n    this.context = null;\n\n    this.render_options = {\n      height: 10,\n      y_shift: 0, // vertical offset\n      left_shift_px: 0, // left horizontal offset\n      right_shift_px: 0, // right horizontal offset\n    };\n\n    this.setNotes(notes);\n  }\n\n  setContext(context) { this.context = context; return this; }\n\n  setPosition(position) {\n    if (position == Modifier.Position.ABOVE ||\n        position == Modifier.Position.BELOW)\n      this.position = position;\n    return this;\n  }\n\n  setRenderOptions(options) {\n    if (options.height != null &&\n        options.y_shift != null &&\n        options.left_shift_px != null &&\n        options.right_shift_px != null) {\n      this.render_options = options;\n    }\n    return this;\n  }\n\n  /**\n   * Set the notes to attach this hairpin to.\n   *\n   * @param {!Object} notes The start and end notes.\n   */\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note)\n      throw new Vex.RuntimeError('BadArguments',\n          'Hairpin needs to have either first_note or last_note set.');\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.last_note = notes.last_note;\n    return this;\n  }\n\n  renderHairpin(params) {\n    const ctx = this.context;\n    let dis = this.render_options.y_shift + 20;\n    let y_shift = params.first_y;\n\n    if (this.position == Modifier.Position.ABOVE) {\n      dis = -dis + 30;\n      y_shift = params.first_y - params.staff_height;\n    }\n\n    const l_shift = this.render_options.left_shift_px;\n    const r_shift = this.render_options.right_shift_px;\n\n    ctx.beginPath();\n\n    switch (this.hairpin) {\n      case StaveHairpin.type.CRESC:\n        ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + (this.render_options.height / 2) + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n        break;\n      case StaveHairpin.type.DECRESC:\n        ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n        ctx.lineTo(params.last_x + r_shift, y_shift + (this.render_options.height / 2) + dis);\n        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n        break;\n      default:\n        // Default is NONE, so nothing to draw\n        break;\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoContext',\n      \"Can't draw Hairpin without a context.\");\n\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n\n    const start = first_note.getModifierStartXY(this.position, 0);\n    const end = last_note.getModifierStartXY(this.position, 0);\n\n    this.renderHairpin({\n      first_x: start.x,\n      last_x: end.x,\n      first_y: first_note.getStave().y + first_note.getStave().height,\n      last_y: last_note.getStave().y + last_note.getStave().height,\n      staff_height: first_note.getStave().height,\n    });\n    return true;\n  }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\n\nimport { Vex } from './vex';\n\nexport class Curve {\n\n  static get Position() {\n    return {\n      NEAR_HEAD: 1,\n      NEAR_TOP: 2,\n    };\n  }\n\n  // from: Start note\n  // to: End note\n  // options:\n  //    cps: List of control points\n  //    x_shift: pixels to shift\n  //    y_shift: pixels to shift\n  constructor(from, to, options) {\n    this.render_options = {\n      spacing: 2,\n      thickness: 2,\n      x_shift: 0,\n      y_shift: 10,\n      position: Curve.Position.NEAR_HEAD,\n      invert: false,\n      cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }],\n    };\n\n    Vex.Merge(this.render_options, options);\n    this.setNotes(from, to);\n  }\n\n  setContext(context) { this.context = context; return this; }\n  setNotes(from, to) {\n    if (!from && !to)\n      throw new Vex.RuntimeError('BadArguments',\n          'Curve needs to have either first_note or last_note set.');\n\n    this.from = from;\n    this.to = to;\n    return this;\n  }\n\n  /**\n   * @return {boolean} Returns true if this is a partial bar.\n   */\n  isPartial() {\n    return (!this.from || !this.to);\n  }\n\n  renderCurve(params) {\n    const ctx = this.context;\n    const cps = this.render_options.cps;\n\n    const x_shift = this.render_options.x_shift;\n    const y_shift = this.render_options.y_shift * params.direction;\n\n    const first_x = params.first_x + x_shift;\n    const first_y = params.first_y + y_shift;\n    const last_x = params.last_x - x_shift;\n    const last_y = params.last_y + y_shift;\n    const thickness = this.render_options.thickness;\n\n    const cp_spacing = (last_x - first_x) / (cps.length + 2);\n\n    ctx.beginPath();\n    ctx.moveTo(first_x, first_y);\n    ctx.bezierCurveTo(first_x + cp_spacing + cps[0].x,\n                      first_y + (cps[0].y * params.direction),\n                      last_x - cp_spacing + cps[1].x,\n                      last_y + (cps[1].y * params.direction),\n                      last_x, last_y);\n    ctx.bezierCurveTo(last_x - cp_spacing + cps[1].x,\n                      last_y + ((cps[1].y + thickness) * params.direction),\n                      first_x + cp_spacing + cps[0].x,\n                      first_y + ((cps[0].y + thickness) * params.direction),\n                      first_x, first_y);\n    ctx.stroke();\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  draw() {\n    if (!this.context)\n      throw new Vex.RERR('NoContext', 'No context to render tie.');\n    const first_note = this.from;\n    const last_note = this.to;\n    let first_x, last_x, first_y, last_y, stem_direction;\n\n    let metric = 'baseY';\n    let end_metric = 'baseY';\n    const position = this.render_options.position;\n    const position_end = this.render_options.position_end;\n\n    if (position === Curve.Position.NEAR_TOP) {\n      metric = 'topY';\n      end_metric = 'topY';\n    }\n\n    if (position_end == Curve.Position.NEAR_HEAD) {\n      end_metric = 'baseY';\n    } else if (position_end == Curve.Position.NEAR_TOP) {\n      end_metric = 'topY';\n    }\n\n    if (first_note) {\n      first_x = first_note.getTieRightX();\n      stem_direction = first_note.getStemDirection();\n      first_y = first_note.getStemExtents()[metric];\n    } else {\n      first_x = last_note.getStave().getTieStartX();\n      first_y = last_note.getStemExtents()[metric];\n    }\n\n    if (last_note) {\n      last_x = last_note.getTieLeftX();\n      stem_direction = last_note.getStemDirection();\n      last_y = last_note.getStemExtents()[end_metric];\n    } else {\n      last_x = first_note.getStave().getTieEndX();\n      last_y = first_note.getStemExtents()[end_metric];\n    }\n\n    this.renderCurve({\n      first_x,\n      last_x,\n      first_y,\n      last_y,\n      direction: stem_direction *\n        (this.render_options.invert === true ? -1 : 1),\n    });\n    return true;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `TextDynamics` which renders traditional\n// text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n//\n// You can render any dynamics string that contains a combination of\n// the following letters:  P, M, F, Z, R, S\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.\nfunction L() { if (TextDynamics.DEBUG) Vex.L('Vex.Flow.TextDynamics', arguments); }\n\nexport class TextDynamics extends Note {\n  // The glyph data for each dynamics letter\n  static get GLYPHS() {\n    return {\n      'f': {\n        code: 'vba',\n        width: 12,\n      },\n      'p': {\n        code: 'vbf',\n        width: 14,\n      },\n      'm': {\n        code: 'v62',\n        width: 17,\n      },\n      's': {\n        code: 'v4a',\n        width: 10,\n      },\n      'z': {\n        code: 'v80',\n        width: 12,\n      },\n      'r': {\n        code: 'vb1',\n        width: 12,\n      },\n    };\n  }\n\n  // A `TextDynamics` object inherits from `Note` so that it can be formatted\n  // within a `Voice`.\n  // Create the dynamics marking. `text_struct` is an object\n  // that contains a `duration` property and a `sequence` of\n  // letters that represents the letters to render\n  constructor(text_struct) {\n    super(text_struct);\n\n    this.sequence = text_struct.text.toLowerCase();\n    this.line = text_struct.line || 0;\n    this.glyphs = [];\n\n    Vex.Merge(this.render_options, {\n      glyph_font_size: 40,\n    });\n\n    L('New Dynamics Text: ', this.sequence);\n  }\n\n  // Set the Stave line on which the note should be placed\n  setLine(line) { this.line = line;  return this; }\n\n  // Preformat the dynamics text\n  preFormat() {\n    let total_width = 0;\n    // Iterate through each letter\n    this.sequence.split('').forEach(function(letter) {\n      // Get the glyph data for the letter\n      const glyph_data = TextDynamics.GLYPHS[letter];\n      if (!glyph_data) throw new Vex.RERR('Invalid dynamics character: ' + letter);\n\n      const size =  this.render_options.glyph_font_size;\n      const glyph = new Glyph(glyph_data.code, size);\n\n      // Add the glyph\n      this.glyphs.push(glyph);\n\n      total_width += glyph_data.width;\n    }, this);\n\n    // Store the width of the text\n    this.setWidth(total_width);\n    this.preFormatted = true;\n    return this;\n  }\n\n  // Draw the dynamics text on the rendering context\n  draw() {\n    const x = this.getAbsoluteX();\n    const y = this.stave.getYForLine(this.line + (-3));\n\n    L('Rendering Dynamics: ', this.sequence);\n\n    let letter_x = x;\n    this.glyphs.forEach(function(glyph, index) {\n      const current_letter = this.sequence[index];\n      glyph.render(this.context, letter_x, y);\n      letter_x += TextDynamics.GLYPHS[current_letter].width;\n    }, this);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Vex } from './vex';\n\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n  // all cases do this.\n  ctx.beginPath();\n  ctx.moveTo(x0, y0);\n  ctx.lineTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.lineTo(x0, y0);\n  ctx.closePath();\n\n  ctx.fill();\n}\n\n// Helper function to draw a line with arrow heads\nfunction drawArrowLine(ctx, point1, point2, config) {\n  const both_arrows = config.draw_start_arrow && config.draw_end_arrow;\n\n  const x1 = point1.x;\n  const y1 = point1.y;\n  const x2 = point2.x;\n  const y2 = point2.y;\n\n  // For ends with arrow we actually want to stop before we get to the arrow\n  // so that wide lines won't put a flat end on the arrow.\n  const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  const ratio = (distance - config.arrowhead_length / 3) / distance;\n  let end_x, end_y, start_x, start_y;\n  if (config.draw_end_arrow || both_arrows) {\n    end_x = Math.round(x1 + (x2 - x1) * ratio);\n    end_y = Math.round(y1 + (y2 - y1) * ratio);\n  } else {\n    end_x = x2;\n    end_y = y2;\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    start_x = x1 + (x2 - x1) * (1 - ratio);\n    start_y = y1 + (y2 - y1) * (1 - ratio);\n  } else {\n    start_x = x1;\n    start_y = y1;\n  }\n\n  if (config.color) {\n    ctx.setStrokeStyle(config.color);\n    ctx.setFillStyle(config.color);\n  }\n\n  // Draw the shaft of the arrow\n  ctx.beginPath();\n  ctx.moveTo(start_x, start_y);\n  ctx.lineTo(end_x, end_y);\n  ctx.stroke();\n  ctx.closePath();\n\n  // calculate the angle of the line\n  const line_angle = Math.atan2(y2 - y1, x2 - x1);\n  // h is the line length of a side of the arrow head\n  const h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));\n\n  let angle1, angle2;\n  let top_x, top_y;\n  let bottom_x, bottom_y;\n\n  if (config.draw_end_arrow || both_arrows) {\n    angle1 = line_angle + Math.PI + config.arrowhead_angle;\n    top_x = x2 + Math.cos(angle1) * h;\n    top_y = y2 + Math.sin(angle1) * h;\n\n    angle2 = line_angle + Math.PI - config.arrowhead_angle;\n    bottom_x = x2 + Math.cos(angle2) * h;\n    bottom_y = y2 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n  }\n\n  if (config.draw_start_arrow || both_arrows) {\n    angle1 = line_angle + config.arrowhead_angle;\n    top_x = x1 + Math.cos(angle1) * h;\n    top_y = y1 + Math.sin(angle1) * h;\n\n    angle2 = line_angle - config.arrowhead_angle;\n    bottom_x = x1 + Math.cos(angle2) * h;\n    bottom_y = y1 + Math.sin(angle2) * h;\n\n    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n  }\n}\n\nexport class StaveLine {\n  // Text Positioning\n  static get TextVerticalPosition() {\n    return {\n      TOP: 1,\n      BOTTOM: 2,\n    };\n  }\n\n  static get TextJustification() {\n    return {\n      LEFT: 1,\n      CENTER: 2,\n      RIGHT: 3,\n    };\n  }\n\n  // Initialize the StaveLine with the given `notes`.\n  //\n  // `notes` is a struct that has:\n  //\n  //  ```\n  //  {\n  //    first_note: Note,\n  //    last_note: Note,\n  //    first_indices: [n1, n2, n3],\n  //    last_indices: [n1, n2, n3]\n  //  }\n  //  ```\n  constructor(notes) {\n    this.notes = notes;\n    this.context = null;\n\n    this.text = '';\n\n    this.font = {\n      family: 'Arial',\n      size: 10,\n      weight: '',\n    };\n\n    this.render_options = {\n      // Space to add to the left or the right\n      padding_left: 4,\n      padding_right: 3,\n\n      // The width of the line in pixels\n      line_width: 1,\n      // An array of line/space lengths. Unsupported with Raphael (SVG)\n      line_dash: null,\n      // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)\n      rounded_end: true,\n      // The color of the line and arrowheads\n      color: null,\n\n      // Flags to draw arrows on each end of the line\n      draw_start_arrow: false,\n      draw_end_arrow: false,\n\n      // The length of the arrowhead sides\n      arrowhead_length: 10,\n      // The angle of the arrowhead\n      arrowhead_angle: Math.PI / 8,\n\n      // The position of the text\n      text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n      text_justification: StaveLine.TextJustification.CENTER,\n    };\n\n    this.setNotes(notes);\n  }\n\n  // Set the rendering context\n  setContext(context) { this.context = context; return this; }\n  // Set the font for the `StaveLine` text\n  setFont(font) { this.font = font; return this; }\n  // The the annotation for the `StaveLine`\n  setText(text) { this.text = text; return this; }\n\n  // Set the notes for the `StaveLine`\n  setNotes(notes) {\n    if (!notes.first_note && !notes.last_note)\n      throw new Vex.RuntimeError('BadArguments',\n          'Notes needs to have either first_note or last_note set.');\n\n    if (!notes.first_indices) notes.first_indices = [0];\n    if (!notes.last_indices) notes.last_indices = [0];\n\n    if (notes.first_indices.length != notes.last_indices.length)\n      throw new Vex.RuntimeError('BadArguments', 'Connected notes must have similar' +\n        ' index sizes');\n\n    // Success. Lets grab 'em notes.\n    this.first_note = notes.first_note;\n    this.first_indices = notes.first_indices;\n    this.last_note = notes.last_note;\n    this.last_indices = notes.last_indices;\n    return this;\n  }\n\n  // Apply the style of the `StaveLine` to the context\n  applyLineStyle() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No context to apply the styling to');\n    }\n\n    const render_options = this.render_options;\n    const ctx = this.context;\n\n    if (render_options.line_dash) {\n      ctx.setLineDash(render_options.line_dash);\n    }\n\n    if (render_options.line_width) {\n      ctx.setLineWidth(render_options.line_width);\n    }\n\n    if (render_options.rounded_end) {\n      ctx.setLineCap('round');\n    } else {\n      ctx.setLineCap('square');\n    }\n  }\n\n  // Apply the text styling to the context\n  applyFontStyle() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No context to apply the styling to');\n    }\n\n    const ctx = this.context;\n\n    if (this.font) {\n      ctx.setFont(this.font.family, this.font.size, this.font.weight);\n    }\n\n    if (this.render_options.color) {\n      ctx.setStrokeStyle(this.render_options.color);\n      ctx.setFillStyle(this.render_options.color);\n    }\n  }\n\n  // Renders the `StaveLine` on the context\n  draw() {\n    if (!this.context) {\n      throw new Vex.RERR('NoContext', 'No context to render StaveLine.');\n    }\n\n    const ctx = this.context;\n    const first_note = this.first_note;\n    const last_note = this.last_note;\n    const render_options = this.render_options;\n\n    ctx.save();\n    this.applyLineStyle();\n\n    // Cycle through each set of indices and draw lines\n    let start_position;\n    let end_position;\n    this.first_indices.forEach(function(first_index, i) {\n      const last_index = this.last_indices[i];\n\n      // Get initial coordinates for the start/end of the line\n      start_position = first_note.getModifierStartXY(2, first_index);\n      end_position = last_note.getModifierStartXY(1, last_index);\n      const upwards_slope = start_position.y > end_position.y;\n\n      // Adjust `x` coordinates for modifiers\n      start_position.x += first_note.getMetrics().modRightPx +\n                          render_options.padding_left;\n      end_position.x -= last_note.getMetrics().modLeftPx +\n                        render_options.padding_right;\n\n\n      // Adjust first `x` coordinates for displacements\n      const notehead_width = first_note.getGlyph().head_width;\n      const first_displaced = first_note.getKeyProps()[first_index].displaced;\n      if (first_displaced && first_note.getStemDirection() === 1) {\n        start_position.x += notehead_width + render_options.padding_left;\n      }\n\n      // Adjust last `x` coordinates for displacements\n      const last_displaced = last_note.getKeyProps()[last_index].displaced;\n      if (last_displaced && last_note.getStemDirection() === -1) {\n        end_position.x -= notehead_width + render_options.padding_right;\n      }\n\n      // Adjust y position better if it's not coming from the center of the note\n      start_position.y += upwards_slope ? -3 : 1;\n      end_position.y += upwards_slope ? 2 : 0;\n\n      drawArrowLine(ctx, start_position, end_position, this.render_options);\n    }, this);\n\n    ctx.restore();\n\n    // Determine the x coordinate where to start the text\n    const text_width = ctx.measureText(this.text).width;\n    const justification = render_options.text_justification;\n    let x = 0;\n    if (justification === StaveLine.TextJustification.LEFT) {\n      x = start_position.x;\n    } else if (justification === StaveLine.TextJustification.CENTER) {\n      const delta_x = (end_position.x - start_position.x);\n      const center_x = (delta_x / 2) + start_position.x;\n      x = center_x - (text_width / 2);\n    } else if (justification === StaveLine.TextJustification.RIGHT) {\n      x = end_position.x  -  text_width;\n    }\n\n    // Determine the y value to start the text\n    let y;\n    const vertical_position = render_options.text_position_vertical;\n    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n      y = first_note.getStave().getYForTopText();\n    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n      y = first_note.getStave().getYForBottomText();\n    }\n\n    // Draw the text\n    ctx.save();\n    this.applyFontStyle();\n    ctx.fillText(this.text, x, y);\n    ctx.restore();\n\n    return this;\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements different types of pedal markings. These notation\n// elements indicate to the performer when to depress and release the a pedal.\n//\n// In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n// custom text for the release/depress pedal markings.\n\nimport { Vex } from './vex';\nimport { Glyph } from './glyph';\n\n// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.\nfunction L() { if (PedalMarking.DEBUG) Vex.L('Vex.Flow.PedalMarking', arguments); }\n\n// Draws a pedal glyph with the provided `name` on a rendering `context`\n// at the coordinates `x` and `y. Takes into account the glyph data\n// coordinate shifts.\nfunction drawPedalGlyph(name, context, x, y, point) {\n  const glyph_data = PedalMarking.GLYPHS[name];\n  const glyph = new Glyph(glyph_data.code, point);\n  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n\nexport class PedalMarking {\n\n  // Glyph data\n  static get GLYPHS() {\n    return {\n      'pedal_depress': {\n        code: 'v36',\n        x_shift: -10,\n        y_shift: 0,\n      },\n      'pedal_release': {\n        code: 'v5d',\n        x_shift: -2,\n        y_shift: 3,\n      },\n    };\n  }\n\n  static get Styles() {\n    return {\n      TEXT: 1,\n      BRACKET: 2,\n      MIXED: 3,\n    };\n  }\n\n  // Create a sustain pedal marking. Returns the defaults PedalMarking.\n  // Which uses the traditional \"Ped\" and \"*\"\" markings.\n  static createSustain(notes) {\n    const pedal = new PedalMarking(notes);\n    return pedal;\n  }\n\n  // Create a sostenuto pedal marking\n  static createSostenuto(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.MIXED);\n    pedal.setCustomText('Sost. Ped.');\n    return pedal;\n  }\n\n  // Create an una corda pedal marking\n  static createUnaCorda(notes) {\n    const pedal = new PedalMarking(notes);\n    pedal.setStyle(PedalMarking.Styles.TEXT);\n    pedal.setCustomText('una corda', 'tre corda');\n    return pedal;\n  }\n\n  // ## Prototype Methods\n  constructor(notes) {\n    this.notes = notes;\n    this.style = PedalMarking.TEXT;\n    this.line = 0;\n\n    // Custom text for the release/depress markings\n    this.custom_depress_text = '';\n    this.custom_release_text = '';\n\n    this.font = {\n      family: 'Times New Roman',\n      size: 12,\n      weight: 'italic bold',\n    };\n\n    this.render_options = {\n      bracket_height: 10,\n      text_margin_right: 6,\n      bracket_line_width: 1,\n      glyph_point_size: 40,\n      color: 'black',\n    };\n  }\n\n  // Set custom text for the `depress`/`release` pedal markings. No text is\n  // set if the parameter is falsy.\n  setCustomText(depress, release) {\n    this.custom_depress_text = depress || '';\n    this.custom_release_text = release || '';\n    return this;\n  }\n\n  // Set the pedal marking style\n  setStyle(style) {\n    if (style < 1 && style > 3)  {\n      throw new Vex.RERR('InvalidParameter',\n        'The style must be one found in PedalMarking.Styles');\n    }\n\n    this.style = style;\n    return this;\n  }\n\n  // Set the staff line to render the markings on\n  setLine(line) { this.line = line; return this; }\n\n  // Set the rendering context\n  setContext(context) { this.context = context; return this; }\n\n  // Draw the bracket based pedal markings\n  drawBracketed() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    let prev_x;\n    let prev_y;\n    const pedal = this;\n\n    // Iterate through each note\n    this.notes.forEach((note, index, notes) => {\n      // Each note triggers the opposite pedal action\n      is_pedal_depressed = !is_pedal_depressed;\n\n      // Get the initial coordinates for the note\n      const x = note.getAbsoluteX();\n      const y = note.getStave().getYForBottomText(pedal.line + 3);\n\n      // Throw if current note is positioned before the previous note\n      if (x < prev_x) throw new Vex.RERR('InvalidConfiguration',\n        'The notes provided must be in order of ascending x positions');\n\n      // Determine if the previous or next note are the same\n      // as the current note. We need to keep track of this for\n      // when adjustments are made for the release+depress action\n      const next_is_same = notes[index + 1] === note;\n      const prev_is_same = notes[index - 1] === note;\n\n      let x_shift = 0;\n      if (is_pedal_depressed) {\n        // Adjustment for release+depress\n        x_shift =  prev_is_same ? 5 : 0;\n\n        if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {\n          // For MIXED style, start with text instead of bracket\n          if (pedal.custom_depress_text) {\n            // If we have custom text, use instead of the default \"Ped\" glyph\n            const text_width = ctx.measureText(pedal.custom_depress_text).width;\n            ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);\n            x_shift = (text_width / 2) + pedal.render_options.text_margin_right;\n          } else {\n            // Render the Ped glyph in position\n            drawPedalGlyph('pedal_depress', ctx, x, y, pedal.render_options.glyph_point_size);\n            x_shift = 20 + pedal.render_options.text_margin_right;\n          }\n        } else {\n          // Draw start bracket\n          ctx.beginPath();\n          ctx.moveTo(x, y - pedal.render_options.bracket_height);\n          ctx.lineTo(x + x_shift, y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      } else {\n        // Adjustment for release+depress\n        x_shift = next_is_same ? -5 : 0;\n\n        // Draw end bracket\n        ctx.beginPath();\n        ctx.moveTo(prev_x, prev_y);\n        ctx.lineTo(x + x_shift, y);\n        ctx.lineTo(x, y - pedal.render_options.bracket_height);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      // Store previous coordinates\n      prev_x = x + x_shift;\n      prev_y = y;\n    });\n  }\n\n  // Draw the text based pedal markings. This defaults to the traditional\n  // \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n  drawText() {\n    const ctx = this.context;\n    let is_pedal_depressed = false;\n    const pedal = this;\n\n    // The glyph point size\n    const point = pedal.render_options.glyph_point_size;\n\n    // Iterate through each note, placing glyphs or custom text accordingly\n    this.notes.forEach(note => {\n      is_pedal_depressed = !is_pedal_depressed;\n      const stave = note.getStave();\n      const x = note.getAbsoluteX();\n      const y = stave.getYForBottomText(pedal.line + 3);\n\n      let text_width = 0;\n      if (is_pedal_depressed) {\n        if (pedal.custom_depress_text) {\n          text_width = ctx.measureText(pedal.custom_depress_text).width;\n          ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);\n        } else {\n          drawPedalGlyph('pedal_depress', ctx, x, y, point);\n        }\n      } else {\n        if (pedal.custom_release_text) {\n          text_width = ctx.measureText(pedal.custom_release_text).width;\n          ctx.fillText(pedal.custom_release_text, x - (text_width / 2), y);\n        } else {\n          drawPedalGlyph('pedal_release', ctx, x, y, point);\n        }\n      }\n    });\n  }\n\n  // Render the pedal marking in position on the rendering context\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoContext',\n      \"Can't draw PedalMarking without a context.\");\n    const ctx = this.context;\n\n    ctx.save();\n    ctx.setStrokeStyle(this.render_options.color);\n    ctx.setFillStyle(this.render_options.color);\n    ctx.setFont(this.font.family, this.font.size, this.font.weight);\n\n    L('Rendering Pedal Marking');\n\n    if (this.style === PedalMarking.Styles.BRACKET ||\n        this.style === PedalMarking.Styles.MIXED) {\n      ctx.setLineWidth(this.render_options.bracket_line_width);\n      this.drawBracketed();\n    } else if (this.style === PedalMarking.Styles.TEXT) {\n      this.drawText();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implement `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Renderer } from './renderer';\n\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\nfunction L() { if (TextBracket.DEBUG) Vex.L('Vex.Flow.TextBracket', arguments); }\n\nexport class TextBracket {\n  static get Positions() {\n    return {\n      TOP: 1,\n      BOTTOM: -1,\n    };\n  }\n\n  constructor(bracket_data) {\n    this.start = bracket_data.start;\n    this.stop = bracket_data.stop;\n\n    this.text = bracket_data.text || '';\n    this.superscript = bracket_data.superscript || '';\n\n    this.position = bracket_data.position || TextBracket.Positions.TOP;\n    this.line = 1;\n\n    this.font = {\n      family: 'Serif',\n      size: 15,\n      weight: 'italic',\n    };\n\n    this.render_options = {\n      dashed: true,\n      dash: [5],\n      color: 'black',\n      line_width: 1,\n      show_bracket: true,\n      bracket_height: 8,\n\n      // In the BOTTOM position, the bracket line can extend\n      // under the superscript.\n      underline_superscript: true,\n    };\n  }\n\n  // Apply the text backet styling to the provided `context`\n  applyStyle(context) {\n    // Apply style for the octave bracket\n    context.setFont(this.font.family, this.font.size, this.font.weight);\n    context.setStrokeStyle(this.render_options.color);\n    context.setFillStyle(this.render_options.color);\n    context.setLineWidth(this.render_options.line_width);\n\n    return this;\n  }\n\n  // Set whether the bracket line should be `dashed`. You can also\n  // optionally set the `dash` pattern by passing in an array of numbers\n  setDashed(dashed, dash) {\n    this.render_options.dashed = dashed;\n    if (dash) this.render_options.dash = dash;\n    return this;\n  }\n\n  // Set the font for the text\n  setFont(font) { this.font = font; return this; }\n  // Set the rendering `context` for the octave bracket\n  setContext(context) { this.context = context; return this; }\n  // Set the staff line to render the bracket on\n  setLine(line) { this.line = line; return this; }\n\n  // Draw the octave bracket on the rendering context\n  draw() {\n    const ctx = this.context;\n\n    let y = 0;\n    switch (this.position) {\n      case TextBracket.Positions.TOP:\n        y =  this.start.getStave().getYForTopText(this.line);\n        break;\n      case TextBracket.Positions.BOTTOM:\n        y =  this.start.getStave().getYForBottomText(this.line);\n        break;\n    }\n\n    // Get the preliminary start and stop coordintates for the bracket\n    const start = { x: this.start.getAbsoluteX(), y };\n    const stop = { x: this.stop.getAbsoluteX(), y };\n\n    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n\n    const bracket_height = this.render_options.bracket_height * this.position;\n\n    ctx.save();\n    this.applyStyle(ctx);\n\n    // Draw text\n    ctx.fillText(this.text, start.x, start.y);\n\n    // Get the width and height for the octave number\n    const main_width = ctx.measureText(this.text).width;\n    const main_height = ctx.measureText('M').width;\n\n    // Calculate the y position for the super script\n    const super_y = start.y - (main_height / 2.5);\n\n    // Draw the superscript\n    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);\n    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n\n\n    // Determine width and height of the superscript\n    const superscript_width = ctx.measureText(this.superscript).width;\n    const super_height = ctx.measureText('M').width;\n\n    // Setup initial coordinates for the bracket line\n    let start_x = start.x;\n    let line_y = super_y;\n    const end_x = stop.x + this.stop.getGlyph().head_width;\n\n    // Adjust x and y coordinates based on position\n    if (this.position === TextBracket.Positions.TOP) {\n      start_x += main_width + superscript_width + 5;\n      line_y -= super_height / 2.7;\n    } else if (this.position === TextBracket.Positions.BOTTOM) {\n      line_y += super_height / 2.7;\n      start_x += main_width + 2;\n\n      if (!this.render_options.underline_superscript) {\n        start_x += superscript_width;\n      }\n    }\n\n    if (this.render_options.dashed) {\n      // Main line\n      Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y,\n        this.render_options.dash);\n      // Ending Bracket\n      if (this.render_options.show_bracket) {\n        Renderer.drawDashedLine(ctx, end_x, line_y + (1 * this.position),\n          end_x, line_y + bracket_height, this.render_options.dash);\n      }\n    } else {\n      ctx.beginPath();\n      ctx.moveTo(start_x, line_y);\n      // Main line\n      ctx.lineTo(end_x, line_y);\n      if (this.render_options.show_bracket) {\n        // Ending bracket\n        ctx.lineTo(end_x, line_y + bracket_height);\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    ctx.restore();\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can\n// be added to a voice and rendered in the middle of a stave. Since it has no\n// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n//\n// See `tests/barnote_tests.js` for usage examples.\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { Barline } from './stavebarline';\nimport { BoundingBox } from './boundingbox';\n\n// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.\nfunction L(...args) { if (BarNote.DEBUG) Vex.L('Vex.Flow.BarNote', args); }\n\nexport class BarNote extends Note {\n  constructor() {\n    super({ duration: 'b' });\n\n    const TYPE = Barline.type;\n    this.metrics = {\n      widths: {},\n    };\n\n    // Defined this way to prevent lint errors.\n    this.metrics.widths[TYPE.SINGLE] = 8;\n    this.metrics.widths[TYPE.DOUBLE] = 12;\n    this.metrics.widths[TYPE.END] = 15;\n    this.metrics.widths[TYPE.REPEAT_BEGIN] = 14;\n    this.metrics.widths[TYPE.REPEAT_END] = 14;\n    this.metrics.widths[TYPE.REPEAT_BOTH] = 18;\n    this.metrics.widths[TYPE.NONE] = 0;\n\n    // Tell the formatter that bar notes have no duration.\n    this.ignore_ticks = true;\n    this.type = TYPE.SINGLE;\n\n    // Set width to width of relevant `Barline`.\n    this.setWidth(this.metrics.widths[this.type]);\n  }\n\n  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.\n  getType() { return this.type; }\n  setType(type) {\n    this.type = type;\n    this.setWidth(this.metrics.widths[this.type]);\n    return this;\n  }\n\n  getBoundingBox() {\n    return new BoundingBox(0, 0, 0, 0);\n  }\n\n  addToModifierContext() {\n    /* overridden to ignore */\n    return this;\n  }\n\n  preFormat() {\n    /* overridden to ignore */\n    this.setPreFormatted(true);\n    return this;\n  }\n\n  // Render note to stave.\n  draw() {\n    if (!this.stave) throw new Vex.RERR('NoStave', \"Can't draw without a stave.\");\n    L('Rendering bar line at: ', this.getAbsoluteX());\n    const barline = new Barline(this.type);\n    barline.setX(this.getAbsoluteX());\n    barline.draw(this.stave);\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n//\n// This class implements tremolo notation.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Modifier } from './modifier';\nimport { Glyph } from './glyph';\n\nexport class Tremolo extends Modifier {\n  static get CATEGORY() { return 'tremolo'; }\n  constructor(num) {\n    super();\n\n    this.num = num;\n    this.note = null;\n    this.index = null;\n    this.position = Modifier.Position.CENTER;\n    this.code = 'v74';\n    this.shift_right = -2;\n    this.y_spacing = 4;\n\n    this.render_options = {\n      font_scale: 35,\n      stroke_px: 3,\n      stroke_spacing: 10,\n    };\n\n    this.font = {\n      family: 'Arial',\n      size: 16,\n      weight: '',\n    };\n  }\n\n  getCategory() { return Tremolo.CATEGORY; }\n\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoContext',\n      \"Can't draw Tremolo without a context.\");\n    if (!(this.note && (this.index != null))) throw new Vex.RERR('NoAttachedNote',\n      \"Can't draw Tremolo without a note and index.\");\n\n    const start = this.note.getModifierStartXY(this.position, this.index);\n    let x = start.x;\n    let y = start.y;\n\n    x += this.shift_right;\n    for (let i = 0; i < this.num; ++i) {\n      Glyph.renderGlyph(this.context, x, y,\n                           this.render_options.font_scale, this.code);\n      y += this.y_spacing;\n    }\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\n\nimport { Vex } from './vex';\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\n\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\nfunction L() { if (Crescendo.DEBUG) Vex.L('Vex.Flow.Crescendo', arguments); }\n\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx, params) {\n  const begin_x = params.begin_x;\n  const end_x = params.end_x;\n  const y = params.y;\n  const half_height =  params.height / 2;\n\n  ctx.beginPath();\n\n  if (params.reverse) {\n    ctx.moveTo(begin_x, y - half_height);\n    ctx.lineTo(end_x,  y);\n    ctx.lineTo(begin_x, y + half_height);\n  } else {\n    ctx.moveTo(end_x,  y - half_height);\n    ctx.lineTo(begin_x, y);\n    ctx.lineTo(end_x,  y + half_height);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}\n\nexport class Crescendo extends Note {\n  // Initialize the crescendo's properties\n  constructor(note_struct) {\n    super(note_struct);\n\n    // Whether the object is a decrescendo\n    this.decrescendo = false;\n\n    // The staff line to be placed on\n    this.line = note_struct.line || 0;\n\n    // The height at the open end of the cresc/decresc\n    this.height = 15;\n\n    Vex.Merge(this.render_options, {\n      // Extensions to the length of the crescendo on either side\n      extend_left: 0,\n      extend_right: 0,\n      // Vertical shift\n      y_shift: 0,\n    });\n  }\n\n  // Set the line to center the element on\n  setLine(line) { this.line = line; return this; }\n\n  // Set the full height at the open end\n  setHeight(height) { this.height = height; return this; }\n\n  // Set whether the sign should be a descresendo by passing a bool\n  // to `decresc`\n  setDecrescendo(decresc) {\n    this.decrescendo = decresc;\n    return this;\n  }\n\n  // Preformat the note\n  preFormat() { this.preFormatted = true; return this; }\n\n  // Render the Crescendo object onto the canvas\n  draw() {\n    if (!this.context) throw new Vex.RERR('NoContext',\n      \"Can't draw Hairpin without a context.\");\n\n    const tick_context = this.getTickContext();\n    const next_context = TickContext.getNextContext(tick_context);\n\n    const begin_x = this.getAbsoluteX();\n    let end_x;\n    if (next_context) {\n      end_x = next_context.getX();\n    } else {\n      end_x = this.stave.x + this.stave.width;\n    }\n\n    const y = this.stave.getYForLine(this.line + (-3)) + 1;\n\n    L('Drawing ',  this.decrescendo ? 'decrescendo ' : 'crescendo ',\n      this.height, 'x', begin_x - end_x);\n\n    renderHairpin(this.context, {\n      begin_x: begin_x - this.render_options.extend_left,\n      end_x: end_x + this.render_options.extend_right,\n      y: y + this.render_options.y_shift,\n      height: this.height,\n      reverse: this.decrescendo,\n    });\n  }\n}\n","// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n\nimport { Vex } from './vex';\nimport { Flow } from './tables';\nimport { Fraction } from './fraction';\nimport { Renderer } from './renderer';\nimport { Formatter } from './formatter';\nimport { Music } from './music';\nimport { Glyph } from './glyph';\nimport { Stave } from './stave';\nimport { StaveNote } from './stavenote';\nimport { Voice } from './voice';\nimport { Accidental } from './accidental';\nimport { Beam } from './beam';\nimport { StaveTie } from './stavetie';\nimport { TabStave } from './tabstave';\nimport { TabNote } from './tabnote';\nimport { Bend } from './bend';\nimport { Vibrato } from './vibrato';\nimport { Note } from './note';\nimport { ModifierContext } from './modifiercontext';\nimport { TickContext } from './tickcontext';\nimport { Articulation } from './articulation';\nimport { Annotation } from './annotation';\nimport { Barline } from './stavebarline';\nimport { NoteHead } from './notehead';\nimport { StaveConnector } from './staveconnector';\nimport { ClefNote } from './clefnote';\nimport { KeySignature } from './keysignature';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Stem } from './stem';\nimport { TabTie } from './tabtie';\nimport { Clef } from './clef';\nimport { Modifier } from './modifier';\nimport { TabSlide } from './tabslide';\nimport { Tuplet } from './tuplet';\nimport { GraceNote } from './gracenote';\nimport { Tuning } from './tuning';\nimport { KeyManager } from './keymanager';\nimport { StaveHairpin } from './stavehairpin';\nimport { BoundingBox } from './boundingbox';\nimport { Stroke } from './strokes';\nimport { TextNote } from './textnote';\nimport { Curve } from './curve';\nimport { TextDynamics } from './textdynamics';\nimport { StaveLine } from './staveline';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { TextBracket } from './textbracket';\nimport { FretHandFinger } from './frethandfinger';\nimport { Repetition } from './staverepetition';\nimport { BarNote } from './barnote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { Tremolo } from './tremolo';\nimport { StringNumber } from './stringnumber';\nimport { Crescendo } from './crescendo';\nimport { Volta } from './stavevolta';\nimport { Font } from './fonts/vexflow_font';\n\nVex.Flow = Flow;\nVex.Flow.Fraction = Fraction;\nVex.Flow.Renderer = Renderer;\nVex.Flow.Formatter = Formatter;\nVex.Flow.Music = Music;\nVex.Flow.Glyph = Glyph;\nVex.Flow.Stave = Stave;\nVex.Flow.StaveNote = StaveNote;\nVex.Flow.Voice = Voice;\nVex.Flow.Accidental = Accidental;\nVex.Flow.Beam = Beam;\nVex.Flow.StaveTie = StaveTie;\nVex.Flow.TabStave = TabStave;\nVex.Flow.TabNote = TabNote;\nVex.Flow.Bend = Bend;\nVex.Flow.Vibrato = Vibrato;\nVex.Flow.Note = Note;\nVex.Flow.ModifierContext = ModifierContext;\nVex.Flow.TickContext = TickContext;\nVex.Flow.Articulation = Articulation;\nVex.Flow.Annotation = Annotation;\nVex.Flow.Barline = Barline;\nVex.Flow.NoteHead = NoteHead;\nVex.Flow.StaveConnector = StaveConnector;\nVex.Flow.ClefNote = ClefNote;\nVex.Flow.KeySignature = KeySignature;\nVex.Flow.TimeSignature = TimeSignature;\nVex.Flow.TimeSigNote = TimeSigNote;\nVex.Flow.Stem = Stem;\nVex.Flow.TabTie = TabTie;\nVex.Flow.Clef = Clef;\nVex.Flow.Modifier = Modifier;\nVex.Flow.TabSlide = TabSlide;\nVex.Flow.Tuplet = Tuplet;\nVex.Flow.GraceNote = GraceNote;\nVex.Flow.Tuning = Tuning;\nVex.Flow.KeyManager = KeyManager;\nVex.Flow.StaveHairpin = StaveHairpin;\nVex.Flow.BoundingBox = BoundingBox;\nVex.Flow.Stroke = Stroke;\nVex.Flow.TextNote = TextNote;\nVex.Flow.Curve = Curve;\nVex.Flow.TextDynamics = TextDynamics;\nVex.Flow.StaveLine = StaveLine;\nVex.Flow.Ornament = Ornament;\nVex.Flow.PedalMarking = PedalMarking;\nVex.Flow.TextBracket = TextBracket;\nVex.Flow.FretHandFinger = FretHandFinger;\nVex.Flow.Repetition = Repetition;\nVex.Flow.BarNote = BarNote;\nVex.Flow.GraceNoteGroup = GraceNoteGroup;\nVex.Flow.Tremolo = Tremolo;\nVex.Flow.StringNumber = StringNumber;\nVex.Flow.Crescendo = Crescendo;\nVex.Flow.Volta = Volta;\nVex.Flow.Font = Font;\n\nexport default Vex;\n"],"names":["Vex","L","babelHelpers.typeof"],"mappings":"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"}