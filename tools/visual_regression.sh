#!/bin/bash
# This script runs a visual regression test on all the images
# generated by the VexFlow tests.
#
# Prerequisites: ImageMagick
#
# On OSX:   $ brew install imagemagick
# On Linux: $ apt-get install imagemagick
#
# Usage:
#
#  First generate the PNG images from the tests into build/images.
#
#    $ ./tools/generate_png_images.js
#
#  Run the regression tests against the reference or blessed images in tests/blessed.
#
#    $ ./tools/visual_regression.sh (reference|blessed) [test_prefix]
#
#  Check build/images/diff/results.txt for results. This file is sorted
#  by PHASH difference (most different files on top.) The composite diff
#  images for failed tests (i.e., PHASH > 1.0) are stored in build/images/diff.
#
#  If you are satisfied with the differences, copy *.png from build/images
#  into tests/blessed, and submit your change.

# PNG viewer on OSX. Switch this to whatever your system uses.
# VIEWER=open

# Check ImageMagick installation
command -v convert >/dev/null 2>&1 || { echo >&2 "Error: ImageMagick not found."; exit 1; }

# Show images over this PHASH threshold. This is probably too low, but
# a good first pass.
THRESHOLD=0.01

# Directories. You might want to change BASE, if you're running from a
# different working directory.
BASE=.
if [ "$1" == "reference" ]
then
  ADIR=$BASE/build/images/reference
  ANAME=Reference
  BDIR=$BASE/build/images/current
  BNAME=Current
  DIFF=$BASE/build/images/diff
elif  [ "$1" == "blessed" ]
then
  ADIR=$BASE/build/images/blessed
  ANAME=Blessed
  BDIR=$BASE/build/images/current
  BNAME=Current
  DIFF=$BASE/build/images/diff
else
  echo >&2 "Usage: visual_regression.sh (reference|blessed) [test_prefix]"; exit 1;
fi

# All results are stored here.
RESULTS=$DIFF/results.txt
WARNINGS=$DIFF/warnings.txt

mkdir -p $DIFF
if [ -e "$RESULTS" ]
then
  rm $DIFF/*
fi
touch $RESULTS
touch $RESULTS.fail
touch $WARNINGS

# If no prefix is provided, test all images.
if [ "$2" == "" ]
then
  files=*.png
else
  files=$2*.png
fi


## Sanity checks: some simple checks that the script can run correctly (doesn't validate pngs)
if [ "`basename $PWD`" == "tools" ]
then
  echo Please run this script from the VexFlow base directory.
  exit 1
fi

# Check if some png files are in the right folders and warn if not. doesn't make sure there are actual, usable png images though.
totalImagesB=`ls -1 $BDIR/$files | wc -l | xargs` # xargs trims spaces
if [ $? -ne 0 ] || [ "$totalImagesB" -lt 1 ]
then
  echo Missing images in $BDIR.
  echo Please run \"npm run generate\"
  exit 1
fi

totalImagesA=`ls -1 $ADIR/$files | wc -l | xargs`
if [ $? -ne 0 ] || [ "$totalImagesA" -lt 1 ]
then
  echo Missing images in $ADIR.
  echo Please run \"npm run generate\"
  exit 1
fi
# check that #ImagesA == #ImagesB (will continue anyways)
if [ ! "$totalImagesA" -eq "$totalImagesB" ]
then
  echo "Warning: Number of (matching) $BNAME images ($totalImagesB) is not the same as $ANAME images ($totalImagesA). Continuing anyways."
fi
# ----------------- end of sanity checks -----------------


# Number of simultaneous jobs
nproc=$(sysctl -n hw.physicalcpu 2> /dev/null || nproc)
if [ -n "$NPROC" ]; then
  nproc=$NPROC
fi

echo "Running $totalImagesA tests with threshold $THRESHOLD (nproc=$nproc)..."

function ProgressBar {
    let _progress=(${1}*100/${2}*100)/100
    let _done=(${_progress}*4)/10
    let _left=40-$_done
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

    printf "\rProgress : [${_fill// /#}${_empty// /-}] ${_progress}%%"
}

function diff_image() {
  local image=$1
  local name=`basename $image .png`
  local fileA=$ADIR/$name.png
  local fileB=$BDIR/$name.png
  local diff=$fileB-temp

  if [ ! -e "$fileB" ]
  then
    echo "Warning: $name.png missing in $BDIR." >$diff.warn
    return
  fi

  if [ ! -e "$fileA" ]
  then
    echo "Warning: $name.png missing in $ADIR." >$diff.warn
    return
  fi

  cp $fileA $diff-a.png
  cp $fileB $diff-b.png

  # Calculate the difference metric and store the composite diff image.
  local hash=`compare -metric PHASH -highlight-color '#ff000050' $diff-b.png $diff-a.png $diff-diff.png 2>&1`

  local isGT=`echo "$hash > $THRESHOLD" | bc -l`
  if [ "$isGT" == "1" ]
  then
    # Add the result to results.text
    echo $name $hash >$diff.fail
    # Threshold exceeded, save the diff and the original, current
    cp $diff-diff.png $DIFF/$name.png
    cp $diff-a.png $DIFF/$name'_'$ANAME.png
    cp $diff-b.png $DIFF/$name'_'$BNAME.png
    echo
    echo "Test: $name"
    echo "  PHASH value exceeds threshold: $hash > $THRESHOLD"
    echo "  Image diff stored in $DIFF/$name.png"
    # $VIEWER "$diff-diff.png" "$diff-a.png" "$diff-b.png"
    # echo 'Hit return to process next image...'
    # read
  else
    echo $name $hash >$diff.pass
  fi
  rm -f $diff-a.png $diff-b.png $diff-diff.png
}

function wait_jobs () {
  local n=$1
  while [[ "$(jobs -r | wc -l)" -ge "$n" ]] ; do
     # echo ===================================== && jobs -lr
     # wait the oldest job.
     local pid_to_wait=`jobs -rp | head -1`
     # echo wait $pid_to_wait
     wait $pid_to_wait  &> /dev/null
  done
}

count=0
for image in $BDIR/$files
do
  count=$((count + 1))
  ProgressBar ${count} ${totalImagesA}
  wait_jobs $nproc
  diff_image $image &
done
wait

cat $BDIR/*.warn 1>$WARNINGS 2>/dev/null
rm -f $BDIR/*.warn

## Check for files newly built that are not yet blessed.
for image in $BDIR/$files
do
  name=`basename $image .png`
  fileA=$ADIR/$name.png
  fileB=$BDIR/$name.png

  if [ ! -e "$ADIR" ]
  then
    echo "  Warning: $name.png missing in $ADIR." >>$WARNINGS
  fi
done

num_warnings=`cat $WARNINGS | wc -l`

cat $BDIR/*.fail 1>$RESULTS.fail 2>/dev/null
num_fails=`cat $RESULTS.fail | wc -l`
rm -f  $BDIR/*.fail

# Sort results by PHASH
sort -r -n -k 2 $RESULTS.fail >$RESULTS
sort -r -n -k 2 $BDIR/*.pass 1>>$RESULTS 2>/dev/null
rm -f $BDIR/*.pass $RESULTS.fail

echo
echo Results stored in $DIFF/results.txt
echo All images with a difference over threshold, $THRESHOLD, are
echo available in $DIFF, sorted by perceptual hash.
echo

if [ "$num_warnings" -gt 0 ]
then
  echo
  echo "You have $num_warnings warning(s):"
  cat $WARNINGS
fi

if [ "$num_fails" -gt 0 ]
then
  echo "You have $num_fails fail(s):"
  head -n $num_fails $RESULTS
else
  echo "Success - All diffs under threshold!"
fi
