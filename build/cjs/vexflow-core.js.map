{"version":3,"file":"vexflow-core.js","mappings":";;;;;CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAa,IAAID,IAEjBD,EAAU,IAAIC,IARhB,CASsB,oBAAXK,OAAyBA,OAA+B,oBAAfC,WAA6BA,WAAaC,MAAO,WACrG,Y,aCTA,IAAIC,EAAsB,CCA1BA,EAAwB,CAACP,EAASQ,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAEV,EAASS,IAC5EE,OAAOC,eAAeZ,EAASS,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,OCJ3EF,EAAoBQ,EAAI,WACvB,GAA0B,iBAAfV,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIU,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXb,OAAqB,OAAOA,QALjB,GCAxBG,EAAoBG,EAAI,CAACQ,EAAKC,IAAUR,OAAOS,UAAUC,eAAeC,KAAKJ,EAAKC,G,SCY3E,SAASI,EAAWL,EAAKM,EAAUC,GAAiB,GAEvD,GAAmB,iBAARP,GAA4B,OAARA,EAC3B,OAAO,EAIX,IAAIQ,EAAiBR,EAAIS,YAEzB,GAAIF,EAAgB,CAEhB,KAAe,OAARP,GAAc,CAEjB,GADAQ,EAAiBR,EAAIS,YACjB,aAAcD,GAAkBA,EAAeE,WAAaJ,EAC5D,OAAO,EAEXN,EAAMP,OAAOkB,eAAeX,GAEhC,OAAO,EAIP,MAAO,aAAcQ,GAAkBA,EAAeE,WAAaJ,E,wBAGpE,MAEMM,EAAaZ,GAAQK,EAAWL,EAAKa,EAASC,SAE9CC,EAAef,GAAQK,EAAWL,EAAKa,EAASG,WAEhDC,EAAUjB,GAAQK,EAAWL,EAAKa,EAASK,MAE3CC,EAAenB,GAAQK,EAAWL,EAAKa,EAASO,WAChDC,EAAmBrB,GAAQK,EAAWL,EAAKa,EAASS,eACpDC,EAAavB,GAAQK,EAAWL,EAAKa,EAASW,SAGpD,IAAIX,GACX,SAAWA,GACPA,EAAqB,WAAI,aACzBA,EAAqB,WAAI,aACzBA,EAAuB,aAAI,eAC3BA,EAAkB,QAAI,UACtBA,EAAkB,QAAI,UACtBA,EAAe,KAAI,OACnBA,EAAe,KAAI,OACnBA,EAAsB,YAAI,cAC1BA,EAAe,KAAI,OACnBA,EAAmB,SAAI,WACvBA,EAAoB,UAAI,YACxBA,EAAgB,MAAI,QACpBA,EAAc,IAAI,MAClBA,EAAkB,QAAI,UACtBA,EAAmB,SAAI,WACvBA,EAAyB,eAAI,iBAC7BA,EAAoB,UAAI,YACxBA,EAAgB,MAAI,QACpBA,EAAoB,UAAI,YACxBA,EAAoB,UAAI,YACxBA,EAAyB,eAAI,iBAC7BA,EAAuB,aAAI,eAC3BA,EAAuB,aAAI,eAC3BA,EAAqB,WAAI,aACzBA,EAAmB,SAAI,WACvBA,EAA2B,iBAAI,mBAC/BA,EAAe,KAAI,OACnBA,EAAmB,SAAI,WACvBA,EAAuB,aAAI,eAC3BA,EAAmB,SAAI,WACvBA,EAAsB,YAAI,cAC1BA,EAAuB,aAAI,eAC3BA,EAAwB,cAAI,gBAC5BA,EAAqB,WAAI,aACzBA,EAAqB,WAAI,aACzBA,EAAgB,MAAI,QACpBA,EAAyB,eAAI,iBAC7BA,EAAuB,aAAI,eAC3BA,EAAoB,UAAI,YACxBA,EAAwB,cAAI,gBAC5BA,EAAoB,UAAI,YACxBA,EAAuB,aAAI,eAC3BA,EAAqB,WAAI,aACzBA,EAAoB,UAAI,YACxBA,EAAmB,SAAI,WACvBA,EAAe,KAAI,OACnBA,EAAwB,cAAI,gBAC5BA,EAAuB,aAAI,eAC3BA,EAAiB,OAAI,SACrBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,UACtBA,EAAmB,SAAI,WACvBA,EAAmB,SAAI,WACvBA,EAAiB,OAAI,SACrBA,EAAsB,YAAI,cAC1BA,EAAuB,aAAI,eAC3BA,EAAmB,SAAI,WACvBA,EAAmB,SAAI,WACvBA,EAAwB,cAAI,gBAC5BA,EAAsB,YAAI,cAC1BA,EAAkB,QAAI,UACtBA,EAAiB,OAAI,SACrBA,EAAkB,QAAI,UACtBA,EAAyB,eAAI,iBAC7BA,EAAgB,MAAI,QACpBA,EAAgB,MAAI,QAlExB,CAmEGA,IAAaA,EAAW,KClHpB,MAAMY,UAAqBC,MAC9BjB,YAAYkB,EAAMC,EAAU,IACxBC,MAAM,kBAAoBF,EAAO,KAAOC,GACxCxC,KAAKuC,KAAOA,GAKb,SAASG,IACZ,MAA0B,oBAAf3C,WACAA,WAES,oBAAT4C,KACAA,KAEW,oBAAX7C,OACAA,YAEW,IAAX,EAAAW,EACA,EAAAA,EAEJC,SAAS,cAATA,GAMJ,SAASkC,EAAQC,EAAGN,EAAO,YAAaC,EAAU,IACrD,QAAUM,IAAND,EACA,MAAM,IAAIR,EAAaE,EAAMC,GAEjC,OAAOK,EAIJ,SAASE,EAAIC,KAAUC,GAC1B,IAAKA,EACD,OACJ,MAAMC,EAAOC,MAAMrC,UAAUsC,MAAMpC,KAAKiC,GAAMI,KAAK,KACnDX,IAAeY,QAAQP,IAAIC,EAAQ,KAAOE,GAIvC,SAASK,KAAQN,GACpB,MAAMC,EAAOD,EAAKI,KAAK,KACjBG,EAAM,IAAIlB,MAChBI,IAAeY,QAAQP,IAAI,YAAaG,EAAMM,EAAIC,OAO/C,SAASC,EAAQC,EAAGC,GACvB,IAAIC,EAAWD,GAAKD,EAAIC,GAAK,EALjC,IAAgBf,EAAGiB,EASf,OAHID,EAAW,EAAI,IACfA,IAPQhB,EAOqB,GAAXgB,IAPPC,EAOsB,IANrBA,EAAI,EAAIC,SAAS,GAAGlB,EAAIiB,EAAK,IAAMA,EAAIA,EAAIC,SAAS,GAAGlB,EAAIiB,EAAK,IAAMA,GAM5C,IAEnCD,EAMJ,SAASG,EAAOC,GACnB,MAAO,MAAMA,IAKV,SAASC,EAAeP,GAK3B,OAJAA,GAAS,EAAIQ,KAAKC,IACV,IACJT,GAAK,EAAIQ,KAAKC,IAEXT,ECvEJ,MAAMU,EAEThD,YAAYiD,EAAWC,GACnBvE,KAAKsE,UAAY,EACjBtE,KAAKuE,YAAc,EACnBvE,KAAKwE,IAAIF,EAAWC,GAEbjD,sBACP,OAAOG,EAAS4C,SAMpBI,WAAWd,EAAGC,GACV,GAAiB,iBAAND,GAAkBe,OAAOC,MAAMhB,IAAmB,iBAANC,GAAkBc,OAAOC,MAAMf,GAClF,MAAM,IAAIvB,EAAa,cAAe,oBAAoBsB,MAAMC,KAEpE,IAAIgB,EACJ,KAAa,IAANhB,GACHgB,EAAIhB,EACJA,EAAID,EAAIC,EACRD,EAAIiB,EAER,OAAOjB,EAGXc,WAAWd,EAAGC,GACV,OAAQD,EAAIC,EAAKS,EAASQ,IAAIlB,EAAGC,GAGrCa,YAAYxB,GACR,OAAoB,IAAhBA,EAAK6B,OACE,EAEc,IAAhB7B,EAAK6B,OACH7B,EAAK,GAES,IAAhBA,EAAK6B,OACHT,EAASU,IAAI9B,EAAK,GAAIA,EAAK,IAK3BoB,EAASU,IAAI9B,EAAK+B,QAASX,EAASY,KAAKhC,IAIxDuB,IAAIF,EAAY,EAAGC,EAAc,GAG7B,OAFAvE,KAAKsE,UAAYA,EACjBtE,KAAKuE,YAAcA,EACZvE,KAGXkF,QACI,OAAOlF,KAAKsE,UAAYtE,KAAKuE,YAGjCY,WACI,IAAIC,EAAIpF,KAAKsE,UACTe,EAAIrF,KAAKuE,YACb,MAAMe,EAAMjB,EAASQ,IAAIO,EAAGC,GAO5B,OANAD,GAAKE,EACLD,GAAKC,EACDD,EAAI,IACJA,GAAKA,EACLD,GAAKA,GAEFpF,KAAKwE,IAAIY,EAAGC,GAGvBE,IAAIC,EAAS,EAAGC,EAAS,GACrB,MAAOC,EAAgBC,GAAoBC,EAA2BJ,EAAQC,GACxEI,EAAMxB,EAASU,IAAI/E,KAAKuE,YAAaoB,GACrChC,EAAIkC,EAAM7F,KAAKuE,YACfX,EAAIiC,EAAMF,EACVP,EAAIpF,KAAKsE,UAAYX,EAAI+B,EAAiB9B,EAChD,OAAO5D,KAAKwE,IAAIY,EAAGS,GAGvBC,SAASN,EAAS,EAAGC,EAAS,GAC1B,MAAOC,EAAgBC,GAAoBC,EAA2BJ,EAAQC,GACxEI,EAAMxB,EAASU,IAAI/E,KAAKuE,YAAaoB,GACrChC,EAAIkC,EAAM7F,KAAKuE,YACfX,EAAIiC,EAAMF,EACVP,EAAIpF,KAAKsE,UAAYX,EAAI+B,EAAiB9B,EAChD,OAAO5D,KAAKwE,IAAIY,EAAGS,GAGvBE,SAASP,EAAS,EAAGC,EAAS,GAC1B,MAAOC,EAAgBC,GAAoBC,EAA2BJ,EAAQC,GAC9E,OAAOzF,KAAKwE,IAAIxE,KAAKsE,UAAYoB,EAAgB1F,KAAKuE,YAAcoB,GAGxEK,OAAOR,EAAS,EAAGC,EAAS,GACxB,MAAOC,EAAgBC,GAAoBC,EAA2BJ,EAAQC,GAC9E,OAAOzF,KAAKwE,IAAIxE,KAAKsE,UAAYqB,EAAkB3F,KAAKuE,YAAcmB,GAG1EO,OAAOC,GACH,MAAMvC,EAAIU,EAAS8B,kBAAkBC,KAAKF,GAASf,WAC7CvB,EAAIS,EAASgC,kBAAkBD,KAAKpG,MAAMmF,WAChD,OAAOxB,EAAEW,YAAcV,EAAEU,WAAaX,EAAEY,cAAgBX,EAAEW,YAG9D+B,YAAYJ,GACR,MAAMvC,EAAIU,EAASgC,kBAAkBD,KAAKpG,MAE1C,OADA2D,EAAEmC,SAASI,GACJvC,EAAEW,UAAY,EAGzBiC,kBAAkBL,GACd,MAAMvC,EAAIU,EAASgC,kBAAkBD,KAAKpG,MAE1C,OADA2D,EAAEmC,SAASI,GACJvC,EAAEW,WAAa,EAG1BkC,SAASN,GACL,OAAQlG,KAAKuG,kBAAkBL,GAGnCO,eAAeP,GACX,OAAQlG,KAAKsG,YAAYJ,GAG7BQ,QACI,OAAO,IAAIrC,EAASrE,KAAKsE,UAAWtE,KAAKuE,aAG7C6B,KAAKO,GACD,MAAqB,iBAAVA,EACA3G,KAAKwE,IAAImC,EAAO,GAGhB3G,KAAKwE,IAAImC,EAAMrC,UAAWqC,EAAMpC,aAI/CqC,WACI,OAAOzC,KAAK0C,MAAM7G,KAAKsE,UAAYtE,KAAKuE,aAG5CuC,YACI,OAAO9G,KAAKsE,UAAYtE,KAAKuE,YAGjCwC,UAGI,OAFA/G,KAAKuE,YAAcJ,KAAK6C,IAAIhH,KAAKuE,aACjCvE,KAAKsE,UAAYH,KAAK6C,IAAIhH,KAAKsE,WACxBtE,KAGXiH,WACI,MAAO,GAAGjH,KAAKsE,aAAatE,KAAKuE,cAGrC2C,qBACI,OAAO7C,EAAS8C,oBAAoBf,KAAKpG,MAAMmF,WAAW8B,WAG9DG,gBACI,IAAIC,EAAI,GACR,MAAMC,EAAItH,KAAK4G,WACTW,EAAIlD,EAAS8C,oBAAoBf,KAAKpG,MAgB5C,OAfIsH,EAAI,GACJC,EAAER,UAEI,IAANO,GACAD,GAAKC,EACe,IAAhBC,EAAEjD,YACF+C,GAAK,IAAIE,EAAEL,yBAIfG,EADqB,IAAhBE,EAAEjD,UACH,IAGAiD,EAAEL,qBAEHG,EAGXG,MAAMC,GACF,MAAMC,EAAID,EAAIE,MAAM,KACd7D,EAAIC,SAAS2D,EAAE,GAAI,IACnBrC,EAAIqC,EAAE,GAAK3D,SAAS2D,EAAE,GAAI,IAAM,EACtC,OAAO1H,KAAKwE,IAAIV,EAAGuB,IAQ3B,SAASO,EAA2B9B,EAAGuB,EAAI,GACvC,MAAiB,iBAANvB,EAEA,CAACA,EAAGuB,GAIJ,CAACvB,EAAEQ,UAAWR,EAAES,aAX/BF,EAAS8B,kBAAoB,IAAI9B,EACjCA,EAASgC,kBAAoB,IAAIhC,EACjCA,EAAS8C,oBAAsB,IAAI9C,ECtM5B,MAAMuD,EACTvG,YAAYwB,EAAGgF,EAAGC,EAAGC,GACjB/H,KAAK6C,EAAIA,EACT7C,KAAK6H,EAAIA,EACT7H,KAAK8H,EAAIA,EACT9H,KAAK+H,EAAIA,EAKbtD,YAAYuD,GACR,OAAO,IAAIJ,EAAYI,EAAKnF,EAAGmF,EAAKH,EAAGG,EAAKF,EAAGE,EAAKD,GAGxDE,OACI,OAAOjI,KAAK6C,EAGhBqF,OACI,OAAOlI,KAAK6H,EAGhBM,OACI,OAAOnI,KAAK8H,EAGhBM,OACI,OAAOpI,KAAK+H,EAGhBM,KAAKxF,GAED,OADA7C,KAAK6C,EAAIA,EACF7C,KAGXsI,KAAKT,GAED,OADA7H,KAAK6H,EAAIA,EACF7H,KAGXuI,KAAKT,GAED,OADA9H,KAAK8H,EAAIA,EACF9H,KAGXwI,KAAKT,GAED,OADA/H,KAAK+H,EAAIA,EACF/H,KAGXyI,KAAK5F,EAAGgF,GAGJ,OAFA7H,KAAK6C,GAAKA,EACV7C,KAAK6H,GAAKA,EACH7H,KAGX0G,QACI,OAAOkB,EAAYxB,KAAKpG,MAM5B0I,UAAUC,GACN,MAAMX,EAAOW,EACPC,EAAQ5I,KAAK6C,EAAImF,EAAKnF,EAAI7C,KAAK6C,EAAImF,EAAKnF,EACxCgG,EAAQ7I,KAAK6H,EAAIG,EAAKH,EAAI7H,KAAK6H,EAAIG,EAAKH,EACxCiB,EAAQ3E,KAAK4E,IAAI/I,KAAK6C,EAAI7C,KAAK8H,EAAGE,EAAKnF,EAAImF,EAAKF,GAAKc,EACrDI,EAAQ7E,KAAK4E,IAAI/I,KAAK6H,EAAI7H,KAAK+H,EAAGC,EAAKH,EAAIG,EAAKD,GAAKc,EAK3D,OAJA7I,KAAK6C,EAAI+F,EACT5I,KAAK6H,EAAIgB,EACT7I,KAAK8H,EAAIgB,EACT9I,KAAK+H,EAAIiB,EACFhJ,MChER,MAAMiJ,EACT5H,cACIrB,KAAKkJ,GAAKxE,OAAOyE,IACjBnJ,KAAKoJ,GAAK1E,OAAOyE,IACjBnJ,KAAKqJ,GAAK3E,OAAOyE,IACjBnJ,KAAKsJ,GAAK5E,OAAOyE,IAGrBI,QACI,OAAOvJ,KAAKkJ,GAGhBM,QACI,OAAOxJ,KAAKoJ,GAGhBK,QACI,OAAOzJ,KAAKqJ,GAAKrJ,KAAKkJ,GAG1BQ,SACI,OAAO1J,KAAKsJ,GAAKtJ,KAAKoJ,GAG1BO,SAAS9G,EAAGgF,IACJlD,MAAM3E,KAAKkJ,KAAOrG,EAAI7C,KAAKkJ,MAC3BlJ,KAAKkJ,GAAKrG,IACV8B,MAAM3E,KAAKqJ,KAAOxG,EAAI7C,KAAKqJ,MAC3BrJ,KAAKqJ,GAAKxG,IACV8B,MAAM3E,KAAKoJ,KAAOvB,EAAI7H,KAAKoJ,MAC3BpJ,KAAKoJ,GAAKvB,IACVlD,MAAM3E,KAAKsJ,KAAOzB,EAAI7H,KAAKsJ,MAC3BtJ,KAAKsJ,GAAKzB,GAGlB+B,KAAK/G,GACD7C,KAAK2J,SAAS9G,EAAG7C,KAAKoJ,IAG1BS,KAAKhC,GACD7H,KAAK2J,SAAS3J,KAAKkJ,GAAIrB,GAG3BiC,kBAAkBC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,GACvCpK,KAAK2J,SAASI,EAAKC,GACnBhK,KAAK2J,SAASQ,EAAKC,GACnB,MAAMC,EAAOJ,EAAMF,EAEnB,IAAIO,EAAQD,GADCF,EAAMF,GAEnB,GAAa,GAATK,EAAY,CACZ,MAAM1F,EAAIyF,EAAOC,EACjB,GAAI1F,EAAI,GAAKA,EAAI,EAAG,CAChB,MAAM2F,EAAK,EAAI3F,EACf5E,KAAK4J,KAAKW,EAAKA,EAAKR,EAAM,EAAIQ,EAAK3F,EAAIqF,EAAMrF,EAAIA,EAAIuF,IAG7D,MAAMK,EAAON,EAAMF,EAGnB,GADAM,EAAQE,GADKJ,EAAMF,GAEN,GAATI,EAAY,CACZ,MAAM1F,EAAI4F,EAAOF,EACjB,GAAI1F,EAAI,GAAKA,EAAI,EAAG,CAChB,MAAM2F,EAAK,EAAI3F,EACf5E,KAAK6J,KAAKU,EAAKA,EAAKP,EAAM,EAAIO,EAAK3F,EAAIsF,EAAMtF,EAAIA,EAAIwF,KAKjEK,eAAeV,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKM,EAAKC,GAE9C,MAAMC,EAAK,CAACb,EAAKC,GACXa,EAAK,CAACZ,EAAKC,GACXY,EAAK,CAACX,EAAKC,GACXW,EAAK,CAACL,EAAKC,GACjB,IAAIjD,EACJ1H,KAAK2J,SAASiB,EAAG,GAAIA,EAAG,IACxB5K,KAAK2J,SAASoB,EAAG,GAAIA,EAAG,IACxB,MAAMxD,EAAI,CAAC3C,EAAG8C,IAAMvD,KAAK6G,IAAI,EAAIpG,EAAG,GAAKgG,EAAGlD,GACxC,EAAIvD,KAAK6G,IAAI,EAAIpG,EAAG,GAAKA,EAAIiG,EAAGnD,GAChC,GAAK,EAAI9C,GAAKT,KAAK6G,IAAIpG,EAAG,GAAKkG,EAAGpD,GAClCvD,KAAK6G,IAAIpG,EAAG,GAAKmG,EAAGrD,GACxB,IAAKA,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACrB,MAAM9D,EAAI,EAAIgH,EAAGlD,GAAK,GAAKmD,EAAGnD,GAAK,EAAIoD,EAAGpD,GACpC/D,GAAK,EAAIiH,EAAGlD,GAAK,EAAImD,EAAGnD,GAAK,EAAIoD,EAAGpD,GAAK,EAAIqD,EAAGrD,GAChDuD,EAAI,EAAIJ,EAAGnD,GAAK,EAAIkD,EAAGlD,GAC7B,GAAU,IAAN/D,EAAS,CACT,GAAU,IAANC,EACA,SACJ,MAAMgB,GAAKqG,EAAIrH,EACX,EAAIgB,GAAKA,EAAI,IACH,IAAN8C,GACA1H,KAAK4J,KAAKrC,EAAE3C,EAAG8C,IACT,IAANA,GACA1H,KAAK6J,KAAKtC,EAAE3C,EAAG8C,KAEvB,SAEJ,MAAMwD,EAAO/G,KAAK6G,IAAIpH,EAAG,GAAK,EAAIqH,EAAItH,EACtC,GAAIuH,EAAO,EACP,SACJ,MAAMC,IAAOvH,EAAIO,KAAKiH,KAAKF,KAAU,EAAIvH,GACrC,EAAIwH,GAAMA,EAAK,IACL,IAANzD,GACA1H,KAAK4J,KAAKrC,EAAE4D,EAAIzD,IACV,IAANA,GACA1H,KAAK6J,KAAKtC,EAAE4D,EAAIzD,KAExB,MAAM2D,IAAOzH,EAAIO,KAAKiH,KAAKF,KAAU,EAAIvH,GACrC,EAAI0H,GAAMA,EAAK,IACL,IAAN3D,GACA1H,KAAK4J,KAAKrC,EAAE8D,EAAI3D,IACV,IAANA,GACA1H,KAAK6J,KAAKtC,EAAE8D,EAAI3D,OC3HpC,IAUW4D,EAKAC,EAfPC,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAU9G,GAAS,IAAM+G,EAAKL,EAAUM,KAAKhH,IAAW,MAAOvE,GAAKoL,EAAOpL,IACpF,SAASwL,EAASjH,GAAS,IAAM+G,EAAKL,EAAiB,MAAE1G,IAAW,MAAOvE,GAAKoL,EAAOpL,IACvF,SAASsL,EAAKG,GAJlB,IAAelH,EAIakH,EAAOC,KAAOP,EAAQM,EAAOlH,QAJ1CA,EAIyDkH,EAAOlH,MAJhDA,aAAiByG,EAAIzG,EAAQ,IAAIyG,GAAE,SAAUG,GAAWA,EAAQ5G,OAIToH,KAAKN,EAAWG,GAClGF,GAAML,EAAYA,EAAUW,MAAMd,EAASC,GAAc,KAAKQ,YAetE,IAAIM,GAVJ,SAAWlB,GACPA,EAAmB,OAAI,SACvBA,EAAiB,KAAI,OAFzB,CAGGA,IAAeA,EAAa,KAE/B,SAAWC,GACPA,EAAkB,OAAI,SACtBA,EAAkB,OAAI,SAF1B,CAGGA,IAAcA,EAAY,KAG7B,MAAMkB,EAAQ,GACP,MAAMC,EAKTrL,YAAYsL,GACR3M,KAAK4M,KAAOD,EAQhBlI,+BAA+BoI,EAAWH,EAAKI,MAC3C,IAAIC,EACJ,GAAwB,iBAAbF,EAEP,OAAOA,EAAWH,EAAKM,cAAcC,GAEpC,CACD,MAAM/H,EAAQgI,WAAWL,GACzB,GAAIlI,MAAMO,GACN,OAAO,EAEX,MAAMiI,EAAON,EAASO,QAAQ,WAAY,IAAIC,cAE9C,OAAOnI,GADsD,QAAnC6H,EAAKL,EAAKM,cAAcG,UAA0B,IAAPJ,EAAgBA,EAAK,IAUlGtI,+BAA+BoI,EAAWH,EAAKI,MAC3C,IAAIC,EACJ,GAAwB,iBAAbF,EAEP,OAAOA,EAEN,CACD,MAAM3H,EAAQgI,WAAWL,GACzB,GAAIlI,MAAMO,GACN,OAAO,EAEX,MAAMiI,EAAON,EAASO,QAAQ,WAAY,IAAIC,cAE9C,OAAOnI,IADuD,QAAnC6H,EAAKL,EAAKM,cAAcG,UAA0B,IAAPJ,EAAgBA,EAAK,GAAKL,EAAKM,cAAcC,KAW3HxI,gBAAgB8C,EAAG+F,EAAMC,EAAQC,GAG7B,GAAiB,iBAANjG,QAA2BzE,IAATwK,QAAiCxK,IAAXyK,QAAkCzK,IAAV0K,EACvE,OAAOd,EAAKe,cAAclG,GAE9B,IAAImG,EA+BJ,MA9BiB,iBAANnG,GAEPmG,EAASnG,EAAEmG,OACXJ,EAAO/F,EAAE+F,KACTC,EAAShG,EAAEgG,OACXC,EAAQjG,EAAEiG,OAIVE,EAASnG,EAEbmG,EAASA,MAAAA,EAAuCA,EAAShB,EAAKiB,WAC9DL,EAAOA,MAAAA,EAAmCA,EAAOZ,EAAKI,KAAO,KAC7DS,EAASA,MAAAA,EAAuCA,EAASjC,EAAWsC,OACpEJ,EAAQA,MAAAA,EAAqCA,EAAQjC,EAAUqC,OAChD,KAAXL,IACAA,EAASjC,EAAWsC,QAEV,KAAVJ,IACAA,EAAQjC,EAAUqC,QAGF,iBAATN,IACPA,EAAO,GAAGA,OAGQ,iBAAXC,IACPA,EAASA,EAAOtG,YAGb,CAAEyG,OAAAA,EAAQJ,KAAAA,EAAMC,OAAAA,EAAQC,MAAAA,GAKnC/I,qBAAqBoJ,GAIZrB,IACDA,EAAasB,SAASC,cAAc,SAExCvB,EAAWgB,MAAMQ,KAAOH,EACxB,MAAM,WAAEI,EAAU,SAAEpB,EAAQ,WAAEqB,EAAU,UAAEC,GAAc3B,EAAWgB,MACnE,MAAO,CAAEE,OAAQO,EAAYX,KAAMT,EAAUU,OAAQW,EAAYV,MAAOW,GAK5E1J,mBAAmB2J,GACf,IAAIrB,EACJ,IAAKqB,EACD,MAAO,GAEX,IAAIZ,EACJ,MAAMa,EAAKD,EAASZ,MAOpB,IAAID,EALAC,EADAa,IAAO9C,EAAUqC,QAAiB,KAAPS,QAAoBvL,IAAPuL,EAChC,GAGAA,EAAGC,OAAS,IAGxB,MAAMC,EAAKH,EAASb,OAUpB,IAAID,EARAC,EADAgB,IAAOjD,EAAWsC,QAAiB,KAAPW,QAAoBzL,IAAPyL,EAChC,GAEU,iBAAPA,EACHA,EAAK,IAGLA,EAAGD,OAAS,IAGzB,MAAME,EAAKJ,EAASd,KAEhBA,OADOxK,IAAP0L,EACO9B,EAAKI,KAAO,MAEA,iBAAP0B,EACLA,EAAK,MAILA,EAAGF,OAAS,IAGvB,MAAO,GAAGd,IAAQD,IAASD,IADe,QAA1BP,EAAKqB,EAASV,cAA2B,IAAPX,EAAgBA,EAAKL,EAAKiB,aAUhFlJ,iBAAiBoI,EAAU4B,GACvB,GAAwB,iBAAb5B,EACP,OAAQA,EAAW4B,EAKnB,MAAO,GAFOvB,WAAWL,GAEP4B,IADL5B,EAASO,QAAQ,WAAY,MAQlD3I,cAAc8I,GACV,GAAKA,EAGA,IAAsB,iBAAXA,EACZ,OAAOA,GAAU,IAEhB,CAED,MAAMmB,EAAe3K,SAASwJ,EAAQ,IACtC,OAAI5I,MAAM+J,GAC0B,SAAzBnB,EAAOF,cAGPqB,GAAgB,KAZ3B,OAAO,EAoBfjK,gBAAgB+I,GACZ,QAAKA,GAIMA,EAAMH,gBAAkB9B,EAAUoD,OAYjDlK,mBAAmBkI,EAAUiC,EAASC,GAAe,GACjD,OAAOrD,EAAUxL,UAAM,OAAQ,GAAQ,YACnC,MAKM8O,EAAW,IAAIC,SAASpC,GALbkC,EAAe,OAAOD,wBAAgC,IACtD,OAAOA,qBASxB,aAJME,EAASE,OAGflB,SAASmB,MAAM1J,IAAIuJ,GACZA,KAcfrK,sBACI,OAAO+G,EAAUxL,UAAM,OAAQ,GAAQ,YACnC,MAAMkP,EAAOxC,EAAKyC,cACZC,EAAQ1C,EAAK2C,eACnB,IAAK,MAAM1C,KAAYyC,EAAO,CAC1B,MAAME,EAAWF,EAAMzC,GACvBD,EAAK6C,YAAY5C,EAAUuC,EAAOI,OAI9C7K,wBAYAA,YAAYkI,EAAU6C,EAAMC,GACxB,IAAIzB,EAAOvB,EAAME,GAWjB,OAVKqB,IACDA,EAAO,IAAItB,EAAKC,GAChBF,EAAME,GAAYqB,GAElBwB,GACAxB,EAAK0B,QAAQF,GAEbC,GACAzB,EAAK2B,WAAWF,GAEbzB,EAEX4B,UACI,OAAO5P,KAAK4M,KAEhBiD,UACI,OAAOjN,EAAQ5C,KAAKwP,KAAM,YAAa,qBAE3CM,aACI,OAAOlN,EAAQ5C,KAAKyP,QAAS,YAAa,mBAE9CC,QAAQF,GACJxP,KAAKwP,KAAOA,EAEhBG,WAAWF,GACPzP,KAAKyP,QAAUA,EAEnBM,UACI,YAAqBjN,IAAd9C,KAAKwP,KAEhBQ,gBACI,OAAOhQ,KAAK6P,UAAUI,WAE1BC,YACI,OAAOlQ,KAAK6P,UAAUM,OAS1BC,aAAajQ,EAAKkQ,GACd,MAAMC,EAAWnQ,EAAIwH,MAAM,KAE3B,IAAI4I,EAAUvQ,KAAK8P,aACnB,IAAK,IAAIpI,EAAI,EAAGA,EAAI4I,EAASxL,OAAQ4C,IAAK,CACtC,MACMxC,EAAQqL,EADED,EAAS5I,IAEzB,QAAc5E,IAAVoC,EAEA,OAAOmL,EAGXE,EAAUrL,EAGd,OAAOqL,EAGXtJ,WACI,MAAO,IAAMjH,KAAK4M,KAAO,UAMjCF,EAAKiB,WAAa,oBAElBjB,EAAK8D,MAAQ,yBAEb9D,EAAKI,KAAO,GAGZJ,EAAKM,cAAgB,CACjBC,GAAI,EAAI,EACRwD,GAAI,EACJC,GAAI,GACJ,IAAK,IACLC,GAAI,GACJC,GAAI,GAAK,KACTC,GAAI,GAAK,MAObnE,EAAKyC,cAAgB,yCAMrBzC,EAAK2C,eAAiB,CAClB,cAAe,0CACfyB,eAAgB,wCC1WpB,MAAMC,EACF1P,cACIrB,KAAKgR,GAAK,GACVhR,KAAKiR,KAAO,GACZjR,KAAKkR,MAAQ,IAGd,MAAMC,EACT9P,cACIrB,KAAKoR,MAAQ,IAAIL,EAErBtM,4BACI,OAAO0M,EAASE,gBAIpB5M,6BAA6B6M,GACzBH,EAASE,gBAAkBC,EAE/B7M,gCACI0M,EAASE,qBAAkBvO,EAE/ByO,QAEI,OADAvR,KAAKoR,MAAQ,IAAIL,EACV/Q,KAEXwR,cAAc5E,EAAM1H,EAAO8L,EAAIS,GAC3B,MAAML,EAAQpR,KAAKoR,MACdA,EAAMxE,GAAM1H,KACbkM,EAAMxE,GAAM1H,GAAS,IAEzBkM,EAAMxE,GAAM1H,GAAO8L,GAAMS,EAI7BC,aAAY,GAAEV,EAAE,KAAEpE,EAAI,MAAE1H,EAAK,SAAEyM,IAC3B,MAAMF,EAAOzR,KAAK4R,eAAeZ,QAChBlO,IAAb6O,GAA0B3R,KAAKoR,MAAMxE,GAAM+E,WACpC3R,KAAKoR,MAAMxE,GAAM+E,GAAUX,GAElC9L,GAASuM,GACTzR,KAAKwR,cAAc5E,EAAM1H,EAAOuM,EAAKI,aAAa,MAAOJ,GAUjEK,SAASL,EAAMT,GAEX,KADAA,EAAKA,GAAMS,EAAKI,aAAa,OAEzB,MAAM,IAAIxP,EAAa,wDAO3B,OAJAoP,EAAKM,aAAa,KAAMf,GACxBhR,KAAKwR,cAAc,KAAMR,EAAIA,EAAIS,GACjCzR,KAAK0R,YAAY,CAAEV,GAAAA,EAAIpE,KAAM,OAAQ1H,MAAOuM,EAAKI,aAAa,QAASF,cAAU7O,IACjF2O,EAAKO,WAAWhS,MACTA,KAEX4R,eAAeZ,GACX,IAAIjE,EAAIkF,EACR,OAAmF,QAA3EA,EAA8B,QAAxBlF,EAAK/M,KAAKoR,MAAMJ,UAAuB,IAAPjE,OAAgB,EAASA,EAAGiE,UAAwB,IAAPiB,OAAgB,EAASA,EAAGjB,GAE3HkB,uBAAuBC,EAAWjN,GAC9B,MAAMkN,EAAapS,KAAKoR,MAAMe,GAC9B,GAAIC,EAAY,CACZ,MAAMC,EAAiBD,EAAWlN,GAClC,GAAImN,EAAgB,CAEhB,OADahS,OAAOiS,KAAKD,GACbE,KAAKC,GAAMH,EAAeG,MAG9C,MAAO,GAEXC,kBAAkBxB,GACd,OAAOjR,KAAKkS,uBAAuB,OAAQjB,GAE/CyB,mBAAmBC,GACf,OAAO3S,KAAKkS,uBAAuB,QAASS,GAIhDC,SAASC,GAKL,MAJqB,CAAC,KAAM,OAAQ,SACnBC,SAASD,EAAKjG,OAC3B5M,KAAK0R,YAAYmB,GAEd7S,MCtGR,MAAM+S,EACT1R,cACI,IAAI0L,EACJ/M,KAAKgT,MAAQ,CACThC,GAAI+B,EAAQE,QACZC,QAAIpQ,EACJmO,KAAMjR,KAAKmT,cACXC,QAAS,IAEbpT,KAAKqT,UAAW,EAEyB,QAAxCtG,EAAKoE,EAASmC,4BAAyC,IAAPvG,GAAyBA,EAAG+E,SAAS9R,MAE/EsB,sBACP,OAAOG,EAASsR,QAEpBtO,eACI,MAAO,OAAOsO,EAAQQ,KAG1BJ,cACI,OAAOnT,KAAKqB,YAAYC,SAwB5BkS,SAAShG,GAEL,OADAxN,KAAKwN,MAAQA,EACNxN,KAGXyT,WACI,OAAOzT,KAAKwN,MAGhBkG,WAAWC,EAAU3T,KAAK2T,QAASnG,EAAQxN,KAAKyT,YAC5C,OAAKjG,GAEAmG,GAELA,EAAQC,OACJpG,EAAMqG,aACNF,EAAQG,eAAetG,EAAMqG,aAC7BrG,EAAMuG,YACNJ,EAAQK,cAAcxG,EAAMuG,YAC5BvG,EAAMyG,WACNN,EAAQO,aAAa1G,EAAMyG,WAC3BzG,EAAM2G,aACNR,EAAQS,eAAe5G,EAAM2G,aAC7B3G,EAAM6G,WACNV,EAAQW,aAAa9G,EAAM6G,WACxBrU,MAdIA,KAiBfuU,aAAaZ,EAAU3T,KAAK2T,QAASnG,EAAQxN,KAAKyT,YAC9C,OAAKjG,GAEAmG,GAELA,EAAQa,UACDxU,MAJIA,KAUfyU,gBACIzU,KAAK0U,eACL1U,KAAK0T,aACL1T,KAAK2U,OACL3U,KAAKuU,eAGTK,SAASjC,GACL,OAAyC,IAAlC3S,KAAKgT,MAAMI,QAAQT,GAG9BkC,SAASlC,GACL,IAAI5F,EAQJ,OAPA/M,KAAKgT,MAAMI,QAAQT,IAAa,EACP,QAAxB5F,EAAK/M,KAAKsR,gBAA6B,IAAPvE,GAAyBA,EAAG6F,SAAS,CAClE5B,GAAIhR,KAAKgT,MAAMhC,GACfpE,KAAM,QACN1H,MAAOyN,EACPhB,cAAU7O,IAEP9C,KAGX8U,YAAYnC,GACR,IAAI5F,EAQJ,cAPO/M,KAAKgT,MAAMI,QAAQT,GACD,QAAxB5F,EAAK/M,KAAKsR,gBAA6B,IAAPvE,GAAyBA,EAAG6F,SAAS,CAClE5B,GAAIhR,KAAKgT,MAAMhC,GACfpE,KAAM,QACN1H,WAAOpC,EACP6O,SAAUgB,IAEP3S,KAGXgS,WAAWV,GAEP,OADAtR,KAAKsR,SAAWA,EACTtR,KAGX+U,aACI,OAAO/U,KAAKqT,SAGhB2B,YAAY3B,GAAW,GAEnB,OADArT,KAAKqT,SAAWA,EACTrT,KAGXiV,gBACI,OAAOjV,KAAKgT,MAIhBnB,aAAajF,GACT,OAAO5M,KAAKgT,MAAMpG,GAItBmF,aAAanF,EAAM1H,GACf,IAAI6H,EACJ,MAAMmI,EAAQlV,KAAKgT,MAAMhC,GACnBW,EAAW3R,KAAKgT,MAAMpG,GAI5B,OAHA5M,KAAKgT,MAAMpG,GAAQ1H,EAEM,QAAxB6H,EAAK/M,KAAKsR,gBAA6B,IAAPvE,GAAyBA,EAAG6F,SAAS,CAAE5B,GAAIkE,EAAOtI,KAAAA,EAAM1H,MAAAA,EAAOyM,SAAAA,IACzF3R,KAGXmV,iBACI,OAAOnV,KAAK2I,YAGhByM,aACI,OAAOpV,KAAK2T,QAGhB0B,WAAW1B,GAEP,OADA3T,KAAK2T,QAAUA,EACR3T,KAGX0U,eACI,OAAO9R,EAAQ5C,KAAK2T,QAAS,YAAa,8CAO1C3F,SAAKzG,GACLvH,KAAKsV,QAAQ/N,GAGbyG,WACA,OAAOtB,EAAK6I,YAAYvV,KAAKwV,UAajCF,QAAQtH,EAAMV,EAAMC,EAAQC,GAExB,MAAMiI,EAAkBzV,KAAKqB,YAAYqU,UACnCC,EAA+B,iBAAT3H,EACtB4H,EAA+B,iBAAT5H,EACtB6H,OAA2B/S,IAATkL,EAClB8H,OAAuChT,IAATwK,QAAiCxK,IAAXyK,QAAkCzK,IAAV0K,EAuBlF,OApBIxN,KAAKwV,SAFLG,EAEgBtV,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAIN,GAAkBzH,GAE7D4H,GAAgBE,EAELpJ,EAAKe,cAAcO,GAE9B6H,GAAmBC,EAKRzV,OAAO0V,OAAO,GAAIN,GAOlB/I,EAAKsJ,SAAShI,MAAAA,EAAmCA,EAAOyH,EAAgB/H,OAAQJ,MAAAA,EAAmCA,EAAOmI,EAAgBnI,KAAMC,MAAAA,EAAuCA,EAASkI,EAAgBlI,OAAQC,MAAAA,EAAqCA,EAAQiI,EAAgBjI,OAElSxN,KAEXiW,UAII,OAHKjW,KAAKwV,UACNxV,KAAKkW,YAEFxJ,EAAK6I,YAAYvV,KAAKwV,UAMjCU,YACIlW,KAAKsV,UAGLlH,eAMA,OALKpO,KAAKwV,UACNxV,KAAKkW,YAIF7V,OAAO0V,OAAO,GAAI/V,KAAKwV,UAE9BpH,aAASA,GACTpO,KAAKsV,QAAQlH,GAGjB+H,YAAY7I,GACR,MAAMc,EAAWpO,KAAKoO,SAEtB,OADApO,KAAKsV,QAAQlH,EAASV,OAAQJ,EAAMc,EAASb,OAAQa,EAASZ,OACvDxN,KAMXoW,cACI,OAAOpW,KAAK6M,SAMZA,aAASS,GACTtN,KAAKmW,YAAY7I,GAKjBT,eACA,IAAIS,EAAOtN,KAAKoO,SAASd,KAIzB,MAHoB,iBAATA,IACPA,EAAO,GAAGA,OAEPA,EAKP+I,uBACA,OAAO3J,EAAK4J,wBAAwBtW,KAAK6M,UAKzC0J,uBACA,OAAO7J,EAAK8J,wBAAwBxW,KAAK6M,UAKzCsB,gBACA,OAAOnO,KAAKoO,SAASZ,MAErBW,cAAUX,GACV,MAAMY,EAAWpO,KAAKoO,SACtBpO,KAAKsV,QAAQlH,EAASV,OAAQU,EAASd,KAAMc,EAASb,OAAQC,GAM9DU,iBACA,OAAOlO,KAAKoO,SAASb,OAAS,GAE9BW,eAAWX,GACX,MAAMa,EAAWpO,KAAKoO,SACtBpO,KAAKsV,QAAQlH,EAASV,OAAQU,EAASd,KAAMC,EAAQa,EAASZ,QC1T/D,IAAIiJ,ECFAC,EF+TX3D,EAAQQ,GAAK,IAKbR,EAAQ2C,UAAY,CAChBhI,OAAQhB,EAAKiB,WACbL,KAAMZ,EAAKI,KACXS,OAAQjC,EAAWsC,OACnBJ,MAAOjC,EAAUqC,QCrUrB,SAAW6I,GACPA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAuB,UAAI,GAAK,YAC5CA,EAAYA,EAAoB,OAAI,GAAK,SAJ7C,CAKGA,IAAgBA,EAAc,KACjC,MAAME,EACFtV,YAAYuV,EAAWrU,EAAMrB,GACzBlB,KAAK6W,OAAS,EACd7W,KAAKyP,QAAUqH,EAAMC,YAAYH,EAAWrU,EAAMrB,GAClDlB,KAAKgX,KAAOF,EAAMG,sBAAsBjX,KAAKyP,QAAQyH,QAASlX,KAAKyP,QAAQ0H,MAAOnX,KAAKyP,QAAQ2H,QAASpX,KAAKyP,QAAQ4H,SACjHnW,IACAlB,KAAK6W,MAAQC,EAAMQ,iBAAiBtX,KAAKyP,QAAQzB,KAAM9M,EAAUqB,EAAM,SAAU,KAuB7F,MAAMgV,EACFlW,YAAY6V,EAASM,EAASC,EAASN,GACnCnX,KAAKkX,QAAUA,EACflX,KAAKwX,QAAUA,EACfxX,KAAKyX,QAAUA,EACfzX,KAAKmX,MAAQA,EACbnX,KAAK0H,EAAI,EAGb2E,OACI,OAAOrM,KAAK0H,GAAK1H,KAAKkX,QAAQpS,OAElCoH,OACI,OAAOlM,KAAKkX,QAAQlX,KAAK0H,KAE7BgQ,QACI,OAAO1X,KAAKwX,QAAUxX,KAAKkX,QAAQlX,KAAK0H,KAAO1H,KAAKmX,MAExDQ,QACI,OAAO3X,KAAKyX,QAAUzX,KAAKkX,QAAQlX,KAAK0H,KAAO1H,KAAKmX,MAExD1S,aAAagD,GACT,MAAM2E,EAAS,GACTwL,EAAQnQ,EAAIE,MAAM,KACxB,IAAID,EAAI,EACR,KAAOA,EAAIkQ,EAAM9S,QACb,OAAQ8S,EAAMlQ,MACV,IAAK,IACD0E,EAAOyL,KAAKpB,EAAYqB,KAAM/T,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,OACnE,MACJ,IAAK,IACD0E,EAAOyL,KAAKpB,EAAYsB,KAAMhU,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,OACnE,MACJ,IAAK,IACD0E,EAAOyL,KAAKpB,EAAYuB,UAAWjU,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,OACpH,MACJ,IAAK,IACD0E,EAAOyL,KAAKpB,EAAYwB,OAAQlU,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,MAAO3D,SAAS6T,EAAMlQ,OAIzK,OAAO0E,GAGR,MAAM0K,UAAc/D,EAMvB1R,YAAYkB,EAAMsU,EAAOqB,GACrBzV,QAGAzC,KAAKgX,KAAO,IAAIpP,EAAY,EAAG,EAAG,EAAG,GACrC5H,KAAKmY,UAAY,GACjBnY,KAAKoY,UAAY,GACjBpY,KAAKkY,QAAU,GACflY,KAAKmX,MAAQ,EACbnX,KAAKuC,KAAOA,EACZvC,KAAK6W,MAAQA,EACb7W,KAAKqY,YAAc,CAAExV,EAAG,EAAGgF,EAAG,GAC9B7H,KAAKoX,QAAU,EACfpX,KAAKqX,QAAU,EACXa,EACAlY,KAAKsY,WAAWJ,GAGhBlY,KAAKuY,QAKFjX,sBACP,OAAOG,EAASqV,MAYpBrS,wBAAwBuJ,EAAM9M,EAAUqB,EAAMpC,EAAKkQ,GAC/C,IAAInL,EAAQ8I,EAAKoC,aAAa,UAAUlP,KAAYqB,KAAQpC,SAAO2C,GAKnE,YAJcA,IAAVoC,IAEAA,EAAQ8I,EAAKoC,aAAa,UAAUlP,KAAYf,IAAOkQ,IAEpDnL,EAEXT,mBAAmBmS,EAAWrU,GAE1B,IAAIiW,EACAxK,EAFJpL,EAAQgU,EAAW,eAAgB,+BAGnC,IAAK,IAAIlP,EAAI,EAAGA,EAAIkP,EAAU9R,OAAQ4C,IAGlC,GAFAsG,EAAO4I,EAAUlP,GACjB8Q,EAAQxK,EAAKkC,YAAY3N,GACrBiW,EACA,MAAO,CAAEA,MAAAA,EAAOxK,KAAAA,GAExB,MAAM,IAAI3L,EAAa,WAAY,SAASE,6BAEhDkC,mBAAmBmS,EAAWrU,EAAMrB,GAChC,MAAM,MAAEsX,EAAK,KAAExK,GAAS8I,EAAM2B,YAAY7B,EAAWrU,GACrD,IAAKiW,EAAMpY,EACP,MAAM,IAAIiC,EAAa,WAAY,SAASE,6BAChD,IAAI6U,EAAU,EACVC,EAAU,EACVF,EAAQ,EACRjW,GAAY8M,IACZoJ,EAAUN,EAAMQ,iBAAiBtJ,EAAM9M,EAAUqB,EAAM,SAAU,GACjE8U,EAAUP,EAAMQ,iBAAiBtJ,EAAM9M,EAAUqB,EAAM,SAAU,GACjE4U,EAAQL,EAAMQ,iBAAiBtJ,EAAM9M,EAAUqB,EAAM,QAAS,IAElE,MAAMmW,EAAQF,EAAME,MACdC,EAAQH,EAAMG,MACdC,EAAKJ,EAAMI,GAIjB,OAHKJ,EAAMK,iBACPL,EAAMK,eAAiBtB,EAAa/P,MAAMgR,EAAMpY,IAE7C,CACHsY,MAAAA,EACAC,MAAAA,EACAvB,QAAAA,EACAC,QAAAA,EACAF,MAAAA,EACAyB,GAAAA,EACA1B,QAASsB,EAAMK,eACf7K,KAAAA,EACAvE,MAAOkP,EAAQD,EACfhP,OAAQkP,GAchBnU,mBAAmBqU,EAAKC,EAAOC,EAAOnC,EAAOtU,EAAM2V,GAC/C,IAAInL,EACJ,MAAMyC,EAAOsH,EAAMmC,MAAMC,OAAO3W,EAAM2V,MAAAA,OAAyC,EAASA,EAAQhX,UAC1FuO,EAAUD,EAAKC,SACF,GAAfD,EAAKqH,QACLA,EAAQrH,EAAKqH,OAEjB,MAAMsC,EAAyF,QAA1EpM,EAAKmL,MAAAA,OAAyC,EAASA,EAAQf,aAA0B,IAAPpK,EAAgBA,EAAK,EACtHoK,EAAkB,GAARN,GAAgD,IAA/BpH,EAAQzB,KAAKgC,iBAA4BP,EAAQ0H,MAAQgC,EAE1F,OADArC,EAAMsC,cAAcN,EAAKrJ,EAAQyH,QAASC,EAAO4B,EAAQtJ,EAAQ2H,QAAU+B,EAAaH,EAAQvJ,EAAQ4H,QAAU8B,GAC3G1J,EAEXhL,qBAAqBqU,EAAK5B,EAASC,EAAO4B,EAAOC,GAC7C,MAAMK,EAAK,IAAI9B,EAAaL,EAAS6B,EAAOC,EAAO7B,GAEnD,IAAItU,EAAGgF,EACP,IAFAiR,EAAIQ,aAEID,EAAGhN,QACP,OAAQgN,EAAGnN,QACP,KAAKuK,EAAYqB,KACbgB,EAAIS,OAAOF,EAAG3B,QAAS2B,EAAG1B,SAC1B,MACJ,KAAKlB,EAAYsB,KACbe,EAAIU,OAAOH,EAAG3B,QAAS2B,EAAG1B,SAC1B,MACJ,KAAKlB,EAAYuB,UACbnV,EAAIwW,EAAG3B,QACP7P,EAAIwR,EAAG1B,QACPmB,EAAIW,iBAAiBJ,EAAG3B,QAAS2B,EAAG1B,QAAS9U,EAAGgF,GAChD,MACJ,KAAK4O,EAAYwB,OACbpV,EAAIwW,EAAG3B,QACP7P,EAAIwR,EAAG1B,QACPmB,EAAIY,cAAcL,EAAG3B,QAAS2B,EAAG1B,QAAS0B,EAAG3B,QAAS2B,EAAG1B,QAAS9U,EAAGgF,GAIjFiR,EAAIa,OAERlV,6BAA6ByS,EAASC,EAAO4B,EAAOC,GAChD,MAAMK,EAAK,IAAI9B,EAAaL,EAAS6B,EAAOC,EAAO7B,GAC7CyC,EAAW,IAAI3Q,EAErB,IAEIpG,EAAGgF,EAFHgS,EAAOd,EACPe,EAAOd,EAEX,MAAQK,EAAGhN,QACP,OAAQgN,EAAGnN,QACP,KAAKuK,EAAYqB,KAEb+B,EAAOR,EAAG3B,QACVoC,EAAOT,EAAG1B,QACV,MACJ,KAAKlB,EAAYsB,KACb6B,EAASjQ,SAASkQ,EAAMC,GACxBD,EAAOR,EAAG3B,QACVoC,EAAOT,EAAG1B,QACViC,EAASjQ,SAASkQ,EAAMC,GACxB,MACJ,KAAKrD,EAAYuB,UACbnV,EAAIwW,EAAG3B,QACP7P,EAAIwR,EAAG1B,QACPiC,EAAS9P,kBAAkB+P,EAAMC,EAAMT,EAAG3B,QAAS2B,EAAG1B,QAAS9U,EAAGgF,GAClEgS,EAAOhX,EACPiX,EAAOjS,EACP,MACJ,KAAK4O,EAAYwB,OACbpV,EAAIwW,EAAG3B,QACP7P,EAAIwR,EAAG1B,QACPiC,EAASnP,eAAeoP,EAAMC,EAAMT,EAAG3B,QAAS2B,EAAG1B,QAAS0B,EAAG3B,QAAS2B,EAAG1B,QAAS9U,EAAGgF,GACvFgS,EAAOhX,EACPiX,EAAOjS,EAInB,OAAO,IAAID,EAAYgS,EAASrQ,QAASqQ,EAASpQ,QAASoQ,EAASnQ,QAASmQ,EAASlQ,UAE1FjF,gBAAgBlC,EAAMsU,EAAO3V,GACzB,MAAMsO,EAAOsH,EAAMmC,MAAMC,OAAO3W,EAAMrB,IACnB,GAAfsO,EAAKqH,QACLA,EAAQrH,EAAKqH,OAEjB,MAAMM,EAAiB,GAARN,GAAmD,IAApCrH,EAAKC,QAAQzB,KAAKgC,iBAChD,OAAOR,EAAKwH,KAAK7O,OAASgP,EAG9BxC,QAAQ1R,IAGR8W,UACI,OAAO/Z,KAAKuC,KAGhB+V,WAAWJ,GACPlY,KAAKkY,QAAU7X,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkY,SAAUA,GAC9DlY,KAAKuY,QAETyB,SAASnD,GAEL,OADA7W,KAAK6W,MAAQA,EACN7W,KAEXia,SAASC,GAEL,OADAla,KAAKka,MAAQA,EACNla,KAEXma,UAAU/C,GAEN,OADApX,KAAKoX,QAAUA,EACRpX,KAEXoa,UAAU/C,GAEN,OADArX,KAAKqX,QAAUA,EACRrX,KAEXuY,QACI,MAAM/I,EAAOsH,EAAMmC,MAAMC,OAAOlZ,KAAKuC,KAAMvC,KAAKkY,QAAQhX,UACxDlB,KAAKyP,QAAUD,EAAKC,SAED,GAAfD,EAAKqH,QACL7W,KAAK6W,MAAQrH,EAAKqH,OAEtB7W,KAAKmX,MAAsB,GAAbnX,KAAK6W,OAAmD,IAApC7W,KAAKyP,QAAQzB,KAAKgC,iBACpDhQ,KAAKgX,KAAO,IAAIpP,EAAY4H,EAAKwH,KAAK/O,OAASjI,KAAKmX,MAAO3H,EAAKwH,KAAK9O,OAASlI,KAAKmX,MAAO3H,EAAKwH,KAAK7O,OAASnI,KAAKmX,MAAO3H,EAAKwH,KAAK5O,OAASpI,KAAKmX,OAErJkD,eACI,OAAOzX,EAAQ5C,KAAKyP,QAAS,WAAY,SAASzP,KAAKuC,4BAE3DuN,aACI,MAAML,EAAUzP,KAAKqa,eACfC,EAAe7K,EAAQ0H,MAC7B,MAAO,CACHuB,MAAOjJ,EAAQiJ,MAAQ1Y,KAAKmX,MAAQmD,EACpC3B,MAAOlJ,EAAQkJ,MAAQ3Y,KAAKmX,MAAQmD,EACpC7Q,MAAOzJ,KAAKgX,KAAK7O,OACjBuB,OAAQ1J,KAAKgX,KAAK5O,OAClB+O,MAAOnX,KAAKmX,MAAQmD,EACpBlD,QAAS3H,EAAQ2H,QACjBC,QAAS5H,EAAQ4H,QACjBH,QAASzH,EAAQyH,QACjBlJ,KAAMyB,EAAQzB,KACd4K,GAAInJ,EAAQmJ,IAGpB2B,WAAW1X,GACP,MAAM,KAAEmU,GAAShX,KAEXwa,GAAU3X,EADAsB,KAAK6C,IAAIgQ,EAAK/O,OAAS+O,EAAK7O,SACb6O,EAAK7O,OACpCnI,KAAKqY,YAAYxV,GAAK2X,EAE1BC,WAAW5S,GACP,MAAM,KAAEmP,GAAShX,KAEX0a,GAAU7S,EADA1D,KAAK6C,IAAIgQ,EAAK9O,OAAS8O,EAAK5O,SACb4O,EAAK5O,OACpCpI,KAAKqY,YAAYxQ,GAAK6S,EAE1BC,UAAU9X,EAAGgF,GACT7H,KAAKua,WAAW1X,GAChB7C,KAAKya,WAAW5S,GAEpB+S,OAAO9B,EAAKjW,EAAGgF,GACX,MAAM4H,EAAUzP,KAAKqa,eACfnD,EAAUzH,EAAQyH,QAClBC,EAAQnX,KAAKmX,MAAQ1H,EAAQ0H,MACnCnX,KAAKgV,cACLhV,KAAK0T,WAAWoF,GAChB,MAAM+B,EAAOhY,EAAI7C,KAAKqY,YAAYxV,EAAI4M,EAAQ2H,QACxC0D,EAAOjT,EAAI7H,KAAKqY,YAAYxQ,EAAI4H,EAAQ4H,QAC9CP,EAAMsC,cAAcN,EAAK5B,EAASC,EAAO0D,EAAMC,GAC/C9a,KAAKuU,aAAauE,GAEtBiC,aACI,OAAOnY,EAAQ5C,KAAKka,MAAO,UAAW,kCAE1Cc,cAAcnY,GACV,MAAM8Q,EAAU3T,KAAK0U,eACfjF,EAAUzP,KAAKqa,eACfH,EAAQla,KAAK+a,aACb7D,EAAUzH,EAAQyH,QAClBC,EAAQnX,KAAKmX,MAAQ1H,EAAQ0H,MACnCnX,KAAKgV,cACLhV,KAAK0T,aACL,MAAMmH,EAAOhY,EAAI7C,KAAKoX,QAAU3H,EAAQ2H,QAClC0D,EAAOZ,EAAMe,gBAAkBjb,KAAKqX,QAAU5H,EAAQ4H,QAC5DP,EAAMsC,cAAczF,EAASuD,EAASC,EAAO0D,EAAMC,GACnD9a,KAAKuU,gBAGbuC,EAAMmC,MAAQ,IAhWd,MACI5X,cACIrB,KAAKiZ,MAAQ,IAAIiC,IAErBhC,OAAO3W,EAAMrB,GACT,IAAIia,EAAUnb,KAAKiZ,MAAMzY,IAAIsW,EAAMsE,wBACnBtY,IAAZqY,IACAA,EAAU,GACVnb,KAAKiZ,MAAMzU,IAAIsS,EAAMsE,kBAAmBD,IAE5C,MAAMhb,EAAMe,EAAW,GAAGqB,KAAQrB,IAAaqB,EAC/C,IAAI8Y,EAAQF,EAAQhb,GAKpB,YAJc2C,IAAVuY,IACAA,EAAQ,IAAI1E,EAAgBG,EAAMwE,iBAAkB/Y,EAAMrB,GAC1Dia,EAAQhb,GAAOkb,GAEZA,IAoVfvE,EAAMsE,kBAAoB,GAG1BtE,EAAMwE,iBAAmB,GCzXzB,SAAW5E,GACPA,EAAiBA,EAAyB,OAAI,GAAK,SACnDA,EAAiBA,EAAuB,KAAI,GAAK,OACjDA,EAAiBA,EAAwB,MAAI,GAAK,QAClDA,EAAiBA,EAAwB,MAAI,GAAK,QAClDA,EAAiBA,EAAwB,MAAI,GAAK,QALtD,CAMGA,IAAqBA,EAAmB,KAepC,MAAM6E,UAAiBxI,EAC1B1R,cACIoB,QACAzC,KAAKyJ,MAAQ,EAEbzJ,KAAKwb,UAAY,EACjBxb,KAAKyb,SAAWF,EAASG,SAASC,KAClC3b,KAAKoX,QAAU,EACfpX,KAAKqX,QAAU,EACfrX,KAAK4b,wBAA0B,EAMxBta,sBACP,OAAOG,EAAS8Z,SAGTG,sBACP,OAAOhF,EAEAmF,4BACP,MAAO,CACHC,OAAQpF,EAAiBqF,OACzBC,MAAOtF,EAAiBuF,MACxBC,MAAOxF,EAAiByF,MACxBC,KAAM1F,EAAiBiF,KACvBU,MAAO3F,EAAiB4F,OAIhC/D,SAIAgE,WACI,OAAOvc,KAAKyJ,MAGhB+S,SAAS/S,GAEL,OADAzJ,KAAKyJ,MAAQA,EACNzJ,KAGXyc,UACI,OAAO7Z,EAAQ5C,KAAK0c,KAAM,SAAU,yBAMxCC,oBACI,MAAMzb,EAAWlB,KAAKmT,cAEtB,OADAvQ,EAAQ5C,KAAKoR,MAAO,UAAW,cAAclQ,uBACtC0B,EAAQ5C,KAAK0c,KAAM,SAAU,cAAcxb,qBAMtD0b,QAAQF,GAEJ,OADA1c,KAAK0c,KAAOA,EACL1c,KAGX6c,WACI,OAAO7c,KAAKoR,MAGhB0L,aACI,OAAOla,EAAQ5C,KAAKoR,MAAO,UAAW,kCAG1C2L,SAAS3L,GAEL,OADApR,KAAKoR,MAAQA,EACNpR,KAGXgd,qBACI,OAAOhd,KAAKid,gBAGhBC,uBACI,OAAOta,EAAQ5C,KAAKid,gBAAiB,oBAAqB,6BAG9DE,mBAAmBlS,GAEf,OADAjL,KAAKid,gBAAkBhS,EAChBjL,KAGXod,cACI,OAAOpd,KAAKyb,SAMhB4B,YAAY5B,GAGR,OAFAzb,KAAKyb,SAA+B,iBAAbA,EAAwBF,EAASM,eAAeJ,GAAYA,EACnFzb,KAAKuY,QACEvY,KAGXsd,YAAYpa,GAER,OADAlD,KAAKwb,UAAYtY,EACVlD,KAGXoa,UAAUvS,GAEN,OADA7H,KAAKqX,QAAUxP,EACR7H,KAGXud,2BAA2B1a,GACvB7C,KAAK4b,wBAA0B/Y,EAGnC2a,6BACI,OAAOxd,KAAK4b,wBAMhBzB,UAAUtX,GAQN,OAPA7C,KAAKoX,QAAU,EACXpX,KAAKyb,WAAaF,EAASG,SAASC,KACpC3b,KAAKoX,SAAWvU,EAGhB7C,KAAKoX,SAAWvU,EAEb7C,KAGXyd,YACI,OAAOzd,KAAKoX,QAGhBzC,OAEI,MADA3U,KAAK0U,eACC,IAAIrS,EAAa,iBAAkB,6CAG7Cqb,sBAAsBC,EAAUjB,GAE5B,MAAMkB,EAAclB,EAAKmB,iBACnBpO,EAAUmO,EAAY9N,aACtBoK,EAAQwC,EAAKoB,WACbC,EAAiBH,EAAY3V,OAASwH,EAAQuO,UAAYvO,EAAQwO,WAAaje,KAAKwd,6BAC1FG,EAASO,SAASC,IACd,MAAMC,EAAiBD,EAAQN,iBAC3B3D,GACAiE,EAAQlE,SAASC,GACrBkE,EAAeC,WAAWN,OCnL/B,MAAMO,EAEEC,uBACP,OAAOve,KAAKwe,gBAAgB1Z,OAGrB2Z,mBACP,MAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG/BC,yBACP,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAGnBC,0BACP,MAAO,CACH1T,EAAG,EACH5F,EAAG,EACH1E,EAAG,EACH4G,EAAG,EACH9G,EAAG,EACHkD,EAAG,EACHC,EAAG,GAIA4a,6BACP,MAAO,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAG7DI,gCACP,MAAO,CAAC,SAAU,KAAM,KAAM,KAAM,KAAM,KAAM,OAAQ,KAAM,KAAM,KAAM,KAAM,KAAM,UAG/EC,kCACP,MAAO,CACHC,OAAQ,CAAEpC,KAAM,EAAGqC,WAAY,GAC/BC,GAAI,CAAEtC,KAAM,EAAGqC,YAAa,GAC5BE,GAAI,CAAEvC,KAAM,EAAGqC,WAAY,GAC3BG,GAAI,CAAExC,KAAM,EAAGqC,YAAa,GAC5BI,GAAI,CAAEzC,KAAM,EAAGqC,WAAY,GAC3BK,GAAI,CAAE1C,KAAM,EAAGqC,WAAY,GAC3BM,KAAM,CAAE3C,KAAM,EAAGqC,YAAa,GAC9BO,GAAI,CAAE5C,KAAM,EAAGqC,WAAY,GAC3BQ,GAAI,CAAE7C,KAAM,EAAGqC,YAAa,GAC5BS,GAAI,CAAE9C,KAAM,EAAGqC,WAAY,GAC3BU,GAAI,CAAE/C,KAAM,EAAGqC,YAAa,GAC5BW,GAAI,CAAEhD,KAAM,EAAGqC,WAAY,GAC3BY,OAAQ,CAAEjD,KAAM,EAAGqC,WAAY,IAI5Ba,uBACP,MAAO,CACHxa,EAAG,EACH0Z,OAAQ,EACRE,GAAI,EACJa,GAAI,EACJC,KAAM,EACNC,EAAG,EACHC,EAAG,EACH,EAAG,EACHf,GAAI,EACJgB,KAAM,EACNC,EAAG,EACHC,EAAG,EACHjB,GAAI,EACJkB,GAAI,EACJC,KAAM,EACNlB,GAAI,EACJ,EAAG,EACHmB,KAAM,EACN,EAAG,EACHlB,GAAI,EACJ,KAAM,EACNmB,GAAI,EACJC,KAAM,EACNnB,KAAM,EACN,EAAG,EACHC,GAAI,EACJ,KAAM,EACNmB,GAAI,EACJC,KAAM,EACN,EAAG,EACHlB,GAAI,EACJmB,KAAM,EACNlB,GAAI,GACJmB,GAAI,GACJC,KAAM,GACNC,KAAM,GACNpB,GAAI,GACJqB,KAAM,GACN,EAAG,GACHpB,OAAQ,IAILqB,oBACP,MAAO,CACHC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3BC,SAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC7BC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3BC,WAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/BC,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC5BC,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAIzBC,wBACP,MAAO,CACHC,EAAGrD,EAAM0C,OAAOC,MAChBW,EAAGtD,EAAM0C,OAAOE,OAIbW,yBACP,MAAO,CAAC,KAAM,IAAK,IAAK,IAAK,MAGtBC,wBACP,MAAO,CACH7W,EAAG,CAAE8W,WAAY,EAAGC,QAAS,GAC7BC,GAAI,CAAEF,WAAY,EAAGC,QAAS,GAC9B,KAAM,CAAED,WAAY,EAAGC,QAAS,GAChC,MAAO,CAAED,WAAY,EAAGC,QAAS,GACjCE,GAAI,CAAEH,WAAY,EAAGC,QAAS,IAC9BG,IAAK,CAAEJ,WAAY,EAAGC,QAAS,IAC/B3c,EAAG,CAAE0c,WAAY,EAAGC,QAAS,GAC7BI,GAAI,CAAEL,WAAY,EAAGC,QAAS,GAC9B,KAAM,CAAED,WAAY,EAAGC,QAAS,GAChC,MAAO,CAAED,WAAY,EAAGC,QAAS,GACjCK,GAAI,CAAEN,WAAY,EAAGC,QAAS,GAC9BM,IAAK,CAAEP,WAAY,EAAGC,QAAS,GAC/BrhB,EAAG,CAAEohB,WAAY,EAAGC,QAAS,GAC7BO,GAAI,CAAER,WAAY,EAAGC,QAAS,GAC9B,KAAM,CAAED,WAAY,EAAGC,QAAS,GAChC,MAAO,CAAED,WAAY,EAAGC,QAAS,GACjCQ,GAAI,CAAET,WAAY,EAAGC,QAAS,GAC9BS,IAAK,CAAEV,WAAY,EAAGC,QAAS,GAC/Bza,EAAG,CAAEwa,WAAY,EAAGC,QAAS,GAC7BU,GAAI,CAAEX,WAAY,EAAGC,QAAS,GAC9B,KAAM,CAAED,WAAY,EAAGC,QAAS,GAChC,MAAO,CAAED,WAAY,EAAGC,QAAS,GACjCW,GAAI,CAAEZ,WAAY,EAAGC,QAAS,GAC9BY,IAAK,CAAEb,WAAY,EAAGC,QAAS,GAC/BvhB,EAAG,CAAEshB,WAAY,EAAGC,QAAS,GAC7Ba,GAAI,CAAEd,WAAY,EAAGC,QAAS,GAC9B,KAAM,CAAED,WAAY,EAAGC,QAAS,GAChC,MAAO,CAAED,WAAY,EAAGC,QAAS,GACjCc,GAAI,CAAEf,WAAY,EAAGC,QAAS,GAC9Be,IAAK,CAAEhB,WAAY,EAAGC,QAAS,GAC/Bre,EAAG,CAAEoe,WAAY,EAAGC,QAAS,GAC7BgB,GAAI,CAAEjB,WAAY,EAAGC,QAAS,GAC9B,KAAM,CAAED,WAAY,EAAGC,QAAS,IAChC,MAAO,CAAED,WAAY,EAAGC,QAAS,IACjCiB,GAAI,CAAElB,WAAY,EAAGC,QAAS,GAC9BkB,IAAK,CAAEnB,WAAY,EAAGC,QAAS,GAC/Bpe,EAAG,CAAEme,WAAY,EAAGC,QAAS,IAC7BmB,GAAI,CAAEpB,WAAY,EAAGC,QAAS,IAC9B,KAAM,CAAED,WAAY,EAAGC,QAAS,GAChC,MAAO,CAAED,WAAY,EAAGC,QAAS,GACjCoB,GAAI,CAAErB,WAAY,EAAGC,QAAS,IAC9BqB,IAAK,CAAEtB,WAAY,EAAGC,QAAS,IAGvCsB,iBAAiB5G,GACb,OAAOA,GAAQ,GAAKA,EAAO4B,EAAME,gBAAgB1Z,OAErDye,qBAAqBC,GACjB,OAAOA,GAAY,GAAKA,EAAWlF,EAAMM,mBAAmB9Z,OAGhE2e,aAAaC,GACT,IAAKA,GAAcA,EAAW5e,OAAS,EACnC,MAAM,IAAIzC,EAAa,eAAgB,sBAAwBqhB,GAEnE,GAAIA,EAAW5e,OAAS,EACpB,MAAM,IAAIzC,EAAa,eAAgB,sBAAwBqhB,GAEnE,MAAMhH,EAAOgH,EAAWrW,cAElBsW,EADQ,8BACMC,KAAKlH,GACzB,GAAc,OAAViH,EAAgB,CAGhB,MAAO,CACHnkB,KAHSmkB,EAAM,GAIf5E,WAHe4E,EAAM,IAOzB,MAAM,IAAIthB,EAAa,eAAgB,sBAAwBqhB,GAIvEG,YAAYC,GACR,IAAKA,GAAaA,EAAUhf,OAAS,EACjC,MAAM,IAAIzC,EAAa,eAAgB,gBAAkByhB,GAE7D,MAAM3jB,EAAM2jB,EAAUzW,cAGhBsW,EADQ,qCACMC,KAAKzjB,GACzB,GAAc,OAAVwjB,EAAgB,CAChB,MAAMnkB,EAAOmkB,EAAM,GACb5E,EAAa4E,EAAM,GACzB,IAAI1S,EAAO0S,EAAM,GAIjB,OAFK1S,IACDA,EAAO,KACJ,CACHzR,KAAAA,EACAuf,WAAAA,EACA9N,KAAAA,GAIJ,MAAM,IAAI5O,EAAa,eAAgB,gBAAgByhB,KAI/DC,aAAaL,GACT,MAAMxe,EAAQoZ,EAAMwD,WAAW4B,GAC/B,QAAc5gB,IAAVoC,EACA,MAAM,IAAI7C,EAAa,eAAgB,sBAAsBqhB,KAEjE,OAAOxe,EAAM8c,QAGjBgC,iBAAiBC,GACb,MAAM/e,EAAQoZ,EAAMsB,UAAUqE,GAC9B,QAAcnhB,IAAVoC,EACA,MAAM,IAAI7C,EAAa,eAAgB,0BAA0B4hB,KAErE,OAAO/e,EAGXgf,qBAAqBC,GACjB,IAAKnkB,KAAKsjB,iBAAiBa,GACvB,MAAM,IAAI9hB,EAAa,eAAgB,uBAAuB8hB,KAElE,OAAO7F,EAAME,gBAAgB2F,GAGjCC,yBAAyBC,GACrB,IAAKrkB,KAAKujB,qBAAqBc,GAC3B,MAAM,IAAIhiB,EAAa,eAAgB,2BAA2BgiB,KAEtE,OAAO/F,EAAMM,mBAAmByF,GAKpCC,qBAAqBH,EAAWE,EAAeE,EAAY,GACvD,GAAkB,IAAdA,IAAkC,IAAfA,EACnB,MAAM,IAAIliB,EAAa,eAAgB,sBAAsBkiB,KAEjE,IAAIC,GAAOL,EAAYI,EAAYF,GAAiB/F,EAAMC,UAG1D,OAFIiG,EAAM,IACNA,GAAOlG,EAAMC,WACViG,EAKXC,oBAAoBjlB,EAAM2kB,GACtB,MAAMvM,EAAQ5X,KAAKyjB,aAAajkB,GAC1BklB,EAAY1kB,KAAK+jB,aAAanM,EAAMpY,MAC1C,IAAIgkB,EAAWW,EAAYO,EAC3B,GAAIvgB,KAAK6C,IAAIwc,GAAYlF,EAAMC,UAAY,EAAG,CAC1C,IAAIoG,EAAa,EACbnB,EAAW,IACXmB,GAAc,GAElB,MAAMC,GAAqBT,EAAY,GAAKO,EAAY,IAAMpG,EAAMC,UAAaoG,EACjF,GAAIxgB,KAAK6C,IAAI4d,GAAoB,EAC7B,MAAM,IAAIviB,EAAa,eAAgB,sBAAsB7C,MAAS2kB,MAGtEX,EAAWoB,EAGnB,GAAIzgB,KAAK6C,IAAIwc,GAAY,EACrB,MAAM,IAAInhB,EAAa,eAAgB,sBAAsB7C,MAAS2kB,MAE1E,IAAIU,EAAmBjN,EAAMpY,KAC7B,GAAIgkB,EAAW,EACX,IAAK,IAAI9b,EAAI,EAAGA,GAAK8b,IAAY9b,EAC7Bmd,GAAoB,SAGvB,GAAIrB,EAAW,EAChB,IAAK,IAAI9b,GAAK,EAAGA,GAAK8b,IAAY9b,EAC9Bmd,GAAoB,IAG5B,OAAOA,EAWXC,cAAc3kB,EAAKyf,GACf,MAAMmF,EAAQ,CAAC5kB,GACf,IAAI6kB,EAAW7kB,EACf,IAAK,IAAIuH,EAAI,EAAGA,EAAIkY,EAAU9a,OAAQ4C,IAClCsd,EAAWhlB,KAAKskB,qBAAqBU,EAAUpF,EAAUlY,IACrDsd,IAAa7kB,GACb4kB,EAAMlN,KAAKmN,GAEnB,OAAOD,EAMXE,mBAAmBC,EAAOC,EAAOZ,EAAY,GACzC,GAAkB,IAAdA,IAAkC,IAAfA,EACnB,MAAM,IAAIliB,EAAa,eAAgB,sBAAsBkiB,KAEjE,IAAKvkB,KAAKsjB,iBAAiB4B,KAAWllB,KAAKsjB,iBAAiB6B,GACxD,MAAM,IAAI9iB,EAAa,eAAgB,kBAAkB6iB,MAAUC,KAEvE,IAAIC,EAA2B,IAAdb,EAAkBY,EAAQD,EAAQA,EAAQC,EAG3D,OAFIC,EAAa,IACbA,GAAc9G,EAAMC,WACjB6G,EAQXC,eAAeC,GACX,MAAMC,EAAcvlB,KAAK6jB,YAAYyB,GACrC,IAAKC,EAAYtU,KACb,MAAM,IAAI5O,EAAa,eAAgB,mCAC3C,MAAMmjB,EAAYlH,EAAMoD,WAAW6D,EAAYtU,MAC/C,IAAIwU,EAAeF,EAAY/lB,KAG/B,GAFI+lB,EAAYxG,aACZ0G,GAAgBF,EAAYxG,aAC3ByG,EACD,MAAM,IAAInjB,EAAa,eAAgB,yBAA2BijB,GACtE,MAAMnO,EAAQnX,KAAK8kB,cAAc9kB,KAAK+jB,aAAa0B,GAAeD,GAC5DE,EAAepH,EAAMK,aAAa4G,EAAY/lB,MAC9CmmB,EAAW,GACjB,IAAK,IAAIje,EAAI,EAAGA,EAAI4W,EAAMG,MAAM3Z,SAAU4C,EAAG,CACzC,MAAM0J,GAASsU,EAAehe,GAAK4W,EAAMG,MAAM3Z,OACzC8gB,EAAWtH,EAAMG,MAAMrN,GAC7B,IAAIyU,EAAW7lB,KAAKykB,oBAAoBmB,EAAUzO,EAAMzP,IAChC,IAApBme,EAAS/gB,SACT+gB,GAAY,KAEhBF,EAASC,GAAYC,EAEzB,OAAOF,GC5Wf,MAAMG,EAAa,MAKbC,EAAY,CACd,MAAOD,MACP,EAAGA,MACH,EAAGA,KACH,EAAGA,KACH,EAAGA,KACH,GAAIA,KACJ,GAAIA,IACJ,GAAIA,IACJ,IAAKA,IACL,IAAKA,IAEHE,EAAkB,CACpBle,EAAG,IACHC,EAAG,IACHT,EAAG,IAIH1D,EAAG,OAEDqiB,EAAgB,CAClBC,EAAG,CAAEC,IAAK,GACVC,GAAI,CAAED,IAAK,GACXE,EAAG,CAAEC,IAAK,IAAKH,IAAK,GACpBI,GAAI,CAAED,IAAK,IAAKH,IAAK,GACrBK,GAAI,CAAEF,IAAK,IAAKH,IAAK,GACrBM,GAAI,CAAEH,IAAK,IAAKH,IAAK,GACrBO,GAAI,CAAEJ,IAAK,IAAKH,IAAK,GACrBQ,GAAI,CAAEL,IAAK,IAAKH,IAAK,GACrBS,GAAI,CAAEN,IAAK,IAAKH,IAAK,GACrBU,GAAI,CAAEP,IAAK,IAAKH,IAAK,GACrBW,GAAI,CAAER,IAAK,IAAKH,IAAK,GACrBY,IAAK,CAAET,IAAK,IAAKH,IAAK,GACtBa,GAAI,CAAEV,IAAK,IAAKH,IAAK,GACrBc,IAAK,CAAEX,IAAK,IAAKH,IAAK,GACtBe,GAAI,CAAEZ,IAAK,IAAKH,IAAK,GACrBgB,IAAK,CAAEb,IAAK,IAAKH,IAAK,GACtBiB,EAAG,CAAEd,IAAK,IAAKH,IAAK,GACpBkB,GAAI,CAAEf,IAAK,IAAKH,IAAK,GACrBmB,EAAG,CAAEhB,IAAK,IAAKH,IAAK,GACpBoB,GAAI,CAAEjB,IAAK,IAAKH,IAAK,GACrBqB,EAAG,CAAElB,IAAK,IAAKH,IAAK,GACpB,MAAO,CAAEG,IAAK,IAAKH,IAAK,GACxBsB,EAAG,CAAEnB,IAAK,IAAKH,IAAK,GACpB,MAAO,CAAEG,IAAK,IAAKH,IAAK,GACxBuB,EAAG,CAAEpB,IAAK,IAAKH,IAAK,GACpB,MAAO,CAAEG,IAAK,IAAKH,IAAK,GACxB,KAAM,CAAEG,IAAK,IAAKH,IAAK,GACvB,MAAO,CAAEG,IAAK,IAAKH,IAAK,GACxB,KAAM,CAAEG,IAAK,IAAKH,IAAK,GACvB,MAAO,CAAEG,IAAK,IAAKH,IAAK,IAEtBwB,EAAQ,CACVC,OAAQ,CAAEC,WAAY,GACtBC,KAAM,CAAED,WAAY,GACpBE,MAAO,CAAEF,WAAY,GACrBG,KAAM,CAAEH,WAAY,GACpBI,QAAS,CAAEJ,WAAY,GACvBK,WAAY,CAAEL,WAAY,GAC1B,gBAAiB,CAAEA,WAAY,GAC/B,aAAc,CAAEA,WAAY,GAC5B,aAAc,CAAEA,WAAY,GAC5BM,QAAS,CAAEN,WAAY,GACvBO,OAAQ,CAAEP,YAAa,IAErBQ,EAAY,CACdnC,EAAG,CAAE9U,MAAO,EAAG4Q,QAAS,GACxBsG,GAAI,CAAElX,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC,KAAM,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KAC1C,MAAO,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MAC3CwJ,GAAI,CAAEnX,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,KACzCyJ,IAAK,CAAEpX,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,MAC1CuI,EAAG,CAAElW,MAAO,EAAG4Q,QAAS,GACxByG,GAAI,CAAErX,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC,KAAM,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KAC1C,MAAO,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MAC3C2J,GAAI,CAAEtX,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC4J,IAAK,CAAEvX,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MACzC0I,EAAG,CAAErW,MAAO,EAAG4Q,QAAS,GACxB4G,GAAI,CAAExX,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC,KAAM,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KAC1C,MAAO,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MAC3C8J,GAAI,CAAEzX,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC+J,IAAK,CAAE1X,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MACzCsH,EAAG,CAAEjV,MAAO,EAAG4Q,QAAS,GACxB+G,GAAI,CAAE3X,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC,KAAM,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KAC1C,MAAO,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MAC3CiK,GAAI,CAAE5X,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxCkK,IAAK,CAAE7X,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MACzCqI,EAAG,CAAEhW,MAAO,EAAG4Q,QAAS,GACxBkH,GAAI,CAAE9X,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC,KAAM,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KAC1C,MAAO,CAAE3N,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MAC3CoK,GAAI,CAAE/X,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxCqK,IAAK,CAAEhY,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MACzCyI,EAAG,CAAEpW,MAAO,EAAG4Q,QAAS,GACxBqH,GAAI,CAAEjY,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxC,KAAM,CAAE3N,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,KAC3C,MAAO,CAAE3N,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,MAC5CuK,GAAI,CAAElY,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,KACxCwK,IAAK,CAAEnY,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MACzC2I,EAAG,CAAEtW,MAAO,EAAG4Q,QAAS,IACxBwH,GAAI,CAAEpY,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,KACzC,KAAM,CAAE3N,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,KAC3C,MAAO,CAAE3N,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,MAC5C0K,GAAI,CAAErY,MAAO,EAAG4Q,QAAS,GAAIjD,WAAY,KACzC2K,IAAK,CAAEtY,MAAO,EAAG4Q,QAAS,EAAGjD,WAAY,MACzC4K,EAAG,CAAEvY,MAAO,EAAGwY,MAAM,GACrBC,EAAG,CACCzY,MAAO,EACP2N,WAAY,GACZY,OAAQ,EACRpd,KAAM,iBACNunB,YAAa,MAWfC,EAAkB,CAEpBC,GAAI,CAAEznB,KAAM,wBACZ0nB,GAAI,CAAE1nB,KAAM,uBACZ2nB,GAAI,CAAE3nB,KAAM,wBACZ4nB,GAAI,CAAE5nB,KAAM,wBAEZ6nB,GAAI,CAAE7nB,KAAM,2BACZ8nB,GAAI,CAAE9nB,KAAM,0BACZ+nB,GAAI,CAAE/nB,KAAM,2BACZgoB,GAAI,CAAEhoB,KAAM,2BAEZioB,GAAI,CAAEjoB,KAAM,kBACZkoB,GAAI,CAAEloB,KAAM,iBACZmoB,GAAI,CAAEnoB,KAAM,kBACZooB,GAAI,CAAEpoB,KAAM,mBAEZqoB,GAAI,CAAEroB,KAAM,uBACZsoB,GAAI,CAAEtoB,KAAM,uBAEZuoB,GAAI,CAAEvoB,KAAM,wBACZwoB,GAAI,CAAExoB,KAAM,yBAEVsf,EAAc,CAChB,IAAK,CAAEtf,KAAM,kBAAmByoB,6BAA8B,GAC9D,KAAM,CAAEzoB,KAAM,wBAAyByoB,6BAA8B,GACrEpnB,EAAG,CAAErB,KAAM,iBAAkByoB,6BAA8B,GAC3D5H,GAAI,CAAE7gB,KAAM,uBAAwByoB,6BAA8B,GAClElnB,EAAG,CAAEvB,KAAM,oBAAqByoB,6BAA8B,GAC9D,IAAK,CAAEzoB,KAAM,uBAAwByoB,6BAA8B,GACnE,IAAK,CAAEzoB,KAAM,wBAAyByoB,6BAA8B,GACpE3I,GAAI,CAAE9f,KAAM,4CAA6CyoB,6BAA8B,GACvF3lB,EAAG,CAAE9C,KAAM,iCAAkCyoB,4BAA6B,GAC1E,KAAM,CAAEzoB,KAAM,wCAAyCyoB,6BAA8B,GACrF,IAAK,CAAEzoB,KAAM,kCAAmCyoB,6BAA8B,GAC9E,KAAM,CAAEzoB,KAAM,+BAAgCyoB,6BAA8B,GAC5EC,GAAI,CAAE1oB,KAAM,uBAAwByoB,6BAA8B,GAClEE,IAAK,CAAE3oB,KAAM,8BAA+ByoB,6BAA8B,GAC1E5qB,EAAG,CAAEmC,KAAM,iBAAkByoB,6BAA8B,GAC3DxY,EAAG,CAAEjQ,KAAM,kBAAmByoB,6BAA8B,GAC5DG,IAAK,CAAE5oB,KAAM,2BAA4ByoB,6BAA8B,GACvE,MAAO,CAAEzoB,KAAM,2BAA4ByoB,6BAA8B,GACzEI,KAAM,CAAE7oB,KAAM,2BAA4ByoB,6BAA8B,GACxEK,KAAM,CAAE9oB,KAAM,2BAA4ByoB,6BAA8B,GACxEM,wBAAyB,CAAE/oB,KAAM,0BAA2ByoB,6BAA8B,GAC1FO,0BAA2B,CAAEhpB,KAAM,4BAA6ByoB,6BAA8B,GAC9FQ,oBAAqB,CAAEjpB,KAAM,sBAAuByoB,6BAA8B,GAClFS,sBAAuB,CAAElpB,KAAM,wBAAyByoB,6BAA8B,GACtFU,oBAAqB,CAAEnpB,KAAM,sBAAuByoB,6BAA8B,GAClFW,sBAAuB,CAAEppB,KAAM,wBAAyByoB,6BAA8B,GACtFY,2BAA4B,CAAErpB,KAAM,6BAA8ByoB,6BAA8B,GAChGa,6BAA8B,CAAEtpB,KAAM,+BAAgCyoB,6BAA8B,GACpGc,4BAA6B,CAAEvpB,KAAM,8BAA+ByoB,6BAA8B,GAClGe,8BAA+B,CAAExpB,KAAM,gCAAiCyoB,6BAA8B,GACtGgB,4BAA6B,CAAEzpB,KAAM,8BAA+ByoB,6BAA8B,GAClGiB,8BAA+B,CAAE1pB,KAAM,gCAAiCyoB,6BAA8B,GACtGkB,2BAA4B,CAAE3pB,KAAM,6BAA8ByoB,6BAA8B,GAChGmB,6BAA8B,CAAE5pB,KAAM,+BAAgCyoB,6BAA8B,GACpGoB,2BAA4B,CAAE7pB,KAAM,6BAA8ByoB,6BAA8B,GAChGqB,6BAA8B,CAAE9pB,KAAM,+BAAgCyoB,6BAA8B,GACpGsB,wBAAyB,CAAE/pB,KAAM,0BAA2ByoB,6BAA8B,GAC1FuB,qBAAsB,CAAEhqB,KAAM,uBAAwByoB,6BAA8B,GACpFwB,uBAAwB,CAAEjqB,KAAM,yBAA0ByoB,6BAA8B,GACxFyB,oBAAqB,CAAElqB,KAAM,sBAAuByoB,6BAA8B,GAClF0B,uBAAwB,CAAEnqB,KAAM,yBAA0ByoB,6BAA8B,GACxF2B,oBAAqB,CAAEpqB,KAAM,sBAAuByoB,6BAA8B,GAClF4B,yBAA0B,CAAErqB,KAAM,2BAA4ByoB,6BAA8B,GAC5F6B,sBAAuB,CAAEtqB,KAAM,wBAAyByoB,6BAA8B,GACtF8B,iBAAkB,CAAEvqB,KAAM,mBAAoByoB,6BAA8B,GAC5E+B,gBAAiB,CAAExqB,KAAM,kBAAmByoB,6BAA8B,GAC1EgC,uBAAwB,CAAEzqB,KAAM,yBAA0ByoB,6BAA8B,GACxFiC,wBAAyB,CAAE1qB,KAAM,0BAA2ByoB,6BAA8B,GAC1FkC,qBAAsB,CAAE3qB,KAAM,uBAAwByoB,6BAA8B,GACpFmC,sBAAuB,CAAE5qB,KAAM,wBAAyByoB,6BAA8B,GACtFoC,qBAAsB,CAAE7qB,KAAM,uBAAwByoB,6BAA8B,GACpFqC,sBAAuB,CAAE9qB,KAAM,wBAAyByoB,6BAA8B,GACtFsC,sBAAuB,CAAE/qB,KAAM,wBAAyByoB,6BAA8B,GACtFuC,uBAAwB,CAAEhrB,KAAM,yBAA0ByoB,6BAA8B,GACxFwC,sBAAuB,CAAEjrB,KAAM,wBAAyByoB,6BAA8B,GACtFyC,uBAAwB,CAAElrB,KAAM,yBAA0ByoB,6BAA8B,GACxF0C,sBAAuB,CAAEnrB,KAAM,wBAAyByoB,6BAA8B,GACtF2C,uBAAwB,CAAEprB,KAAM,yBAA0ByoB,6BAA8B,GACxF4C,sBAAuB,CAAErrB,KAAM,wBAAyByoB,6BAA8B,GACtF6C,uBAAwB,CAAEtrB,KAAM,yBAA0ByoB,6BAA8B,GACxF8C,sBAAuB,CAAEvrB,KAAM,wBAAyByoB,6BAA8B,GACtF+C,uBAAwB,CAAExrB,KAAM,yBAA0ByoB,6BAA8B,GACxFgD,8BAA+B,CAAEzrB,KAAM,gCAAiCyoB,6BAA8B,GACtGiD,2BAA4B,CAAE1rB,KAAM,6BAA8ByoB,6BAA8B,GAChGkD,6BAA8B,CAAE3rB,KAAM,+BAAgCyoB,6BAA8B,GACpGmD,0BAA2B,CAAE5rB,KAAM,4BAA6ByoB,6BAA8B,GAC9FoD,6BAA8B,CAAE7rB,KAAM,+BAAgCyoB,6BAA8B,GACpGqD,0BAA2B,CAAE9rB,KAAM,4BAA6ByoB,6BAA8B,GAC9FsD,+BAAgC,CAAE/rB,KAAM,iCAAkCyoB,6BAA8B,GACxGuD,4BAA6B,CAAEhsB,KAAM,8BAA+ByoB,6BAA8B,GAClGwD,uBAAwB,CAAEjsB,KAAM,yBAA0ByoB,6BAA8B,GACxFyD,sBAAuB,CAAElsB,KAAM,wBAAyByoB,6BAA8B,GACtF0D,yBAA0B,CAAEnsB,KAAM,2BAA4ByoB,6BAA8B,GAC5F2D,2BAA4B,CAAEpsB,KAAM,6BAA8ByoB,6BAA8B,GAChG4D,qBAAsB,CAAErsB,KAAM,uBAAwByoB,6BAA8B,GACpF6D,uBAAwB,CAAEtsB,KAAM,yBAA0ByoB,6BAA8B,GACxF8D,qBAAsB,CAAEvsB,KAAM,uBAAwByoB,6BAA8B,GACpF+D,uBAAwB,CAAExsB,KAAM,yBAA0ByoB,6BAA8B,GACxFgE,uBAAwB,CAAEzsB,KAAM,yBAA0ByoB,6BAA8B,GACxFiE,yBAA0B,CAAE1sB,KAAM,2BAA4ByoB,6BAA8B,GAC5FkE,6BAA8B,CAAE3sB,KAAM,+BAAgCyoB,6BAA8B,GACpGmE,+BAAgC,CAAE5sB,KAAM,iCAAkCyoB,6BAA8B,GACxGoE,0BAA2B,CAAE7sB,KAAM,4BAA6ByoB,6BAA8B,GAC9FqE,uBAAwB,CAAE9sB,KAAM,yBAA0ByoB,6BAA8B,GACxFsE,0BAA2B,CAAE/sB,KAAM,4BAA6ByoB,6BAA8B,GAC9FuE,uBAAwB,CAAEhtB,KAAM,yBAA0ByoB,6BAA8B,GACxFwE,wBAAyB,CAAEjtB,KAAM,0BAA2ByoB,6BAA8B,GAC1FyE,qBAAsB,CAAEltB,KAAM,uBAAwByoB,6BAA8B,GACpF0E,wBAAyB,CAAEntB,KAAM,0BAA2ByoB,6BAA8B,GAC1F2E,qBAAsB,CAAEptB,KAAM,uBAAwByoB,6BAA8B,GACpF4E,0BAA2B,CAAErtB,KAAM,4BAA6ByoB,6BAA8B,GAC9F6E,uBAAwB,CAAEttB,KAAM,yBAA0ByoB,6BAA8B,GACxF8E,wBAAyB,CAAEvtB,KAAM,0BAA2ByoB,6BAA8B,GAC1F+E,yBAA0B,CAAExtB,KAAM,2BAA4ByoB,6BAA8B,GAC5FgF,sBAAuB,CAAEztB,KAAM,wBAAyByoB,6BAA8B,GACtFiF,uBAAwB,CAAE1tB,KAAM,yBAA0ByoB,6BAA8B,GACxFkF,sBAAuB,CAAE3tB,KAAM,wBAAyByoB,6BAA8B,GACtFmF,uBAAwB,CAAE5tB,KAAM,yBAA0ByoB,6BAA8B,GACxFoF,wBAAyB,CAAE7tB,KAAM,0BAA2ByoB,6BAA8B,GAC1FqF,yBAA0B,CAAE9tB,KAAM,2BAA4ByoB,6BAA8B,GAC5FsF,wBAAyB,CAAE/tB,KAAM,0BAA2ByoB,6BAA8B,GAC1FuF,yBAA0B,CAAEhuB,KAAM,2BAA4ByoB,6BAA8B,GAC5FwF,gCAAiC,CAAEjuB,KAAM,kCAAmCyoB,6BAA8B,GAC1GyF,6BAA8B,CAAEluB,KAAM,+BAAgCyoB,6BAA8B,GACpG0F,gCAAiC,CAAEnuB,KAAM,kCAAmCyoB,6BAA8B,GAC1G2F,6BAA8B,CAAEpuB,KAAM,+BAAgCyoB,6BAA8B,GACpG4F,8BAA+B,CAAEruB,KAAM,gCAAiCyoB,6BAA8B,GACtG6F,2BAA4B,CAAEtuB,KAAM,6BAA8ByoB,6BAA8B,GAChG8F,8BAA+B,CAAEvuB,KAAM,gCAAiCyoB,6BAA8B,GACtG+F,2BAA4B,CAAExuB,KAAM,6BAA8ByoB,6BAA8B,GAChGgG,gCAAiC,CAAEzuB,KAAM,kCAAmCyoB,6BAA8B,GAC1GiG,6BAA8B,CAAE1uB,KAAM,+BAAgCyoB,6BAA8B,GACpGkG,qBAAsB,CAAE3uB,KAAM,uBAAwByoB,6BAA8B,GACpFmG,uBAAwB,CAAE5uB,KAAM,yBAA0ByoB,6BAA8B,GACxFoG,uBAAwB,CAAE7uB,KAAM,yBAA0ByoB,6BAA8B,GACxFqG,yBAA0B,CAAE9uB,KAAM,2BAA4ByoB,6BAA8B,GAC5FsG,6BAA8B,CAAE/uB,KAAM,+BAAgCyoB,6BAA8B,GACpGuG,+BAAgC,CAAEhvB,KAAM,iCAAkCyoB,6BAA8B,GACxGwG,0BAA2B,CAAEjvB,KAAM,4BAA6ByoB,6BAA8B,GAC9FyG,uBAAwB,CAAElvB,KAAM,yBAA0ByoB,6BAA8B,GACxF0G,0BAA2B,CAAEnvB,KAAM,4BAA6ByoB,6BAA8B,GAC9F2G,uBAAwB,CAAEpvB,KAAM,yBAA0ByoB,6BAA8B,GACxF4G,wBAAyB,CAAErvB,KAAM,0BAA2ByoB,6BAA8B,GAC1F6G,qBAAsB,CAAEtvB,KAAM,uBAAwByoB,6BAA8B,GACpF8G,sBAAuB,CAAEvvB,KAAM,wBAAyByoB,6BAA8B,GACtF+G,uBAAwB,CAAExvB,KAAM,yBAA0ByoB,6BAA8B,GACxFgH,wBAAyB,CAAEzvB,KAAM,0BAA2ByoB,6BAA8B,GAC1FiH,yBAA0B,CAAE1vB,KAAM,2BAA4ByoB,6BAA8B,GAC5FkH,wBAAyB,CAAE3vB,KAAM,0BAA2ByoB,6BAA8B,GAC1FmH,yBAA0B,CAAE5vB,KAAM,2BAA4ByoB,6BAA8B,GAC5FoH,gCAAiC,CAAE7vB,KAAM,kCAAmCyoB,6BAA8B,GAC1GqH,6BAA8B,CAAE9vB,KAAM,+BAAgCyoB,6BAA8B,GACpGsH,gCAAiC,CAAE/vB,KAAM,kCAAmCyoB,6BAA8B,GAC1GuH,6BAA8B,CAAEhwB,KAAM,+BAAgCyoB,6BAA8B,GACpGwH,8BAA+B,CAAEjwB,KAAM,gCAAiCyoB,6BAA8B,GACtGyH,2BAA4B,CAAElwB,KAAM,6BAA8ByoB,6BAA8B,GAChG0H,uBAAwB,CAAEnwB,KAAM,yBAA0ByoB,6BAA8B,GACxF2H,yBAA0B,CAAEpwB,KAAM,2BAA4ByoB,6BAA8B,GAC5F4H,uBAAwB,CAAErwB,KAAM,yBAA0ByoB,6BAA8B,GACxF6H,yBAA0B,CAAEtwB,KAAM,2BAA4ByoB,6BAA8B,GAC5F8H,sBAAuB,CAAEvwB,KAAM,wBAAyByoB,6BAA8B,GACtF+H,wBAAyB,CAAExwB,KAAM,0BAA2ByoB,6BAA8B,GAC1FgI,wBAAyB,CAAEzwB,KAAM,0BAA2ByoB,6BAA8B,GAC1FiI,0BAA2B,CAAE1wB,KAAM,4BAA6ByoB,6BAA8B,GAC9FkI,qBAAsB,CAAE3wB,KAAM,uBAAwByoB,6BAA8B,GACpFmI,uBAAwB,CAAE5wB,KAAM,yBAA0ByoB,6BAA8B,GACxFoI,uBAAwB,CAAE7wB,KAAM,yBAA0ByoB,6BAA8B,GACxFqI,yBAA0B,CAAE9wB,KAAM,2BAA4ByoB,6BAA8B,GAC5FsI,2BAA4B,CAAE/wB,KAAM,6BAA8ByoB,6BAA8B,GAChGuI,6BAA8B,CAAEhxB,KAAM,+BAAgCyoB,6BAA8B,GACpGwI,2BAA4B,CAAEjxB,KAAM,6BAA8ByoB,6BAA8B,GAChGyI,6BAA8B,CAAElxB,KAAM,+BAAgCyoB,6BAA8B,GACpG0I,8BAA+B,CAAEnxB,KAAM,gCAAiCyoB,6BAA8B,GACtG2I,gCAAiC,CAAEpxB,KAAM,kCAAmCyoB,6BAA8B,GAC1G4I,+BAAgC,CAAErxB,KAAM,iCAAkCyoB,6BAA8B,GACxG6I,iCAAkC,CAAEtxB,KAAM,mCAAoCyoB,6BAA8B,GAC5G8I,4BAA6B,CAAEvxB,KAAM,8BAA+ByoB,6BAA8B,GAClG+I,8BAA+B,CAAExxB,KAAM,gCAAiCyoB,6BAA8B,GACtGgJ,8BAA+B,CAAEzxB,KAAM,gCAAiCyoB,6BAA8B,GACtGiJ,gCAAiC,CAAE1xB,KAAM,kCAAmCyoB,6BAA8B,GAC1GkJ,2BAA4B,CAAE3xB,KAAM,6BAA8ByoB,6BAA8B,GAChGmJ,6BAA8B,CAAE5xB,KAAM,+BAAgCyoB,6BAA8B,GACpGoJ,8BAA+B,CAAE7xB,KAAM,gCAAiCyoB,6BAA8B,GACtGqJ,gCAAiC,CAAE9xB,KAAM,kCAAmCyoB,6BAA8B,GAC1GsJ,6BAA8B,CAAE/xB,KAAM,+BAAgCyoB,6BAA8B,GACpGuJ,+BAAgC,CAAEhyB,KAAM,iCAAkCyoB,6BAA8B,GACxGwJ,wBAAyB,CAAEjyB,KAAM,0BAA2ByoB,6BAA8B,GAC1FyJ,qBAAsB,CAAElyB,KAAM,uBAAwByoB,6BAA8B,GACpF0J,wBAAyB,CAAEnyB,KAAM,0BAA2ByoB,6BAA8B,GAC1F2J,qBAAsB,CAAEpyB,KAAM,uBAAwByoB,6BAA8B,GACpF4J,0BAA2B,CAAEryB,KAAM,4BAA6ByoB,6BAA8B,GAC9F6J,uBAAwB,CAAEtyB,KAAM,yBAA0ByoB,6BAA8B,GACxF8J,wBAAyB,CAAEvyB,KAAM,0BAA2ByoB,6BAA8B,GAC1F+J,qBAAsB,CAAExyB,KAAM,uBAAwByoB,6BAA8B,GACpFgK,2BAA4B,CAAEzyB,KAAM,6BAA8ByoB,6BAA8B,GAChGiK,wBAAyB,CAAE1yB,KAAM,0BAA2ByoB,6BAA8B,GAC1FkK,yBAA0B,CAAE3yB,KAAM,2BAA4ByoB,6BAA8B,GAC5FmK,sBAAuB,CAAE5yB,KAAM,wBAAyByoB,6BAA8B,GACtFoK,wBAAyB,CAAE7yB,KAAM,0BAA2ByoB,6BAA8B,GAC1FqK,qBAAsB,CAAE9yB,KAAM,uBAAwByoB,6BAA8B,GACpFsK,wBAAyB,CAAE/yB,KAAM,0BAA2ByoB,6BAA8B,GAC1FuK,qBAAsB,CAAEhzB,KAAM,uBAAwByoB,6BAA8B,GACpFwK,sBAAuB,CAAEjzB,KAAM,wBAAyByoB,6BAA8B,GACtFyK,uBAAwB,CAAElzB,KAAM,yBAA0ByoB,6BAA8B,GACxF0K,sBAAuB,CAAEnzB,KAAM,wBAAyByoB,6BAA8B,GACtF2K,uBAAwB,CAAEpzB,KAAM,yBAA0ByoB,6BAA8B,GACxF4K,uBAAwB,CAAErzB,KAAM,yBAA0ByoB,6BAA8B,GACxF6K,wBAAyB,CAAEtzB,KAAM,0BAA2ByoB,6BAA8B,GAC1F8K,yBAA0B,CAAEvzB,KAAM,2BAA4ByoB,6BAA8B,GAC5F+K,0BAA2B,CAAExzB,KAAM,4BAA6ByoB,6BAA8B,GAC9FgL,sBAAuB,CAAEzzB,KAAM,wBAAyByoB,6BAA8B,GACtFiL,uBAAwB,CAAE1zB,KAAM,yBAA0ByoB,6BAA8B,GACxFkL,wBAAyB,CAAE3zB,KAAM,0BAA2ByoB,6BAA8B,GAC1FmL,yBAA0B,CAAE5zB,KAAM,2BAA4ByoB,6BAA8B,GAC5FoL,sBAAuB,CAAE7zB,KAAM,wBAAyByoB,6BAA8B,GACtFqL,uBAAwB,CAAE9zB,KAAM,yBAA0ByoB,6BAA8B,GACxFsL,sBAAuB,CAAE/zB,KAAM,wBAAyByoB,6BAA8B,GACtFuL,uBAAwB,CAAEh0B,KAAM,yBAA0ByoB,6BAA8B,GACxFwL,wBAAyB,CAAEj0B,KAAM,0BAA2ByoB,6BAA8B,GAC1FyL,yBAA0B,CAAEl0B,KAAM,2BAA4ByoB,6BAA8B,GAC5F0L,yBAA0B,CAAEn0B,KAAM,2BAA4ByoB,6BAA8B,GAC5F2L,0BAA2B,CAAEp0B,KAAM,4BAA6ByoB,6BAA8B,GAC9F4L,sBAAuB,CAAEr0B,KAAM,wBAAyByoB,6BAA8B,GACtF6L,uBAAwB,CAAEt0B,KAAM,yBAA0ByoB,6BAA8B,GACxF8L,wBAAyB,CAAEv0B,KAAM,0BAA2ByoB,6BAA8B,GAC1F+L,yBAA0B,CAAEx0B,KAAM,2BAA4ByoB,6BAA8B,GAC5FgM,sBAAuB,CAAEz0B,KAAM,wBAAyByoB,6BAA8B,GACtFiM,uBAAwB,CAAE10B,KAAM,yBAA0ByoB,6BAA8B,GACxFkM,yBAA0B,CAAE30B,KAAM,2BAA4ByoB,6BAA8B,GAC5FmM,0BAA2B,CAAE50B,KAAM,4BAA6ByoB,6BAA8B,GAC9FoM,wBAAyB,CAAE70B,KAAM,0BAA2ByoB,6BAA8B,GAC1FqM,yBAA0B,CAAE90B,KAAM,2BAA4ByoB,6BAA8B,GAC5FsM,8BAA+B,CAAE/0B,KAAM,gCAAiCyoB,6BAA8B,GACtGuM,2BAA4B,CAAEh1B,KAAM,6BAA8ByoB,6BAA8B,GAChGwM,8BAA+B,CAAEj1B,KAAM,gCAAiCyoB,6BAA8B,GACtGyM,2BAA4B,CAAEl1B,KAAM,6BAA8ByoB,6BAA8B,GAChG0M,gCAAiC,CAAEn1B,KAAM,kCAAmCyoB,6BAA8B,GAC1G2M,6BAA8B,CAAEp1B,KAAM,+BAAgCyoB,6BAA8B,GACpG4M,8BAA+B,CAAEr1B,KAAM,gCAAiCyoB,6BAA8B,GACtG6M,2BAA4B,CAAEt1B,KAAM,6BAA8ByoB,6BAA8B,GAChG8M,iCAAkC,CAAEv1B,KAAM,mCAAoCyoB,6BAA8B,GAC5G+M,8BAA+B,CAAEx1B,KAAM,gCAAiCyoB,6BAA8B,GACtGgN,+BAAgC,CAAEz1B,KAAM,iCAAkCyoB,6BAA8B,GACxGiN,4BAA6B,CAAE11B,KAAM,8BAA+ByoB,6BAA8B,GAClGkN,8BAA+B,CAAE31B,KAAM,gCAAiCyoB,6BAA8B,GACtGmN,2BAA4B,CAAE51B,KAAM,6BAA8ByoB,6BAA8B,GAChGoN,8BAA+B,CAAE71B,KAAM,gCAAiCyoB,6BAA8B,GACtGqN,2BAA4B,CAAE91B,KAAM,6BAA8ByoB,6BAA8B,GAChGsN,mBAAoB,CAAE/1B,KAAM,qBAAsByoB,6BAA8B,GAChFuN,qBAAsB,CAAEh2B,KAAM,uBAAwByoB,6BAA8B,GACpFwN,iBAAkB,CAAEj2B,KAAM,mBAAoByoB,6BAA8B,GAC5EyN,iBAAkB,CAAEl2B,KAAM,mBAAoByoB,6BAA8B,GAC5E0N,mBAAoB,CAAEn2B,KAAM,qBAAsByoB,6BAA8B,GAChF2N,qBAAsB,CAAEp2B,KAAM,uBAAwByoB,6BAA8B,GACpF4N,oBAAqB,CAAEr2B,KAAM,sBAAuByoB,6BAA8B,GAClF6N,sBAAuB,CAAEt2B,KAAM,wBAAyByoB,6BAA8B,GACtF8N,mBAAoB,CAAEv2B,KAAM,qBAAsByoB,6BAA8B,GAChF+N,qBAAsB,CAAEx2B,KAAM,uBAAwByoB,6BAA8B,GACpFgO,oBAAqB,CAAEz2B,KAAM,sBAAuByoB,6BAA8B,GAClFiO,sBAAuB,CAAE12B,KAAM,wBAAyByoB,6BAA8B,GACtFkO,oBAAqB,CAAE32B,KAAM,sBAAuByoB,6BAA8B,GAClFmO,sBAAuB,CAAE52B,KAAM,wBAAyByoB,6BAA8B,GACtFoO,oBAAqB,CAAE72B,KAAM,sBAAuByoB,6BAA8B,GAClFqO,sBAAuB,CAAE92B,KAAM,wBAAyByoB,6BAA8B,GACtFsO,oBAAqB,CAAE/2B,KAAM,sBAAuByoB,6BAA8B,GAClFuO,sBAAuB,CAAEh3B,KAAM,wBAAyByoB,6BAA8B,GACtFwO,oBAAqB,CAAEj3B,KAAM,sBAAuByoB,6BAA8B,GAClFyO,sBAAuB,CAAEl3B,KAAM,wBAAyByoB,6BAA8B,GACtF0O,oBAAqB,CAAEn3B,KAAM,sBAAuByoB,6BAA8B,GAClF2O,sBAAuB,CAAEp3B,KAAM,wBAAyByoB,6BAA8B,GACtF4O,oBAAqB,CAAEr3B,KAAM,sBAAuByoB,6BAA8B,GAClF6O,sBAAuB,CAAEt3B,KAAM,wBAAyByoB,6BAA8B,GACtF8O,oBAAqB,CAAEv3B,KAAM,sBAAuByoB,6BAA8B,GAClF+O,sBAAuB,CAAEx3B,KAAM,wBAAyByoB,6BAA8B,GACtFgP,4BAA6B,CAAEz3B,KAAM,8BAA+ByoB,6BAA8B,GAClGiP,8BAA+B,CAAE13B,KAAM,gCAAiCyoB,6BAA8B,GACtGkP,6BAA8B,CAAE33B,KAAM,+BAAgCyoB,6BAA8B,GACpGmP,oCAAqC,CACjC53B,KAAM,sCACNyoB,6BAA8B,GAElCoP,qBAAsB,CAAE73B,KAAM,uBAAwByoB,6BAA8B,GACpFqP,sBAAuB,CAAE93B,KAAM,wBAAyByoB,6BAA8B,IAkCpFsP,EAAgB,CAClB,KAAM,CAAE/3B,KAAM,kBAAmBg4B,eAAe,GAChDC,GAAI,CACAC,UAAW,0BACXC,UAAW,0BACXH,eAAe,GAEnB,KAAM,CACFE,UAAW,mBACXC,UAAW,mBACXH,eAAe,GAEnB,KAAM,CACFE,UAAW,mBACXC,UAAW,mBACXH,eAAe,GAEnB,KAAM,CACFE,UAAW,oBACXC,UAAW,oBACXH,eAAe,GAEnB,KAAM,CAAEh4B,KAAM,2BAA4Bg4B,eAAe,GACzDI,GAAI,CACAF,UAAW,4BACXC,UAAW,4BACXH,eAAe,GAEnBK,GAAI,CAAEr4B,KAAM,kBAAmBg4B,eAAe,GAC9C,KAAM,CAAEE,UAAW,eAAgBC,UAAW,eAAgBH,eAAe,GAC7E,MAAO,CAAEh4B,KAAM,eAAgBg4B,eAAe,GAC9C,MAAO,CAAEh4B,KAAM,eAAgBg4B,eAAe,GAC9C,KAAM,CAAEh4B,KAAM,eAAgBg4B,eAAe,GAC7CM,GAAI,CAAEt4B,KAAM,iBAAkBg4B,eAAe,GAC7C,KAAM,CAAEh4B,KAAM,kBAAmBg4B,eAAe,IAE9CO,EAAY,CACdC,QAAS,CAAEx4B,KAAM,sBACjBy4B,iBAAkB,CAAEz4B,KAAM,mBAC1B04B,KAAM,CAAE14B,KAAM,gBACd24B,cAAe,CAAE34B,KAAM,qBACvB44B,GAAI,CAAE54B,KAAM,iBACZ64B,QAAS,CAAE74B,KAAM,uCACjB84B,UAAW,CAAE94B,KAAM,2CACnB+4B,QAAS,CAAE/4B,KAAM,sCACjBg5B,UAAW,CAAEh5B,KAAM,mCACnBi5B,UAAW,CAAEj5B,KAAM,iCACnBk5B,YAAa,CAAEl5B,KAAM,+CACrBm5B,UAAW,CAAEn5B,KAAM,8BACnBo5B,WAAY,CAAEp5B,KAAM,uBACpBq5B,MAAO,CAAEr5B,KAAM,cACfs5B,KAAM,CAAEt5B,KAAM,mBACdu5B,KAAM,CAAEv5B,KAAM,qBACdw5B,SAAU,CAAEx5B,KAAM,mBAClBy5B,SAAU,CAAEz5B,KAAM,wBAClB05B,KAAM,CAAE15B,KAAM,aACd25B,cAAe,CAAE35B,KAAM,mBACvB45B,YAAa,CAAE55B,KAAM,iBACrB65B,KAAM,CAAE75B,KAAM,aACd85B,SAAU,CAAE95B,KAAM,iBAClB+5B,MAAO,CAAE/5B,KAAM,eAEZ,MAAMg6B,EAIT93B,0BACI,GAAuC,IAAnC83B,EAAOjhB,iBAAiBxW,OACxB,MAAM,IAAIzC,EAAa,UAAW,yFAGlC,OAAOk6B,EAAOjhB,iBAAiB,GAGvC7W,sBAAsB+3B,GAClB,IAAKA,KAAUA,KAAQ7U,GACnB,MAAM,IAAItlB,EAAa,cAAe,iBAAmBm6B,GAC7D,OAAO7U,EAAM6U,GASjB/3B,qBAAqBg4B,EAAgBD,EAAO,SAAUE,GAClD,IAAIxkB,EAAU,CAAEykB,aAAc,GACR,iBAAXD,IACPxkB,EAAU7X,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAImC,GAAUwkB,IAExD,MAAME,EAASH,EAAe90B,MAAM,KACpC,GAAIi1B,EAAO93B,OAAS,EAChB,MAAM,IAAIzC,EAAa,eAAgB,iEAAiEo6B,KAE5G,MAAMt8B,EAAMy8B,EAAO,GAAGC,cAChB33B,EAAQmjB,EAAUloB,GACxB,IAAK+E,EACD,MAAM,IAAI7C,EAAa,eAAgB,qBAAuBlC,GAC9D+E,EAAMya,SACNid,EAAO,GAAK13B,EAAMya,OAAO1Y,YAC7B,IAAI0Y,EAAS5b,SAAS64B,EAAO,GAAI,IAEjCjd,IAAW,EAAIzH,EAAQykB,aAEvB,IAAIz5B,GADuB,EAATyc,EAAa,GACPza,EAAMkM,OAAS,EACvClO,GAAQq5B,EAAOO,eAAeN,GAAM3U,WACpC,IAAIkV,EAAS,EACT75B,GAAQ,GAAa,EAAPA,EAAY,GAAM,IAChC65B,EAAS,GACT75B,GAAQ,GAAa,EAAPA,EAAY,GAAM,IAChC65B,GAAU,GAEd,MAAMC,OAAqC,IAAlB93B,EAAM8c,QAAmC,GAATrC,EAAcza,EAAM8c,aAAUlf,EAEjFP,EAAO2C,EAAM3C,KACbunB,EAAc5kB,EAAM4kB,YAC1B,IAAImT,EAAsB,GAC1B,GAAIL,EAAO93B,OAAS,GAAK83B,EAAO,GAAI,CAChC,MAAMM,EAAYN,EAAO,GAAGC,cAC5BI,EAAsBlT,EAAgBmT,IAAc,GAExD,OAAO78B,OAAO0V,OAAO,CAAE5V,IAAAA,EACnBwf,OAAAA,EACAzc,KAAAA,EACA85B,UAAAA,EAAWje,WAAY7Z,EAAM6Z,WAAYxc,KAAAA,EACzCw6B,OAAAA,EACAjT,YAAAA,EAAaqT,WAAW,GAASF,GAEzCx4B,qBAAqB24B,GACjB,QAAuB,IAAZA,GAA2BA,EAAU,GAAKA,EAAU,GAC3D,MAAM,IAAI/6B,EAAa,eAAgB,6DAA6D+6B,KAExG,MAcMjZ,EAdQ,CACV,EAAG,IACH,EAAG,KACH,EAAG,IACH,EAAG,KACH,EAAG,IACH,EAAG,IACH,EAAG,KACH,EAAG,IACH,EAAG,KACH,EAAG,IACH,GAAI,KACJ,GAAI,KAEgBiZ,GACxB,IAAKjZ,EACD,MAAM,IAAI9hB,EAAa,eAAgB,mCAAmC+6B,KAE9E,OAAOjZ,EAEX1f,kBAAkB44B,EAAMlmB,EAAQ,GAC5B,IAAIqB,EACA/O,EAAQ,EACR6zB,EAAU,EACd,GAA2B,MAAvBD,EAAKR,cAAuB,CAC5B,MAAMU,EAAe,IAAIzmB,EAAM,wBAAyBylB,EAAOiB,sBAAsB1tB,aAErF,GADA0I,EAAQ,wBACkB1V,MAAtBy6B,EAAa9zB,OAA6C3G,MAAvBy6B,EAAa7zB,OAChD,MAAM,IAAIrH,EAAa,iBAAkB,6BAC7CoH,EAAQ8zB,EAAa9zB,MACrB6zB,GAAWC,EAAa7zB,OAAS,OAGjCD,EAAQ8yB,EAAOkB,UAAUJ,GAE7B,MAAO,CACHp5B,KAAMo5B,EACN96B,KAAMiW,EACN+D,SAAU,IAAM9S,EAAQ0N,EACxBmmB,QAAAA,GAKR74B,iBAAiBR,GACb,OAAO,EAAIA,EAAKgD,WAAWnC,OAE/BL,yBAAyBi5B,GACrB,OAAOpD,EAAcoD,GAEzBj5B,uBAAuB6hB,GACnB,OAAOzE,EAAYyE,GAEvB7hB,qBAAqB6hB,GACjB,OAAOwU,EAAUxU,GAErB7hB,oBAAoBk5B,GAChB,MAAMC,EAAU3X,EAAc0X,GAC9B,IAAKC,EACD,MAAM,IAAIv7B,EAAa,kBAAmB,4BAA4Bs7B,MAE1E,IAAKC,EAAQtX,IACT,MAAO,GAEX,MAIMuX,EAJiB,CACnBj6B,EAAG,CAAC,EAAG,GAAK,IAAK,EAAG,EAAG,IAAK,KAC5B,IAAK,CAAC,EAAG,KAAM,GAAK,EAAG,IAAK,GAAK,IAERg6B,EAAQtX,KAC/BwX,EAAW,GACjB,IAAK,IAAIp2B,EAAI,EAAGA,EAAIk2B,EAAQzX,MAAOze,EAAG,CAClC,MAAMxE,EAAO26B,EAAMn2B,GACnBo2B,EAASjmB,KAAK,CAAE5G,KAAM2sB,EAAQtX,IAAKpjB,KAAAA,IAEvC,OAAO46B,EAEXr5B,0BACI,OAAOwhB,EAEXxhB,uBAAuBk5B,GACnB,OAAOA,KAAQ1X,EAQnBxhB,wBAAwBs5B,GACpB,MAAMC,EAAiBhY,EAAgB+X,GAIvC,QAHuBj7B,IAAnBk7B,IACAD,EAAWC,QAEal7B,IAAxBijB,EAAUgY,GACV,MAAM,IAAI17B,EAAa,eAAgB,uCAAuC07B,KAElF,OAAOA,EAGXt5B,0BAA0Bs5B,GACtB,OAAO,IAAI15B,GAAWmD,MAAM+0B,EAAO0B,iBAAiBF,IAGxDt5B,wBAAwBs5B,GACpB,OAAOxB,EAAO2B,mBAAmBH,GAAU74B,QAG/CT,uBAAuBs5B,GACnBA,EAAWxB,EAAO0B,iBAAiBF,GACnC,MAAMI,EAAQpY,EAAUgY,GACxB,QAAcj7B,IAAVq7B,EACA,MAAM,IAAI97B,EAAa,mBAE3B,OAAO87B,EAKX15B,qBAAqBs5B,EAAU9sB,EAAO,KAClC8sB,EAAWxB,EAAO0B,iBAAiBF,GAEnC,MAAMx7B,EAAO67B,EAAcL,GAC3B,QAAaj7B,IAATP,EACA,OAGJ,IAAI87B,EAAsB97B,EAAK0O,KAAKA,GAEpC,QAA4BnO,IAAxBu7B,EAAmC,CAEnC,MAAMC,EAA4BvU,EAAgB9Y,EAAK4rB,eAEvD,QAAkC/5B,IAA9Bw7B,EACA,OAGJD,EAAsBh+B,OAAO0V,OAAO,CAAEwoB,UAAWD,EAA0B/7B,MAAQ+7B,GAEvF,MAAMC,EAAYF,EAAoBE,UAKtC,OAAOl+B,OAAO0V,OAAO1V,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAIxT,EAAKi8B,QAAS,CAAEjiB,SAFpD,CAACpF,EAAQolB,EAAOkC,sBAAwB3nB,EAAMyF,SAASgiB,EAAWpnB,KAESknB,IAGpG9B,EAAOmC,WAAa,IACpBnC,EAAOoC,YAAc,GACrBpC,EAAOqC,qBAAuB,EAC9BrC,EAAOzW,WAAaA,EAIpByW,EAAOjhB,iBAAmB,GAC1BihB,EAAOkC,oBAAsB,GAC7BlC,EAAOiB,qBAAuB,GAC9BjB,EAAOsC,qBAAuB,GAC9BtC,EAAOuC,oBAAsB,GAQ7BvC,EAAOwC,wBAA0B,EACjCxC,EAAOyC,cAAgBnd,EACvB0a,EAAO0C,uBA3UmB,CACtB,EAAG,CACCt7B,EAAG,CAAC,GACJC,EAAG,CAAC,IAER,EAAG,CACCD,EAAG,CAAC,EAAG,IAEX,EAAG,CACCA,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GACVs7B,iBAAkB,CAAC,EAAG,EAAG,IAE7B,EAAG,CACCv7B,EAAG,CAAC,EAAG,EAAG,EAAG,GACbC,EAAG,CAAC,EAAG,EAAG,EAAG,GACbu7B,sBAAuB,CAAC,EAAG,EAAG,EAAG,IAErC,EAAG,CACCx7B,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,GAChBC,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,GAChBw7B,sBAAuB,CAAC,EAAG,EAAG,EAAG,EAAG,GACpCC,2BAA4B,CAAC,EAAG,EAAG,EAAG,EAAG,IAE7C,EAAG,CACC17B,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACnBC,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACnB07B,qBAAsB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCC,0BAA2B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAgTnDhD,EAAOiD,QAAU,CAEbC,MAAOC,OAAOC,aAAa,MAE3BC,KAAMF,OAAOC,aAAa,MAE1BE,QAASH,OAAOC,aAAa,MAE7BG,SAAUJ,OAAOC,aAAa,MAE9B,eAAgBD,OAAOC,aAAa,KAEpCI,QAASL,OAAOC,aAAa,KAE7BK,OAAQN,OAAOC,aAAa,OAGhCpD,EAAO0D,WAtoBgB,CACnBn8B,EAAG,CAAE8I,KAAM,QACXszB,EAAG,CAAEtzB,KAAM,QACX7E,EAAG,CAAE6E,KAAM,YACXgV,EAAG,CAAEhV,KAAM,SACXvF,EAAG,CAAEuF,KAAM,SACXnM,EAAG,CAAEmM,KAAM,UAkoBf2vB,EAAO4D,QAAU,CACbC,UAAW,EACXC,WAAY,EACZpwB,WAAY6V,GAOhB,MAAMsY,EAAgB,CAClB,MAAO,CACHI,OAAQ,CACJ8B,MAAM,EACNC,YAAa,EACbC,MAAM,EACNC,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,uBAKfx2B,EAAG,CAECw2B,UAAW,4BAKf3c,EAAG,CAEC2c,UAAW,wBACXgC,YAAa,GAKjBL,EAAG,CAEC3B,UAAW,kBACX3U,MAAM,EACNnO,SAAU,MACVglB,WAAY,IAKhBp5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,yBAIvB,EAAG,CACCC,OAAQ,CACJ8B,MAAM,EACNC,YAAa,EACbC,MAAM,EACNC,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,iBAKfx2B,EAAG,CAECw2B,UAAW,wBAKf3c,EAAG,CAEC2c,UAAW,iBACXgC,aAAc,GAKlBL,EAAG,CAEC3B,UAAW,YACX3U,MAAM,EACNnO,SAAU,MACVglB,WAAY,IAKhBp5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,mBAIvB,EAAG,CACCC,OAAQ,CACJ8B,MAAM,EACNC,YAAa,EACbC,MAAM,EACNC,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,gBAKfx2B,EAAG,CAECw2B,UAAW,uBAKf3c,EAAG,CAEC2c,UAAW,gBACXgC,aAAc,GAKlBL,EAAG,CAEC3B,UAAW,WACX+B,MAAM,EACN1W,MAAM,EACNnO,SAAU,MACVglB,YAAa,IAKjBp5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,kBAIvB,EAAG,CACCC,OAAQ,CACJ8B,MAAM,EACNC,YAAa,EACbC,MAAM,EACNC,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,iBAKfx2B,EAAG,CAECw2B,UAAW,wBAKf3c,EAAG,CAEC2c,UAAW,kBAKf2B,EAAG,CAEC3B,UAAW,cACX+B,MAAM,EACN1W,MAAM,EACNnO,SAAU,MACVglB,YAAa,GACbC,WAAY,IACZC,WAAY,KAKhBt5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,mBAIvB,EAAG,CACCC,OAAQ,CACJ8B,MAAM,EACNC,YAAa,EACbC,MAAM,EACNI,WAAY,EACZC,oBAAqB,EACrBC,iBAAkB,YAClBC,mBAAoB,cACpBN,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,iBAKfx2B,EAAG,CAECw2B,UAAW,wBAKf3c,EAAG,CAEC2c,UAAW,kBAKf2B,EAAG,CAEC3B,UAAW,UACX+B,MAAM,EACNE,MAAM,EACN5W,MAAM,EACNnO,SAAU,MACVglB,YAAa,GACbC,WAAY,EACZC,WAAY,GAKhBt5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,mBAIvB,GAAI,CACAC,OAAQ,CACJoC,WAAY,EACZC,oBAAqB,EACrBP,MAAM,EACNC,YAAa,EACbC,MAAM,EACNM,iBAAkB,aAClBC,mBAAoB,eACpBN,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,iBAKfx2B,EAAG,CAECw2B,UAAW,wBAKf3c,EAAG,CAEC2c,UAAW,kBAKf2B,EAAG,CAEC3B,UAAW,WACX+B,MAAM,EACNE,MAAM,EACN5W,MAAM,EACNnO,SAAU,MACVglB,YAAa,GACbC,WAAY,EACZC,WAAY,GAKhBt5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,mBAIvB,GAAI,CACAC,OAAQ,CACJoC,WAAY,EACZC,oBAAqB,IACrBP,MAAM,EACNC,YAAa,EACbC,MAAM,EACNM,iBAAkB,aAClBC,mBAAoB,eACpBN,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,iBAKfx2B,EAAG,CAECw2B,UAAW,wBAKf3c,EAAG,CAEC2c,UAAW,kBAKf2B,EAAG,CAEC3B,UAAW,WACX+B,MAAM,EACNE,MAAM,EACN5W,MAAM,EACNnO,SAAU,MACVglB,YAAa,IACbC,WAAY,EACZC,WAAY,GAKhBt5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,mBAIvB,GAAI,CACAC,OAAQ,CACJoC,WAAY,EACZC,oBAAqB,GACrBP,MAAM,EACNC,YAAa,EACbC,MAAM,EACNM,iBAAkB,aAClBC,mBAAoB,eACpBN,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,iBAKfx2B,EAAG,CAECw2B,UAAW,wBAKf3c,EAAG,CAEC2c,UAAW,kBAKf2B,EAAG,CAEC3B,UAAW,WACX+B,MAAM,EACNE,MAAM,EACN5W,MAAM,EACNnO,SAAU,MACVglB,YAAa,IACbC,WAAY,EACZC,WAAY,GAKhBt5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,mBAIvB,IAAK,CACDC,OAAQ,CACJoC,WAAY,EACZC,oBAAqB,KACrBP,MAAM,EACNC,YAAa,EACbC,MAAM,EACNM,iBAAkB,cAClBC,mBAAoB,gBACpBN,WAAY,EACZC,WAAY,EACZC,WAAY,GAEhB1vB,KAAM,CACFnN,EAAG,CAECy6B,UAAW,iBAKfx2B,EAAG,CAECw2B,UAAW,wBAKf3c,EAAG,CAEC2c,UAAW,kBAKf2B,EAAG,CAEC3B,UAAW,YACX+B,MAAM,EACNE,MAAM,EACN5W,MAAM,EACNnO,SAAU,MACVglB,YAAa,IACbC,WAAY,EACZC,WAAY,GAKhBt5B,EAAG,CAGCkV,SAAU,IAAMggB,EAAOsC,qBACvBpjB,SAAU,OAEdhb,EAAG,CAEC89B,UAAW,oBC9wC3B,SAASyC,KAAK/9B,GACNg+B,EAAWC,OACXn+B,EAAI,sBAAuBE,GAS5B,MAAMg+B,UAAmB1lB,EAM5Bla,YAAY4P,GACRxO,QACAu+B,EAAE,mBAAoB/vB,GACtBjR,KAAKiR,KAAOA,EACZjR,KAAKyb,SAAWF,EAASG,SAASC,KAClC3b,KAAKmhC,eAAiB,CAElBC,WAAY,GAEZC,iBAAkB,EAClBC,kBAAmB,GAEvBthC,KAAK+e,WAAawd,EAAOgF,gBAAgBvhC,KAAKiR,MAC9CrO,EAAQ5C,KAAK+e,WAAY,gBAAiB,4BAA4B9N,KAEtEjR,KAAKwhC,YAAa,EAClBxhC,KAAKuY,QAGEjX,sBACP,OAAOG,EAASw/B,WAGpBx8B,cAAcod,EAAa4f,GAEvB,IAAK5f,GAAsC,IAAvBA,EAAY/c,OAC5B,OACJ,MAAM48B,EAAYnF,EAAOoF,mBACnBC,EAA4BF,EAAUtxB,aAAa,wCACnDyxB,EAAYJ,EAAMK,WAAaF,EAC/BG,EAAoBL,EAAUtxB,aAAa,gCAC3C4xB,EAAoBN,EAAUtxB,aAAa,0BAC3C6xB,EAAU,GAChB,IAAIC,EACAC,EAAS,EAEb,IAAK,IAAIz6B,EAAI,EAAGA,EAAIma,EAAY/c,SAAU4C,EAAG,CACzC,MAAM4e,EAAMzE,EAAYna,GAClBgV,EAAO4J,EAAI7J,UACXvC,EAAQwC,EAAKoB,WACb1M,EAAQkV,EAAIxJ,aACZslB,EAAQ1lB,EAAK2lB,cAAcjxB,GACjC,GAAIsL,IAASwlB,EAAU,CAEnB,IAAK,IAAIp+B,EAAI,EAAGA,EAAI4Y,EAAKpK,KAAKxN,SAAUhB,EACpCq+B,EAASh+B,KAAK4E,IAAI2T,EAAK4lB,yBAA0BH,GAErDD,EAAWxlB,EAEf,GAAIxC,EAAO,CACP,MAAMqoB,EAAYroB,EAAMsoB,yBAClB36B,EAAIqS,EAAMuoB,YAAYL,EAAMl/B,MAC5Bw/B,EAAUv+B,KAAKw+B,MAAO96B,EAAI06B,EAAa,GAAK,EAClDN,EAAQpqB,KAAK,CAAEhQ,EAAAA,EAAG3E,KAAMw/B,EAAS19B,MAAOm9B,EAAQ7b,IAAAA,EAAKic,UAAAA,SAGrDN,EAAQpqB,KAAK,CAAE3U,KAAMk/B,EAAMl/B,KAAM8B,MAAOm9B,EAAQ7b,IAAAA,IAIxD2b,EAAQW,MAAK,CAACj/B,EAAGC,IAAMA,EAAEV,KAAOS,EAAET,OAGlC,MAAM2/B,EAAW,GAGjB,IACIC,EADAC,EAAW,EAGf,IAAK,IAAIr7B,EAAI,EAAGA,EAAIu6B,EAAQn9B,OAAQ4C,IAAK,CACrC,MAAM4e,EAAM2b,EAAQv6B,QAEC5E,IAAjBggC,GAA8BA,IAAiBxc,EAAIpjB,MACnD2/B,EAAShrB,KAAK,CACV3U,KAAMojB,EAAIpjB,KACV8/B,UAAU,EACVC,cAAc,EACdC,OAAQ,EACRz5B,MAAO,EACP05B,OAAQ,IAMK,MAAjB7c,EAAIA,IAAIrV,MAAiC,OAAjBqV,EAAIA,IAAIrV,OAChC4xB,EAASA,EAAS/9B,OAAS,GAAGk+B,UAAW,GAGxB,OAAjB1c,EAAIA,IAAIrV,OACR4xB,EAASA,EAAS/9B,OAAS,GAAGm+B,cAAe,GAGjDJ,EAASA,EAAS/9B,OAAS,GAAGo+B,SAI9BL,EAASA,EAAS/9B,OAAS,GAAG2E,OAAS6c,EAAIA,IAAI/J,WAAawlB,EAE5DgB,EAAWzc,EAAIthB,MAAQ+9B,EAAWzc,EAAIthB,MAAQ+9B,EAC9CD,EAAexc,EAAIpjB,KAmBvB,IAAIkgC,EAAe,EAEnB,IAAK,IAAI17B,EAAI,EAAGA,EAAIm7B,EAAS/9B,OAAQ4C,IAAK,CACtC,IAAI27B,GAAqB,EACzB,MAAMC,EAAa57B,EACnB,IAAI67B,EAAW77B,EACf,KAAO67B,EAAW,EAAIV,EAAS/9B,SAAWu+B,GAElCrjC,KAAKwjC,eAAeX,EAASU,GAAWV,EAASU,EAAW,IAE5DA,IAGAF,GAAqB,EAI7B,MAAMI,EAAgBryB,GAAUyxB,EAASS,EAAalyB,GAChDsyB,EAAiBC,GAAYA,EAAQpxB,IAAIkxB,GACzCG,EAAiB,CAACC,EAAQC,KAC5B,MAAOngC,EAAGC,GAAK8/B,EAAc,CAACG,EAAQC,IAASvxB,KAAKwxB,GAASA,EAAK7gC,OAClE,OAAOS,EAAIC,GAETogC,EAAe,IAAIC,IAAeA,EAAW1xB,IAAImxB,GAAeQ,OAAM,EAAEC,EAAOC,MAAYpkC,KAAKwjC,eAAeW,EAAOC,KAEtHC,EAAcd,EAAWD,EAAa,EAE5C,IA+BIgB,EACAnB,EAhCAoB,EAAUvkC,KAAKwjC,eAAeX,EAASS,GAAaT,EAASU,IAAa,IAAM,IACpF,OAAQc,GACJ,KAAK,EACe,MAAZE,GAA4C,KAAzBX,EAAe,EAAG,IAAuC,KAAzBA,EAAe,EAAG,KACrEW,EAAU,oBAEd,MACJ,KAAK,EACGP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,MACzBO,EAAU,yBAEd,MACJ,KAAK,EACe,MAAZA,GAAmBP,EAAa,CAAC,EAAG,MACpCO,EAAU,wBACNP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,MACzBO,EAAU,+BAGlB,MACJ,KAAK,EACGP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,MACjCO,EAAU,wBAEVP,EAAa,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,MACzCO,EAAU,6BAUtB,GAAIF,GAAe,EAAG,CAElB,IAAIG,EAAgB,EAChBC,GAAoB,EACxB,MAA6B,IAAtBA,GAA4B,CAC/BA,GAAoB,EACpB,IAAK,IAAIvhC,EAAO,EAAGA,EAAOshC,EAAgB3B,EAAS/9B,OAAQ5B,IACvD,GAAIlD,KAAKwjC,eAAeX,EAAS3/B,GAAO2/B,EAAS3/B,EAAOshC,IAAiB,CACrEC,GAAoB,EACpBD,IACA,OAKZ,IAAKF,EAAc58B,EAAG48B,GAAef,EAAUe,IAC3CnB,GAAWmB,EAAc58B,GAAK88B,EAAiB,EAC/C3B,EAASyB,GAAanB,OAASA,EAC/BC,EAAeA,EAAeD,EAASC,EAAeD,OAM1D,IAAKmB,EAAc58B,EAAG48B,GAAef,EAAUe,IAC3CnB,EAAS5G,EAAO0C,uBAAuBoF,GAAaE,GAASD,EAAc58B,GAC3Em7B,EAASyB,GAAanB,OAASA,EAC/BC,EAAeA,EAAeD,EAASC,EAAeD,EAK9Dz7B,EAAI67B,EAcR,MAAMmB,EAAe,GACfC,EAAiB,GACvB,IAAK,IAAIj9B,EAAI,EAAGA,GAAK07B,EAAc17B,IAC/Bg9B,EAAah9B,GAAK,EAClBi9B,EAAej9B,GAAK,EAExBg9B,EAAa,GAAK3B,EAAWlB,EAC7B8C,EAAe,GAAK5B,EAAWlB,EAG/BgB,EAAS3kB,SAAShb,IACVA,EAAKuG,MAAQi7B,EAAaxhC,EAAKigC,UAC/BuB,EAAaxhC,EAAKigC,QAAUjgC,EAAKuG,UAEzC,IAAK,IAAI/B,EAAI,EAAGA,EAAIg9B,EAAa5/B,OAAQ4C,IAErCi9B,EAAej9B,GAAKg9B,EAAah9B,GAAKi9B,EAAej9B,EAAI,GAE7D,MAAMk9B,EAAaD,EAAeA,EAAe7/B,OAAS,GAE1D,IAAI+/B,EAAW,EACfhC,EAAS3kB,SAAShb,IACd,IAAImR,EAAY,EAChB,MAAMywB,EAAgBD,EAAW3hC,EAAKggC,OAEtC,KAAe2B,EAAWC,EAAeD,IAAY,CACjD,MAAMrqB,EAASmqB,EAAezhC,EAAKigC,OAAS,GAAK9uB,EACjD4tB,EAAQ4C,GAAUve,IAAInM,UAAUK,GAGhCnG,GAAa4tB,EAAQ4C,GAAUve,IAAI/J,WAAawlB,EAChDf,EAAE,0BAA2B99B,EAAKA,KAAM2hC,EAAUrqB,OAI1DinB,EAAMK,YAAc8C,EAAa5C,EAGrCv9B,sBAAsB0/B,EAAOC,GACzB,IAAIW,EAAYX,EAAMlhC,KAAOihC,EAAMjhC,KAC/B8hC,EAAoB,EAEpBD,EAAY,GAEZC,EAAoBZ,EAAMpB,UAAYoB,EAAMnB,aAAe,IAAM,EAC7DkB,EAAMlB,eACN8B,GAAa,MAIjBC,EAAoBb,EAAMnB,UAAYmB,EAAMlB,aAAe,IAAM,EAC7DmB,EAAMnB,eACN8B,GAAa,KAErB,MAAME,EAAY9gC,KAAK6C,IAAI+9B,GAAaC,EAExC,OADAhE,EAAE,8BAA+BmD,EAAMjhC,KAAMkhC,EAAMlhC,KAAM+hC,GAClDA,EAOXxgC,wBAAwBygC,EAAQ5f,GAC5B,MAAM6f,EAAgB,GAChBC,EAAc,GAEpBF,EAAOhnB,SAASmnB,IACZ,MAAMC,EAAe,IAAIjhC,EAAS,EAAG,GACpBghC,EAAME,eACdrnB,SAAStZ,IACd,GAAIA,EAAE4gC,oBACF,OACJ,MAAMC,EAAkBL,EAAYE,EAAapgC,SAC5CugC,EAKDA,EAAgB5tB,KAAKjT,IAJrBugC,EAActtB,KAAKytB,EAAapgC,SAChCkgC,EAAYE,EAAapgC,SAAW,CAACN,IAKzC0gC,EAAa//B,IAAIX,EAAE8gC,kBAG3B,MAAMC,EAAQ,IAAIrnB,EAEbgH,IACDA,EAAe,KAEnB,MAAMsgB,EAAcD,EAAMtgB,eAAeC,GACnCK,EAAW,GACjBwf,EAAcjnB,SAAS2nB,IACnB,MAAMC,EAAYV,EAAYS,GAGxBE,EAAkB,GAClBC,EAAephC,IAEjB,IAAK7C,EAAY6C,IAAMA,EAAEqhC,UAAYrhC,EAAE4gC,oBACnC,OAGJ,MAAMU,EAAYthC,EAClBshC,EAAU5zB,KAAK4L,SAAQ,CAAC4F,EAAWqiB,KAC/B,MAAMhmC,EAAMwlC,EAAMliB,aAAaK,EAAUnc,MAAM,KAAK,IAC9CgY,EAASmE,EAAUnc,MAAM,KAAK,GAE9By+B,EAAmBjmC,EAAI4e,YAAc,IACrCsnB,EAAQlmC,EAAIX,KAAO4mC,EAGpBzgB,EAASxlB,EAAIX,KAAOmgB,KACrBgG,EAASxlB,EAAIX,KAAOmgB,GAAUimB,EAAYzlC,EAAIX,OAClD,MAAM8mC,EAAiB3gB,EAASxlB,EAAIX,KAAOmgB,KAAY0mB,EAGjDE,EAAqBR,EAAgBS,QAAQ1iB,IAAc,EAQjE,GANAoiB,EAAUO,eAAevoB,SAAQ,CAACwoB,EAAUt1B,KZjV3BnQ,EYkVIylC,EZlVYjlC,EAASw/B,aYkVRyF,EAASz1B,MAAQm1B,GAAoBM,EAAS7pB,YAAcspB,GACtFD,EAAUO,eAAeE,OAAOv1B,EAAO,OAI1Ck1B,GAAmBA,GAAkBC,EAAqB,CAG3D5gB,EAASxlB,EAAIX,KAAOmgB,GAAU0mB,EAE9B,MAAMtnB,EAAa,IAAIkiB,EAAWmF,GAElCF,EAAUU,YAAY7nB,EAAYonB,GAElCJ,EAAgBluB,KAAKiM,OAI7BoiB,EAAUO,eAAevoB,SAASwoB,IZ/VTzlC,EYgWAylC,EZhWgBjlC,EAASolC,iBYiW1CH,EAASI,gBAAgB5oB,QAAQ8nB,OAI7CF,EAAU5nB,QAAQ8nB,MAG1BztB,QACI,MAAMwuB,EAAY/mC,KAAKmhC,eAAeC,WACtCphC,KAAKwY,MAAQ,IAAI1B,EAAM9W,KAAK+e,WAAWxc,KAAMwkC,GAC7C/mC,KAAKwY,MAAM+B,WAAW,GAClBva,KAAKwhC,aACLxhC,KAAKgnC,UAAY,IAAIlwB,EAAMylB,EAAOgF,gBAAgB,KAAKh/B,KAAMwkC,GAC7D/mC,KAAKinC,WAAa,IAAInwB,EAAMylB,EAAOgF,gBAAgB,KAAKh/B,KAAMwkC,GAC9D/mC,KAAKgnC,UAAUzsB,WAAW,GAC1Bva,KAAKinC,WAAW1sB,WAAW,IAInCgC,WACI,GAAIvc,KAAKwhC,WAAY,CACjB,MAAMwF,EAAYpkC,EAAQ5C,KAAKgnC,WACzBC,EAAarkC,EAAQ5C,KAAKinC,YAC1BC,EAAaF,EAAUl3B,aAAarG,MACtCw9B,EAAWn3B,aAAarG,MACxBzJ,KAAKmhC,eAAeE,iBACpBrhC,KAAKmhC,eAAeG,kBACxB,OAAOthC,KAAKwY,MAAM1I,aAAarG,MAAQy9B,EAGvC,OAAOlnC,KAAKwY,MAAM1I,aAAarG,MAIvCmT,QAAQF,GAQJ,OAPA9Z,EAAQ8Z,EAAM,gBAAiB,mBAAmBA,KAClD1c,KAAK0c,KAAOA,EAER/a,EAAY+a,KACZ1c,KAAKmhC,eAAeC,WAAa,GACjCphC,KAAKuY,SAEFvY,KAGXmnC,kBAII,OAHAnnC,KAAKwhC,YAAa,EAClBxhC,KAAKmhC,eAAeC,WAAa,GACjCphC,KAAKuY,QACEvY,KAGX2U,OACI,MAAM,KAAE1D,EAAI,SAAEwK,EAAQ,MAAErK,EAAK,WAAEowB,EAAU,QAAEpqB,EAAO,QAAEC,EAAO,MAAEmB,EAAO2oB,gBAAgB,iBAAEE,EAAgB,kBAAEC,IAAyBthC,KAC3H8Y,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cAEL,MAAMoyB,EAAQ1qB,EAAK2qB,mBAAmB5rB,EAAUrK,GAChD,IAAIk2B,EAAOF,EAAMvkC,EAAIuU,EACrB,MAAMmwB,EAAOH,EAAMv/B,EAAIwP,EAEvB,GADA2pB,EAAE,cAAe/vB,EAAMq2B,EAAMC,GACxB/F,EAGA,CACD,MAAMwF,EAAYpkC,EAAQ5C,KAAKgnC,WACzBC,EAAarkC,EAAQ5C,KAAKinC,YAEhCA,EAAWrsB,OAAO9B,EAAKwuB,EAAMC,GAC7BD,GAAQL,EAAWn3B,aAAarG,MAChC69B,GAAQhG,EACRgG,GAAQtnC,KAAK+e,WAAWiM,4BACxBxS,EAAMoC,OAAO9B,EAAKwuB,EAAMC,GACxBD,GAAQ9uB,EAAM1I,aAAarG,MAC3B69B,GAAQjG,EACR2F,EAAUpsB,OAAO9B,EAAKwuB,EAAMC,QAb5B/uB,EAAMoC,OAAO9B,EAAKwuB,EAAMC,IAkBpCtG,EAAWC,OAAQ,EC9cZ,MAAMsG,UAAaz0B,EACtB1R,YAAY6W,GACRzV,QACAzC,KAAKynC,iBAAmB,EACxBznC,KAAK0nC,mBAAqB,EAC1B1nC,KAAK2nC,sBAAwB,EAC7B3nC,KAAK4nC,wBAA0B,EAE/B5nC,KAAK6nC,SAAW3vB,MAAAA,OAAyC,EAASA,EAAQ2vB,UAAY,EACtF7nC,KAAK8nC,OAAS5vB,MAAAA,OAAyC,EAASA,EAAQ4vB,QAAU,EAElF9nC,KAAK+nC,OAAS7vB,MAAAA,OAAyC,EAASA,EAAQ6vB,QAAU,EAClF/nC,KAAKgoC,UAAY9vB,MAAAA,OAAyC,EAASA,EAAQ8vB,WAAa,EAExFhoC,KAAKioC,gBAAkB/vB,MAAAA,OAAyC,EAASA,EAAQ+vB,iBAAmB,EAEpGjoC,KAAKkoC,gBAAkBhwB,MAAAA,OAAyC,EAASA,EAAQgwB,iBAAmB,EAEpGloC,KAAKmoC,MAAQjwB,MAAAA,OAAyC,EAASA,EAAQiwB,QAAS,EAChFnoC,KAAKooC,WAAalwB,MAAAA,OAAyC,EAASA,EAAQkwB,aAAc,EAC1FpoC,KAAKqoC,eAAiBnwB,MAAAA,OAAyC,EAASA,EAAQmwB,gBAAkB,EAGlGroC,KAAKsoC,uBAAyB,EAC9BtoC,KAAKsY,WAAWJ,GAET5W,sBACP,OAAOG,EAAS+lC,KAGTe,gBACP,OAAO,EAEAC,kBACP,OAAQ,EAGDC,mBACP,OAAOlM,EAAOmC,WAEPgK,oBACP,OAAOnM,EAAOoC,YAElBrmB,WAAWJ,GAEPlY,KAAKynC,kBAAoBvvB,MAAAA,OAAyC,EAASA,EAAQuvB,mBAAqB,EACxGznC,KAAK0nC,oBAAsBxvB,MAAAA,OAAyC,EAASA,EAAQwvB,qBAAuB,EAC5G1nC,KAAK2nC,uBAAyBzvB,MAAAA,OAAyC,EAASA,EAAQyvB,wBAA0B,EAClH3nC,KAAK4nC,yBAA2B1vB,MAAAA,OAAyC,EAASA,EAAQ0vB,0BAA4B,EAG1He,mBAAmBd,EAASC,GAGxB,OAFA9nC,KAAK6nC,QAAUA,EACf7nC,KAAK8nC,MAAQA,EACN9nC,KAGX4oC,aAAarkB,GACTvkB,KAAKkoC,eAAiB3jB,EAG1BskB,aAAaC,GACT9oC,KAAKioC,eAAiBa,EAE1BC,eACI,OAAO/oC,KAAKioC,eAGhBe,WAAWjB,EAAOC,GACdhoC,KAAK+nC,MAAQA,EACb/nC,KAAKgoC,SAAWA,EAGpBiB,YACI,MAAMC,EAAWlpC,KAAKkoC,iBAAmBV,EAAKe,GAAKvoC,KAAKynC,iBAAmBznC,KAAK0nC,mBAEhF,OADwB1nC,KAAKgoC,SAAWhoC,KAAK+nC,OAASP,EAAKkB,OAASQ,EAAWlpC,KAAKioC,iBAC3DjoC,KAAKkoC,eAElC/yB,iBACI,MAAM,IAAI9S,EAAa,iBAAkB,qCAI7C8mC,aACI,MAAMC,EAAWppC,KAAKkoC,iBAAmBV,EAAKe,GACxCc,EAAK,CAACrpC,KAAK+nC,MAAO/nC,KAAKgoC,UACvBsB,EAAa9B,EAAKkB,OAAS1oC,KAAKioC,eAChCsB,GAAsBH,EAAWjlC,KAAKqlC,IAAMrlC,KAAK4E,QAAQsgC,GACzDI,GAAsBL,EAAWjlC,KAAK4E,IAAM5E,KAAKqlC,QAAQH,GAE/D,MAAO,CAAEK,KADQH,EAAqBD,GAActpC,KAAKkoC,eAChCyB,MAAOF,GAEpCG,cAAcC,GAEV,OADA7pC,KAAKmoC,MAAQ0B,EACN7pC,KAEX8pC,WAAW1B,EAAWC,GAGlB,OAFAroC,KAAKooC,UAAYA,EACjBpoC,KAAKqoC,cAAgBA,EACdroC,KAEX+pC,sBACI/pC,KAAKsoC,uBAAyB/L,EAAOoF,mBAAmBvxB,aAAa,gCAAiC,GAE1G45B,sBACIhqC,KAAKsoC,wBAA0Bd,EAAKiB,MAAQ,EAGhD9zB,OAEI,GADA3U,KAAKgV,cACDhV,KAAKmoC,KACL,OACJ,MAAMrvB,EAAM9Y,KAAK0U,eACjB,IAAIu1B,EACAC,EACJ,MAAMhC,EAAiBloC,KAAKkoC,eAC5B,IAAIiC,EAAgB,EAChBjC,IAAmBV,EAAKgB,MAExByB,EAASjqC,KAAK6nC,QACdqC,EAASlqC,KAAK+nC,MAAQ/nC,KAAK0nC,mBAC3ByC,EAAgBnqC,KAAK4nC,0BAIrBqC,EAASjqC,KAAK8nC,MACdoC,EAASlqC,KAAKgoC,SAAWhoC,KAAKynC,iBAC9B0C,EAAgBnqC,KAAK2nC,uBAEzB,MAAM2B,EAAatpC,KAAKipC,aArIhC,YAAchmC,GACNukC,EAAKtG,OACLn+B,EAAI,gBAAiBE,GAoIrB,CAAE,oBAAqB,UAAWjD,KAAK+nC,MAAO,aAAc/nC,KAAKgoC,UAEjE,MAAMoC,EAAiBpqC,KAAKooC,UAAYkB,EAAatpC,KAAKqoC,cAAgBroC,KAAKkoC,eAAiB,EAEhGpvB,EAAIlF,OACJ5T,KAAK0T,WAAWoF,GAChBA,EAAIQ,YACJR,EAAIxE,aAAakzB,EAAKiB,OACtB3vB,EAAIS,OAAO0wB,EAAQC,EAASE,EAAiBD,GAC7CrxB,EAAIU,OAAOywB,EAAQC,EAASZ,EAAatpC,KAAKsoC,uBAAyBJ,GACvEpvB,EAAIikB,SACJ/8B,KAAKuU,aAAauE,GAClBA,EAAItE,WCvJZ,SAAS,KAAKvR,GACNonC,GAAcnJ,OACdn+B,EAAI,yBAA0BE,GDyJtCukC,EAAKtG,OAAQ,EC5Ib,MAAMoJ,GAAiB,GAKjBh5B,GAAW,GACV,MAAM+4B,GAKThpC,YAAYkpC,GAERvqC,KAAK0N,OAAS,GAEd1N,KAAKsN,KAAO,GAEZtN,KAAKiQ,WAAa,IAgBlBjQ,KAAKmQ,OAAS,GACdnQ,KAAKwqC,QAAS,EACdxqC,KAAKyqC,YAAa,EAClBzqC,KAAK0qC,QAAS,EACd1qC,KAAK2qC,MAAO,EACZ3qC,KAAK4qC,kBAAoB,EACzB5qC,KAAK6qC,gBAAkB,EACvB7qC,KAAK8qC,aAAe,IAEpB9qC,KAAK+qC,SAAW,GAChB/qC,KAAKgrC,aAAaT,GAKtB9lC,yBACI,MAAMwmC,EAAkB,GACxB,IAAK,MAAMh9B,KAAcqD,GAAU,CAC/B,MAAMi5B,EAAgBj5B,GAASrD,GAC/Bg9B,EAAgBpzB,KAAKxX,OAAO0V,OAAO,GAAIw0B,IAE3C,OAAOU,EASXxmC,cAAcymC,EAAgB,IAC1B,EAAE,WAAYA,GACTA,EAAcx9B,SACfw9B,EAAcx9B,OAAShB,EAAKiB,YAKhC,MAAMw9B,EAAa,GAGbC,EAAoBF,EAAcx9B,OAAO/F,MAAM,WACrD,IAAK,MAAM0jC,KAAmBD,EAAmB,CAC7C,IAAK,MAAMn9B,KAAcqD,GAGjBrD,EAAWq9B,WAAWD,IACtBF,EAAWtzB,KAAKvG,GAASrD,IAGjC,GAAIk9B,EAAWrmC,OAAS,EACpB,MAGR,IAAIymC,EACJ,GAA0B,IAAtBJ,EAAWrmC,OAEXymC,EAAY,IAAIlB,GAAchqC,OAAOmrC,OAAOl6B,IAAU,SAErD,GAA0B,IAAtB65B,EAAWrmC,OAChBymC,EAAY,IAAIlB,GAAcc,EAAW,QAExC,CACD,MAAMR,EAAOj+B,EAAK++B,OAAOP,EAAc39B,QACjCm9B,EAASh+B,EAAKg/B,SAASR,EAAc19B,OACrCm+B,EAAeR,EAAWS,MAAMrkC,GAAMA,EAAEojC,OAASA,GAAQpjC,EAAEmjC,SAAWA,IAC5E,GAAIiB,EACAJ,EAAY,IAAIlB,GAAcsB,OAE7B,CACD,MAAME,EAAeV,EAAWS,MAAMrkC,GAAMA,EAAEmjC,SAAWA,GAAUnjC,EAAEojC,OAASA,IAE1EY,EAAY,IAAIlB,GADhBwB,GAI8BV,EAAW,KAIrD,MAAMt+B,EAAWq+B,EAAc59B,KAC/B,QAAwB,IAAbT,EAA0B,CACjC,MAAMi/B,EAAep/B,EAAK4J,wBAAwBzJ,GAClD0+B,EAAUp1B,YAAY21B,GAE1B,OAAOP,EAMX9mC,eAAewJ,GACX,OAAOqD,GAASrD,GAUpBxJ,oBAAoBoO,EAAMk5B,GAAY,GAClC,EAAE,iBAAkBl5B,EAAMk5B,GAC1B,MAAM99B,EAAa4E,EAAKnF,aAEH5K,IADAwO,GAASrD,IACI89B,KAC9Bz6B,GAASrD,GAAc4E,GAG/Bm4B,aAAatO,GACLA,EAAOhvB,SACP1N,KAAK0N,OAASgvB,EAAOhvB,QACrBgvB,EAAOzsB,aACPjQ,KAAKiQ,WAAaysB,EAAOzsB,YACzBysB,EAAOvsB,SACPnQ,KAAKmQ,OAASusB,EAAOvsB,QACrBusB,EAAO8N,SACPxqC,KAAKwqC,OAAS9N,EAAO8N,QACrB9N,EAAO+N,aACPzqC,KAAKyqC,WAAa/N,EAAO+N,YACzB/N,EAAOgO,SACP1qC,KAAK0qC,OAAShO,EAAOgO,QACrBhO,EAAOiO,OACP3qC,KAAK2qC,KAAOjO,EAAOiO,MACnBjO,EAAOoO,eACP9qC,KAAK8qC,aAAepO,EAAOoO,cAC3BpO,EAAOkO,oBACP5qC,KAAK4qC,kBAAoBlO,EAAOkO,mBAChClO,EAAOmO,kBACP7qC,KAAK6qC,gBAAkBnO,EAAOmO,iBAClC7qC,KAAKgsC,iBAGTA,iBACI,MAAMt+B,EAAS1N,KAAK0N,OAAON,QAAQ,OAAQ,KACrCE,EAAOtN,KAAKsN,KACZC,EAASvN,KAAK2qC,KAAOr/B,EAAW2gC,KAAO3gC,EAAWsC,OAClDJ,EAAQxN,KAAK0qC,OAASn/B,EAAUoD,OAASpD,EAAUqC,OAEzD5N,KAAK+qC,SAAW,GAAGr9B,KAAUJ,KAAQC,KAAUC,IAMnD0+B,gBAAgBC,GACZ,OAAInsC,KAAKmQ,OAAOg8B,GACLnsC,KAAKmQ,OAAOg8B,GAGZnsC,KAAKmQ,OAAOnQ,KAAK8qC,cAG5BsB,gBAEA,OADgBpsC,KAAKksC,gBAAgBlsC,KAAK8qC,cAC1BlyB,GAAK5Y,KAAKiQ,WAAcjQ,KAAKuW,iBAQjD81B,yBAAyBphC,GACrB,IAAI8B,EACJ,MAAM0C,EAAUzP,KAAKksC,gBAAgBjhC,GACrC,GAAKwE,EAIA,CAED,OADqD,QAA/B1C,EAAK0C,EAAQ68B,oBAAiC,IAAPv/B,EAAgBA,EAAK,GAC5D/M,KAAKiQ,WAJ3B,MAAO,IAUfs8B,oBAAoBtoC,GAChB,MAAM9D,EAAMH,KAAK+qC,SAGjB,IAAIyB,EAAelC,GAAenqC,QACb2C,IAAjB0pC,IACAA,EAAe,GACflC,GAAenqC,GAAOqsC,GAE1B,IAAI/iC,EAAQ+iC,EAAavoC,GACzB,QAAcnB,IAAV2G,EAAqB,CACrBA,EAAQ,EACR,IAAK,IAAI/B,EAAI,EAAGA,EAAIzD,EAAKa,SAAU4C,EAC/B+B,GAASzJ,KAAKqsC,yBAAyBpoC,EAAKyD,IAEhD8kC,EAAavoC,GAAQwF,EAEzB,OAAOA,EAGXgjC,oBAAoBxoC,GAChB,OAAOjE,KAAKusC,oBAAoBtoC,GAAQjE,KAAKuW,iBAKjDJ,YAAY7I,GAIR,OAHAtN,KAAKsN,KAAOA,EAEZtN,KAAKgsC,iBACEhsC,KAGPuW,uBACA,OAAOvW,KAAKsN,KAAOZ,EAAKM,cAAcC,GAE1C+C,gBACI,OAAOhQ,KAAKiQ,YC9Pb,IAAIy8B,GAOAC,GD2PXtC,GAAcnJ,OAAQ,ECjQtB,SAAWwL,GACPA,EAA4BA,EAAkC,KAAI,GAAK,OACvEA,EAA4BA,EAAoC,OAAI,GAAK,SACzEA,EAA4BA,EAAmC,MAAI,GAAK,QACxEA,EAA4BA,EAAyC,YAAI,GAAK,cAJlF,CAKGA,KAAgCA,GAA8B,KAEjE,SAAWC,GACPA,EAA0BA,EAA+B,IAAI,GAAK,MAClEA,EAA0BA,EAAkC,OAAI,GAAK,SACrEA,EAA0BA,EAAkC,OAAI,GAAK,SACrEA,EAA0BA,EAAuC,YAAI,GAAK,cAJ9E,CAKGA,KAA8BA,GAA4B,KAOtD,MAAMC,WAAmBrxB,EAM5Bla,YAAY4C,GACRxB,QACAzC,KAAKiE,KAAOA,EACZjE,KAAK6sC,wBAA0BH,GAA4B3wB,OAG3D/b,KAAK8sC,sBAAwBH,GAA0BI,IACvD/sC,KAAKkW,YAELlW,KAAKwc,SAAS+f,EAAOkB,UAAUx5B,IAGxB3C,sBACP,OAAOG,EAASmrC,WAGpBnoC,cAAcuoC,EAAavL,GACvB,IAAKuL,GAAsC,IAAvBA,EAAYloC,OAC5B,OAAO,EACX,IAAI2E,EAAQ,EACZ,IAAK,IAAI/B,EAAI,EAAGA,EAAIslC,EAAYloC,SAAU4C,EAAG,CACzC,MAAMulC,EAAaD,EAAYtlC,GACzBwlC,EAAgB7C,GAAc8C,OAAOF,EAAWz3B,UAGtD,IAAI43B,GADe,EAAIF,EAAcd,WAAa7P,EAAOuC,oBAEzD,MAAMpiB,EAAOuwB,EAAWtwB,oBAClBzC,EAAQwC,EAAKoB,WACbuvB,EAAgB3wB,EAAK4wB,UAAY5wB,EAAK6wB,mBAAqB/F,EAAKe,GACtE,IAAIe,EAAa,EACbkE,EAAQ,EACZ,GAAIrrC,EAAUua,GACV,GAAIA,EAAKykB,eAAesM,UAAW,CAC/B,MAAMnN,EAAO5jB,EAAKgxB,UACdpN,IACAgJ,EAAanlC,KAAK6C,IAAIs5B,EAAK2I,aAAe1M,EAAOuC,0BAIrDwK,EAAa,OAGhB,GAAIrnC,EAAgBya,GAAO,CAC5B,MAAM4jB,EAAO5jB,EAAKgxB,UACdpN,GAA+B,MAAvB5jB,EAAKixB,gBACbrE,EAAanlC,KAAK6C,IAAIs5B,EAAK2I,aAAe1M,EAAOuC,qBAGrD5kB,IACAszB,EAAQtzB,EAAM0zB,eAGlB,MAAMnQ,EAAYyP,EAAcT,oBAAoBQ,EAAWhpC,MAE/D,GADAwF,EAAQtF,KAAK4E,IAAIU,EAAOg0B,GACpBwP,EAAWH,wBAA0B9sC,KAAK6tC,gBAAgBd,IAAK,CAC/D,IAAIe,EAAWpxB,EAAKqxB,eAAc,GAC9B5rC,EAAUua,KACVoxB,EAAWN,GAAS9wB,EAAKsxB,cAAgB,KAEzCX,IAAkB7F,EAAKe,KACvBuF,GAAYxE,GAEDwE,EAAWrM,EAAMwM,cAAgB,GACnCT,GACTP,EAAW3vB,YAAYkwB,EAAQM,GAC/BV,GAAuBI,EAAQM,EAC/BrM,EAAMwM,cAAgBb,IAGtBH,EAAW3vB,YAAYmkB,EAAMwM,eAC7BxM,EAAMwM,eAAiBb,QAG1B,GAAIH,EAAWH,wBAA0B9sC,KAAK6tC,gBAAgBK,OAAQ,CACvE,IAAIJ,EAAWN,EAAQ9wB,EAAKqxB,gBACxB5rC,EAAUua,KACVoxB,EAAWpxB,EAAKyxB,iBAAmB,GAEnCd,IAAkB7F,EAAKgB,OACvBsF,GAAYxE,GAEhB,MAAM8E,EAAYN,EAAWrM,EAAMjmB,UAAY,EAC3C4yB,EAAYZ,GACZP,EAAW3vB,YAAYkwB,EAAQY,GAC/BhB,GAAuBI,EAAQY,EAC/B3M,EAAMjmB,UAAY4xB,IAGlBH,EAAW3vB,YAAYmkB,EAAMjmB,WAC7BimB,EAAMjmB,WAAa4xB,QAIvBH,EAAW3vB,YAAYmkB,EAAMjmB,WAKrC,OAFAimB,EAAMK,YAAcr4B,EAAQ,EAC5Bg4B,EAAM4M,aAAe5kC,EAAQ,GACtB,EAMX6kC,yBAAyBC,GAErB,OADAvuC,KAAK8sC,sBAAwC,iBAATyB,EAAoB3B,GAAW4B,sBAAsBD,GAAQA,EAC1FvuC,KAKXyuC,mBACI,OAAOzuC,KAAK6sC,wBAMhB6B,iBAAiBH,GAEb,OADAvuC,KAAK6sC,wBAA0C,iBAAT0B,EAAoB3B,GAAW+B,wBAAwBJ,GAAQA,EAC9FvuC,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBACZ0wB,EAAgB3wB,EAAK4wB,UAAY5wB,EAAK6wB,mBAAqB/F,EAAKe,GAChE2E,EAAgB7C,GAAc8C,OAAOntC,KAAKwV,UAC1C4xB,EAAQ1qB,EAAK2qB,mBAAmB3wB,EAAiBuF,MAAOjc,KAAKoR,OACnEpR,KAAKgV,cAEL8D,EAAIlF,OACJ,MAAMg7B,EAAcvuC,OAAOiS,KAAKtS,KAAK6R,aAAa,YAAYxO,KAAK,KACnEyV,EAAI+1B,UAAUD,EAAa5uC,KAAK6R,aAAa,OAC7CiH,EAAIxD,QAAQtV,KAAKwV,UACjB,MAAMs5B,EAAah2B,EAAIi2B,YAAY/uC,KAAKiE,MAAMwF,MACxCulC,EAAc9B,EAAcd,UAAY,EAC9C,IAAIvpC,EACAgF,EAEAhF,EADA7C,KAAK6sC,0BAA4BH,GAA4B/wB,KACzDyrB,EAAMvkC,EAEL7C,KAAK6sC,0BAA4BH,GAA4BpwB,MAC9D8qB,EAAMvkC,EAAIisC,EAET9uC,KAAK6sC,0BAA4BH,GAA4B3wB,OAC9DqrB,EAAMvkC,EAAIisC,EAAa,EAGvBpyB,EAAKuyB,WAAaH,EAAa,EAEvC,IAAII,EAAW,GACXC,EAAU,EACd,MAAMC,EAAW1yB,EAAK4wB,UAChBpzB,EAAQwC,EAAK3B,aAOnB,GAJIq0B,IACAF,EAAWxyB,EAAK2yB,YAAYlG,aAC5BgG,EAAUj1B,EAAMsoB,0BAEhBxiC,KAAK8sC,wBAA0BH,GAA0BuB,OAAQ,CAGjErmC,EADW6U,EAAK4yB,QACTC,QAAO,CAAC5rC,EAAGC,IAAOD,EAAIC,EAAID,EAAIC,IACrCiE,IAAM7H,KAAKwb,UAAY,GAAK+gB,EAAOuC,oBAAsBkQ,EACrDI,GAAY/B,IAAkB7F,EAAKgB,OACnC3gC,EAAI1D,KAAK4E,IAAIlB,EAAGqnC,EAASxF,KAAOsF,EAAcG,EAAUnvC,KAAKwb,iBAGhE,GAAIxb,KAAK8sC,wBAA0BH,GAA0B5wB,OAAQ,CACtE,MAAMyzB,EAAK9yB,EAAK+yB,eAAezvC,KAAKwb,WAAa,EAEjD3T,EAAI2nC,GADOt1B,EAAMw1B,kBAAkB1vC,KAAKwb,WACzBg0B,GAAM,EAAIR,EAAc,OAEtC,GAAIhvC,KAAK8sC,wBAA0BH,GAA0BI,IAC9DllC,EAAI6U,EAAK4yB,QAAQ,IAAMtvC,KAAKwb,UAAY,GAAK+gB,EAAOuC,oBAChDsQ,GAAY/B,IAAkB7F,EAAKe,KAGnC4G,EAAUD,EAASxF,KAAOxvB,EAAMy1B,iBAAmBpT,EAAOuC,oBAAsBqQ,EAChFtnC,EAAI1D,KAAKqlC,IAAI3hC,EAAGqnC,EAASxF,KAAOyF,GAAWnvC,KAAKwb,UAAY,SAG/D,CACD,MAAMo0B,EAAUlzB,EAAKmzB,iBACrBhoC,EAAI+nC,EAAQlG,MAAQkG,EAAQjG,MAAQiG,EAAQlG,MAAQ,EAAIsF,EAAc,GAxNlF,YAAc/rC,GACN2pC,GAAW1L,OACXn+B,EAAI,sBAAuBE,GAwN3B,CAAE,yBAA0BjD,KAAKiE,KAAMpB,EAAGgF,GAC1CiR,EAAIg3B,SAAS9vC,KAAKiE,KAAMpB,EAAGgF,GAC3BiR,EAAIi3B,aACJj3B,EAAItE,WAIZo4B,GAAW1L,OAAQ,EACnB0L,GAAWl3B,UAAYrV,OAAO0V,OAAO,GAAIhD,EAAQ2C,WAEjDk3B,GAAWoD,kBAAoBtD,GAC/BE,GAAW+B,wBAA0B,CACjCvyB,KAAMswB,GAA4B/wB,KAClCU,MAAOqwB,GAA4BpwB,MACnCR,OAAQ4wB,GAA4B3wB,OACpCk0B,WAAYvD,GAA4BwD,aAE5CtD,GAAWiB,gBAAkBlB,GAC7BC,GAAW4B,sBAAwB,CAC/BxyB,MAAO2wB,GAA0BI,IACjCoD,IAAKxD,GAA0BI,IAC/B7wB,MAAOywB,GAA0BuB,OACjCkC,OAAQzD,GAA0BuB,OAClCpyB,OAAQ6wB,GAA0B5wB,OAClCk0B,WAAYtD,GAA0BuD,aC9O1C,MAAM,MAAEj0B,GAAK,MAAEE,IAAUZ,EAASG,SAClC,SAAS20B,GAAmBC,EAAQprC,GAChC,MAA6B,GAAtBorC,EAAOprC,EAAQ,IAG1B,SAASqrC,GAAcrtC,EAAMuY,GACzB,OAAOA,IAAaQ,GAAQ/Y,GAAQ,EAAIA,GAAQ,EAEpD,SAASstC,GAAoBttC,EAAMuY,GAC/B,OAAI80B,GAAcrtC,EAAMuY,GAChBA,IAAaQ,GACN9X,KAAKssC,KAGLtsC,KAAK0C,MAIT1C,KAAKw+B,MAiBpB,MAAM+N,GAAsBh0B,GAAS3a,EAAY2a,IAAS/a,EAAY+a,GA0G/D,MAAMi0B,WAAqBp1B,EAK9Bla,YAAY4P,GACRxO,QACAzC,KAAKiR,KAAOA,EACZjR,KAAKyb,SAAWU,GAChBnc,KAAKmhC,eAAiB,CAClBC,WAAY,IAEhBphC,KAAKuY,QAGEjX,sBACP,OAAOG,EAASkvC,aAoBpBlsC,cAAc61B,EAAemH,GACzB,IAAKnH,GAA0C,IAAzBA,EAAcx1B,OAChC,OAAO,EACX,MACM8rC,EAAe,CAACC,EAAc3tC,EAAMuY,IAAa40B,GAAmBG,GAAoBttC,EAAMuY,GAAW7Y,EAAQiuC,EAAar4B,MAAM1I,aAAapG,QAAU,GADlJ,IAEf4wB,EAAcpc,SAAS2yB,IACnB,MAAMn0B,EAAOm0B,EAAal0B,oBAC1B,IAAI6wB,EAAQ,EACZ,MAAMH,EAAgB3wB,EAAK4wB,UAAY5wB,EAAK6wB,mBAAqB/F,EAAKe,GACtE,IAAIe,EAAa,EAEjB,GAAIrnC,EAAgBya,GAAO,CACvB,MAAM4jB,EAAO5jB,EAAKgxB,UACdpN,IACAgJ,EAAanlC,KAAK6C,IAAIs5B,EAAK2I,aAAe1M,EAAOuC,qBAGzD,MAAM5kB,EAAQwC,EAAKoB,WAInB,GAHI5D,IACAszB,EAAQtzB,EAAM0zB,eAEdiD,EAAazzB,gBAAkBnB,GAAO,CACtC,IAAI6xB,EAAWpxB,EAAKqxB,eAAc,GAC9BV,IAAkB7F,EAAKe,KACvBuF,GAAYxE,GAEhB,IAAIwH,EAAYF,EAAaC,EAAcpP,EAAMwM,cAAehyB,IAChE,MAAM80B,EAASjD,EAAWrM,EAAMwM,cAAgB,IAE3C4C,EAAaA,aAAatW,eAAiBwW,EAASvD,IACrDsD,GAAatD,EAAQuD,GAEzBF,EAAavzB,YAAYmkB,EAAMwM,eAC/BxM,EAAMwM,eAAiB6C,OAEtB,GAAID,EAAazzB,gBAAkBjB,GAAO,CAC3C,IAAI2xB,EAAW3pC,KAAK4E,IAAIykC,EAAQ9wB,EAAKqxB,gBAAiB,GAClDV,IAAkB7F,EAAKgB,OACvBsF,GAAYxE,GAEhB,IAAIwH,EAAYF,EAAaC,EAAcpP,EAAMjmB,UAAWW,IAC5D,MAAMiyB,EAAYN,EAAWrM,EAAMjmB,UAAY,IAE1Cq1B,EAAaA,aAAatW,eAAiB6T,EAAYZ,IACxDsD,GAAatD,EAAQY,GAEzByC,EAAavzB,YAAYmkB,EAAMjmB,WAC/BimB,EAAMjmB,WAAas1B,MAG3B,MAAMrnC,EAAQ6wB,EACT/nB,KAAKs+B,GAAiBA,EAAat0B,aACnCgzB,QAAO,CAACyB,EAAUC,IAAe9sC,KAAK4E,IAAIkoC,EAAYD,KAG3D,OAFAvP,EAAMK,YAAcr4B,EAAQ,EAC5Bg4B,EAAM4M,aAAe5kC,EAAQ,GACtB,EAEXhF,sBAAqB,cAAE61B,GAAiB5d,EAAMw0B,GAC1C,IAAK5W,EACD,OACJ,MAAM6W,EAAkB,CACpBC,SAAU,KACVC,OAAQ,KACRC,OAAQ,MAEZhX,EACK3yB,MAAM,KACN4K,KAAKg/B,GAAgBA,EAAYjjC,OAAO3G,MAAM,OAC9C4K,KAAI,EAAE3F,EAAM6O,MACb,MAAMiiB,EAAQ,CAAEzsB,KAAMkgC,EAAgBvkC,IAGtC,OAFI6O,IACAiiB,EAAMjiB,SAAWF,EAASM,eAAeJ,IACtCy1B,EAAQM,aAAab,aAAajT,MAExCnrB,KAAKmrB,GAAUhhB,EAAKkqB,YAAYlJ,EAAO,KAEhDnlB,QACIvY,KAAK6wC,aAAetU,EAAOkV,kBAAkBzxC,KAAKiR,MAClD,MAAM4/B,EAAejuC,EAAQ5C,KAAK6wC,aAAc,gBAAiB,2BAA2B7wC,KAAKiR,QAC3F1O,GAAQvC,KAAKyb,WAAaQ,GAAQ40B,EAAapW,UAAYoW,EAAanW,YAAcmW,EAAatuC,KACzGvC,KAAKwY,MAAQ,IAAI1B,EAAMvU,MAAAA,EAAmCA,EAAO,GAAIvC,KAAKmhC,eAAeC,YACzFphC,KAAKwc,SAAS5Z,EAAQ5C,KAAKwY,MAAM1I,aAAarG,QAGlDkL,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAM5D,EAAQpR,KAAK8c,cACb,SAAErB,EAAQ,MAAEjD,EAAOgD,UAAWk2B,GAAa1xC,KAC3C2xC,EAAqB3xC,KAAK6wC,aAAatW,cACvCrgB,EAAQwC,EAAK3B,aACb62B,EAAa13B,EAAMsoB,yBACnBqP,EAAQ1vC,EAAUua,IAElB,EAAE7Z,GAAM6Z,EAAK2qB,mBAAmB5rB,EAAUrK,GAC1C0gC,GAAyBH,GAAsBE,EAC/CE,EAlKd,SAA0Br1B,EAAMjB,GAC5B,MAAMu2B,EAAev2B,IAAaQ,IAASS,EAAK6wB,qBAAuB/F,EAAKe,IACvE9sB,IAAaU,IAASO,EAAK6wB,qBAAuB/F,EAAKgB,KAC5D,OAAIkI,GAAmBh0B,GACfA,EAAK4wB,WAAa0E,EACX,GAKA,EAIPt1B,EAAK4wB,WAAa0E,EACX,EAGA,EAgJWC,CAAiBv1B,EAAMjB,GACvCy2B,EAAU3V,EAAOoF,mBAAmBvxB,aAAa,gBAAgBoI,EAAMuB,oBAAqB,GAClG,IAAIlS,EAAI,CACJ,CAACoU,IAAQ,KACLzD,EAAMmC,UAAU,GAAK,GACrB,MAAM9S,EAnPtB,SAAiB6U,EAAMg1B,GACnB,MAAMrE,EAAgB3wB,EAAK6wB,oBACnB7D,KAAMyI,EAAUxI,MAAOyI,GAAc11B,EAAKmzB,iBAClD,GAAIa,GAAmBh0B,GACnB,OAAIA,EAAK4wB,UACDD,IAAkB7F,EAAKe,GAChB4J,EAGAC,EAIJjuC,KAAKqlC,OAAO9sB,EAAK4yB,SAG3B,GAAIntC,EAAUua,GACf,OAAIA,EAAK4wB,WACDD,IAAkB7F,EAAKe,GAChB4J,EAOJz1B,EAAK3B,aAAa00B,eAAeiC,GAI5C,MAAM,IAAIrvC,EAAa,kBAAmB,iEAqNxBgwC,CAAQ31B,EAAMg1B,IAAaA,EAAWK,GAAiBH,EACjE,OAAOE,EAAwB3tC,KAAKqlC,IAAItvB,EAAMu1B,eAAekB,GAAa2B,gBAAiBzqC,GAAKA,GAEpG,CAACsU,IAAQ,KACL3D,EAAMmC,UAAU,GAAK,GACrB,MAAM9S,EAvNtB,SAAoB6U,EAAMg1B,GACtB,MAAMrE,EAAgB3wB,EAAK6wB,oBACnB7D,KAAMyI,EAAUxI,MAAOyI,GAAc11B,EAAKmzB,iBAClD,GAAIa,GAAmBh0B,GACnB,OAAIA,EAAK4wB,UACDD,IAAkB7F,EAAKe,GAChB6J,EAGAD,EAIJhuC,KAAK4E,OAAO2T,EAAK4yB,SAG3B,GAAIntC,EAAUua,GACf,OAAIA,EAAK4wB,UACDD,IAAkB7F,EAAKe,GAChB7rB,EAAK3B,aAAa20B,kBAAkBgC,GAGpCS,EAIJz1B,EAAK3B,aAAa20B,kBAAkBgC,GAI/C,MAAM,IAAIrvC,EAAa,kBAAmB,iEAyLxBkwC,CAAW71B,EAAMg1B,IAAaA,EAAWK,GAAiBH,EACpE,OAAOE,EAAwB3tC,KAAK4E,IAAImR,EAAMw1B,kBAAkBiB,GAAa2B,gBAAiBzqC,GAAKA,IAEzG4T,KACF,IAAKo2B,EAAO,CACR,MAAMW,EAAkB/2B,IAAaQ,IAAS,EAAI,EAC5C6xB,EAAWpxB,EAAK2lB,cAAcjxB,GAAOlO,KAErCuvC,GADoB/1B,EAAK4yB,QAAQl+B,GAASvJ,GAAK+pC,EAChBltC,OAAOopC,GACtC4E,EAhRlB,SAAyBf,EAAoBzuC,EAAMuY,EAAU+2B,GAEzD,MAAME,EAAcrC,GAAmBG,GAAoBttC,EAAMuY,GAAWvY,GAG5E,GAF4ByuC,GAAsBpB,GAAcmC,EAAaj3B,IACzDi3B,EAAc,GAAM,EAGpC,OAAOA,EADkB,IACgBF,EAGzC,OAAOE,EAsQiBC,CAAgBhB,EAAoBc,EAAWh3B,EAAU+2B,GACzEjC,GAAcmC,EAAaj3B,IAC3BjD,EAAMmC,UAAU,GAAK,IACzB9S,GAAK1D,KAAK6C,IAAI0rC,EAAcD,GAAab,EAAaY,EAAkBN,EAAUM,GA5S9F,YAAcvvC,GACN0tC,GAAazP,OACbn+B,EAAI,wBAAyBE,GA4S7B,CAAE,iCAAiCJ,SAASgF,MAC5C2Q,EAAMoC,OAAO9B,EAAKjW,EAAGgF,IAI7B8oC,GAAazP,OAAQ,EACrByP,GAAa2B,gBAAkB,GC3TxB,MAAMM,GACEtxC,sBACP,OAAOG,EAASmxC,cAEhB5kC,SAAKzG,GACLvH,KAAKsV,QAAQ/N,GAEbyG,WACA,OAAOhO,KAAKiW,UAMhB48B,WAAWtrC,GAEP,OADAvH,KAAKsV,QAAQ/N,GACNvH,MCRR,MAAM8yC,WAAiB//B,EAC1B1R,cACIoB,QACAzC,KAAK+yC,eAAgB,EACrB/yC,KAAKgzC,gBAAiB,EAGtBhzC,KAAKm+B,MAAQ,IAAI95B,EAAS,EAAG,GAC7BrE,KAAKizC,eAAiB,EACtBjzC,KAAKkzC,eAAiB,IAAI7uC,EAAS,EAAG,GAEtCrE,KAAKyJ,MAAQ,EACbzJ,KAAKoX,QAAU,EACfpX,KAAKmzC,UAAY,GACjBnzC,KAAKozC,YAAc,GACnBpzC,KAAKqzC,cAAe,EACpBrzC,KAAKszC,eAAiB,EAGtBtzC,KAAKuzC,cAAe,EAGpBvzC,KAAKwzC,iBAAmB,CAIpBC,QAAS,CAAEr3B,KAAM,EAAGC,MAAO,GAG3B0hB,SAAU,GAEV2V,WAAY,EAGZC,MAAO,CACHC,KAAM,EACNC,KAAM,EACNC,UAAW,IAIZxyC,sBACP,OAAOG,EAASqxC,SAGpBv6B,QACI,OAAOvY,KAGX0lC,WACI,OAAO1lC,KAAKm+B,MAGhBqH,oBACI,OAAOxlC,KAAKuzC,aAGhBQ,eAAevT,GAEX,OADAxgC,KAAKuzC,aAAe/S,EACbxgC,KAGXwc,SAAS/S,GACLzJ,KAAKyJ,MAAQA,EAGjB8S,WACI,IAAKvc,KAAK+yC,cACN,MAAM,IAAI1wC,EAAa,kBAAmB,+CAE9C,OAAOrC,KAAKyJ,OAASzJ,KAAKid,gBAAkBjd,KAAKid,gBAAgBV,WAAa,GAGlFpC,UAAUtX,GAEN,OADA7C,KAAKoX,QAAUvU,EACR7C,KAGXyd,YACI,OAAOzd,KAAKoX,QAGhBnP,OAEI,OADoBjI,KAAKg0C,iBAAiB,uCACvB/rC,OAASjI,KAAKoX,QAGrC68B,sBACI,OAAOj0C,KAAKwzC,iBAGhBU,kBACI,OAAIl0C,KAAKm0C,kBACEn0C,KAAKszC,eAET,EAGXc,gBAAgBC,GAEZ,OADAr0C,KAAKszC,eAAiBe,EACfr0C,KAGXm0C,kBACI,OAAOn0C,KAAKqzC,aAGhBiB,mBAAmBjB,GAEf,OADArzC,KAAKqzC,aAAeA,EACbrzC,KAMXu0C,WACI,OAAO3xC,EAAQ5C,KAAKqlC,MAAO,UAAW,0BAG1CmP,SAASnP,GACLrlC,KAAKqlC,MAAQA,EAGjBoP,YACI,OAAOz0C,KAAK00C,OAGhBC,iBACI,OAAO30C,KAAKozC,YAOhBwB,YAAYF,GACR,IAAIG,EACAC,EACJ,GAAIJ,EAAQ,CACR,MAAMhtC,EAAI1H,KAAKozC,YAAY5M,QAAQkO,GAQnC,OAPW,IAAPhtC,IACA1H,KAAKozC,YAAYzM,OAAOj/B,EAAG,GAC3BmtC,EAAYH,EAAOK,eACnBD,EAAgBJ,EAAOM,mBAEvBh1C,KAAKi1C,oBAAoBJ,EAAWC,IAEjC90C,KAEX,KAAOA,KAAKozC,YAAYtuC,QAEpB+vC,GADAH,EAAS10C,KAAKozC,YAAY8B,OACPH,eACnBD,EAAgBJ,EAAOM,mBAEvBh1C,KAAKi1C,oBAAoBJ,EAAWC,GAExC,OAAO90C,KAGXm1C,UAAUT,GACN,GAAIA,EAAQ,CACR10C,KAAKozC,YAAYv7B,KAAK68B,GACtB,MAAMG,EAAYH,EAAOK,eACnBD,EAAgBJ,EAAOM,mBAC7Bh1C,KAAKi1C,oBAAoBH,EAAeD,GAG5C,OADA70C,KAAK00C,OAASA,EACP10C,KAOXo1C,qBAAqBC,GACjBr1C,KAAKid,gBAAkBo4B,EACvB,IAAK,IAAI3tC,EAAI,EAAGA,EAAI1H,KAAKmzC,UAAUruC,SAAU4C,EACzC1H,KAAKid,gBAAgBq4B,UAAUt1C,KAAKmzC,UAAUzrC,IAIlD,OAFA1H,KAAKid,gBAAgBq4B,UAAUt1C,MAC/BA,KAAK+yC,eAAgB,EACd/yC,KAOX4mC,YAAYF,EAAUt1B,EAAQ,GAG1B,OAFApR,KAAKmzC,UAAUt7B,KAAK6uB,GACpB1mC,KAAK+yC,eAAgB,EACd/yC,KAGXymC,eACI,OAAOzmC,KAAKmzC,UAGhBoC,eAAeC,GACXx1C,KAAK4d,YAAc43B,EACnBx1C,KAAK+yC,eAAgB,EAEzBiB,iBAAiBxxC,EAAU,iCACvB,OAAOI,EAAQ5C,KAAK4d,YAAa,gBAAiBpb,GAGtDizC,YACQz1C,KAAK+yC,gBAET/yC,KAAKyJ,MAAQ,EACTzJ,KAAKid,kBACLjd,KAAKid,gBAAgBw4B,YACrBz1C,KAAKyJ,OAASzJ,KAAKid,gBAAgBV,aAIvCm5B,iBAAaxwC,GACblF,KAAK+yC,cAAgB7tC,EAErBwwC,mBACA,OAAO11C,KAAK+yC,cAGhB4C,aACI,OAAI31C,KAAKgzC,iBAEThzC,KAAKgzC,gBAAiB,GADXhzC,KAKX41C,kBAAc1wC,GACdlF,KAAKgzC,eAAiB9tC,EAEtB0wC,oBACA,OAAO51C,KAAKgzC,eAGhB6C,oBACI,OAAO71C,KAAKizC,eAGhB6C,kBAAkB7C,GACdjzC,KAAKizC,eAAiBA,EACtBjzC,KAAKm+B,MAAQn+B,KAAKkzC,eAAexsC,QAAQX,SAAS/F,KAAKizC,gBAG3D8C,oBACI,OAAO/1C,KAAKkzC,eAGhB+B,oBAAoB3wC,EAAWC,GAC3BvE,KAAKkzC,eAAentC,SAASzB,EAAWC,GACxCvE,KAAKm+B,MAAQn+B,KAAKkzC,eAAexsC,QAAQX,SAAS/F,KAAKizC,gBAG3D+C,YAAYjY,GACR,MAAMI,EAAQJ,EAASz5B,WAAai4B,EAAOzW,WAAaiY,EAASx5B,aACjEvE,KAAKm+B,MAAQn+B,KAAKkzC,eAAexsC,QAAQX,SAASo4B,GAClDn+B,KAAKizC,eAAiBjzC,KAAKm+B,MAAMj5B,QAErC+wC,eAEI,OADoBj2C,KAAKg0C,iBAAiB,+CACvB/rC,OAGvBkV,mBAAmBk4B,GAEf,OADAr1C,KAAKid,gBAAkBo4B,EAChBr1C,KAGXgd,qBACI,OAAOhd,KAAKid,gBAGhBC,uBACI,OAAOta,EAAQ5C,KAAKid,gBAAiB,oBAAqB,mDC7Q3D,MAAMnb,WAAagxC,GAOtBzxC,YAAY60C,GAER,GADAzzC,SACKyzC,EACD,MAAM,IAAI7zC,EAAa,eAAgB,2EAG3C,MAAM8zC,EAAmBr0C,GAAKs0C,gBAAgBF,GAC9C,IAAKC,EACD,MAAM,IAAI9zC,EAAa,eAAgB,uCAAuCg0C,KAAKC,UAAUJ,MAGjGl2C,KAAKsS,KAAO4jC,EAAW5jC,MAAQ,GAE/BtS,KAAKu2C,SAAW,GAChBv2C,KAAK+9B,SAAWoY,EAAiBpY,SACjC/9B,KAAKw2C,SAAWL,EAAiBllC,KACjCjR,KAAKy2C,YAAcN,EAAiBM,YAChCP,EAAWQ,kBAEX12C,KAAKg2C,YAAYE,EAAWQ,mBAI5B12C,KAAK81C,kBAAkBK,EAAiBhY,OAE5Cn+B,KAAKmzC,UAAY,GAEjBnzC,KAAKwY,MAAQ+jB,EAAOoa,cAAc32C,KAAK+9B,SAAU/9B,KAAKw2C,UACtDx2C,KAAK42C,aAAe52C,KAAKy2C,YAAYlkC,KAAK3N,GAAM23B,EAAOoa,cAAc32C,KAAK+9B,SAAUn5B,KAEpF5E,KAAK62C,cAAW/zC,EAEhB9C,KAAKuzC,cAAe,EAEpBvzC,KAAKyJ,MAAQ,EACbzJ,KAAK82C,oBAAsB,EAC3B92C,KAAK+2C,qBAAuB,EAC5B/2C,KAAKoX,QAAU,EACfpX,KAAKqpC,GAAK,GAEN6M,EAAW7C,cACXrzC,KAAKs0C,mBAAmB4B,EAAW7C,cAGvCrzC,KAAKmhC,eAAiB,CAClB6V,mBAAoB,EACpBC,iBAAkB,EAClBC,UAAW,EACX//B,MAAO,EACPnJ,KAAM,GACNqJ,QAAS,GAKN/V,sBACP,OAAOG,EAASK,KAGpB2C,mBAAmBqU,EAAK4D,EAAM5B,GAC1B,MAAMrL,EAAUiN,EAAK5M,aACfqnC,EAASz6B,EAAKu5B,eAAiBxmC,EAAQuO,UAAYvO,EAAQqnC,oBAC3DM,EAAQ16B,EAAKu5B,eAAiBxmC,EAAQqnC,oBACtCO,EAAO36B,EAAKu5B,eACZqB,EAAS56B,EAAKu5B,eAAiBxmC,EAAQ8nC,OACvCC,EAAS96B,EAAKu5B,eAAiBxmC,EAAQ8nC,OAAS9nC,EAAQsnC,qBACxDU,EAAO/6B,EAAKu5B,eAAiBxmC,EAAQ8nC,OAAS9nC,EAAQsnC,qBAAuBtnC,EAAQwO,WACrFy5B,EAAgBD,GAAQ/6B,EAAKu3B,sBAAsBR,QAAQp3B,OAAS,GACpEs7B,EAASF,EAAON,EACtBr+B,EAAIlF,OACJkF,EAAIxD,QAAQ5I,EAAKiB,WAAY,GAC7BmL,EAAIg3B,SAAS3rC,KAAKw+B,MAAMgV,GAAU,KAAMR,EAASz6B,EAAKe,YAAa3C,GACnE,MAAMjT,EAAIiT,EAAO,EACjB,SAASiiB,EAAO7zB,EAAIG,EAAIuuC,EAAOC,EAAKhwC,GAChCiR,EAAIQ,YACJR,EAAI1E,eAAewjC,GACnB9+B,EAAI5E,aAAa0jC,GACjB9+B,EAAIxE,aAAa,GACjBwE,EAAIS,OAAOrQ,EAAKwT,EAAKe,YAAao6B,GAClC/+B,EAAIU,OAAOnQ,EAAKqT,EAAKe,YAAao6B,GAClC/+B,EAAIikB,SAERA,EAAOoa,EAAQC,EAAO,OACtBra,EAAOqa,EAAOC,EAAM,QACpBta,EAAOsa,EAAMC,EAAQ,SACrBva,EAAOua,EAAQE,EAAQ,QACvBza,EAAOya,EAAQC,EAAM,OACrB1a,EAAO0a,EAAMC,EAAe,QAC5B3a,EAAOoa,EAASz6B,EAAKe,YAAa05B,EAAQ,QFnF3C,SAAiBr+B,EAAKjW,EAAGgF,EAAG+vC,EAAQ,QACvC9+B,EAAIlF,OACJkF,EAAI5E,aAAa0jC,GAEjB9+B,EAAIQ,YACJR,EAAIg/B,IAAIj1C,EAAGgF,EAAG,EAAG,EAAa,EAAV1D,KAAKC,IAAQ,GACjC0U,EAAIi/B,YACJj/B,EAAIa,OACJb,EAAItE,UE4EAwjC,CAAQl/B,EAAKu+B,EAAO36B,EAAKe,YAAa5V,EAAG,QACzC,MAAM2rC,EAAmB92B,EAAKu3B,sBAC9B,GAAIT,EAAiBE,WAAa,EAAG,CACjC,MAAMuE,EAAiBzE,EAAiBG,MAAMG,UACxC9vC,EAASi0C,GAAkB,EAAI,IAAM,GAC3Cn/B,EAAI5E,aAAa,OACjB4E,EAAIg3B,SAAS9rC,EAASG,KAAKw+B,MAAMsV,GAAiBZ,EAAO36B,EAAKe,YAAa3C,EAAO,IAEtFhC,EAAItE,UAER/P,qBAAqByzC,GACjB,IAAKA,EACD,OAEJ,MACM9rC,EADS,mCACOwX,KAAKs0B,GAC3B,IAAK9rC,EACD,OAKJ,MAAO,CAAE2xB,SAHQ3xB,EAAO,GAGL+rC,KAFN/rC,EAAO,GAAGtH,OAEEmM,KADZ7E,EAAO,IAAM,KAG9B3H,uBAAuByxC,GAEnB,MAAMkC,EAAgBt2C,GAAKu2C,cAAcnC,EAAWnY,UACpD,IAAKqa,EACD,OAGJ,IAAInnC,EAAOilC,EAAWjlC,KACtB,GAAIA,IAASsrB,EAAO0D,WAAWhvB,GAC3B,OAGJ,MAAMwlC,EAAc,GACfxlC,IACDA,EAAOmnC,EAAcnnC,MAAQ,SAELnO,IAApBozC,EAAW5jC,MACX4jC,EAAW5jC,KAAK4L,SAAQ,CAAC1L,EAAG9K,KACxB,MAAM0E,EAASoG,EAAE7K,MAAM,KAEvB8uC,EAAY/uC,GAAM0E,GAA4B,IAAlBA,EAAOtH,OAAesH,EAAO,GAAK6E,MAK1E,IAAIktB,EAAQ5B,EAAO+b,gBAAgBF,EAAcra,UACjD,IAAKI,EACD,OAGJ,MAAMga,EAAOjC,EAAWiC,KAAOjC,EAAWiC,KAAOC,EAAcD,KAC/D,GAAoB,iBAATA,EACP,OAGJ,IAAII,EAAepa,EACnB,IAAK,IAAIz2B,EAAI,EAAGA,EAAIywC,EAAMzwC,IAAK,CAC3B,GAAI6wC,GAAgB,EAChB,OACJA,GAA8B,EAC9Bpa,GAASoa,EAEb,MAAO,CACHxa,SAAUqa,EAAcra,SACxB9sB,KAAAA,EACAwlC,YAAAA,EACA0B,KAAAA,EACAha,MAAAA,GAORqa,cACI,OAAOx4C,KAAK62C,SAMhB4B,YAAY/7B,GAER,OADA1c,KAAK62C,SAAWn6B,EACT1c,KAQXimC,SACI,OAAO,EAGXyS,UAAUtnC,EAAO2rB,GAKb,OAJAA,EAAOngB,QAAQ5c,MACf+8B,EAAOhgB,SAAS3L,GAChBpR,KAAKmzC,UAAUt7B,KAAKklB,GACpB/8B,KAAK01C,cAAe,EACb11C,KAGX8d,WACI,OAAO9d,KAAKka,MAGhBa,aACI,OAAOnY,EAAQ5C,KAAKka,MAAO,UAAW,kCAG1CD,SAASC,GAIL,OAHAla,KAAKka,MAAQA,EACbla,KAAK24C,MAAM,CAACz+B,EAAMuoB,YAAY,KAC9BziC,KAAKqV,WAAWrV,KAAKka,MAAM9E,cACpBpV,KAGXsiC,yBACI,OAAOtiC,KAAK82C,oBAGhB8B,0BACI,OAAO54C,KAAK+2C,qBAGhB8B,uBAAuBh2C,GAEnB,OADA7C,KAAK82C,oBAAsBj0C,EACpB7C,KAGX84C,wBAAwBj2C,GAEpB,OADA7C,KAAK+2C,qBAAuBl0C,EACrB7C,KAGXwlC,oBACI,OAAOxlC,KAAKuzC,aAIhBxF,cAAcgL,GACV,OAAO,EAGXC,iBACI,OAAO,EAIXC,WACI,OAAOj5C,KAAKwY,MAGhB0gC,gBAEI,GAAIl5C,KAAKwY,MAAO,CACZ,GAAIxY,KAAKwY,MAAM1I,WACX,OAAO9P,KAAKwY,MAAM1I,aAAarG,MAE9B,GAAIzJ,KAAKwY,MAAM+D,SAChB,OAAOvc,KAAKwY,MAAM+D,SAASvc,KAAKmhC,eAAe8V,kBAGvD,OAAO,EAMX0B,MAAMtP,GAEF,OADArpC,KAAKqpC,GAAKA,EACHrpC,KAMXsvC,QACI,GAAuB,IAAnBtvC,KAAKqpC,GAAGvkC,OACR,MAAM,IAAIzC,EAAa,YAAa,yCAExC,OAAOrC,KAAKqpC,GAMhBoG,eAAej0B,GACX,OAAOxb,KAAK+a,aAAa00B,eAAej0B,GAG5C+4B,WACI,IAAKv0C,KAAKqlC,MACN,MAAM,IAAIhjC,EAAa,UAAW,sBACtC,OAAOrC,KAAKqlC,MAGhBmP,SAASnP,GAGL,OAFArlC,KAAKqlC,MAAQA,EACbrlC,KAAK01C,cAAe,EACb11C,KAGX6d,iBACI,OAAO7d,KAAKg0C,mBAGhBuB,eAAeC,GAGX,OAFAx1C,KAAK4d,YAAc43B,EACnBx1C,KAAK01C,cAAe,EACb11C,KAGXm5C,cACI,OAAOn5C,KAAK+9B,SAGhBqb,WACI,OAAOp5C,KAAKq5C,mBAAmB,OAAOv0C,OAAS,EAGnDwoC,UACI,OAAO,EAGXK,cACI,OAAO3tC,KAAKw2C,SAGhB8C,UACI,OAAOt5C,KAAKu5C,KAGhBC,YACI,OAAO52C,EAAQ5C,KAAKu5C,KAAM,SAAU,gCAGxCE,UACI,OAAoB32C,MAAb9C,KAAKu5C,KAGhBG,QAAQH,GAEJ,OADAv5C,KAAKu5C,KAAOA,EACLv5C,KAQX4mC,YAAYF,EAAUt1B,EAAQ,GAC1B,MAAMuoC,EAAY,wDASlB,GAPqB,iBAAVvoC,IACPA,EAAQrN,SAASqN,GAEjB9N,QAAQC,KAAKo2C,EAAY,2DAIL,iBAAbjT,GAA0C,iBAAVt1B,EACvC,MAAM,IAAI/O,EAAa,cAAe,iCAAmCs3C,EAAY,aAKzF,OAHAjT,EAAS9pB,QAAQ5c,MACjB0mC,EAAS3pB,SAAS3L,GAClB3O,MAAMmkC,YAAYF,GACX1mC,KAGXq5C,mBAAmBpoC,GACf,OAAOjR,KAAKkd,uBAAuB08B,WAAW3oC,GAIlDo2B,mBAAmB5rB,EAAUrK,EAAO8G,GAChC,IAAKlY,KAAK01C,aACN,MAAM,IAAIrzC,EAAa,kBAAmB,wDAE9C,MAAO,CACHQ,EAAG7C,KAAKi2C,eACRpuC,EAAG7H,KAAKqpC,GAAG,IAGnBwQ,sBAAsBzoC,GAElB,OADcpR,KAAKqiC,cAAcjxB,GACpB+rB,UAAYn9B,KAAK44C,0BAA4B,EAE9DkB,qBAAqB1oC,GAEjB,OADcpR,KAAKqiC,cAAcjxB,GACpB+rB,UAAYn9B,KAAKsiC,yBAA2B,EAE7DyX,gBACI,IAAItpC,EAAKzQ,KAAK44C,0BAGd,OAFqE,IAAjE54C,KAAKkd,uBAAuB08B,WAAW,eAAe90C,SACtD2L,GAAM8rB,EAAOoF,mBAAmBvxB,aAAa,8BAC1CK,EAGXX,aACI,IAAK9P,KAAK01C,aACN,MAAM,IAAIrzC,EAAa,kBAAmB,iDAE9C,MAAM2b,EAAYhe,KAAKid,gBAAkBjd,KAAKid,gBAAgB+8B,WAAWlY,WAAa,EAChF7jB,EAAaje,KAAKid,gBAAkBjd,KAAKid,gBAAgB+8B,WAAW3L,YAAc,EAClF5kC,EAAQzJ,KAAKuc,WAQnB,MAAO,CACH9S,MAAAA,EACAwwC,WATej6C,KAAKk5C,gBAUpB3B,OATW9tC,EACXuU,EACAC,EACAje,KAAK82C,oBACL92C,KAAK+2C,qBAOL/4B,UAAAA,EACAC,WAAAA,EAEA64B,oBAAqB92C,KAAK82C,oBAC1BC,qBAAsB/2C,KAAK+2C,qBAC3BmD,QAAS,GAQjBjE,eAGI,IAAIpzC,EAFgB7C,KAAKg0C,iBAAiB,+CAEtB/rC,OAOpB,OANIjI,KAAKka,QACLrX,GAAK7C,KAAKka,MAAMigC,gBAAkB5d,EAAOoF,mBAAmBvxB,aAAa,kBAEzEpQ,KAAKm0C,oBACLtxC,GAAK7C,KAAKk0C,mBAEPrxC,EAGX0qC,mBACI,MAAM,IAAIlrC,EAAa,SAAU,kCAGrCwtC,iBACI,MAAM,IAAIxtC,EAAa,SAAU,kCAGrC+3C,eACI,IAAIC,EAAYr6C,KAAKi2C,eAIrB,OAFAoE,GADyBr6C,KAAKwY,MAAM+D,WACJ,EAChC89B,IAAcr6C,KAAKyJ,MAAQ,EAAIzJ,KAAKyJ,MAAQ,EACrC4wC,EAGXC,cACI,IAAIC,EAAUv6C,KAAKi2C,eAInB,OAFAsE,GADyBv6C,KAAKwY,MAAM+D,WACN,EAC9Bg+B,GAAWv6C,KAAKyJ,MAAQ,EAAI,EACrB8wC,EAGXC,UACI,OAAOx6C,KAAKsS,KAGhB+vB,cACI,OAAOriC,KAAKu2C,UCpeb,IAAIkE,GCDAC,GCiBAC,GAOAC,GAKAC,GAMAC,GClCAC,IHCX,SAAWN,GACPA,EAAsBA,EAA8B,OAAI,GAAK,SAC7DA,EAAsBA,EAA4B,KAAI,GAAK,OAC3DA,EAAsBA,EAA6B,MAAI,GAAK,QAC5DA,EAAsBA,EAA6B,MAAI,GAAK,QAC5DA,EAAsBA,EAA6B,MAAI,GAAK,QAC5DA,EAAsBA,EAA6B,MAAI,GAAK,QAC5DA,EAAsBA,EAA2B,IAAI,GAAK,MAP9D,CAQGA,KAA0BA,GAAwB,KAC9C,MAAMO,WAAsBjoC,EAC/B1R,cACIoB,QACAzC,KAAKyJ,MAAQ,EACbzJ,KAAK6C,EAAI,EACT7C,KAAKkyC,QAAU,GACflyC,KAAKyb,SAAWg/B,GAAsBx+B,MAE/B3a,sBACP,OAAOG,EAASu5C,cAETt/B,sBACP,OAAO++B,GAEXr9B,cACI,OAAOpd,KAAKyb,SAEhB4B,YAAY5B,GAER,OADAzb,KAAKyb,SAAWA,EACTzb,KAEX8d,WACI,OAAO9d,KAAKka,MAEhBa,aACI,OAAOnY,EAAQ5C,KAAKka,MAAO,UAAW,kCAE1CD,SAASC,GAEL,OADAla,KAAKka,MAAQA,EACNla,KAEXuc,WACI,OAAOvc,KAAKyJ,MAEhB+S,SAAS/S,GAEL,OADAzJ,KAAKyJ,MAAQA,EACNzJ,KAEXiI,OACI,OAAOjI,KAAK6C,EAEhBwF,KAAKxF,GAED,OADA7C,KAAK6C,EAAIA,EACF7C,KAEXi7C,iBAAiBziC,EAAO0B,EAAOhX,EAAMg4C,EAAc,GAC/C1iC,EAAM4B,UAAUF,EAAMuoB,YAAYv/B,MAAAA,EAAmCA,EAAO,GAAKgX,EAAMe,gBAAkBigC,GAE7GC,WAAW/pC,GACP,YAAiBtO,IAAVsO,GAAuBA,EAAQ,EAAI,EAAIpR,KAAKkyC,QAEvDkJ,WAAWlJ,GAEP,OADAlyC,KAAKkyC,QAAUA,EACRlyC,KAEXq7C,iBAAiBC,GAEb,OADAt7C,KAAKs7C,cAAgBA,EACdt7C,KAEXu7C,mBACI,OAAOv7C,KAAKs7C,cAGhB3mC,QAAQ1R,MCzEZ,SAAWy3C,GACPA,EAAYA,EAAoB,OAAI,GAAK,SACzCA,EAAYA,EAAoB,OAAI,GAAK,SACzCA,EAAYA,EAAiB,IAAI,GAAK,MACtCA,EAAYA,EAA0B,aAAI,GAAK,eAC/CA,EAAYA,EAAwB,WAAI,GAAK,aAC7CA,EAAYA,EAAyB,YAAI,GAAK,cAC9CA,EAAYA,EAAkB,KAAI,GAAK,OAP3C,CAQGA,KAAgBA,GAAc,KAC1B,MAAMh5C,WAAgBs5C,GACzB35C,YAAY4P,GACRxO,QACAzC,KAAKw7C,UAAYjf,EAAOqC,qBACxB,MAAM6c,EAAOf,GACb16C,KAAK07C,OAAS,GACd17C,KAAK07C,OAAOD,EAAKE,QAAU,EAC3B37C,KAAK07C,OAAOD,EAAKG,QAAU,EAC3B57C,KAAK07C,OAAOD,EAAKI,KAAO,EACxB77C,KAAK07C,OAAOD,EAAKK,cAAgB,EACjC97C,KAAK07C,OAAOD,EAAKM,YAAc,EAC/B/7C,KAAK07C,OAAOD,EAAKO,aAAe,EAChCh8C,KAAK07C,OAAOD,EAAKQ,MAAQ,EACzBj8C,KAAKk8C,SAAW,GAChBl8C,KAAKk8C,SAAST,EAAKE,QAAU,EAC7B37C,KAAKk8C,SAAST,EAAKG,QAAU,EAC7B57C,KAAKk8C,SAAST,EAAKI,KAAO,EAC1B77C,KAAKk8C,SAAST,EAAKK,cAAgB,GACnC97C,KAAKk8C,SAAST,EAAKM,YAAc,GACjC/7C,KAAKk8C,SAAST,EAAKO,aAAe,GAClCh8C,KAAKk8C,SAAST,EAAKQ,MAAQ,EAC3Bj8C,KAAKm8C,iBAAmB,GACxBn8C,KAAKm8C,iBAAiBV,EAAKE,QAAU,CACjCS,KAAM,EACNC,KAAM,EACNC,YAAa,EACbC,aAAc,GAElBv8C,KAAKm8C,iBAAiBV,EAAKG,QAAU,CACjCQ,MAAO,EACPC,KAAM,EACNC,YAAa,EACbC,aAAc,GAElBv8C,KAAKm8C,iBAAiBV,EAAKI,KAAO,CAC9BO,MAAO,EACPC,KAAM,EACNC,YAAa,EACbC,aAAc,GAElBv8C,KAAKm8C,iBAAiBV,EAAKM,YAAc,CACrCK,MAAO,GACPC,KAAM,EACNC,YAAa,EACbC,aAAc,GAElBv8C,KAAKm8C,iBAAiBV,EAAKK,cAAgB,CACvCM,MAAO,EACPC,KAAM,GACNC,YAAa,EACbC,aAAc,GAElBv8C,KAAKm8C,iBAAiBV,EAAKO,aAAe,CACtCI,MAAO,GACPC,KAAM,GACNC,YAAa,EACbC,aAAc,GAElBv8C,KAAKm8C,iBAAiBV,EAAKQ,MAAQ,CAC/BG,KAAM,EACNC,KAAM,EACNC,YAAa,EACbC,aAAc,GAElBv8C,KAAKqd,YAAYo9B,GAAsB+B,OACvCx8C,KAAKy8C,QAAQxrC,GAEN3P,sBACP,OAAOG,EAASC,QAETuP,kBACP,OAAOypC,GAEAgC,wBACP,MAAO,CACHC,OAAQjC,GAAYiB,OACpBiB,OAAQlC,GAAYkB,OACpBiB,IAAKnC,GAAYmB,IACjBiB,YAAapC,GAAYoB,aACzBiB,UAAWrC,GAAYqB,WACvBiB,WAAYtC,GAAYsB,YACxBiB,KAAMvC,GAAYuB,MAG1BiB,UACI,OAAOl9C,KAAKiR,KAEhBwrC,QAAQxrC,GAKJ,OAJAjR,KAAKiR,KAAuB,iBAATA,EAAoBvP,GAAQg7C,WAAWzrC,GAAQA,EAClEjR,KAAKwc,SAASxc,KAAK07C,OAAO17C,KAAKiR,OAC/BjR,KAAKo7C,WAAWp7C,KAAKk8C,SAASl8C,KAAKiR,OACnCjR,KAAKq7C,iBAAiBr7C,KAAKm8C,iBAAiBn8C,KAAKiR,OAC1CjR,KAGX2U,KAAKuF,GAGD,OAFAA,EAAMxF,eACN1U,KAAKgV,cACGhV,KAAKiR,MACT,KAAKypC,GAAYiB,OACb37C,KAAKm9C,gBAAgBjjC,EAAOla,KAAK6C,GAAG,GACpC,MACJ,KAAK63C,GAAYkB,OACb57C,KAAKm9C,gBAAgBjjC,EAAOla,KAAK6C,GAAG,GACpC,MACJ,KAAK63C,GAAYmB,IACb77C,KAAKo9C,mBAAmBljC,EAAOla,KAAK6C,GACpC,MACJ,KAAK63C,GAAYoB,aAGb97C,KAAKq9C,cAAcnjC,EAAOla,KAAK6C,GAAG,GAC9BqX,EAAMjS,SAAWjI,KAAK6C,GACtB7C,KAAKm9C,gBAAgBjjC,EAAOA,EAAMjS,QAEtC,MACJ,KAAKyyC,GAAYqB,WACb/7C,KAAKq9C,cAAcnjC,EAAOla,KAAK6C,GAAG,GAClC,MACJ,KAAK63C,GAAYsB,YACbh8C,KAAKq9C,cAAcnjC,EAAOla,KAAK6C,GAAG,GAClC7C,KAAKq9C,cAAcnjC,EAAOla,KAAK6C,GAAG,IAO9Cs6C,gBAAgBjjC,EAAOrX,EAAGy6C,GACtB,MAAMC,EAAWrjC,EAAMxF,eACjBg1B,EAAOxvB,EAAMy1B,iBACb6N,EAAOtjC,EAAMujC,uBACfH,GACAC,EAASG,SAAS76C,EAAI,EAAG6mC,EAAM,EAAG8T,EAAO9T,GAE7C6T,EAASG,SAAS76C,EAAG6mC,EAAM,EAAG8T,EAAO9T,GAEzC0T,mBAAmBljC,EAAOrX,GACtB,MAAM06C,EAAWrjC,EAAMxF,eACjBg1B,EAAOxvB,EAAMy1B,iBACb6N,EAAOtjC,EAAMujC,uBACnBF,EAASG,SAAS76C,EAAI,EAAG6mC,EAAM,EAAG8T,EAAO9T,GACzC6T,EAASG,SAAS76C,EAAI,EAAG6mC,EAAM,EAAG8T,EAAO9T,GAE7C2T,cAAcnjC,EAAOrX,EAAG86C,GACpB,MAAMJ,EAAWrjC,EAAMxF,eACjBg1B,EAAOxvB,EAAMy1B,iBACb6N,EAAOtjC,EAAMujC,uBACnB,IAAIrmC,EAAU,EACTumC,IACDvmC,GAAW,GAEfmmC,EAASG,SAAS76C,EAAIuU,EAASsyB,EAAM,EAAG8T,EAAO9T,GAC/C6T,EAASG,SAAS76C,EAAI,EAAG6mC,EAAM,EAAG8T,EAAO9T,GAGrCiU,EACAvmC,GAAW,EAGXA,GAAW,EAEf,MAAMwmC,EAAQ/6C,EAAIuU,EAAUymC,EAE5B,IAAI3U,GAAYhvB,EAAM0zB,cAAgB,GAAK1zB,EAAMsoB,yBACjD0G,EAAWA,EAAW,EAAIhvB,EAAMsoB,yBAA2B,EAC3D,IAAIsb,EAAQpU,EAAOR,EAAW2U,EAE9BN,EAASjkC,YACTikC,EAASzF,IAAI8F,EAAOE,EAfD,EAeoB,EAAa,EAAV35C,KAAKC,IAAQ,GACvDm5C,EAAS5jC,OAETmkC,GAAS5jC,EAAMsoB,yBACf+a,EAASjkC,YACTikC,EAASzF,IAAI8F,EAAOE,EApBD,EAoBoB,EAAa,EAAV35C,KAAKC,IAAQ,GACvDm5C,EAAS5jC,QG7KV,MAAMokC,WAAgBj8C,GACzBT,YAAY4P,EAAOypC,GAAYiB,QAC3Bl5C,MAAM,CAAEs7B,SAAU,MAClB/9B,KAAKyP,QAAU,CACXisC,OAAQ,IAEZ,MAAMD,EAAOf,GACb16C,KAAKyP,QAAQisC,OAAS,CAClB,CAACD,EAAKE,QAAS,EACf,CAACF,EAAKG,QAAS,GACf,CAACH,EAAKI,KAAM,GACZ,CAACJ,EAAKK,cAAe,GACrB,CAACL,EAAKM,YAAa,GACnB,CAACN,EAAKO,aAAc,GACpB,CAACP,EAAKQ,MAAO,GAGjBj8C,KAAKuzC,cAAe,EACpBvzC,KAAKy8C,QAAQxrC,GAEN3P,sBACP,OAAOG,EAASs8C,QAGpBb,UACI,OAAOl9C,KAAKiR,KAGhBwrC,QAAQxrC,GAIJ,OAHAjR,KAAKiR,KAAuB,iBAATA,EAAoBvP,GAAQg7C,WAAWzrC,GAAQA,EAElEjR,KAAKwc,SAASxc,KAAKyP,QAAQisC,OAAO17C,KAAKiR,OAChCjR,KAIXo1C,qBAAqBC,GAEjB,OAAOr1C,KAGXy1C,YAEI,OADAz1C,KAAK01C,cAAe,EACb11C,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,gBA1DzB,YAAczR,GACN86C,GAAQ7c,OACRn+B,EAAI,mBAAoBE,GAyDxB,CAAE,0BAA2BjD,KAAKi2C,gBAC9Bj2C,KAAKwN,OACLxN,KAAK0T,WAAWoF,GACpB,MAAMklC,EAAU,IAAIt8C,GAAQ1B,KAAKiR,MACjC+sC,EAAQ31C,KAAKrI,KAAKi2C,gBAClB+H,EAAQrpC,KAAK3U,KAAK+a,cACd/a,KAAKwN,OACLxN,KAAKuU,aAAauE,GACtB9Y,KAAKgV,eAIb+oC,GAAQ7c,OAAQ,ECtET,MAAM+c,WAAa1iC,EAkCtBla,YAAY4C,EAAMi6C,GAAU,EAAOC,GAC/B17C,QACAzC,KAAKiE,KAAOA,EACZjE,KAAKoX,QAAU,EACfpX,KAAKk+C,QAAUA,EACfl+C,KAAKo+C,IAAM,GACXp+C,KAAKkW,YACLlW,KAAKmhC,eAAiB,CAClBkd,WAAY,IACZC,WAAY,UACZC,WAAY,EACZC,cAAe,GAEfL,EACAn+C,KAAKm+C,OAASA,GAIdn+C,KAAKm+C,OAAS,CAAC,CAAEltC,KAAMgtC,GAAK1V,GAAItkC,KAAMjE,KAAKiE,OACvCjE,KAAKk+C,SACLl+C,KAAKm+C,OAAOtmC,KAAK,CAAE5G,KAAMgtC,GAAKzV,KAAMvkC,KAAM,MAElDjE,KAAKy+C,cAEEn9C,sBACP,OAAOG,EAASw8C,KAET1V,gBACP,OAAO,EAEAC,kBACP,OAAO,EAGX/jC,cAAci6C,EAAOjd,GACjB,IAAKid,GAA0B,IAAjBA,EAAM55C,OAChB,OAAO,EACX,IAAI65C,EAAa,EAEjB,IAAK,IAAIj3C,EAAI,EAAGA,EAAIg3C,EAAM55C,SAAU4C,EAAG,CACnC,MAAMu0B,EAAOyiB,EAAMh3C,GACbgV,EAAOuf,EAAKtf,oBAClB,GAAIxa,EAAUua,GAAO,CACjB,MAAMkiC,EAAYliC,EAAKsxB,cAAgB,EACnCvM,EAAMwM,cAAgB2Q,IACtBnd,EAAMwM,cAAgB2Q,GAG9B3iB,EAAK9hB,UAAUwkC,GACfA,EAAa1iB,EAAK1f,WAClB0f,EAAK3e,YAAYmkB,EAAMwM,eAI3B,OAFAxM,EAAM4M,aAAesQ,EACrBld,EAAMwM,eAAiB,GAChB,EAGX9zB,UAAUjV,GAGN,OAFAlF,KAAKoX,QAAUlS,EACflF,KAAKy+C,cACEz+C,KAEX6+C,OAAO35C,GAEH,OADAlF,KAAKo+C,IAAMl5C,EACJlF,KAGX8+C,UACI,OAAO9+C,KAAKiE,KAEhB86C,gBAEI,OADsB1U,GAAc8C,OAAOntC,KAAKwV,UAC3B42B,UAGzBqS,cACI,MAAMvR,EAAgB7C,GAAc8C,OAAOntC,KAAKwV,UAIhD,IAAIwpC,EAAa,EACjB,IAAK,IAAIt3C,EAAI,EAAGA,EAAI1H,KAAKm+C,OAAOr5C,SAAU4C,EAAG,CACzC,MAAMu0B,EAAOj8B,KAAKm+C,OAAOz2C,GACzB,QAAmB5E,IAAfm5B,EAAKxyB,MACLu1C,GAAc/iB,EAAKxyB,UAElB,CACD,MAAMw1C,EAAmBhjB,EAAKhrB,OAASgtC,GAAK1V,GAAKvoC,KAAKmhC,eAAeod,WAAav+C,KAAKmhC,eAAeqd,cACtGviB,EAAKxyB,MAAQtF,KAAK4E,IAAIk2C,GAXTh7C,EAWuCg4B,EAAKh4B,KAVtDipC,EAAcT,oBAAoBxoC,KAU6B,EAClEg4B,EAAKijB,WAAajjB,EAAKxyB,MAAQ,EAC/Bu1C,GAAc/iB,EAAKxyB,OAbP,IAACxF,EAiBrB,OADAjE,KAAKwc,SAASwiC,EAAah/C,KAAKoX,SACzBpX,KAGX2U,OACI,IAAI5H,EACJ,MAAM+L,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAMoyB,EAAQ1qB,EAAK2qB,mBAAmB9rB,EAASG,SAASY,MAAOtc,KAAKoR,OACpEg2B,EAAMvkC,GAAK,EACXukC,EAAMv/B,GAAK,GACX,MAAMuP,EAAUpX,KAAKoX,QAEf+3B,EADQzyB,EAAK3B,aACGynB,yBAChB2c,EAAUziC,EAAK4yB,QAAQC,QAAO,CAAC5rC,EAAGC,IAAOD,EAAIC,EAAID,EAAIC,IAErDw7C,EAAchY,EAAMv/B,IAAM7H,KAAKwb,UAAY,GAAK2zB,EAAU/H,EAAMv/B,EAAIs3C,GAAW,EAC/EE,EAAejY,EAAMv/B,IAAM7H,KAAKwb,UAAY,GAAK2zB,EAAU/H,EAAMv/B,EAAIs3C,GAAW,EAChFG,EAAa,CAACz8C,EAAGgF,EAAG4B,EAAOC,KAC7B,MAAM61C,EAAO18C,EAAI4G,EACX+1C,EAAO33C,EACbiR,EAAIlF,OACJkF,EAAIQ,YACJR,EAAIxE,aAAatU,KAAKmhC,eAAekd,YACrCvlC,EAAI1E,eAAepU,KAAKmhC,eAAemd,YACvCxlC,EAAI5E,aAAalU,KAAKmhC,eAAemd,YACrCxlC,EAAIS,OAAO1W,EAAGgF,GACdiR,EAAIW,iBAAiB8lC,EAAMC,EAAM38C,EAAI4G,EAAOC,GAC5CoP,EAAIikB,SACJjkB,EAAItE,WAEFirC,EAAgB,CAAC58C,EAAGgF,EAAG4B,EAAOC,KAChCoP,EAAIlF,OACJkF,EAAIQ,YACJR,EAAIxE,aAAatU,KAAKmhC,eAAekd,YACrCvlC,EAAI1E,eAAepU,KAAKmhC,eAAemd,YACvCxlC,EAAI5E,aAAalU,KAAKmhC,eAAemd,YACrCxlC,EAAIS,OAAO1W,EAAG6G,GACdoP,EAAIW,iBAAiB5W,EAAI4G,EAAOC,EAAQ7G,EAAI4G,EAAO5B,GACnDiR,EAAIikB,SACJjkB,EAAItE,WAEFkrC,EAAkB,CAAC78C,EAAGgF,EAAG0c,KAC3B,MACMo7B,EAAQ93C,EADA,EACY0c,EAC1BzL,EAAIQ,YACJR,EAAIS,OAAO1W,EAAGgF,GACdiR,EAAIU,OAAO3W,EAJG,EAIQ88C,GACtB7mC,EAAIU,OAAO3W,EALG,EAKQ88C,GACtB7mC,EAAIi/B,YACJj/B,EAAIa,QAEFimC,EAAa,CAAC/8C,EAAGoB,KACnB6U,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKwV,UACjB,MAAMqqC,EAAWh9C,EAAIiW,EAAIi2B,YAAY9qC,GAAMwF,MAAQ,EACnDqP,EAAIg3B,SAAS7rC,EAAM47C,EAAUR,GAC7BvmC,EAAItE,WAER,IAAIsrC,EACAC,EAAuB,EACvBC,EAAmB,EACvB,GAAwB,QAAnBjzC,EAAK/M,KAAKo+C,WAAwB,IAAPrxC,OAAgB,EAASA,EAAGjI,OAAQ,CAEhE86C,EADiBljC,EAAK2qB,mBAAmB9rB,EAASG,SAASK,OAAQ/b,KAAKoR,OACpDvO,EAAG7C,KAAKo+C,KAEhC,IAAK,IAAI12C,EAAI,EAAGA,EAAI1H,KAAKm+C,OAAOr5C,SAAU4C,EAAG,CACzC,MAAMu0B,EAAOj8B,KAAKm+C,OAAOz2C,GACpBu0B,EAAKijB,aACNjjB,EAAKijB,WAAa,GACZ,IAANx3C,IACAu0B,EAAKijB,YAAc9nC,GACvB4oC,EAAmB/jB,EAAKijB,WAAaa,GAA8B,IAANr4C,EAAU0P,EAAU,GAC7E6kB,EAAKhrB,OAASgtC,GAAK1V,KACfuX,GAAaA,EAAU7uC,OAASgtC,GAAK1V,IACrCmX,EAAgBtY,EAAMvkC,EAAGu8C,EAAa,GAE1CE,EAAWlY,EAAMvkC,EAAGukC,EAAMv/B,EAAGm4C,EAAkBZ,IAE/CnjB,EAAKhrB,OAASgtC,GAAKzV,OACfsX,GAAaA,EAAU7uC,OAASgtC,GAAK1V,IACrCkX,EAAcrY,EAAMvkC,EAAGukC,EAAMv/B,EAAGm4C,EAAkBZ,GAElDU,GAAaA,EAAU7uC,OAASgtC,GAAKzV,OACrCkX,EAAgBtY,EAAMvkC,EAAGukC,EAAMv/B,GAAI,GACnC43C,EAAcrY,EAAMvkC,EAAGukC,EAAMv/B,EAAGm4C,EAAkBZ,IAEjDU,IACDE,EAAmB/jB,EAAKijB,WACxBO,EAAcrY,EAAMvkC,EAAGukC,EAAMv/B,EAAGm4C,EAAkBZ,KAG1DQ,EAAWxY,EAAMvkC,EAAIm9C,EAAkB/jB,EAAKh4B,MAC5C67C,EAAY7jB,EACZ8jB,EAAuB9jB,EAAKijB,WAC5BY,EAAUj9C,EAAIukC,EAAMvkC,EACpBukC,EAAMvkC,GAAKm9C,EAEf,IAAKF,GAA4Bh9C,MAAfg9C,EAAUj9C,EACxB,MAAM,IAAIR,EAAa,oBAAqB,mBAG5Cy9C,EAAU7uC,OAASgtC,GAAK1V,GACxBmX,EAAgBI,EAAUj9C,EAAIm9C,EAAkBZ,EAAa,GAExDU,EAAU7uC,OAASgtC,GAAKzV,MAC7BkX,EAAgBI,EAAUj9C,EAAIm9C,EAAkB5Y,EAAMv/B,GAAI,IH/NtE,SAAS,MAAK5E,GACNg9C,GAAY/e,OACZn+B,EAAI,uBAAwBE,GGkOpCg7C,GAAKvoC,UAAYrV,OAAO0V,OAAO,GAAIhD,EAAQ2C,WH/N3C,SAAWilC,GACPA,EAA6BA,EAAmC,KAAI,GAAK,OACzEA,EAA6BA,EAAqC,OAAI,GAAK,SAC3EA,EAA6BA,EAAoC,MAAI,GAAK,QAC1EA,EAA6BA,EAA0C,YAAI,GAAK,cAJpF,CAKGA,KAAiCA,GAA+B,KAEnE,SAAWC,GACPA,EAA2BA,EAAgC,IAAI,GAAK,MACpEA,EAA2BA,EAAmC,OAAI,GAAK,SAF3E,CAGGA,KAA+BA,GAA6B,KAE/D,SAAWC,GACPA,EAAYA,EAAmB,MAAI,GAAK,QACxCA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAkB,KAAI,GAAK,OAH3C,CAIGA,KAAgBA,GAAc,KAEjC,SAAWC,GACPA,EAAgBA,EAAsB,KAAI,GAAK,OAC/CA,EAAgBA,EAA2B,UAAI,GAAK,YACpDA,EAAgBA,EAA6B,YAAI,GAAK,cAH1D,CAIGA,KAAoBA,GAAkB,KAKlC,MAAMmF,WAAoB1kC,EAC7Bla,cACIoB,QACAzC,KAAKkgD,aAAe,GACpBlgD,KAAKmgD,WAAaxF,GAA6Bh/B,KAC/C3b,KAAKogD,SAAWxF,GAA2B7N,IAC3C/sC,KAAKqgD,YAAa,EAClBrgD,KAAKsgD,aAAc,EACnBtgD,KAAKkW,YAEE5U,sBACP,OAAOG,EAASw+C,YAETM,2BACP,OAAON,GAAYxwC,QAAQ+wC,OAAOD,cAG3BE,0BAAeC,GACtBT,GAAYU,SAAWD,EAEhBD,4BACP,OAAOR,GAAYU,SAGvBl8C,yBAAyBm8C,GACrB,GAAIX,GAAYxwC,QAAQmxC,GACpB,OAAOX,GAAYxwC,QAAQmxC,GAIxBC,qCACP,OAAOtkB,EAAOoF,mBAAmB3xB,gBAE1B8wC,kCACP,OAAOb,GAAYxwC,QAAQ+wC,OAAOrR,QAAU8Q,GAAYY,wBAE5Dp8C,wBAAwB+T,GACpB,MAAMuoC,EAASd,GAAYe,kBAAkBxoC,EAAMjW,MACnD,OAAKw+C,EAGEA,EAAOzU,aAAe2T,GAAYY,wBAF9B,IAIfp8C,yBAAyB+T,GACrB,MAAMuoC,EAASd,GAAYe,kBAAkBxoC,EAAMjW,MACnD,OAAKw+C,EAGEA,EAAOE,QAAUhB,GAAYY,wBAFzB,EAIfp8C,yBAAyB+T,GACrB,MAAMuoC,EAASd,GAAYe,kBAAkBxoC,EAAMjW,MACnD,OAAKw+C,GAGI,EAAIA,EAAOG,gBAAmBjB,GAAYY,wBAFxC,EAIJjW,+BACP,OAAOqV,GAAYxwC,QAAQ+wC,OAAO5V,kBAAoBqV,GAAYY,wBAE3DhW,6BACP,OAAOoV,GAAYxwC,QAAQ+wC,OAAO3V,gBAAkBoV,GAAYY,wBAEzDM,2BACP,OAAOlB,GAAYxwC,QAAQ+wC,OAAOW,cAAgBlB,GAAYY,wBAGvDpxC,qBACP,OAAO8sB,EAAOoF,mBAAmB7xB,aAAaK,OAAOixC,YAE9CC,8BAIP,OAAOpB,GAAYxwC,QAAQ+wC,OAAOa,iBAE3BC,8BACP,OAAOrB,GAAYxwC,QAAQ+wC,OAAOc,iBAEtC78C,qBAAqBzB,GACjB,YAAgCF,IAAzBE,EAAMu+C,gBAAgCv+C,EAAMu+C,iBAAmBzG,GAAgB0G,YAE1F/8C,mBAAmBzB,GACf,YAAgCF,IAAzBE,EAAMu+C,gBAAgCv+C,EAAMu+C,iBAAmBzG,GAAgB2G,UAM1Fh9C,cAAci9C,EAASjgB,GACnB,IAAI10B,EACJ,IAAK20C,GAA8B,IAAnBA,EAAQ58C,OACpB,OAAO,EACX,IAAI2E,EAAQ,EACRk4C,EAAgB,EACpB,MAAMC,EAAiB,GACvB,IAAK,MAAMC,KAAUH,EAAS,CAC1B,MAAM70C,EAAWH,EAAK4J,wBAAmD,QAA1BvJ,EAAK80C,EAAOrsC,gBAA6B,IAAPzI,OAAgB,EAASA,EAAGO,MACvGw0C,EAAUp1C,EAAKq1C,UAAUl1C,EAAU,KACnCm1C,EAAqB,EAAVF,EACjB,IAAIG,EAAa,EACbC,GAAS,EACb,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAO3B,aAAap7C,SAAUq9C,EAAG,CACjD,MAAMn/C,EAAQ6+C,EAAO3B,aAAaiC,GAC5BC,EAAMnC,GAAYoC,cAAcr/C,GAChCs/C,EAAMrC,GAAYsC,YAAYv/C,GAC9Bw/C,EAAgBJ,GAAOE,EAAMrC,GAAYM,cAAgB,EACzDkC,EAAMz/C,EAAM0/C,aAAe7H,GAAY8H,MAAQX,EAAWQ,EAAgBV,EAAUU,GAGtFJ,GAAOE,KACPL,EAAa,GAIjB,MAAMp1C,EAAWg1C,EAAO3U,cAAc32B,iBAChCqsC,EAAmB/1C,EAAW21C,EAmBpC,GAlBIx/C,EAAM0/C,aAAe7H,GAAY8H,YAAyB7/C,IAAhBE,EAAMwV,OAChDxV,EAAMyG,MAAQw2C,GAAY4C,iBAAiB7/C,EAAMwV,OAASoqC,EAC1D5/C,EAAM0X,QAAUulC,GAAY6C,kBAAkB9/C,EAAMwV,OAASoqC,EAC7D5/C,EAAMwX,QAAUylC,GAAY8C,kBAAkB//C,EAAMwV,OAASoqC,EAC7D5/C,EAAMwV,MAAMrB,MAAQnU,EAAMwV,MAAMrB,MAAQsrC,GAEnCz/C,EAAM0/C,aAAe7H,GAAYmI,OACtChgD,EAAMyG,MAAQzG,EAAMyG,MAAQm5C,EAC5B5/C,EAAM0X,QAAUmnC,EAAOoB,kBAAkBjgD,EAAMiB,MAAQw+C,GAEvDz/C,EAAM0/C,aAAe7H,GAAY8H,YACjB7/C,IAAhBE,EAAMwV,OACNxV,EAAMwV,MAAMjW,OAAS09C,GAAY9vC,OAAO+yC,KAAK3gD,OAC7C0/C,EAAa,GAEjBj/C,EAAMyG,OAASw2C,GAAYa,qBAAuBj0C,EAAW21C,EAGzDJ,GAAOD,EAAI,EAAG,CACd,MAAMgB,EAAOtB,EAAO3B,aAAaiC,EAAI,GAChClC,GAAYoC,cAAcc,KAC3BxB,EAAgBl4C,GAGpB64C,GAAOX,EAAgB,IACvBO,GAAS,EAETl/C,EAAMwX,OAASxX,EAAMwX,QAAUmnC,EAAgBl4C,GAC/CA,EAAQk4C,EACRA,EAAgB,EAEhBE,EAAOuB,kBAAiB,IAEvBhB,GAAQE,IACTX,EAAgB,GAEpB3+C,EAAMk/C,OAASA,EACfz4C,GAASzG,EAAMyG,MAGnBo4C,EAAOwB,2BACPxB,EAAOyB,2BACHzB,EAAO0B,gBAAkB3I,GAA2B7N,KACpD8U,EAAOvkC,YAAYmkB,EAAMwM,eACzBxM,EAAMwM,eAAiBgU,IAGvBJ,EAAOvkC,YAAYmkB,EAAMjmB,UAAY,GACrCimB,EAAMjmB,WAAaymC,EAAa,GAEhCJ,EAAO2B,iBACP5B,EAAe/pC,KAAKpO,GAGpBm4C,EAAe/pC,KAAK,GAM5B,OAHApO,EAAQm4C,EAAerS,QAAO,CAAC5rC,EAAGC,IAAMD,EAAIC,GAAG,GAC/C69B,EAAMK,YAAcr4B,EAAQ,EAC5Bg4B,EAAM4M,aAAe5kC,EAAQ,GACtB,EAOAiM,uBACP,IAAIhI,EAAS,4BAKb,MAJ4C,aAAxC6uB,EAAOoF,mBAAmB/xB,YAE1BlC,EAAS,qCAEN,CACHA,OAAAA,EACAJ,KAAM,GACNC,OAAQjC,EAAWsC,OACnBJ,MAAOjC,EAAUqC,QAMrBg9B,wBACA,OAAOqV,GAAYrV,kBAAoB5qC,KAAKktC,cAAc32B,iBAE1Ds0B,sBACA,OAAOoV,GAAYpV,gBAAkB7qC,KAAKktC,cAAc32B,iBAE5DktC,eAAev+C,GAEX,OADAlF,KAAKsgD,YAAcp7C,EACZlF,KAEXwjD,iBACI,OAAOxjD,KAAKsgD,YAEhBgD,2BACI,MAAMI,EAAW1jD,KAAKkgD,aAAayD,WAAU,EAAGjB,WAAAA,EAAYlqC,MAAAA,KAAYkqC,IAAe7H,GAAY8H,YAAmB7/C,IAAV0V,GAAsC,iCAAfA,EAAMjW,OACzI,GAAImhD,EAAW,EACX,OAEJ,MACME,EADM5jD,KAAKkgD,aAAawD,GACbj6C,MAAQ,EACnBo6C,EAAO,IAAO7jD,KAAKktC,cAAc32B,iBACvC,IAAIutC,EAAW,EACf,KAAqBA,EAAWJ,IAAYI,EAAU,CAClD,MAAMjC,EAAS7hD,KAAKkgD,aAAa4D,GACjCjC,EAAOrnC,OAASqnC,EAAOrnC,OAASopC,EAChC/B,EAAOnnC,OAASmnC,EAAOnnC,OAASmpC,EAEpC,IAAKC,EAAWJ,EAAW,EAAGI,EAAW9jD,KAAKkgD,aAAap7C,SAAUg/C,EAAU,CAC3E,MAAMjC,EAAS7hD,KAAKkgD,aAAa4D,GACjCjC,EAAOrnC,OAASqnC,EAAOrnC,OAASopC,EAChC/B,EAAOnnC,OAASmnC,EAAOnnC,OAASmpC,GAGxCR,2BACI,IAAIU,EAAQ,EACZ,IAAK,IAAI5B,EAAI,EAAGA,EAAIniD,KAAKkgD,aAAap7C,SAAUq9C,EAAG,CAC/C,MAAMN,EAAS7hD,KAAKkgD,aAAaiC,GACjC4B,GAAS/jD,KAAKgkD,qBAAqB7B,GACnCN,EAAOrnC,QAAUupC,GAIzBC,qBAAqB7B,GACjB,IAAKniD,KAAKqgD,WACN,OAAO,EAEX,MAAM4D,EAAajkD,KAAKkgD,aAAaiC,GAC/B+B,EAAa/B,EAAI,EAAIniD,KAAKkgD,aAAaiC,EAAI,QAAKr/C,EACtD,IAAIqhD,EAAa,EAEbF,EAAWvB,aAAe7H,GAAY8H,YACjB7/C,IAArBmhD,EAAWzrC,OACXyrC,EAAWzrC,MAAMjW,OAAS09C,GAAY9vC,OAAO+yC,KAAK3gD,OAClD4hD,GAAcF,EAAWzrC,MAAM/I,QAAQ2H,cAExBtU,IAAfohD,GACAA,EAAWxB,aAAe7H,GAAY8H,YACjB7/C,IAArBohD,EAAW1rC,OACX0rC,EAAW1rC,MAAMjW,OAAS09C,GAAY9vC,OAAO+yC,KAAK3gD,OAClD4hD,GAAcD,EAAW1rC,MAAM/I,QAAQ2H,SAG3C,IAAIgtC,GAAe,EACfC,GAAe,OACAvhD,IAAfohD,GAA4BA,EAAWxB,aAAe7H,GAAYmI,OAClEoB,EAAenE,GAAYqB,iBAAiBgD,MAAMC,GAAOA,IAAOL,EAAWjgD,KAAKigD,EAAWjgD,KAAKa,OAAS,KACzGu/C,EAAepE,GAAYoB,iBAAiBiD,MAAMC,GAAOA,IAAOL,EAAWjgD,KAAKigD,EAAWjgD,KAAKa,OAAS,MAE7G,MAAM0/C,EAAsBvE,GAAYkB,cAAgBnhD,KAAKktC,cAAc32B,iBAc3E,OAXI6tC,GAAgBH,EAAW1C,iBAAmBzG,GAAgB0G,cAC9D2C,GAAcK,GAEdH,GAAgBJ,EAAWvB,aAAe7H,GAAYmI,OAClDiB,EAAWhgD,KAAK,IAAM,KAAOggD,EAAWhgD,KAAK,IAAM,MACnDkgD,GAAcK,EAAsB,GAEpCvE,GAAYqB,iBAAiBgD,MAAMC,GAAOA,KAAQL,MAAAA,OAA+C,EAASA,EAAWjgD,KAAKigD,EAAWjgD,KAAKa,OAAS,QACnJq/C,GAAcK,EAAsB,IAGrCL,EAOXM,eAAe/nB,EAAS,IACpB,IAAI3vB,EAAIkF,EAAIyyC,EACZ,MAAMhC,EAA0C,QAA5B31C,EAAK2vB,EAAOgmB,kBAA+B,IAAP31C,EAAgBA,EAAK8tC,GAAYmI,KACnF2B,EAAc,CAChB1gD,KAA6B,QAAtBgO,EAAKyqB,EAAOz4B,YAAyB,IAAPgO,EAAgBA,EAAK,GAC1DywC,WAAAA,EACAnB,eAAiD,QAAhCmD,EAAKhoB,EAAO6kB,sBAAmC,IAAPmD,EAAgBA,EAAK5J,GAAgBmB,KAC9FzhC,OAAQ,EACRE,OAAQ,EACRwnC,QAAQ,EACRz4C,MAAO,GAIX,GAAIi5C,IAAe7H,GAAY8H,OAAiC,iBAAjBjmB,EAAOlkB,MAAoB,CACtE,MAAMosC,EAAY3E,GAAY9vC,OAAOusB,EAAOlkB,OACtCqsC,EAAc,GACpBF,EAAYnsC,MAAQ,IAAI1B,EAAM8tC,EAAUriD,KAAMsiD,EAAa,CAAE3jD,SAAU,qBAMlEwhD,IAAe7H,GAAYmI,KAChC2B,EAAYl7C,MAAQzJ,KAAKktC,cAAcX,oBAAoBoY,EAAY1gD,MAElEy+C,IAAe7H,GAAY9iC,OAChC4sC,EAAYl7C,MAAQizB,EAAOjzB,OAE/B,OAAOk7C,EAIXG,eAAeC,GAEX,OADA/kD,KAAKkgD,aAAaroC,KAAK7X,KAAKykD,eAAeM,IACpC/kD,KAKXglD,QAAQ/gD,EAAM8gD,EAAa,IACvB,MAAMrC,EAAa7H,GAAYmI,KAC/B,OAAOhjD,KAAK8kD,eAAezkD,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAIgvC,GAAa,CAAE9gD,KAAAA,EAAMy+C,WAAAA,KAGpFuC,mBAAmBhhD,GACf,MAAMy+C,EAAa7H,GAAYmI,KACzBzB,EAAiBzG,GAAgB0G,YACvC,OAAOxhD,KAAK8kD,eAAe,CAAE7gD,KAAAA,EAAMy+C,WAAAA,EAAYnB,eAAAA,IAGnD2D,iBAAiBjhD,GACb,MAAMy+C,EAAa7H,GAAYmI,KACzBzB,EAAiBzG,GAAgB2G,UACvC,OAAOzhD,KAAK8kD,eAAe,CAAE7gD,KAAAA,EAAMy+C,WAAAA,EAAYnB,eAAAA,IAGnD4D,oBAAoB3sC,GAChB,MAAMkqC,EAAa7H,GAAY8H,MACzBpB,EAAiBzG,GAAgB0G,YACvC,OAAOxhD,KAAK8kD,eAAe,CAAEtsC,MAAAA,EAAOkqC,WAAAA,EAAYnB,eAAAA,IAIpD6D,SAAS5sC,EAAOkkB,EAAS,IACrB,MAAMgmB,EAAa7H,GAAY8H,MAC/B,OAAO3iD,KAAK8kD,eAAezkD,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI2mB,GAAS,CAAElkB,MAAAA,EAAOkqC,WAAAA,KAOjF2C,eAAephD,EAAMy4B,EAAS,IAC1B,IAAIj1B,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIzD,EAAKa,SAAU4C,EAAG,CAClC,MAAM49C,EAAOrhD,EAAKyD,GACdu4C,GAAY9vC,OAAOm1C,IACf79C,EAAI3C,OAAS,IACb9E,KAAKglD,QAAQv9C,EAAKi1B,GAClBj1B,EAAM,IAEVzH,KAAKolD,SAASE,EAAM5oB,IAIpBj1B,GAAO69C,EAMf,OAHI79C,EAAI3C,OAAS,GACb9E,KAAKglD,QAAQv9C,EAAKi1B,GAEf18B,KAIXulD,QAAQ97C,EAAOizB,EAAS,IACpB,MAAMgmB,EAAa7H,GAAY9iC,KAC/B,OAAO/X,KAAK8kD,eAAezkD,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI2mB,GAAS,CAAEgmB,WAAAA,EAAYj5C,MAAAA,KActF6L,QAAQ/N,EAAG+F,EAAMC,EAAQC,GAGrB,OAFA/K,MAAM6S,QAAQ/N,EAAG+F,EAAMC,EAAQC,GAC/BxN,KAAKktC,cAAgB7C,GAAc8C,OAAOntC,KAAKwV,UACxCxV,KAEXojD,iBAAiB1C,GAEb,OADA1gD,KAAKqgD,WAAaK,EACX1gD,KAGXwlD,YAAYC,GAER,OADAzlD,KAAKogD,SAAyB,iBAAPqF,EAAkBxF,GAAYzR,sBAAsBiX,GAAMA,EAC1EzlD,KAEXujD,cACI,OAAOvjD,KAAKogD,SAGhBsF,cAAcC,GAEV,OADA3lD,KAAKmgD,WAA2B,iBAAPwF,EAAkB1F,GAAYtR,wBAAwBgX,GAAMA,EAC9E3lD,KAEX4lD,gBACI,OAAO5lD,KAAKmgD,WAEhB5jC,WACI,IAAI9S,EAAQ,EAIZ,OAHAzJ,KAAKkgD,aAAahiC,SAAS2jC,IACvBp4C,GAASo4C,EAAOK,OAAS,EAAIL,EAAOp4C,SAEjCA,EAEXw5C,kBAAkBh/C,GACd,IAAI8I,EACJ,IAAIuZ,EAAM,EACN5e,EAAI,EACR,IAAKA,EAAI,EAAGA,EAAIzD,EAAKa,SAAU4C,EAAG,CAC9B,MAAM+H,EAAUzP,KAAKktC,cAAchB,gBAAgBjoC,EAAKyD,IACxD,GAAI+H,EAAS,CACT,MAAMo2C,EAAgC,QAAxB94C,EAAK0C,EAAQq2C,aAA0B,IAAP/4C,EAAgBA,EAAK,EACnEuZ,EAAMu/B,EAAOv/B,EAAMu/B,EAAOv/B,GAGlC,MAAMrW,EAAajQ,KAAKktC,cAAcl9B,gBACtC,OAAOtI,EAAI,EAAU4e,EAAMrW,GAAX,EAAyB,EAG7C0E,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cAEL8D,EAAIlF,OACJ,MAAMg7B,EAAcvuC,OAAOiS,KAAKtS,KAAK6R,aAAa,YAAYxO,KAAK,KACnEyV,EAAI+1B,UAAUD,EAAa5uC,KAAK6R,aAAa,OAC7C,MAAMu1B,EAAQ1qB,EAAK2qB,mBAAmB9rB,EAASG,SAASO,MAAOjc,KAAKoR,OAEpE,IAAIvJ,EADJiR,EAAIxD,QAAQtV,KAAKwV,UAIjB,MAAM83B,EAAU5wB,EAAK4wB,UACfpzB,EAAQwC,EAAK3B,aACnB,GAAI/a,KAAKogD,WAAaxF,GAA2B1M,QAG7C,GADArmC,EAAIqS,EAAMw1B,kBAAkB1vC,KAAKwb,UAAY+gB,EAAOwC,yBAChDuO,EAAS,CACT,MAAM4B,EAAWxyB,EAAK2yB,YAAYlG,aAC5BgG,EAAUj1B,EAAMsoB,yBAChBujB,EAAwC,IAA5BrpC,EAAK6wB,mBAA2B2B,EAASvF,MAAQuF,EAASxF,KAC5E7hC,EAAI1D,KAAK4E,IAAIlB,EAAGk+C,EAAY5W,GAAWnvC,KAAKwb,UAAY,UAM5D,GADA3T,EAAI1D,KAAKqlC,IAAItvB,EAAMu1B,eAAezvC,KAAKwb,WAAYkB,EAAK4yB,QAAQ,GAAK,IACjEhC,EAAS,CACT,MAAM4B,EAAWxyB,EAAK2yB,YAAYlG,aAC5BgG,EAAUj1B,EAAMsoB,yBACtB36B,EAAI1D,KAAKqlC,IAAI3hC,EAAGqnC,EAASxF,KAAO,EAAIyF,EAAUnvC,KAAKwb,WAG3D,IAAI3Y,EAAIukC,EAAMvkC,EAEVA,EADA7C,KAAKmgD,aAAexF,GAA6Bh/B,KAC7CyrB,EAAMvkC,EAEL7C,KAAKmgD,aAAexF,GAA6Br+B,MAClD8qB,EAAMvkC,EAAI7C,KAAKuc,WAEdvc,KAAKmgD,aAAexF,GAA6B5+B,OAClDqrB,EAAMvkC,EAAI7C,KAAKuc,WAAa,EAI5BG,EAAKuyB,WAAajvC,KAAKuc,WAAa,EAE5C,GAAE,0BAA2Bvc,KAAKktC,cAAerqC,EAAGgF,GACpD7H,KAAKkgD,aAAahiC,SAAS2jC,IACvB,MAAMmE,EAAU/F,GAAYoC,cAAcR,GACpCoE,EAAQhG,GAAYsC,YAAYV,GACtC,IAAIqE,EAAOr+C,EAUX,GATA,GAAE,aAAcg6C,EAAOrnC,OAAQqnC,EAAOnnC,QACtC,GAAE,gBAAiBwrC,GACfF,IACAE,GAAQlmD,KAAK4qC,mBAEbqb,IACAC,GAAQlmD,KAAK6qC,iBAEjB,GAAE,gBAAiBqb,GACfrE,EAAOa,aAAe7H,GAAYmI,KAAM,CACxC,IAAIgD,GAAWC,KACXntC,EAAIlF,OACA5T,KAAKwV,UAAU,CACf,MAAM,OAAE9H,EAAM,KAAEJ,EAAI,OAAEC,EAAM,MAAEC,GAAUxN,KAAKwV,SACvC2wC,EAAkBz5C,EAAKq1C,UAAUz0C,EAAM2yC,GAAYM,eACzDznC,EAAIxD,QAAQ5H,EAAQy4C,EAAiB54C,EAAQC,GAOrD,GAAE,mBAAoBq0C,EAAO59C,KAAMpB,EAAIg/C,EAAOrnC,OAAQ0rC,EAAOrE,EAAOnnC,QACpE5B,EAAIg3B,SAAS+R,EAAO59C,KAAMpB,EAAIg/C,EAAOrnC,OAAQ0rC,EAAOrE,EAAOnnC,SACvDsrC,GAAWC,IACXntC,EAAItE,eAGHqtC,EAAOa,aAAe7H,GAAY8H,OAASd,EAAOrpC,OACvD0tC,GAAQrE,EAAOnnC,OACf,GAAE,oBAAqBmnC,EAAOrpC,MAAMjW,KAAMM,EAAIg/C,EAAOrnC,OAAQ0rC,GAC7DrE,EAAOrpC,MAAMoC,OAAO9B,EAAKjW,EAAIg/C,EAAOrnC,OAAQ0rC,IAEvCrE,EAAOa,aAAe7H,GAAY9iC,OACvC,GAAE,oBAAqB8pC,EAAOp4C,MAAO5G,EAAGqjD,GACxCptC,EAAIQ,YACJR,EAAIxE,aAAa,GACjBwE,EAAIS,OAAO1W,EAAGgF,GACdiR,EAAIU,OAAO3W,EAAIg/C,EAAOp4C,MAAOy8C,GAC7BptC,EAAIikB,UAERl6B,GAAKg/C,EAAOp4C,MACRo4C,EAAOK,SACPr/C,GAAKg/C,EAAOrnC,WAGpB1B,EAAIi3B,aACJj3B,EAAItE,WAGZyrC,GAAY/e,OAAQ,EAEpB+e,GAAYjQ,kBAAoB2K,GAChCsF,GAAYtR,wBAA0B,CAClCvyB,KAAMu+B,GAA6Bh/B,KACnCU,MAAOs+B,GAA6Br+B,MACpCR,OAAQ6+B,GAA6B5+B,OACrCk0B,WAAY0K,GAA6BzK,aAE7C+P,GAAYpS,gBAAkB+M,GAC9BqF,GAAYzR,sBAAwB,CAChC2B,IAAKyK,GAA2B7N,IAChC/wB,MAAO4+B,GAA2B7N,IAClC7wB,MAAO0+B,GAA2B1M,OAClCkC,OAAQwK,GAA2B1M,QAGvC+R,GAAY9vC,OAAS,CACjBi2C,WAAY,CACR7jD,KAAM,kBAEV8jD,IAAK,CACD9jD,KAAM,kBAEV+jD,eAAgB,CACZ/jD,KAAM,sBAEV,IAAK,CACDA,KAAM,iBAEVgkD,UAAW,CACPhkD,KAAM,iBAEVikD,aAAc,CACVjkD,KAAM,oBAEV2e,MAAO,CACH3e,KAAM,aAEV,IAAK,CACDA,KAAM,aAEV,IAAK,CACDA,KAAM,sBAEVkkD,UAAW,CACPlkD,KAAM,sBAEV,IAAK,CACDA,KAAM,uBAEVmkD,WAAY,CACRnkD,KAAM,uBAEVokD,YAAa,CACTpkD,KAAM,uBAEVqkD,aAAc,CACVrkD,KAAM,wBAEVskD,cAAe,CACXtkD,KAAM,0BAEVukD,eAAgB,CACZvkD,KAAM,2BAEV,IAAK,CACDA,KAAM,gCAEV2gD,KAAM,CACF3gD,KAAM,gCAEV,IAAK,CACDA,KAAM,mBAEVqB,EAAG,CACCrB,KAAM,mBAGd09C,GAAY8G,YAAclM,GAC1BoF,GAAY+G,gBAAkBlM,GAE9BmF,GAAYU,UAAW,EIrqBhB,MAAMsG,WAAY1rC,EACrBla,cACIoB,QACAzC,KAAKyb,SAAWF,EAASG,SAASY,MAClCtc,KAAKknD,OAAS,EACdlnD,KAAKwc,SAAS,GACdxc,KAAKygC,WAAa,EAEXn/B,sBACP,OAAOG,EAASwlD,IAGpBxiD,eAAeiY,GACX,OAAOA,EAAK28B,mBAAmB4N,GAAI3lD,UAGvCmD,sBAAsBo5B,EAAO3lB,GACzB,IAAK,MAAMwE,KAAQmhB,EACf,GAAI3lB,MAAAA,OAAyC,EAASA,EAAQivC,IAC1D,IAAK,IAAIz/C,EAAI,EAAGA,EAAIgV,EAAKpK,KAAKxN,OAAQ4C,IAAK,CACvC,MAAM0/C,EAAM,IAAIH,GAChBG,EAAIC,aAAa3qC,EAAKlE,MAAMioB,YAC5B/jB,EAAKkqB,YAAYwgB,EAAK1/C,QAGzB,GAAyE5E,OAApEoV,MAAAA,OAAyC,EAASA,EAAQ9G,OAAqB,CACrF,MAAMg2C,EAAM,IAAIH,GAChBG,EAAIC,aAAa3qC,EAAKlE,MAAMioB,YAC5B/jB,EAAKkqB,YAAYwgB,EAAKlvC,MAAAA,OAAyC,EAASA,EAAQ9G,WAE/E,CACD,MAAMg2C,EAAM,IAAIH,GAChBG,EAAIC,aAAa3qC,EAAKlE,MAAMioB,YAC5B/jB,EAAKkqB,YAAYwgB,EAAK,IAKlC3iD,cAAc0zC,EAAM1W,GAChB,MAAM4M,EAAc5M,EAAM4M,YAE1B,IAAK8J,GAAwB,IAAhBA,EAAKrzC,OACd,OAAO,EACX,MAAMwiD,EAAW,GACXC,EAAgB,GACtB,IAAK,IAAI7/C,EAAI,EAAGA,EAAIywC,EAAKrzC,SAAU4C,EAAG,CAClC,MAAM0/C,EAAMjP,EAAKzwC,GACXgV,EAAO0qC,EAAI3qC,UACjB,IAAI2lB,EACAp9B,EACJ,GAAIjD,EAAY2a,GAAO,CACnB,MAAMtL,EAAQg2C,EAAItqC,aAClBslB,EAAQ1lB,EAAK2lB,cAAcjxB,GAE3BpM,EAAQ0X,EAAKq9B,oBAEZ,KAAI53C,EAAUua,GAMf,MAAM,IAAIra,EAAa,WAAY,wBALnC+/B,EAAQ,CAAEl/B,KAAM,IAChB8B,EAAQqpC,EAMZ,MAAMmZ,EAAU9qC,EAAK7K,aAAa,MAClCy1C,EAASzvC,KAAK,CAAE3U,KAAMk/B,EAAMl/B,KAAMwZ,KAAAA,EAAM8qC,QAAAA,EAASJ,IAAAA,IACjDG,EAAcC,GAAWrjD,KAAK4E,IAAIw+C,EAAcC,IAAYxiD,EAAOA,GAGvEsiD,EAAS1kB,MAAK,CAACj/B,EAAGC,IAAMA,EAAEV,KAAOS,EAAET,OACnC,IAAIukD,EAAYpZ,EACZqZ,EAAU,EACVC,EAAY,KACZC,EAAY,KACZC,EAAoB,KACpBC,EAAc,EAClB,IAAK,IAAIpgD,EAAI,EAAGA,EAAI4/C,EAASxiD,SAAU4C,EAAG,CACtC,MAAM,IAAE0/C,EAAG,KAAE1qC,EAAI,QAAE8qC,EAAO,KAAEtkD,GAASokD,EAAS5/C,GAE1CxE,IAASykD,GAAajrC,IAASkrC,IAC/BH,EAAYF,EAAcC,IAEzB9qC,EAAKupB,UAAY/iC,IAASykD,IACA,KAAvBxjD,KAAK6C,IAAI9D,EAAO,GAEhB4kD,EAAc,GAIdA,EAAc,GACG,MAAbF,GAAsBA,EAAU3hB,UAAyB,MAAb0hB,GAAqBA,EAAYzkD,GAAS,GAIjFA,EAAO4kD,IAAgBD,IAE5BC,GAAe,IAJfA,GAAe,KASvBprC,EAAKupB,SACLmhB,EAAI3mB,aAAeqnB,EAGnBV,EAAI3mB,YAAcqnB,EAEtBD,EAAoB3kD,EAAO4kD,EAC3BV,EAAIjtC,UAAUstC,GACdA,GAAaL,EAAI7qC,WArED,EAsEhBmrC,EAAUD,EAAYC,EAAUD,EAAYC,EAC5CC,EAAYzkD,EACZ0kD,EAAYlrC,EAIhB,OADA+kB,EAAM4M,aAAeqZ,GACd,EAEX9qC,QAAQF,GAMJ,OALA1c,KAAK0c,KAAOA,EACR/a,EAAY+a,KACZ1c,KAAKknD,QAAU,GACflnD,KAAKwc,SAAS,IAEXxc,KAEXqnD,aAAax/C,GAET,OADA7H,KAAKygC,WAAa54B,EACX7H,KAEX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MACMutB,EADQ7lB,EAAK3B,aACKynB,yBAClB4E,EAAQ1qB,EAAK2qB,mBAAmBrnC,KAAKyb,SAAUzb,KAAKoR,MAAO,CAAE22C,gBAAgB,IAE/E5lD,EAAUua,KACV0qB,EAAMv/B,EAAI6U,EAAKmzB,iBAAiBlG,OAEpC,MAAM9mC,EAAIukC,EAAMvkC,EAAI7C,KAAKoX,QAAUpX,KAAKyJ,MAAQzJ,KAAKknD,OAC/Cr/C,EAAIu/B,EAAMv/B,EAAI7H,KAAKqX,QAAUrX,KAAKygC,WAAa8B,EACrDzpB,EAAIQ,YACJR,EAAIg/B,IAAIj1C,EAAGgF,EAAG7H,KAAKknD,OAAQ,EAAa,EAAV/iD,KAAKC,IAAQ,GAC3C0U,EAAIa,QC9IL,MAAMquC,WAAuBzsC,EAChCla,YAAY4mD,GACRxlD,QACAzC,KAAKioD,OAASA,EACdjoD,KAAKyJ,MAAQ,EACbzJ,KAAKyb,SAAWF,EAASG,SAASC,KAClC3b,KAAKoX,QAAU,EACfpX,KAAKqX,QAAU,EACfrX,KAAKkoD,SAAW,EAChBloD,KAAKkpC,SAAW,EAChBlpC,KAAKkW,YAEE5U,sBACP,OAAOG,EAASumD,eAGpBvjD,cAAc0jD,EAAM1mB,GAChB,MAAM,WAAEK,EAAU,YAAEuM,GAAgB5M,EAEpC,IAAK0mB,GAAwB,IAAhBA,EAAKrjD,OACd,OAAO,EACX,MAAMsjD,EAAY,GAClB,IAAIC,EAAY,KACZC,EAAY,EACZC,EAAa,EACjB,IAAK,IAAI7gD,EAAI,EAAGA,EAAIygD,EAAKrjD,SAAU4C,EAAG,CAClC,MAAMye,EAAMgiC,EAAKzgD,GACXgV,EAAOyJ,EAAI1J,UACX+rC,EAAMriC,EAAI/I,cACVhM,EAAQ+U,EAAIrJ,aACZslB,EAAQ1lB,EAAK2lB,cAAcjxB,GAE3Bq3C,EADgBpe,GAAc8C,OAAOhnB,EAAI3Q,UACd42B,UAOjC,GANIjmB,EAAI1K,WAAa/E,EAAiBuF,QAClCwlB,EAAMwM,eAAiBwa,EAAalsB,EAAOuC,oBAAsB,IAEjE3Y,EAAI1K,WAAa/E,EAAiByF,QAClCslB,EAAMjmB,WAAaitC,EAAalsB,EAAOuC,oBAAsB,IAE7DpiB,IAAS2rC,EAAW,CACpB,IAAK,IAAIvkD,EAAI,EAAGA,EAAI4Y,EAAKpK,KAAKxN,SAAUhB,EACjB,IAAfg+B,IACAwmB,EAAYnkD,KAAK4E,IAAI2T,EAAK4lB,yBAA0BgmB,IAEpC,IAAhBja,IACAka,EAAapkD,KAAK4E,IAAI2T,EAAKk8B,0BAA2B2P,IAG9DF,EAAY3rC,EAEhB0rC,EAAUvwC,KAAK,CACX6E,KAAAA,EACAyJ,IAAAA,EACAqiC,IAAAA,EACAtlD,KAAMk/B,EAAMl/B,KACZi/B,OAAQmmB,EACRI,OAAQH,IAIhBH,EAAUxlB,MAAK,CAACj/B,EAAGC,IAAMA,EAAEV,KAAOS,EAAET,OACpC,IAAIylD,EAAY,EACZC,EAAY,EACZC,EAAU,EACVC,EAAU,EACVC,EAAW,KACXC,EAAW,KACf,IAAK,IAAIthD,EAAI,EAAGA,EAAI0gD,EAAUtjD,SAAU4C,EAAG,CACvC,IAAIuhD,EAAY,EAChB,MAAM,KAAEvsC,EAAI,IAAE8rC,EAAG,IAAEriC,EAAG,KAAEjjB,EAAI,OAAEi/B,EAAM,OAAEumB,GAAWN,EAAU1gD,GAEvDxE,IAAS6lD,GAAYrsC,IAASssC,IAC9BL,EAAY7mB,EAAaK,EACzBymB,EAAYva,EAAcqa,GAE9B,MAAMQ,EAAW/iC,EAAI5J,WAzDL,EA0DZisC,IAAQjtC,EAASG,SAASC,MAC1BwK,EAAIhM,UAAU2nB,EAAa6mB,GAC3BM,EAAYnnB,EAAaonB,EACzBL,EAAUI,EAAYJ,EAAUI,EAAYJ,GAEvCL,IAAQjtC,EAASG,SAASY,QAC/B6J,EAAIhM,UAAUyuC,GACdK,EAAYV,EAAaW,EACzBJ,EAAUG,EAAYH,EAAUG,EAAYH,GAEhDC,EAAW7lD,EACX8lD,EAAWtsC,EAIf,OAFA+kB,EAAMK,YAAc+mB,EACpBpnB,EAAM4M,aAAeya,GACd,EAEXrkD,sBAAqB,WAAE0kD,GAAe,GAAIzsC,EAAMw0B,GAC5CiY,MAAAA,GAAwDA,EAAWxhD,MAAM,KAAK4K,KAAK62C,IAC/E,MAAMzhD,EAAQyhD,EAAgB96C,OAAO3G,MAAM,KACrC+0B,EAAS,CAAE2sB,OAAQ1hD,EAAM,IAG/B,OAFIA,EAAM,KACN+0B,EAAOjhB,SAAW9T,EAAM,IACrBupC,EAAQM,aAAa8X,UAAU5sB,MACvCnqB,KAAI,CAACg3C,EAAWn4C,IAAUsL,EAAKkqB,YAAY2iB,EAAWn4C,KAE7Do4C,kBAAkBvB,GAEd,OADAjoD,KAAKioD,OAASA,EACPjoD,KAEXypD,oBACI,OAAOzpD,KAAKioD,OAEhByB,WAAW7mD,GAEP,OADA7C,KAAKkoD,SAAWrlD,EACT7C,KAEX2pD,WAAW9hD,GAEP,OADA7H,KAAKkpC,SAAWrhC,EACT7H,KAEX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAMoyB,EAAQ1qB,EAAK2qB,mBAAmBrnC,KAAKyb,SAAUzb,KAAKoR,OAC1D,IAAIwsC,EAAQxW,EAAMvkC,EAAI7C,KAAKoX,QAAUpX,KAAKkoD,SACtCpK,EAAQ1W,EAAMv/B,EAAI7H,KAAKqX,QAAUrX,KAAKkpC,SAAW,EACrD,OAAQlpC,KAAKyb,UACT,KAAKF,EAASG,SAASO,MACnB2hC,GAAS,EACTE,GAAS,GACT,MACJ,KAAKviC,EAASG,SAASS,MACnByhC,GAAS,EACTE,GAAS,GACT,MACJ,KAAKviC,EAASG,SAASC,KACnBiiC,GAAS59C,KAAKyJ,MACd,MACJ,KAAK8R,EAASG,SAASY,MACnBshC,GAAS,EACT,MACJ,QACI,MAAM,IAAIv7C,EAAa,kBAAmB,gBAAgBrC,KAAKyb,2BAEvE3C,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKwV,UACjBsD,EAAIg3B,SAAS,GAAK9vC,KAAKioD,OAAQrK,EAAOE,GACtChlC,EAAItE,WAGZwzC,GAAetyC,UAAY,CACvBhI,OAAQhB,EAAKiB,WACbL,KAAM,EACNC,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUqC,QC3Jd,MAAMg8C,WAAiB72C,EAa1B1R,YAAYw8B,EAAO55B,GACfxB,QACAzC,KAAK6pD,SAAShsB,GACd79B,KAAKiE,KAAOA,EACZjE,KAAKmhC,eAAiB,CAClB2oB,IAAK,EACLC,IAAK,GACLC,aAAc,EACdC,cAAe,EACfC,aAAc,EACd7yC,QAAS,EACT8yC,YAAa,GAEjBnqD,KAAKkW,YAEE5U,sBACP,OAAOG,EAASmoD,SAEpBhhB,aAAarkB,GAET,OADAvkB,KAAKukB,UAAYA,EACVvkB,KAOX6pD,SAAShsB,GACL,IAAKA,EAAMusB,aAAevsB,EAAM+pB,UAC5B,MAAM,IAAIvlD,EAAa,eAAgB,yDAQ3C,GANKw7B,EAAMwsB,gBACPxsB,EAAMwsB,cAAgB,CAAC,IAEtBxsB,EAAMysB,eACPzsB,EAAMysB,aAAe,CAAC,IAEtBzsB,EAAMwsB,cAAcvlD,SAAW+4B,EAAMysB,aAAaxlD,OAClD,MAAM,IAAIzC,EAAa,eAAgB,gDAG3C,OADArC,KAAK69B,MAAQA,EACN79B,KAKXuqD,YACI,OAAQvqD,KAAK69B,MAAMusB,aAAepqD,KAAK69B,MAAM+pB,UAEjD4C,UAAU9tB,GACN,GAA+B,IAA3BA,EAAO+tB,SAAS3lD,QAA0C,IAA1B43B,EAAOguB,QAAQ5lD,OAC/C,MAAM,IAAIzC,EAAa,eAAgB,yBAE3C,MAAMyW,EAAM9Y,KAAK0U,eACjB,IAAIo1C,EAAM9pD,KAAKmhC,eAAe2oB,IAC1BC,EAAM/pD,KAAKmhC,eAAe4oB,IAC1B5lD,KAAK6C,IAAI01B,EAAOiuB,UAAYjuB,EAAOkuB,YAAc,KACjDd,EAAM,EACNC,EAAM,GAEV,MAAME,EAAgBjqD,KAAKmhC,eAAe8oB,cACpCC,EAAelqD,KAAKmhC,eAAe+oB,aACnC7yC,EAAUrX,KAAKmhC,eAAe9pB,QAAUqlB,EAAOnY,UAI/C8lC,EAAgBrqD,KAAK69B,MAAMwsB,cAE3BC,EAAetqD,KAAK69B,MAAMysB,aAChC,IAAK,IAAI5iD,EAAI,EAAGA,EAAI2iD,EAAcvlD,SAAU4C,EAAG,CAC3C,MAAM63C,GAAQ7iB,EAAOiuB,UAAYT,GAAgBxtB,EAAOkuB,WAAaX,IAAkB,EACjFY,EAAanuB,EAAO+tB,SAASJ,EAAc3iD,IAAM2P,EACjDyzC,EAAYpuB,EAAOguB,QAAQJ,EAAa5iD,IAAM2P,EACpD,GAAI1S,MAAMkmD,IAAelmD,MAAMmmD,GAC3B,MAAM,IAAIzoD,EAAa,eAAgB,kCAE3C,MAAM0oD,GAAYF,EAAaC,GAAa,EAAIhB,EAAMptB,EAAOnY,UACvDymC,GAAeH,EAAaC,GAAa,EAAIf,EAAMrtB,EAAOnY,UAChEzL,EAAIQ,YACJR,EAAIS,OAAOmjB,EAAOkuB,WAAaX,EAAeY,GAC9C/xC,EAAIW,iBAAiB8lC,EAAMwL,EAAUruB,EAAOiuB,UAAYT,EAAcY,GACtEhyC,EAAIW,iBAAiB8lC,EAAMyL,EAAatuB,EAAOkuB,WAAaX,EAAeY,GAC3E/xC,EAAIi/B,YACJj/B,EAAIa,QAGZimC,WAAWgL,EAAYD,GACnB,IAAI59C,EAAIkF,EAAIyyC,EACZ,IAAK1kD,KAAKiE,KACN,OACJ,MAAM6U,EAAM9Y,KAAK0U,eACjB,IAAIu2C,GAAYL,EAAaD,GAAa,EAC1CM,GAAYnyC,EAAIi2B,YAAY/uC,KAAKiE,MAAMwF,MAAQ,EAC/C,MAAMyQ,EAAqG,QAA5FjI,EAAsC,QAAhClF,EAAK/M,KAAK69B,MAAMusB,kBAA+B,IAAPr9C,OAAgB,EAASA,EAAGgO,oBAAiC,IAAP9I,EAAgBA,EAAqC,QAA/ByyC,EAAK1kD,KAAK69B,MAAM+pB,iBAA8B,IAAPlD,OAAgB,EAASA,EAAG3pC,aACxMb,IACApB,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKwV,UACjBsD,EAAIg3B,SAAS9vC,KAAKiE,KAAMgnD,EAAWjrD,KAAKmhC,eAAe6oB,aAAc9vC,EAAMu1B,iBAAmB,GAC9F32B,EAAItE,WAGZG,OACI3U,KAAK0U,eACL1U,KAAKgV,cACL,MAAMo1C,EAAapqD,KAAK69B,MAAMusB,WACxBxC,EAAY5nD,KAAK69B,MAAM+pB,UAE7B,IAAIgD,EAAa,EACbD,EAAY,EACZF,EAAW,CAAC,GACZC,EAAU,CAAC,GACXxiB,EAAiB,EACrB,GAAIkiB,EACAQ,EAAaR,EAAWhQ,eAAiBp6C,KAAKmhC,eAAegpB,YAC7DjiB,EAAiBkiB,EAAW7c,mBAC5Bkd,EAAWL,EAAW9a,aAErB,GAAIsY,EAAW,CAEhBgD,EADchD,EAAU7sC,aACLmwC,eACnBT,EAAW7C,EAAUtY,QACrBtvC,KAAK69B,MAAMwsB,cAAgBrqD,KAAK69B,MAAMysB,aAE1C,GAAI1C,EACA+C,EAAY/C,EAAUtN,cAAgBt6C,KAAKmhC,eAAegpB,YAC1DjiB,EAAiB0f,EAAUra,mBAC3Bmd,EAAU9C,EAAUtY,aAEnB,GAAI8a,EAAY,CAEjBO,EADcP,EAAWrvC,aACPowC,aAClBT,EAAUN,EAAW9a,QACrBtvC,KAAK69B,MAAMysB,aAAetqD,KAAK69B,MAAMwsB,cAazC,OAXIrqD,KAAKukB,YACL2jB,EAAiBloC,KAAKukB,WAE1BvkB,KAAKwqD,UAAU,CACXI,WAAAA,EACAD,UAAAA,EACAF,SAAAA,EACAC,QAAAA,EACAnmC,UAAW2jB,IAEfloC,KAAK4/C,WAAWgL,EAAYD,IACrB,GAIff,GAASl0C,UAAYrV,OAAO0V,OAAO,GAAIhD,EAAQ2C,WClKxC,MAAM01C,WAAexB,GACbtoD,sBACP,OAAOG,EAAS2pD,OAEpB3mD,sBAAsBo5B,GAClB,OAAO,IAAIutB,GAAOvtB,EAAO,KAE7Bp5B,qBAAqBo5B,GACjB,OAAO,IAAIutB,GAAOvtB,EAAO,KAa7Bx8B,YAAYw8B,EAAO55B,GACfxB,MAAMo7B,EAAO55B,GACbjE,KAAKmhC,eAAe2oB,IAAM,EAC1B9pD,KAAKmhC,eAAe4oB,IAAM,GAC1B/pD,KAAKmhC,eAAe9pB,QAAU,EAC9BrX,KAAKukB,WAAa,INzB1B,SAAWw2B,GACPA,EAAUA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAgB,KAAI,GAAK,OACnCA,EAAUA,EAAgB,KAAI,GAAK,OAHvC,CAIGA,KAAcA,GAAY,KAItB,MAAMsQ,WAAct4C,EACvB1R,YAAYiqD,EAAMpzC,GAUd,IAAIqzC,EACJ,GAVA9oD,QACAzC,KAAKwrD,qBAAuB,EAC5BxrD,KAAKyrD,KAAO1Q,GAAU2Q,OACtB1rD,KAAK01C,cAAe,EACpB11C,KAAK2rD,UAAY,IAAItnD,EAAS,EAAG,GACjCrE,KAAK4rD,iBAAmB,EACxB5rD,KAAK8lC,UAAY,GACjB9lC,KAAKkY,QAAU7X,OAAO0V,OAAO,CAAE81C,cAAe,KAAO3zC,GAGjC,iBAATozC,EAAmB,CAE1B,MAAM3nC,EAAQ2nC,EAAK3nC,MAAM,gBACrBA,IACA4nC,EAAY,CACRnrB,UAAWr8B,SAAS4f,EAAM,IAC1B0c,WAAYt8B,SAAS4f,EAAM,WAKnC4nC,EAAYD,EAGhBtrD,KAAKsrD,KAAOjrD,OAAO0V,OAAO,CAAEqqB,UAAW,EAAGC,WAAY,EAAGpwB,WAAYssB,EAAOzW,YAAcylC,GAE1FvrD,KAAK8rD,WAAa,IAAIznD,EAASrE,KAAKsrD,KAAKlrB,WAAapgC,KAAKsrD,KAAKr7C,WAAajQ,KAAKsrD,KAAKjrB,YAAa,GACpGrgC,KAAK+rD,kBAAoB/rD,KAAK8rD,WAAWplD,QAElCpF,sBACP,OAAOG,EAAS4pD,MAQTW,kBACP,OAAOjR,GAGXkR,gBACI,OAAOjsD,KAAK8rD,WAGhBI,eACI,OAAOlsD,KAAK2rD,UAGhBQ,sBACI,OAAOnsD,KAAK4rD,iBAGhBQ,uBACI,OAAOpsD,KAAK+rD,kBAGhBxmB,eACI,OAAOvlC,KAAK8lC,UAGhBumB,UACI,OAAOrsD,KAAKyrD,KAMhBa,QAAQb,GAEJ,OADAzrD,KAAKyrD,KAAOA,EACLzrD,KAGXusD,0BACI,OAAOvsD,KAAKwrD,qBAGhBgB,sBACI,OAAOxsD,KAAKwrD,qBAAuBxrD,KAAKsrD,KAAKr7C,WAGjDgK,SAASC,GAIL,OAHAla,KAAKka,MAAQA,EAEbla,KAAK2I,iBAAc7F,EACZ9C,KAEX8d,WACI,OAAO9d,KAAKka,MAGhB/E,iBACI,IAAKnV,KAAK2I,YAAa,CACnB,MAAMuR,EAAQla,KAAK+a,aACnB,IAAIpS,EACJ,IAAK,IAAIjB,EAAI,EAAGA,EAAI1H,KAAK8lC,UAAUhhC,SAAU4C,EAAG,CAC5C,MAAM+kD,EAAWzsD,KAAK8lC,UAAUp+B,GAChC+kD,EAASxyC,SAASC,GAClB,MAAMkJ,EAAKqpC,EAASt3C,iBAChBiO,IACAza,EAAcA,EAAcA,EAAYD,UAAU0a,GAAMA,GAGhEpjB,KAAK2I,YAAcA,EAEvB,OAAO3I,KAAK2I,YAGhB+jD,UAAUC,GAEN,OADA3sD,KAAKyrD,KAAOkB,EAAS5R,GAAU2Q,OAAS3Q,GAAU6R,KAC3C5sD,KAGX6sD,aACI,OAAI7sD,KAAKyrD,OAAS1Q,GAAU2Q,QAAU1rD,KAAKyrD,OAAS1Q,GAAU+R,MACnD9sD,KAAK2rD,UAAU1lD,OAAOjG,KAAK8rD,YAa1CiB,iBAAiBC,GAEb,OADAhtD,KAAKkY,QAAQ2zC,cAAgBmB,EACtBhtD,KAMXitD,0BACI,MAAMnB,EAAa9rD,KAAK2rD,UAAUzmD,QAGlC,OADAlF,KAAKktD,aAAeltD,KAAK8lC,UAAUvzB,KADtBk6C,GAAatoD,KAAK6G,IAAIhL,KAAKkY,QAAQ2zC,cAAeY,EAAS/mB,WAAWxgC,QAAU4mD,KACjDvc,QAAO,CAAC5rC,EAAGC,IAAMD,EAAIC,GAAG,GAC7D5D,KAAKktD,aAGhBC,QAAQC,GACCptD,KAAKktD,eACNltD,KAAKktD,aAAeltD,KAAKitD,2BAE7B,MAAMnB,EAAa9rD,KAAK2rD,UAAUzmD,QAGlC,MAFY,CAACmoD,GAAMlpD,KAAK6G,IAAIhL,KAAKkY,QAAQ2zC,cAAewB,EAAIvB,GACjDwB,CAAIF,GAAaptD,KAAKktD,aAIrCK,YAAYd,GACR,IAAKA,EAASjnB,oBAAqB,CAC/B,MAAMrH,EAAQsuB,EAAS/mB,WAIvB,GAFA1lC,KAAK2rD,UAAUpmD,IAAI44B,GACnBn+B,KAAKktD,aAAe,GACfltD,KAAKyrD,OAAS1Q,GAAU2Q,QAAU1rD,KAAKyrD,OAAS1Q,GAAU+R,OAC3D9sD,KAAK2rD,UAAUrlD,YAAYtG,KAAK8rD,YAEhC,MADA9rD,KAAK2rD,UAAU7lD,SAASq4B,GAClB,IAAI97B,EAAa,cAAe,mBAGtC87B,EAAM33B,SAASxG,KAAK+rD,qBACpB/rD,KAAK+rD,kBAAoB5tB,EAAMz3B,SAEnC1G,KAAKwrD,qBAAuBxrD,KAAK2rD,UAAUpnD,YAE3CvE,KAAK8rD,WAAWvmD,IAAI,EAAGvF,KAAK2rD,UAAUpnD,aAK1C,OAFAvE,KAAK8lC,UAAUjuB,KAAK40C,GACpBA,EAASjY,SAASx0C,MACXA,KAGXwtD,aAAa1nB,GACT,IAAK,IAAIp+B,EAAI,EAAGA,EAAIo+B,EAAUhhC,SAAU4C,EACpC1H,KAAKutD,YAAYznB,EAAUp+B,IAE/B,OAAO1H,KAGXy1C,YACI,GAAIz1C,KAAK01C,aACL,OAAO11C,KACX,MAAMka,EAAQla,KAAK+a,aAOnB,OANA/a,KAAK8lC,UAAU5nB,SAASuuC,IACfA,EAAS3uC,YACV2uC,EAASxyC,SAASC,MAG1Bla,KAAK01C,cAAe,EACb11C,KAEX+a,aACI,OAAOnY,EAAQ5C,KAAKka,MAAO,UAAW,kCAU1CvF,KAAKhB,EAAU3T,KAAK0U,eAAgBwF,GAGhC,IAAIvR,EAFJuR,EAAQA,MAAAA,EAAqCA,EAAQla,KAAKka,MAC1Dla,KAAKgV,cAEL,IAAK,IAAItN,EAAI,EAAGA,EAAI1H,KAAK8lC,UAAUhhC,SAAU4C,EAAG,CAC5C,MAAM+kD,EAAWzsD,KAAK8lC,UAAUp+B,GAE5BwS,GACAuyC,EAASxyC,SAASC,GAEtBtX,EAAQ6pD,EAAS3uC,WAAY,eAAgB,mDAC7C,MAAMsF,EAAKqpC,EAASt3C,iBAChBiO,IACAza,EAAcA,EAAcA,EAAYD,UAAU0a,GAAMA,GAE5DqpC,EAASp3C,WAAW1B,GACpB84C,EAASh4C,gBAEbzU,KAAK2I,YAAcA,GO/NpB,MAAMk+B,WAAuBtrB,EAEhCla,YAAYosD,EAAaC,GAkBrB,OAjBAjrD,QACAzC,KAAK01C,cAAe,EACpB11C,KAAKyb,SAAWF,EAASG,SAASC,KAClC3b,KAAKytD,YAAcA,EACnBztD,KAAKyJ,MAAQ,EACbzJ,KAAK0tD,UAAYA,EACjB1tD,KAAK2tD,UAAO7qD,EACZ9C,KAAKqlC,MAAQ,IAAIgmB,GAAM,CACnBjrB,UAAW,EACXC,WAAY,EACZpwB,WAAYssB,EAAOzW,aACpB4mC,WAAU,GACb1sD,KAAKmhC,eAAiB,CAClBysB,aAAc,GAElB5tD,KAAK6tD,MAAQ,GACb7tD,KAAKqlC,MAAMmoB,aAAaxtD,KAAKytD,aACtBztD,KAEAsB,sBACP,OAAOG,EAASolC,eAGpBpiC,cAAcqpD,EAAkBrsB,GAG5B,IAAKqsB,GAAgD,IAA5BA,EAAiBhpD,OACtC,OAAO,EACX,MAAMipD,EAAa,GACnB,IAAI1F,EAAY,KACZlmB,EAAS,EACb,IAAK,IAAIz6B,EAAI,EAAGA,EAAIomD,EAAiBhpD,SAAU4C,EAAG,CAC9C,MAAMsmD,EAAkBF,EAAiBpmD,GACnCgV,EAAOsxC,EAAgBvxC,UACvBwxC,EAAelsD,EAAY2a,GAC3ByyB,EAAU8e,EAXQ,EACF,EAWtB,GAAIA,GAAgBvxC,IAAS2rC,EAAW,CAEpC,IAAK,IAAIvkD,EAAI,EAAGA,EAAI4Y,EAAKpK,KAAKxN,SAAUhB,EACpCq+B,EAASh+B,KAAK4E,IAAI2T,EAAK4lB,yBAA0BH,GAErDkmB,EAAY3rC,EAEhBqxC,EAAWl2C,KAAK,CAAE7S,MAAOm9B,EAAQ6rB,gBAAAA,EAAiB7e,QAAAA,IAGtD,IACI+e,EADAC,EAAcJ,EAAW,GAAG/oD,MAEhC,IAAK,IAAI0C,EAAI,EAAGA,EAAIqmD,EAAWjpD,SAAU4C,EAAG,CACxC,MAAMsmD,EAAkBD,EAAWrmD,GAAGsmD,gBACtCA,EAAgBvY,YAChByY,EAAcF,EAAgBzxC,WAAawxC,EAAWrmD,GAAGynC,QACzDgf,EAAchqD,KAAK4E,IAAImlD,EAAaC,GAExC,IAAK,IAAIzmD,EAAI,EAAGA,EAAIqmD,EAAWjpD,SAAU4C,EAAG,CACxC,MAAMsmD,EAAkBD,EAAWrmD,GAAGsmD,gBACtCE,EAAcF,EAAgBzxC,WAAawxC,EAAWrmD,GAAGynC,QACzD6e,EAAgBzwC,2BAA2B4wC,EAAchqD,KAAKqlC,IAAI0kB,EAAaC,IAGnF,OADA1sB,EAAMK,YAAcqsB,GACb,EAEX1Y,YACQz1C,KAAK01C,eAEJ11C,KAAKurC,YACNvrC,KAAKurC,UAAY,IAAI6iB,IAEzBpuD,KAAKurC,UAAU8iB,WAAW,CAACruD,KAAKqlC,QAAQipB,OAAO,CAACtuD,KAAKqlC,OAAQ,EAAG,IAChErlC,KAAKwc,SAASxc,KAAKurC,UAAUgjB,oBAC7BvuD,KAAK01C,cAAe,GAExB8Y,UAAUf,GAEN,IADAA,EAAcA,GAAeztD,KAAKytD,aAClB3oD,OAAS,EAAG,CACxB,MAAMy0C,EAAO,IAAIkV,GAAKhB,GACtBlU,EAAKpY,eAAeutB,WAAa,EACjCnV,EAAKpY,eAAewtB,oBAAsB,EAC1C3uD,KAAK6tD,MAAMh2C,KAAK0hC,GAEpB,OAAOv5C,KAEXwc,SAAS/S,GAEL,OADAzJ,KAAKyJ,MAAQA,EACNzJ,KAEXuc,WACI,OAAOvc,KAAKyJ,MAEhBq9B,gBACI,OAAO9mC,KAAKytD,YAEhB94C,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAQlB,GAPA3c,KAAKgV,cAvGb,YAAc/R,GACN4jC,GAAe3F,OACfn+B,EAAI,0BAA2BE,GAsG/B,CAAE,gCAAiCyZ,GACnC1c,KAAK0d,sBAAsB1d,KAAK8mC,gBAAiBpqB,GAEjD1c,KAAKytD,YAAYvvC,SAAS0wC,GAAcA,EAAUv5C,WAAWyD,GAAKnE,SAElE3U,KAAK6tD,MAAM3vC,SAASq7B,GAASA,EAAKlkC,WAAWyD,GAAKnE,SAC9C3U,KAAK0tD,UAAW,CAEhB,MAAMO,EAAelsD,EAAY2a,GAC3BmyC,EAAWZ,EAAerE,GAAWwB,GAC3CprD,KAAK2tD,KAAO,IAAIkB,EAAS,CACrBjH,UAAW5nD,KAAKytD,YAAY,GAC5BrD,WAAY1tC,EACZ2tC,cAAe,CAAC,GAChBC,aAAc,CAAC,KAEnBtqD,KAAK2tD,KAAKxsB,eAAe4oB,IAAM,GAC/B/pD,KAAK2tD,KAAKxsB,eAAe9pB,SAAW42C,EAAe,EAAI,GAAKjuD,KAAKmhC,eAAeysB,aAChF5tD,KAAK2tD,KAAKt4C,WAAWyD,GAAKnE,SAItCkyB,GAAe3F,OAAQ,EClIhB,MAAM4tB,WAAqBvzC,EAC9Bla,YAAYsc,GACRlb,QACAzC,KAAK01C,cAAe,EACpB11C,KAAKyb,SAAWF,EAASG,SAASC,KAClC3b,KAAK2d,SAAWA,EAChB3d,KAAK2d,SAASO,SAASC,IACnBA,EAAQ41B,gBAAe,MAE3B/zC,KAAKyJ,MAAQ,EACbzJ,KAAKurC,UAAY,IAAI6iB,GACrBpuD,KAAKqlC,MAAQ,IAAIgmB,GAAM,CACnBjrB,UAAW,EACXC,WAAY,EACZpwB,WAAYssB,EAAOzW,aACpB4mC,WAAU,GACb1sD,KAAKqlC,MAAMmoB,aAAaxtD,KAAK2d,UAEtBrc,sBACP,OAAOG,EAASqtD,aAGpBrqD,cAAcsqD,EAAQttB,GAClB,IAAKstB,GAA4B,IAAlBA,EAAOjqD,OAClB,OAAO,EACX,IAAI2E,EAAQ,EACZ,IAAK,IAAI/B,EAAI,EAAGA,EAAIqnD,EAAOjqD,SAAU4C,EAAG,CACpC,MAAMsnD,EAAQD,EAAOrnD,GACrBsnD,EAAMvZ,YACNhsC,GAASulD,EAAMzyC,WAGnB,OADAklB,EAAMK,YAAcr4B,GACb,EAEXgsC,YACQz1C,KAAK01C,eAET11C,KAAKurC,UAAU8iB,WAAW,CAACruD,KAAKqlC,QAAQipB,OAAO,CAACtuD,KAAKqlC,OAAQ,GAC7DrlC,KAAKwc,SAASxc,KAAKurC,UAAUgjB,oBAC7BvuD,KAAK01C,cAAe,GAExBl5B,SAAS/S,GAEL,OADAzJ,KAAKyJ,MAAQA,EACNzJ,KAEXuc,WACI,OAAOvc,KAAKyJ,MAEhBkL,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACLhV,KAAK0d,sBAAsB1d,KAAK2d,SAAUjB,GAC1C1c,KAAK2d,SAASO,SAASC,GAAYA,EAAQ9I,WAAWyD,GAAKrE,mBCxD5D,MAAMw6C,GACT5tD,YAAY6W,GACRlY,KAAK01C,cAAe,EACpB11C,KAAK41C,eAAgB,EACrB51C,KAAKkvD,OAASh3C,GAAWA,EAAQg3C,OAASh3C,EAAQg3C,OAAS,EAC3DlvD,KAAKmvD,YAAc,IAAI9qD,EAAS,EAAG,GACnCrE,KAAKovD,SAAW,IAAI/qD,EAAS,EAAG,GAChCrE,KAAKqvD,iBAAcvsD,EACnB9C,KAAKsvD,cAAWxsD,EAChB9C,KAAKuvD,iBAAczsD,EACnB9C,KAAKkyC,QAAU,EACflyC,KAAK6C,EAAI,EACT7C,KAAKwvD,MAAQ,EACbxvD,KAAKyvD,QAAU,EACfzvD,KAAK8lC,UAAY,GACjB9lC,KAAK0vD,iBAAmB,GAExB1vD,KAAKu3C,OAAS,EACdv3C,KAAKk6C,QAAU,EACfl6C,KAAK82C,oBAAsB,EAC3B92C,KAAK+2C,qBAAuB,EAC5B/2C,KAAKge,UAAY,EACjBhe,KAAKie,WAAa,EAClBje,KAAK2vD,YAAc,EACnB3vD,KAAK4vD,aAAe,EACpB5vD,KAAK6vD,UAAY,GACjB7vD,KAAKyJ,MAAQ,EACbzJ,KAAKwzC,iBAAmB,CAIpBC,QAAS,CAAEr3B,KAAM,EAAGC,MAAO,IAGnC5X,sBAAsBqrD,GAClB,MAAMC,EAAWD,EAASD,UACpBz+C,EAAQ2+C,EAASvpB,QAAQspB,GAC/B,GAAI1+C,EAAQ,EAAI2+C,EAASjrD,OACrB,OAAOirD,EAAS3+C,EAAQ,GAEhC4+C,YACI,OAAOhwD,KAAKkvD,OAEhBjnD,OACI,OAAOjI,KAAK6C,EAEhBwF,KAAKxF,GAID,OAHA7C,KAAK6C,EAAIA,EACT7C,KAAKwvD,MAAQ3sD,EACb7C,KAAKyvD,QAAU,EACRzvD,KAEXiwD,WACI,OAAOjwD,KAAKwvD,MAEhBU,SAASV,GACLxvD,KAAKwvD,MAAQA,EACbxvD,KAAK6C,EAAI2sD,EAAQxvD,KAAKyvD,QAE1BU,aACI,OAAOnwD,KAAKyvD,QAEhBpxC,WAAWoxC,GACPzvD,KAAKyvD,QAAUA,EACfzvD,KAAK6C,EAAI7C,KAAKwvD,MAAQC,EAE1BlzC,WACI,OAAOvc,KAAKyJ,MAAuB,EAAfzJ,KAAKkyC,QAE7BkJ,WAAWlJ,GAEP,OADAlyC,KAAKkyC,QAAUA,EACRlyC,KAEXowD,cACI,OAAOpwD,KAAKovD,SAEhBiB,cACI,OAAOrwD,KAAKsvD,SAEhBgB,iBACI,OAAOtwD,KAAKqvD,YAEhBkB,iBACI,OAAOvwD,KAAKuvD,YAEhBhqB,eACI,OAAOvlC,KAAK8lC,UAOhB0qB,oBAAoBC,GAChB,OAAOzwD,KAAK0vD,iBAAiBe,GAEjCC,sBACI,OAAO1wD,KAAK0vD,iBAEhBiB,4BACI,OAAO3wD,KAAK8lC,UAAU8qB,QAAQnE,GAAaA,EAAStY,oBAGxDrkC,aACI,MAAM,MAAErG,EAAK,QAAEywC,EAAO,OAAE3C,EAAM,oBAAET,EAAmB,qBAAEC,EAAoB,UAAE/4B,EAAS,WAAEC,EAAU,YAAE0xC,EAAW,aAAEC,GAAkB5vD,KACjI,MAAO,CACHyJ,MAAAA,EACAywC,QAAAA,EACA3C,OAAAA,EACAT,oBAAAA,EACAC,qBAAAA,EACA/4B,UAAAA,EACAC,WAAAA,EACA0xC,YAAAA,EACAC,aAAAA,GAGRiB,iBACI,OAAO7wD,KAAKmvD,YAEhB2B,eAAeC,GACX/wD,KAAKmvD,YAAc4B,EACnB/wD,KAAK01C,cAAe,EAExB6X,YAAYd,EAAUgE,GAClB,IAAKhE,EACD,MAAM,IAAIpqD,EAAa,cAAe,2BAE1C,IAAKoqD,EAASjnB,oBAAqB,CAC/B,MAAMrH,EAAQsuB,EAAS/mB,WACnBvH,EAAM73B,YAAYtG,KAAKovD,YACvBpvD,KAAKovD,SAAWjxB,EAAMz3B,QACtB1G,KAAKqvD,YAAc5C,IAEF,MAAjBzsD,KAAKsvD,UAIAnxB,EAAM33B,SAASxG,KAAKsvD,aAHzBtvD,KAAKsvD,SAAWnxB,EAAMz3B,QACtB1G,KAAKuvD,YAAc9C,GAW3B,OAJAA,EAASlX,eAAev1C,MACxBA,KAAK8lC,UAAUjuB,KAAK40C,GACpBzsD,KAAK0vD,iBAAiBe,GAAc,GAAKhE,EACzCzsD,KAAK01C,cAAe,EACb11C,KAEXy1C,YACI,GAAIz1C,KAAK01C,aACL,OAAO11C,KACX,IAAK,IAAI0H,EAAI,EAAGA,EAAI1H,KAAK8lC,UAAUhhC,SAAU4C,EAAG,CAC5C,MAAM+kD,EAAWzsD,KAAK8lC,UAAUp+B,GAChC+kD,EAAShX,YACT,MAAMhmC,EAAUg9C,EAAS38C,aAEzB9P,KAAK82C,oBAAsB3yC,KAAK4E,IAAI/I,KAAK82C,oBAAqBrnC,EAAQqnC,qBACtE92C,KAAK+2C,qBAAuB5yC,KAAK4E,IAAI/I,KAAK+2C,qBAAsBtnC,EAAQsnC,sBAExE/2C,KAAKu3C,OAASpzC,KAAK4E,IAAI/I,KAAKu3C,OAAQ9nC,EAAQ8nC,QAE5Cv3C,KAAKk6C,QAAU/1C,KAAK4E,IAAI/I,KAAKk6C,QAASzqC,EAAQwqC,YAAc,GAE5Dj6C,KAAKge,UAAY7Z,KAAK4E,IAAI/I,KAAKge,UAAWvO,EAAQuO,WAClDhe,KAAKie,WAAa9Z,KAAK4E,IAAI/I,KAAKie,WAAYxO,EAAQwO,YAEpDje,KAAK2vD,YAAcxrD,KAAK4E,IAAI/I,KAAK2vD,YAAalgD,EAAQuO,UAAYvO,EAAQqnC,qBAC1E92C,KAAK4vD,aAAezrD,KAAK4E,IAAI/I,KAAK4vD,aAAcngD,EAAQwO,WAAaxO,EAAQsnC,sBAE7E/2C,KAAKyJ,MAAQzJ,KAAKu3C,OAASv3C,KAAK2vD,YAAc3vD,KAAK4vD,aAEvD,OAAO5vD,KAEX21C,aACI,OAAI31C,KAAK41C,gBAET51C,KAAK41C,eAAgB,GADV51C,KAIfi0C,sBACI,OAAOj0C,KAAKwzC,kBCzKb,MAAMwd,WAAiBz1C,EAK1Bla,YAAY4P,GACRxO,QACAzC,KAAKiR,KAAOA,EACZjR,KAAKixD,SAAU,EACfjxD,KAAKmhC,eAAiB,CAClBC,WAAY,GACZ8vB,uBAAwB,EACxBC,uBAAwB,GAE5BnxD,KAAKoxD,SAAW70B,EAAO80B,cAAcrxD,KAAKiR,MAI1C,MAAMxB,EAAUzP,KAAK8P,aAQrB,GANA9P,KAAKsxD,wBAAyB,EAG9BtxD,KAAKuxD,cAAgB9hD,GAAWA,EAAQ8hD,cAAgB9hD,EAAQ8hD,cAAgB,EAChFvxD,KAAKwxD,cAAgB/hD,GAAWA,EAAQ+hD,cAAgB/hD,EAAQ+hD,cAAgB,EAChFxxD,KAAKyxD,0BAA4BT,GAASS,0BAA0BjrB,QAAQxmC,KAAKiR,OAAS,GACrFjR,KAAKoxD,SACN,MAAM,IAAI/uD,EAAa,gBAAiB,wBAAwBrC,KAAKiR,SAEzEjR,KAAKoX,QAAU3H,EAAUA,EAAQggD,QAAU,EAC3CzvD,KAAKqX,QAAU5H,EAAUA,EAAQwxC,QAAU,EAC3CjhD,KAAKwY,MAAQ,IAAI1B,EAAM9W,KAAKoxD,SAAS7uD,KAAMvC,KAAKmhC,eAAeC,WAAY,CACvElgC,SAAU,YAAYlB,KAAKoxD,SAAS7uD,SAGpCyuD,GAASU,uBAAuBlrB,QAAQxmC,KAAKiR,OAAS,IACtDjR,KAAKixD,SAAU,GAIdxhD,GACDzP,KAAKwY,MAAMmC,UAAU,GAAK,GAIvBrZ,sBACP,OAAOG,EAASuvD,SAGpBvsD,cAAcq2B,EAAW2G,GACrB,IAAK3G,GAAkC,IAArBA,EAAUh2B,OACxB,OAAO,EACX,IAAI2E,EAAQ,EACR4kC,EAAc5M,EAAM4M,YACpBvM,EAAaL,EAAMK,WACnBmf,EAAU,EACd,IAAK,IAAIv5C,EAAI,EAAGA,EAAIozB,EAAUh2B,SAAU4C,EAAG,CACvC,MAAM0pD,EAAWt2B,EAAUpzB,GACrBopC,EAAY,EAiBlB,GAhBIkgB,GAASW,gBAAgBnrB,QAAQ4qB,EAASngD,OAAS,IACnDmgD,EAASh6C,SAAWi3B,EAAc,GAElC2iB,GAASY,eAAeprB,QAAQ4qB,EAASngD,OAAS,IAClDmgD,EAASh6C,SAAW0qB,EAAa,GAEjCsvB,EAASG,eAAiBH,EAASh6C,QAAU,EAC7C0qB,GAAcsvB,EAASG,cAElBH,EAASG,eAAiBH,EAASh6C,QAAU,EAClDi3B,GAAe+iB,EAASG,cAGxB9nD,EAAQtF,KAAK4E,IAAIqoD,EAAS70C,WAAY9S,GAGtCunD,GAASa,qBAAqBrrB,QAAQ4qB,EAASngD,OAAS,EAAG,CAGtCrO,EAAQwuD,EAAS10C,KAAM,kBAC3BqxB,iBAAmB,GAAKqjB,EAASh0C,gBAAkB7B,EAASG,SAASO,OAClFwlB,EAAMwM,eAAiB6C,EACvBsgB,EAAS/5C,SAAW4pC,EACpBA,GAAWmQ,EAAS54C,MAAMxB,KAAK5O,SAG/Bq5B,EAAMjmB,WAAas1B,EACnBsgB,EAAS/5C,SAAW4pC,EACpBA,GAAWmQ,EAAS54C,MAAMxB,KAAK5O,aAI/BgpD,EAASh0C,gBAAkB7B,EAASG,SAASO,OAC7Cm1C,EAAS9zC,YAAYmkB,EAAMwM,eAC3BxM,EAAMwM,eAAiB6C,IAGvBsgB,EAAS9zC,YAAYmkB,EAAMjmB,WAC3BimB,EAAMjmB,WAAas1B,GAQ/B,OAFArP,EAAMK,WAAaA,EAAar4B,EAAQ,EACxCg4B,EAAM4M,YAAcA,EAAc5kC,EAAQ,GACnC,EAMAioD,oCACP,MAAO,CAAC,OAAQ,WAAY,SAMrBE,4BACP,MAAO,CAAC,SAMDH,uCACP,MAAO,CAAC,OAAQ,OAAQ,WAAY,WAAY,OAAQ,gBAAiB,cAAe,SAMjFE,6BACP,MAAO,CAAC,OAAQ,OAAQ,WAAY,WAAY,WAAY,QAAS,QAG9DE,kCACP,MAAO,CAAC,OAAQ,gBAAiB,eAOrC/hD,aACI,OAAOysB,EAAOoF,mBAAmB7xB,aAAaK,OAAO2hD,cAAc9xD,KAAKoxD,SAAS7uD,MAGrFwvD,WAAWd,GAEP,OADAjxD,KAAKixD,QAAUA,EACRjxD,KAGXgyD,mBAAmBC,GACf,MAAM96C,EAAQnX,KAAKmhC,eAAeC,WAAa,IAG/C,OAFAphC,KAAKkyD,gBAAkB,IAAIp7C,EAAMylB,EAAOgF,gBAAgB0wB,GAAO1vD,KAAM4U,GACrEnX,KAAKkyD,gBAAgBv3C,UAAU,GAAK,GAC7B3a,KAGXmyD,mBAAmBF,GACf,MAAM96C,EAAQnX,KAAKmhC,eAAeC,WAAa,IAG/C,OAFAphC,KAAKoyD,gBAAkB,IAAIt7C,EAAMylB,EAAOgF,gBAAgB0wB,GAAO1vD,KAAM4U,GACrEnX,KAAKoyD,gBAAgBz3C,UAAU,GAAK,GAC7B3a,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAMq9C,EAAU31C,EAAK6wB,mBACfrzB,EAAQwC,EAAK3B,aACb6zB,EAAcvuC,OAAOiS,KAAKtS,KAAK6R,aAAa,YAAYxO,KAAK,KACnEyV,EAAI+1B,UAAUD,EAAa5uC,KAAK6R,aAAa,OAE7C,MAAMygD,EAAc51C,EAAK2yB,YAAYlG,aACrC,IAAIthC,EAAIwqD,IAAY7qB,EAAKgB,KAAO8pB,EAAY3oB,MAAQ2oB,EAAY5oB,KAE5DvnC,EAAUua,KACNA,EAAK4wB,UACD+kB,IAAY7qB,EAAKgB,OACjB3gC,EAAIqS,EAAMu1B,eAAezvC,KAAKwb,YAKlC3T,EAAIqS,EAAMu1B,eAAezvC,KAAKwb,YAGtC,MAAM+2C,EAAyBF,IAAY7qB,EAAKgB,KAC1C2G,EAAUj1B,EAAMsoB,yBACtB,IAAIgwB,EAAc,GAEbD,GAA0B71C,EAAK+8B,YAChC+Y,GAAe,IAEnB,MACMC,EAAqB5qD,EADNsnC,GAAWnvC,KAAKwb,UAAYg3C,GAG3CprB,EAAQ1qB,EAAK2qB,mBAAmBrnC,KAAKyb,SAAUzb,KAAKoR,OAC1D,IAAIshD,EAAStrB,EAAMvkC,EAGf8vD,EAAS3yD,KAAKyxD,0BACZrqB,EAAMv/B,EACN1D,KAAKqlC,IAAItvB,EAAMu1B,eAAezvC,KAAKwb,WAAYi3C,GAGrD,GAFAE,GAAU3yD,KAAKqX,QAEXrX,KAAKixD,QAAS,CACd,IAAI2B,EAAc,EAClB,MAAMC,EAASH,GAAUx4C,EAAMjS,OAAS,IACxC,QAAyBnF,IAArB9C,KAAK4yD,YACLA,EAAc5yD,KAAK4yD,gBAElB,CACDA,GAAe5yD,KAAKwY,MAAM1I,aAAarG,MAAQ,EAC/C,MAAMqpD,EAAc7D,GAAY8D,eAAer2C,EAAKmB,kBAEhD+0C,GADAE,EAC+C,IAA/BA,EAAY7qD,OAAS4qD,GAGuB,IAA5C34C,EAAMjS,OAASiS,EAAMqC,WAAas2C,GAEtD7yD,KAAK4yD,YAAcA,EAEvBF,GAAUE,GA7OtB,YAAc3vD,GACN+tD,GAAS9vB,OACTn+B,EAAI,oBAAqBE,GA6OzB,CAAE,uBAAwBjD,KAAKoxD,SAAUsB,EAAQC,GAC7C3yD,KAAKoyD,kBACLpyD,KAAKoyD,gBAAgBx3C,OAAO9B,EAAK45C,EAAQC,GACzCA,GAAU3yD,KAAKoyD,gBAAgBtiD,aAAapG,OAC5CipD,GAAU3yD,KAAKmhC,eAAe+vB,wBAE9BlxD,KAAKwxD,eAAiB90C,EAAK4wB,WAAyC,IAA5B5wB,EAAK6wB,qBAC7ColB,GAAU3yD,KAAKwxD,eAEf90C,EAAKqxB,gBAAkB,GAAKijB,GAASU,uBAAuBlrB,QAAQxmC,KAAKiR,OAAS,IAClF0hD,EAASj2C,EAAK3B,aAAa5F,iBAAiBjN,OAAS,IAEzDlI,KAAKwY,MAAMoC,OAAO9B,EAAK45C,EAAS1yD,KAAKoX,QAASu7C,GAC1C3yD,KAAKkyD,kBACLS,GAAU3yD,KAAKwY,MAAM1I,aAAapG,OAAS1J,KAAKmhC,eAAegwB,uBAC/DnxD,KAAKkyD,gBAAgBt3C,OAAO9B,EAAK45C,EAAQC,IAE7C75C,EAAIi3B,cAIZihB,GAAS9vB,OAAQ,ECvQV,MAAM8xB,WAAoBz3C,EAM7Bla,YAAYoa,GACRhZ,QACAzC,KAAKyb,SAAWA,MAAAA,EAA2CA,EAAWF,EAASG,SAASC,KACxF3b,KAAK6W,MAAQ0lB,EAAOoF,mBAAmBvxB,aAAa,6BACpDpQ,KAAKwc,SAAS+f,EAAOoF,mBAAmBvxB,aAAa,8BAE9C9O,sBACP,OAAOG,EAASuxD,YAGpBvuD,sBAAsBo5B,GAClB,IAAK,MAAMnhB,KAAQmhB,EACf,IAAK,IAAIn2B,EAAI,EAAGA,EAAIgV,EAAKpK,KAAKxN,OAAQ4C,IAClCgV,EAAKkqB,YAAY,IAAIosB,GAAYt8C,EAAiBiF,MAAOjU,GACzDgV,EAAKkqB,YAAY,IAAIosB,GAAYt8C,EAAiB4F,OAAQ5U,GAKtEjD,cAAcwuD,EAAaxxB,GACvB,IAAKwxB,GAAsC,IAAvBA,EAAYnuD,OAC5B,OAAO,EACX,IAAIouD,EAAW,EACXC,EAAW,EACf,IAAK,IAAIzrD,EAAI,EAAGA,EAAIurD,EAAYnuD,SAAU4C,EAAG,CACzC,MAAM0rD,EAAcH,EAAYvrD,GAC1BgV,EAAO02C,EAAY32C,UACnB+rC,EAAM4K,EAAYh2C,cAClBhM,EAAQgiD,EAAYt2C,aAC1B,IAAI9X,EAAQ,EACRwjD,IAAQ9xC,EAAiB4F,QACzBtX,EAAQ0X,EAAKm9B,sBAAsBzoC,GACnC+hD,EAAWA,EAAWnuD,EAAQouD,EAAY3pD,MAAQ0pD,EAAWnuD,EAAQouD,EAAY3pD,OAEjF++C,IAAQ9xC,EAAiBiF,OACzB3W,EAAQ0X,EAAKo9B,qBAAqB1oC,GAClC8hD,EAAWA,EAAWluD,EAAQouD,EAAY3pD,MAAQypD,EAAWluD,EAAQouD,EAAY3pD,OAErF2pD,EAAYj5C,UAAUnV,GAI1B,OAFAy8B,EAAMK,YAAcoxB,EACpBzxB,EAAM4M,aAAe8kB,GACd,EAGXv2C,QAAQF,GAQJ,OAPA1c,KAAK0c,KAAOA,EACZ1c,KAAK6W,MAAQ0lB,EAAOoF,mBAAmBvxB,aAAa,6BACpDpQ,KAAKwc,SAAS+f,EAAOoF,mBAAmBvxB,aAAa,8BACjDzO,EAAY+a,KACZ1c,KAAK6W,MAAQ0lB,EAAOoF,mBAAmBvxB,aAAa,+BACpDpQ,KAAKwc,SAAS+f,EAAOoF,mBAAmBvxB,aAAa,iCAElDpQ,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAMoyB,EAAQ1qB,EAAK2qB,mBAAmBrnC,KAAKyb,SAAUzb,KAAKoR,MAAO,CAAE22C,gBAAgB,IAC7EllD,EAAIukC,EAAMvkC,EAAI7C,KAAKoX,QACnBvP,EAAIu/B,EAAMv/B,EAAI7H,KAAKqX,QACrBrX,KAAKyb,UAAYF,EAASG,SAASY,MACnCxF,EAAMu8C,YAAYv6C,EAAKjW,EAAI,EAAGgF,EAAG7H,KAAK6W,MAAO,2BAA4B,CACrE3V,SAAU,+CAGTlB,KAAKyb,UAAYF,EAASG,SAASC,MACxC7E,EAAMu8C,YAAYv6C,EAAKjW,EAAI,EAAGgF,EAAG7H,KAAK6W,MAAO,0BAA2B,CACpE3V,SAAU,+CCtBnB,MAAMoyD,WAAiBxxD,GAC1BT,YAAY60C,GACRzzC,MAAMyzC,GACNl2C,KAAKuzD,cAAe,EACpBvzD,KAAKwzD,iBAAmB,EACxBxzD,KAAKyzD,mBAAqB,EAC1BzzD,KAAKoR,MAAQ8kC,EAAW9kC,MACxBpR,KAAK6C,EAAIqzC,EAAWrzC,GAAK,EACzB7C,KAAK6H,EAAIquC,EAAWruC,GAAK,EACrBquC,EAAWwd,YACX1zD,KAAKw2C,SAAWN,EAAWwd,WAC/B1zD,KAAKm9B,UAAY+Y,EAAW/Y,YAAa,EACzCn9B,KAAKkoC,eAAiBgO,EAAWhO,gBAAkBV,EAAKe,GACxDvoC,KAAKkD,KAAOgzC,EAAWhzC,MAAQ,EAG/BlD,KAAKwY,MAAQ+jB,EAAOoa,cAAc32C,KAAK+9B,SAAU/9B,KAAKw2C,UACtD5zC,EAAQ5C,KAAKwY,MAAO,eAAgB,gCAAgCxY,KAAK+9B,uBAAuB/9B,KAAKw2C,aACrGx2C,KAAK2zD,WAAa3zD,KAAKwY,MAAM+lB,UAC7Bv+B,KAAKoX,QAAU8+B,EAAW9+B,SAAW,EACjC8+B,EAAW0d,oBACX5zD,KAAKuzD,cAAe,EACpBvzD,KAAK2zD,WAAazd,EAAW0d,kBAC7B5zD,KAAKwzD,iBAAmBtd,EAAWsd,kBAAoB,EACvDxzD,KAAKyzD,mBAAqBvd,EAAWud,oBAAsB,GAE/DzzD,KAAKwN,MAAQ0oC,EAAW1oC,MACxBxN,KAAK6zD,QAAU3d,EAAW2d,UAAW,EACrC7zD,KAAKmhC,eAAiB9gC,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKmhC,gBAAiB,CAExE8V,iBAAkBf,EAAWe,kBAAoB1a,EAAOkC,sBAC5Dz+B,KAAKwc,SAASxc,KAAKwY,MAAM+D,SAASvc,KAAKmhC,eAAe8V,mBAE/C31C,sBACP,OAAOG,EAAS6xD,SAGpB/2C,WACI,OAAOvc,KAAKyJ,MAGhBqqD,cACI,OAA0B,IAAnB9zD,KAAKm9B,UAGhB8b,WACI,OAAOj5C,KAAKwY,MAGhBnQ,KAAKxF,GAED,OADA7C,KAAK6C,EAAIA,EACF7C,KAGXkI,OACI,OAAOlI,KAAK6H,EAGhBS,KAAKT,GAED,OADA7H,KAAK6H,EAAIA,EACF7H,KAGX+zD,UACI,OAAO/zD,KAAKkD,KAGhB8wD,QAAQ9wD,GAEJ,OADAlD,KAAKkD,KAAOA,EACLlD,KAGXi2C,eAII,MAAMpzC,EAAK7C,KAAK01C,aAAwBjzC,MAAMwzC,eAAfj2C,KAAK6C,EAG9BoxD,EAA6BzsB,EAAKiB,MAAQ,EAC1C/G,EAAYnF,EAAOoF,mBACnBuyB,EAAYxyB,EAAUtxB,aAAa,kBAAmB,GAAKpQ,KAAKkoC,eAChEisB,EAAqBzyB,EAAUtxB,aAAa,4BAA6B,GAAKpQ,KAAKkoC,eACzF,OAAQrlC,EACJqxD,GACCl0D,KAAKm9B,WAAan9B,KAAKyJ,MAAQwqD,GAA8Bj0D,KAAKkoC,eAAiBisB,EAAqB,GAGjHh/C,iBACI,IAAKnV,KAAK01C,aACN,MAAM,IAAIrzC,EAAa,kBAAmB,qDAE9C,MAAM8sC,EAAUnvC,KAAK+a,aAAaynB,yBAC5B4xB,EAAejlB,EAAU,EACzBklB,EAAQr0D,KAAK6H,EAAIusD,EACvB,OAAO,IAAIxsD,EAAY5H,KAAKi2C,eAAgBoe,EAAOr0D,KAAKyJ,MAAO0lC,GAGnEl1B,SAASC,GACL,MAAMhX,EAAOlD,KAAK+zD,UAMlB,OALA/zD,KAAKka,MAAQA,EACTla,KAAKka,QACLla,KAAKsI,KAAKtI,KAAKka,MAAMo6C,YAAYpxD,IACjClD,KAAKqV,WAAWrV,KAAKka,MAAM9E,eAExBpV,KAGXy1C,YACI,GAAIz1C,KAAK01C,aACL,OAAO11C,KACX,MAAMyJ,EAAQzJ,KAAKuc,WAAavc,KAAK82C,oBAAsB92C,KAAK+2C,qBAGhE,OAFA/2C,KAAKwc,SAAS/S,GACdzJ,KAAK01C,cAAe,EACb11C,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL,IAAIu/C,EAASv0D,KAAKi2C,eACdj2C,KAAKuzD,eAELgB,GAAUv0D,KAAKkoC,iBAAmBV,EAAKe,GAAKvoC,KAAKwzD,iBAAmBxzD,KAAKyzD,oBAE7E,MAAM5rD,EAAI7H,KAAK6H,GAjLvB,YAAc5E,GACNqwD,GAASpyB,OACTn+B,EAAI,oBAAqBE,GAgLzB,CAAE,sBAAuBjD,KAAKw2C,SAAUx2C,KAAK+9B,SAAU,OAAQw2B,EAAQ1sD,GAEvE,MAAMqgC,EAAiBloC,KAAKkoC,eACtB+O,EAAmBj3C,KAAKmhC,eAAe8V,iBACzCj3C,KAAKwN,OACLxN,KAAK0T,WAAWoF,GAEpB,MAAM07C,EAAiB,GAAGx0D,KAAK2zD,iBAAiBzrB,IAAmBV,EAAKe,GAAK,KAAO,SACpF,GAAsB,MAAlBvoC,KAAKw2C,SAAkB,CACvB,MAAMie,EAAaz0D,KAAK+a,aAAaynB,0BA/KjD,SAA2B1pB,EAAKilB,EAAUl7B,EAAGgF,EAAGqgC,EAAgBusB,GAC5D,MAAMhrD,EAAQ8yB,EAAOsC,qBACrB/lB,EAAIlF,OACJkF,EAAIxE,aAAaioB,EAAOmC,YACxB,IAAI/kB,GAAO,EAmBX,GAlBI4iB,EAAOm4B,iBAAiB32B,GAAY,IACpCpkB,GAAO,GAENA,IACD9W,GAAM05B,EAAOmC,WAAa,EAAKwJ,GACnCpvB,EAAIQ,YACJR,EAAIS,OAAO1W,EAAGgF,EAAI4sD,GAClB37C,EAAIU,OAAO3W,EAAGgF,EAAI,GAClBiR,EAAIU,OAAO3W,EAAI4G,EAAO5B,EAAI4sD,GAC1B37C,EAAIU,OAAO3W,EAAI4G,EAAO5B,GACtBiR,EAAIU,OAAO3W,EAAGgF,EAAI4sD,GAClB37C,EAAIi/B,YACAp+B,EACAb,EAAIa,OAGJb,EAAIikB,SAEJR,EAAO2B,mBAAmBH,GAAU93B,OAAO,IAAM,CACjD,MAAM0uD,EAAc,EAAE,GAAI,EAAGlrD,EAAQ,EAAGA,EAAQ,GAChD,IAAK,IAAI/B,EAAI,EAAGA,EAAIitD,EAAY7vD,OAAQ4C,IACpCoR,EAAIQ,YACJR,EAAIS,OAAO1W,EAAI8xD,EAAYjtD,GAAIG,EAAI,IACnCiR,EAAIU,OAAO3W,EAAI8xD,EAAYjtD,GAAIG,EAAI,IACnCiR,EAAIikB,SAGZjkB,EAAItE,UAgJIogD,CAAkB97C,EAAK9Y,KAAK+9B,SAAUw2B,EAAQ1sD,EAAGqgC,EAAgBusB,QAGjE39C,EAAMu8C,YAAYv6C,EAAKy7C,EAAQ1sD,EAAGovC,EAAkBj3C,KAAK2zD,WAAY,CACjEzyD,SAAUlB,KAAKuzD,aAAe,mBAAmBiB,IAAmB,qBAAqBA,MAG7Fx0D,KAAKwN,OACLxN,KAAKuU,aAAauE,IAK9Bw6C,GAASpyB,OAAQ,ECxMV,MAAMh/B,WAAsBJ,GAC/BT,YAAY60C,GACRzzC,MAAMyzC,GAEC50C,sBACP,OAAOG,EAASS,cAGpBwrC,UACI,OAAO1tC,KAAKsgC,KAEhB+O,YACI,IAAKrvC,KAAKsgC,KACN,MAAM,IAAIj+B,EAAa,SAAU,gCAErC,OAAOrC,KAAKsgC,KAEhBu0B,QAAQv0B,GAEJ,OADAtgC,KAAKsgC,KAAOA,EACLtgC,KAGX80D,YACI,MAAMx0B,EAAO,IAAIkH,EAEjB,OADAxnC,KAAK60D,QAAQv0B,GACNtgC,KAEX+0D,UAAU7zD,EAAW,QACjB,MAAM,MAAEsX,GAAUxY,KAClB,GAAIA,KAAKg1D,UAAW,CAChB,MAAMC,EAAWj1D,KAAKutC,qBAAuB/F,EAAKgB,KAAOhwB,EAAMuoB,mBAAqBvoB,EAAMsoB,iBAC1F9gC,KAAKwgC,KAAO,IAAI1pB,EAAMm+C,EAAUj1D,KAAKmhC,eAAe8V,iBAAkB,CAAE/1C,SAAAA,KAIhFg0D,6BACI,OAAIl1D,KAAKutC,qBAAuB/F,EAAKgB,KAC1BxoC,KAAK42C,aAAa52C,KAAK42C,aAAa9xC,OAAS,GAG7C9E,KAAK42C,aAAa,GAIjCue,gBACI,OAAO3tB,EAAKkB,OAAS1oC,KAAKo1D,mBAG9BC,eACI,MAAM78C,EAAQxY,KAAKi5C,WACnB,OAAIzgC,EACOA,EAAMooB,WAGN,EAIf00B,uBAEI,IAAIxwD,EADSy3B,EAAO2B,mBAAmBl+B,KAAK+9B,UAC1B74B,SAAW,EAAI,EAAI,GAErC,OAAQlF,KAAK+9B,UACT,IAAK,IACgBj7B,MAAb9C,KAAKu5C,OACLz0C,EAAS,IACb,MACJ,IAAK,KACDA,EAAsBhC,MAAb9C,KAAKu5C,KAAoB,GAAK,GACvC,MACJ,IAAK,KACDz0C,EAAsBhC,MAAb9C,KAAKu5C,KAAoB,GAAK,GACvC,MACJ,IAAK,KACDz0C,EAAsBhC,MAAb9C,KAAKu5C,KAAoB,GAAK,GACvC,MACJ,IAAK,MACDz0C,EAAsBhC,MAAb9C,KAAKu5C,KAAoB,GAAK,GAK/C,OAAOz0C,EAGXyoC,mBACI,IAAKvtC,KAAKkoC,eACN,MAAM,IAAI7lC,EAAa,SAAU,kCACrC,OAAOrC,KAAKkoC,eAEhBqtB,iBAAiBhxC,GAGb,GAFKA,IACDA,EAAYijB,EAAKe,IACjBhkB,IAAcijB,EAAKe,IAAMhkB,IAAcijB,EAAKgB,KAC5C,MAAM,IAAInmC,EAAa,cAAe,2BAA2BkiB,KASrE,GAPAvkB,KAAKkoC,eAAiB3jB,EAEtBvkB,KAAKuY,QACDvY,KAAKg1D,WACLh1D,KAAK+0D,YAET/0D,KAAKu5C,UAAOz2C,EACR9C,KAAKsgC,KAAM,CACXtgC,KAAKsgC,KAAKsI,aAAarkB,GACvBvkB,KAAKsgC,KAAKuI,aAAa7oC,KAAKo1D,oBAG5B,MAAM58C,EAAQxY,KAAKk1D,8BAAgCl1D,KAAKi5C,WAElDuc,EAAUj5B,EAAOoF,mBAAmBvxB,aAAa,iBAAiBoI,EAAM+lB,YAAa,CACvFk3B,kBAAmB,EACnBC,iBAAkB,EAClBC,oBAAqB,EACrBC,mBAAoB,IAGxB51D,KAAKsgC,KAAKhoB,WAAW,CACjBmvB,iBAAkB+tB,EAAQE,iBAC1BhuB,mBAAoB8tB,EAAQI,mBAC5BjuB,sBAAuB6tB,EAAQC,kBAC/B7tB,wBAAyB4tB,EAAQG,sBAMzC,OAHI31D,KAAK01C,cACL11C,KAAKy1C,YAEFz1C,KAGXivC,WACI,MAAMpH,EAAU7nC,KAAKi2C,eAAiBj2C,KAAKoX,QACrC0wB,EAAQ9nC,KAAKi2C,eAAiBj2C,KAAKoX,QAAUpX,KAAKk5C,gBAExD,OADel5C,KAAKkoC,iBAAmBV,EAAKgB,KAAOX,EAAUC,EAKjE+tB,kBACI,OAAO71D,KAAKi2C,eAAiBj2C,KAAKoX,QAAUpX,KAAKk5C,gBAAkB,EAGvEkc,mBACI,MAAM58C,EAAQxY,KAAKi5C,WACnB,GAAoCn2C,MAAhC9C,KAAK81D,wBACL,OAAO91D,KAAK81D,wBAGhB,GAAI91D,KAAKu5C,KACL,OAAO/gC,EAAMqoB,oBAEjB,MAAMo0B,EAAWj1D,KAAKutC,qBAAuB/F,EAAKgB,KAAOxoC,KAAKwY,MAAMuoB,mBAAqB/gC,KAAKwY,MAAMsoB,iBACpG,OAAO38B,KAAK6C,IAAIu1B,EAAOoF,mBAAmBvxB,aAAa,eAAe6kD,WAAmB,IAG7Fc,cAAcrsD,GAEV,OADA1J,KAAK81D,wBAA0BpsD,EAAS89B,EAAKkB,OACtC1oC,KAGX6vC,iBACI,IAAK7vC,KAAKsgC,KACN,MAAM,IAAIj+B,EAAa,SAAU,kCACrC,OAAOrC,KAAKsgC,KAAK6I,aAGrBsG,eAAeiC,GACX,MAAMx3B,EAAQla,KAAK+a,aACnB,GAAI/a,KAAKstC,UAAW,CAChB,MAAMsC,EAAU5vC,KAAK6vC,iBACrB,IAAKD,EACD,MAAM,IAAIvtC,EAAa,eAAgB,+BAC3C,OAAO8B,KAAKqlC,IAAItvB,EAAMu1B,eAAeiC,GAAW9B,EAAQlG,KAAO1pC,KAAKmhC,eAAe6V,oBAAsBtF,EAAW,IAGpH,OAAOx3B,EAAMu1B,eAAeiC,GAIpChC,kBAAkBgC,GACd,MAAMx3B,EAAQla,KAAK+a,aACnB,GAAI/a,KAAKstC,UAAW,CAChB,MAAMsC,EAAU5vC,KAAK6vC,iBACrB,IAAKD,EACD,MAAM,IAAIvtC,EAAa,eAAgB,+BAC3C,OAAO8B,KAAK4E,IAAImR,EAAMu1B,eAAeiC,GAAW9B,EAAQjG,MAAQ3pC,KAAKmhC,eAAe6V,mBAAqBtF,GAGzG,OAAOx3B,EAAMw1B,kBAAkBgC,GAGvCsjB,UACI,OAAOz4B,EAAOoa,cAAc32C,KAAK+9B,UAAUyC,OAASxgC,KAAKu5C,KAG7D5D,aACI,IAAI5oC,EAGJ,OAFqB,QAApBA,EAAK/M,KAAKu5C,YAAyB,IAAPxsC,GAAyBA,EAAG4oC,aACzD31C,KAAK41C,eAAgB,EACd51C,KAGXg2D,SAASC,GACL,IAAIlpD,EACJ/M,KAAK0U,eACL1U,KAAKgV,cACLhV,KAAK60D,QAAQ,IAAIrtB,EAAKyuB,IACD,QAApBlpD,EAAK/M,KAAKsgC,YAAyB,IAAPvzB,GAAyBA,EAAGsI,WAAWrV,KAAKoV,cAAcT,QC7L/F,SAASuhD,GAAkBtsC,EAAMlN,EAAMy5C,GACnC,MAAMC,EAAQD,EACdvsC,EAAK1mB,MAAQkzD,EACbxsC,EAAKysC,SAAWD,EAChBxsC,EAAK0sC,SAAWF,EAChBxsC,EAAKlN,KAAK65C,WAAW,EAAG3sC,EAAKlN,KAAK85C,WAAW,GAAKJ,GAU/C,MAAMp0D,WAAkBE,GAC3Bb,YAAY60C,GACR,IAAInpC,EAAIkF,EAAIyyC,EACZjiD,MAAMyzC,GAGNl2C,KAAKs2D,QAAU,EACft2D,KAAKq2D,QAAU,EACfr2D,KAAKy2D,gBAAkB,GACvBz2D,KAAKw8B,KAAkC,QAA1BzvB,EAAKmpC,EAAW1Z,YAAyB,IAAPzvB,EAAgBA,EAAK,SACpE/M,KAAK28B,aAAkD,QAAlC1qB,EAAKikC,EAAWvZ,oBAAiC,IAAP1qB,EAAgBA,EAAK,EAEpFjS,KAAKwY,MAAQ+jB,EAAOoa,cAAc32C,KAAK+9B,SAAU/9B,KAAKw2C,UACtD5zC,EAAQ5C,KAAKwY,MAAO,eAAgB,gCAAgCxY,KAAK+9B,uBAAuB/9B,KAAKw2C,aAErGx2C,KAAKm9B,WAAY,EACjBn9B,KAAKygC,WAAa,EAElBzgC,KAAK02D,oBAAqB,EAE1B12D,KAAK22D,WAAa,GAClB32D,KAAKmzC,UAAY,GACjBnzC,KAAKmhC,eAAiB9gC,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKmhC,gBAAiB,CAExE8V,iBAAkBf,EAAWe,kBAAoB1a,EAAOkC,oBAExDyY,UAAWhB,EAAWgB,WAAal1C,GAAU40D,qBACjD52D,KAAK62D,oBACL72D,KAAK80D,YAED5e,EAAW4gB,UACX92D,KAAK+2D,WAGL/2D,KAAKu1D,iBAAsD,QAApC7Q,EAAKxO,EAAWhO,sBAAmC,IAAPwc,EAAgBA,EAAKld,EAAKe,IAEjGvoC,KAAKuY,QACLvY,KAAK+0D,YAEEzzD,sBACP,OAAOG,EAASO,UAKTg1D,qBACP,OAAOxvB,EAAKe,GAKL0uB,uBACP,OAAOzvB,EAAKgB,KAELouB,gCACP,OAAO,EAEAM,gCAEP,OADkB36B,EAAOoF,mBACRvxB,aAAa,8BAGlC3L,cAAco5B,EAAO4D,GACjB,IAAK5D,GAASA,EAAM/4B,OAAS,EACzB,OAAO,EACX,MAAMqyD,EAAY,GAClB,IAAK,IAAIzvD,EAAI,EAAGA,EAAIm2B,EAAM/4B,OAAQ4C,IAAK,CACnC,MAAM06B,EAAQvE,EAAMn2B,GAAG26B,cACjBn/B,EAAOk/B,EAAM,GAAGl/B,KACtB,IAAIk0D,EAAOh1B,EAAMA,EAAMt9B,OAAS,GAAG5B,KACnC,MAAMmqC,EAAgBxP,EAAMn2B,GAAG6lC,mBACzB8pB,EAAUx5B,EAAMn2B,GAAGytD,gBAAkB,GACrCmC,EAAUz5B,EAAMn2B,GAAG4tD,uBAAyB,GAClD,IAAIiC,EACA15B,EAAMn2B,GAAGu+B,UACTsxB,EAAOr0D,EAAO26B,EAAMn2B,GAAG8Q,MAAMkoB,WAC7B02B,EAAOl0D,EAAO26B,EAAMn2B,GAAG8Q,MAAMmoB,aAG7B42B,EAAyB,IAAlBlqB,EAAsBjL,EAAMA,EAAMt9B,OAAS,GAAG5B,KAAOm0D,EAAUj1B,EAAMA,EAAMt9B,OAAS,GAAG5B,KAC9Fk0D,EAAyB,IAAlB/pB,EAAsBjL,EAAM,GAAGl/B,KAAOk/B,EAAM,GAAGl/B,KAAOm0D,GAEjEF,EAAUt/C,KAAK,CACX3U,KAAMk/B,EAAM,GAAGl/B,KACfmzD,QAASkB,EACTjB,QAASc,EACTI,OAAQ35B,EAAMn2B,GAAGu+B,SACjBoH,cAAeA,EACfgqB,QAAAA,EACAC,QAAAA,EACAG,YAAa55B,EAAMn2B,GAAGgwD,qBACtBC,aAAc95B,EAAMn2B,GAAGosD,cACvBp3C,KAAMmhB,EAAMn2B,KAGpB,MAAMw9B,EAASiyB,EAAUryD,OACzB,IAAI8yD,EAAQT,EAAU,GACtB,MAAMU,EAAQ3yB,EAAS,EAAIiyB,EAAU,QAAKr0D,EAC1C,IAAIg1D,EAAQ5yB,EAAS,EAAIiyB,EAAU,GAAKA,EAAU,GAGnC,IAAXjyB,IAAyC,IAAzB0yB,EAAMvqB,eAAgD,IAAxByqB,EAAMzqB,gBACpDuqB,EAAQT,EAAU,GAClBW,EAAQX,EAAU,IAEtB,MAAMY,EAAc5zD,KAAK4E,IAAI6uD,EAAMH,YAAaK,EAAML,aACtD,IAAIj9C,EAAS,EAEb,GAAe,IAAX0qB,EAAc,CACd,MAAMstB,EAAcoF,EAAMvqB,gBAAkByqB,EAAMzqB,cAAgB,EAAM,GAuBxE,OAtBIuqB,EAAMtB,SAAWwB,EAAMzB,QAAU7D,IAC7BoF,EAAMJ,OAENtB,GAAkB0B,EAAOE,EAAO,GAE3BA,EAAMN,OAEXtB,GAAkB4B,EAAOF,GAAQ,GAE5BA,EAAMvqB,gBAAkByqB,EAAMzqB,eAEnC7yB,EAASu9C,EAAc,EACvBH,EAAMl7C,KAAKvC,UAAUK,KAIrBA,EAASu9C,EAAc,EACvBD,EAAMp7C,KAAKvC,UAAUK,KAI7BinB,EAAM4M,aAAe7zB,GACd,EAEX,IAAKq9C,EACD,MAAM,IAAIx1D,EAAa,eAAgB,sBAK3C,GAAIw1D,EAAML,SAAWI,EAAMJ,SAAWM,EAAMN,SACpCI,EAAMtB,SAAWuB,EAAMxB,SAAWwB,EAAMvB,SAAWwB,EAAMzB,SAAS,CAqBlE,OApBmBwB,EAAMxB,QAAUwB,EAAMvB,QAC3BsB,EAAMtB,QAAUwB,EAAMzB,QAtJpD,SAAoBzsC,EAAMguC,EAAOE,GAC7B,MAAM1B,EAAQxsC,EAAK1mB,KAAOQ,EAAQk0D,EAAMtB,QAASwB,EAAMzB,SACvDzsC,EAAKlN,KAAK65C,WAAW,EAAG3sC,EAAKlN,KAAK85C,WAAW,GAAKJ,GAClDxsC,EAAK1mB,MAAQkzD,EACbxsC,EAAKysC,SAAWD,EAChBxsC,EAAK0sC,SAAWF,EAoJA4B,CAAWH,EAAOD,EAAOE,IAGzBt9C,EAASu9C,EAAc,EACvBF,EAAMn7C,KAAKvC,UAAUK,IACQ,IAAzBs9C,EAAMp7C,KAAK+8B,YACXqe,EAAMzqB,eAAiB,EACvByqB,EAAMp7C,KAAK64C,kBAAkB,IAE7BqC,EAAMtB,SAAWwB,EAAMzB,UAAoC,IAAzBuB,EAAMl7C,KAAK+8B,YAC7Cme,EAAMvqB,cAAgB,EACtBuqB,EAAMl7C,KAAK64C,iBAAiB,KAIpC9zB,EAAM4M,aAAe7zB,GACd,EAIf,OAAIo9C,EAAMJ,QAAUK,EAAML,QAAUM,EAAMN,QAEtCtB,GAAkB0B,EAAOC,EAAO,GAEhC3B,GAAkB4B,EAAOD,GAAQ,GAEjCp2B,EAAM4M,aAAe7zB,GACd,IAGPq9C,EAAML,QAAUI,EAAMJ,QAAUK,EAAMvB,SAAWwB,EAAMzB,SAEvDH,GAAkB2B,EAAOC,EAAO,GAEhCD,EAAML,QAAUM,EAAMN,QAAUI,EAAMtB,SAAWuB,EAAMxB,SAEvDH,GAAkB2B,EAAOD,GAAQ,GAEjCA,EAAMJ,QAAUI,EAAMtB,SAAWuB,EAAMxB,SAEvCH,GAAkB0B,EAAOC,EAAO,GAEhCC,EAAMN,QAAUK,EAAMvB,SAAWwB,EAAMzB,SAEvCH,GAAkB4B,EAAOD,GAAQ,IAGjCD,EAAMtB,SAAWuB,EAAMxB,QAAU,IAAOwB,EAAMvB,SAAWwB,EAAMzB,WAE/D77C,EAASu9C,EAAc,EACvBF,EAAMn7C,KAAKvC,UAAUK,IACQ,IAAzBs9C,EAAMp7C,KAAK+8B,YACXqe,EAAMzqB,eAAiB,EACvByqB,EAAMp7C,KAAK64C,kBAAkB,IAE7BqC,EAAMtB,SAAWwB,EAAMzB,UAAoC,IAAzBuB,EAAMl7C,KAAK+8B,YAC7Cme,EAAMvqB,cAAgB,EACtBuqB,EAAMl7C,KAAK64C,iBAAiB,KAGpC9zB,EAAM4M,aAAe7zB,GACd,GAEX/V,kBAAkBo5B,GACd,QAAKA,IAELA,EAAM3f,SAASxB,GAASA,EAAKi5B,gBACtB,GAEXp9B,QACI9V,MAAM8V,QAEN,MAAM0/C,EAAiBj4D,KAAK22D,WAAWpkD,KAAK2lD,GAAaA,EAASzkD,aAClEzT,KAAKm4D,iBACLn4D,KAAK22D,WAAWz4C,SAAQ,CAACg6C,EAAU9mD,KAC/B,MAAMgnD,EAAgBH,EAAe7mD,GACjCgnD,GACAF,EAAS1kD,SAAS4kD,MAE1B,MAAMl+C,EAAQla,KAAKka,MAKnB,OAJIA,GACAla,KAAK22D,WAAWz4C,SAASm6C,GAASA,EAAKp+C,SAASC,KAEpDla,KAAKs4D,wBACEt4D,KAEX05C,QAAQH,GAOJ,OANAv5C,KAAKu5C,KAAOA,EACZv5C,KAAKs4D,wBAEDt4D,KAAKsgC,MACLtgC,KAAKsgC,KAAKuI,aAAa7oC,KAAKo1D,oBAEzBp1D,KAGX80D,YAEI,OADA90D,KAAK60D,QAAQ,IAAIrtB,EAAK,CAAEW,OAAQnoC,KAAKimC,YAC9BjmC,KAGXm4D,iBACIn4D,KAAK22D,WAAa,GAClB,MAAMtpB,EAAgBrtC,KAAKutC,mBACrBj7B,EAAOtS,KAAKw6C,UAClB,IAAIuO,EACAwP,EAIAnxB,EACAyV,EACA5wC,EALAkxB,GAAY,EAMZkQ,IAAkB7F,EAAKe,IACvBnB,EAAQ,EACRyV,EAAMvqC,EAAKxN,OACXmH,EAAO,IAGPm7B,EAAQ90B,EAAKxN,OAAS,EACtB+3C,GAAO,EACP5wC,GAAQ,GAEZ,IAAK,IAAIvE,EAAI0/B,EAAO1/B,IAAMm1C,EAAKn1C,GAAKuE,EAAM,CACtC,MAAMusD,EAAYx4D,KAAKu2C,SAAS7uC,GAC1BxE,EAAOs1D,EAAUt1D,UAGNJ,IAAbimD,EACAA,EAAW7lD,GAGXq1D,EAAWp0D,KAAK6C,IAAI+hD,EAAW7lD,GACd,IAAbq1D,GAA+B,KAAbA,EAClBp7B,GAAaA,GAGbA,GAAY,EACZn9B,KAAK02D,oBAAqB,IAGlC3N,EAAW7lD,EACX,MAAMu1D,EAAW,IAAInF,GAAS,CAC1Bv1B,SAAU/9B,KAAK+9B,SACf21B,UAAW1zD,KAAKw2C,SAChBrZ,UAAAA,EACA+K,eAAgBmF,EAChBumB,kBAAmB4E,EAAUj2D,KAC7B00C,iBAAkBj3C,KAAKmhC,eAAe8V,iBACtC7/B,QAASohD,EAAU1uC,YACnB0pC,iBAAkBgF,EAAUhF,iBAC5BC,mBAAoB+E,EAAU/E,mBAC9BvwD,KAAMs1D,EAAUt1D,OAEpBlD,KAAK22D,WAAWjvD,GAAK+wD,GAI7B1B,WACI/2D,KAAKu1D,iBAAiBv1D,KAAK04D,iCAE/BA,gCAEI14D,KAAKs2D,QAAUt2D,KAAKu2C,SAAS,GAAGrzC,KAChClD,KAAKq2D,QAAUr2D,KAAKu2C,SAASv2C,KAAKu2C,SAASzxC,OAAS,GAAG5B,KAIvD,OAFiBlD,KAAKs2D,QAAUt2D,KAAKq2D,SAAW,EAD5B,EAE0B7uB,EAAKe,GAAKf,EAAKgB,KAIjEquB,oBACI,IAAI9N,EACJ,IAAK,IAAIrhD,EAAI,EAAGA,EAAI1H,KAAKsS,KAAKxN,SAAU4C,EAAG,CACvC,MAAMvH,EAAMH,KAAKsS,KAAK5K,GAGlB1H,KAAKwY,MAAMoR,OACX5pB,KAAKwY,MAAMiD,SAAWtb,GAC1B,MAAM+X,EAAU,CAAEykB,aAAc38B,KAAK28B,cAAgB,GAC/CyF,EAAQ7F,EAAOo8B,cAAcx4D,EAAKH,KAAKw8B,KAAMtkB,GACnD,IAAKkqB,EACD,MAAM,IAAI//B,EAAa,eAAgB,oCAAoClC,KAG7D,MAAdiiC,EAAMjiC,MACgB,MAAlBH,KAAK+9B,UAAsC,MAAlB/9B,KAAK+9B,SAC9BqE,EAAMl/B,KAAO,EAGbk/B,EAAMl/B,KAAO,GAIrB,MAAMA,EAAOk/B,EAAMl/B,KACHJ,MAAZimD,EACAA,EAAW7lD,EAGuB,KAA9BiB,KAAK6C,IAAI+hD,EAAW7lD,KACpBlD,KAAKm9B,WAAY,EACjBiF,EAAMjF,WAAY,EAGdn9B,KAAKu2C,SAASzxC,OAAS,IACvB9E,KAAKu2C,SAAS7uC,EAAI,GAAGy1B,WAAY,IAI7C4rB,EAAW7lD,EACXlD,KAAKu2C,SAAS1+B,KAAKuqB,GAGvB2mB,OAAWjmD,EACX9C,KAAKu2C,SAASr4B,SAAS/d,IACf4oD,GAAY5oD,EAAI+C,KAAO6lD,GACvBxlD,EAAK,qGAETwlD,EAAW5oD,EAAI+C,QAEnBlD,KAAKu2C,SAAS3T,MAAK,CAACj/B,EAAGC,IAAMD,EAAET,KAAOU,EAAEV,OAG5CiS,iBACI,IAAIpI,EAAIkF,EACR,IAAKjS,KAAK01C,aACN,MAAM,IAAIrzC,EAAa,kBAAmB,qDAE9C,MAAQoH,MAAO3B,EAAC,UAAEkW,EAAS,oBAAE84B,GAAwB92C,KAAK8P,aACpDjN,EAAI7C,KAAKi2C,eAAiBj4B,EAAY84B,EAC5C,IAAI8hB,EAAO,EACPC,EAAO,EACX,MAAMC,GAAsH,QAAlG7mD,EAAgC,QAA1BlF,EAAK/M,KAAK8d,kBAA+B,IAAP/Q,OAAgB,EAASA,EAAGy1B,gCAA6C,IAAPvwB,EAAgBA,EAAK,GAAK,EACxJugD,EAAgC,EAAlBsG,EACpB,GAAI94D,KAAKimC,SAAU,CACf,MAAMp+B,EAAI7H,KAAKqpC,GAAG,GACZ0vB,EAAOx8B,EAAO2B,mBAAmBl+B,KAAK+9B,UACxCg7B,EAAK9yD,OAAO,IAAM8yD,EAAK9yD,OAAO,IAC9B2yD,EAAO/wD,EAAIixD,EACXD,EAAOhxD,EAAIixD,IAGXF,EAAO/wD,EAAI7H,KAAKwY,MAAMkoB,WAAa8xB,EACnCqG,EAAOhxD,EAAI7H,KAAKwY,MAAMmoB,WAAa6xB,QAGtC,GAAIxyD,KAAKwY,MAAM8nB,KAAM,CACtB,MAAM+I,EAAKrpC,KAAK6vC,iBAChBxG,EAAGM,OAASmvB,EAAkB94D,KAAKutC,mBACnCqrB,EAAOz0D,KAAKqlC,IAAIH,EAAGK,KAAML,EAAGM,OAC5BkvB,EAAO10D,KAAK4E,IAAIsgC,EAAGK,KAAML,EAAGM,WAE3B,CACDivB,EAAO,EACPC,EAAO,EACP,IAAK,IAAInxD,EAAI,EAAGA,EAAI1H,KAAKqpC,GAAGvkC,SAAU4C,EAAG,CACrC,MAAMmwC,EAAK73C,KAAKqpC,GAAG3hC,GACT,IAANA,GACAkxD,EAAO/gB,EACPghB,EAAOhhB,IAGP+gB,EAAOz0D,KAAKqlC,IAAIqO,EAAI+gB,GACpBC,EAAO10D,KAAK4E,IAAI8uC,EAAIghB,IAG5BD,GAAQE,EACRD,GAAQC,EAEZ,OAAO,IAAIlxD,EAAY/E,EAAG+1D,EAAM9wD,EAAG+wD,EAAOD,GAI9C7qB,cAAcgL,GACV,IAAK/4C,KAAKu2C,SAASzxC,OACf,MAAM,IAAIzC,EAAa,aAAc,yEAEzC,IAAI22D,EAAah5D,KAAKu2C,SAAS,GAAGrzC,KAElC,IAAK,IAAIwE,EAAI,EAAGA,EAAI1H,KAAKu2C,SAASzxC,OAAQ4C,IAAK,CAC3C,MAAMuxD,EAAWj5D,KAAKu2C,SAAS7uC,GAAGxE,KAC9B61C,EACIkgB,EAAWD,IACXA,EAAaC,GAGbA,EAAWD,IACXA,EAAaC,GAGzB,OAAOD,EAKX/yB,SACI,OAAOjmC,KAAKwY,MAAMoR,KAGtBsvC,UACI,OAAQl5D,KAAKimC,UAAYjmC,KAAKsS,KAAKxN,OAAS,EAGhDwoC,UACI,OAAOttC,KAAKwY,MAAM8nB,KAEtB00B,UACI,OAAOvyD,MAAMuyD,YAAch1D,KAAKimC,SAEpCgJ,WACI,MAAsB,MAAlBjvC,KAAKw2C,SACEx2C,KAAK61D,kBAKLpzD,MAAMwsC,YAAcjvC,KAAKkoC,eAAiBV,EAAKiB,OAAS,GAAKzoC,KAAKkoC,gBAAkB,GAKnGuH,eAAeiC,GACX,MAAM9B,EAAU5vC,KAAK6vC,iBACrB,OAAO1rC,KAAKqlC,IAAIxpC,KAAK+a,aAAa00B,eAAeiC,GAAW9B,EAAQlG,KAAO1pC,KAAKmhC,eAAe6V,oBAAsBtF,EAAW,IAEpIhC,kBAAkBgC,GACd,MAAM9B,EAAU5vC,KAAK6vC,iBACrB,OAAO1rC,KAAK4E,IAAI/I,KAAK+a,aAAa00B,eAAeiC,GAAW9B,EAAQjG,MAAQ3pC,KAAKmhC,eAAe6V,mBAAqBtF,GAIzHz3B,SAASC,GACLzX,MAAMwX,SAASC,GACf,MAAMmvB,EAAKrpC,KAAK22D,WAAWpkD,KAAKkmD,IAC5BA,EAASx+C,SAASC,GACXu+C,EAASvwD,UAGpB,GADAlI,KAAK24C,MAAMtP,GACPrpC,KAAKsgC,KAAM,CACX,MAAM,MAAEyH,EAAK,SAAEC,GAAahoC,KAAKm5D,oBACjCn5D,KAAKsgC,KAAK0I,WAAWjB,EAAOC,GAEhC,OAAOhoC,KAGX8zD,cACI,OAAO9zD,KAAKm9B,UAGhBi8B,iBAAiBj8B,GAEb,OADAn9B,KAAKm9B,UAAYA,EACVn9B,KAGXo6C,eACI,IAAIC,EAAYr6C,KAAKi2C,eAIrB,OAHAoE,GAAar6C,KAAKk5C,gBAAkBl5C,KAAKoX,QAAUpX,KAAK+2C,qBACpD/2C,KAAKid,kBACLo9B,GAAar6C,KAAKid,gBAAgBo8C,iBAC/Bhf,EAGXC,cACI,IAAIC,EAAUv6C,KAAKi2C,eAEnB,OADAsE,GAAWv6C,KAAKoX,QAAUpX,KAAK82C,oBACxByD,EAGXvB,iBACI,IAAIsgB,EAAWt5D,KAAKu2C,SAAS,GAAGrzC,KAChC,GAAIlD,KAAKu2C,SAASzxC,OAAS,EAAG,CAC1B,MAAMikD,EAAW/oD,KAAKu2C,SAASv2C,KAAKu2C,SAASzxC,OAAS,GAAG5B,KAGzDo2D,EAAW51D,EAFCS,KAAK4E,IAAIuwD,EAAUvQ,GACnB5kD,KAAKqlC,IAAI8vB,EAAUvQ,IAGnC,OAAOuQ,EAIXjyB,mBAAmB5rB,EAAUrK,EAAO8G,EAAU,IAC1C,IAAInL,EAAIkF,EACR,IAAKjS,KAAK01C,aACN,MAAM,IAAIrzC,EAAa,kBAAmB,wDAE9C,GAAuB,IAAnBrC,KAAKqpC,GAAGvkC,OACR,MAAM,IAAIzC,EAAa,YAAa,yCAExC,MAAM,MAAE4Z,EAAK,MAAEE,EAAK,KAAER,EAAI,MAAEW,GAAUf,EAASG,SAC/C,IAAI7Y,EAAI,EAiBR,OAhBI4Y,IAAaE,EAEb9Y,GAAI,EAEC4Y,IAAaa,GAElBzZ,EAAI7C,KAAKk5C,gBAAkBl5C,KAAKoX,QAAU,EACtCpX,KAAKkoC,iBAAmBV,EAAKe,IAC7BvoC,KAAKg1D,YACJ98C,EAAQ6vC,gBAljBA,EAACrrC,EAAMtL,IAAUA,KAAWsL,EAAK6wB,qBAAuB/F,EAAKe,GAAK7rB,EAAK65B,SAASzxC,OAAS,EAAI,GAkjB3Ey0D,CAAiBv5D,KAAMoR,MAClDvO,GAAwI,QAAlIoP,EAAsE,QAAhElF,EAAK/M,MAAAA,UAAmC,EAASA,KAAKwgC,YAAyB,IAAPzzB,OAAgB,EAASA,EAAG+C,aAAarG,aAA0B,IAAPwI,EAAgBA,EAAK,IAGpKwJ,IAAaU,GAASV,IAAaQ,IACxCpZ,EAAI7C,KAAKk5C,gBAAkB,GAExB,CACHr2C,EAAG7C,KAAKi2C,eAAiBpzC,EACzBgF,EAAG7H,KAAKqpC,GAAGj4B,IAKnBoC,SAAShG,GACL,IAAIT,EAIJ,OAHAtK,MAAM+Q,SAAShG,GACfxN,KAAK22D,WAAWz4C,SAASu6C,GAAaA,EAASjlD,SAAShG,KACnC,QAApBT,EAAK/M,KAAKsgC,YAAyB,IAAPvzB,GAAyBA,EAAGyG,SAAShG,GAC3DxN,KAEXw5D,aAAahsD,GACT,MAAM8yB,EAAOtgC,KAAK0tC,UAElB,OADApN,MAAAA,GAA4CA,EAAK9sB,SAAShG,GACnDxN,KAEXy5D,eACI,IAAI1sD,EACJ,OAA4B,QAApBA,EAAK/M,KAAKsgC,YAAyB,IAAPvzB,OAAgB,EAASA,EAAG0G,WAEpEimD,mBAAmBlsD,GACfxN,KAAKy2D,gBAAkBjpD,EAE3BmsD,qBACI,OAAO35D,KAAKy2D,gBAEhBmD,aAAapsD,GACTxN,KAAK65D,UAAYrsD,EAErBssD,eACI,OAAO95D,KAAK65D,UAMhBE,YAAY3oD,EAAO5D,GAEf,OADAxN,KAAK22D,WAAWvlD,GAAOoC,SAAShG,GACzBxN,KAEXu2D,WAAWnlD,EAAOlO,GAGd,OAFAlD,KAAKu2C,SAASnlC,GAAOlO,KAAOA,EAC5BlD,KAAKuY,QACEvY,KAEXw2D,WAAWplD,GACP,OAAOpR,KAAKu2C,SAASnlC,GAAOlO,KAIhCw0D,qBAEI,OAAO13D,KAAKk5C,iBAAmBl5C,KAAKm9B,UAAY,EAAI,GAIxDm7B,wBACIt4D,KAAK64C,uBAAuB74C,KAAKm9B,WAAan9B,KAAKkoC,iBAAmBV,EAAKgB,KAAOxoC,KAAKk5C,gBAAkB,GAGzGl5C,KAAK84C,yBAAyB94C,KAAKg1D,WAAah1D,KAAKm9B,WAAan9B,KAAKkoC,iBAAmBV,EAAKe,GAAKvoC,KAAKk5C,gBAAkB,GAG/HzD,YACI,GAAIz1C,KAAK01C,aACL,OACJ,IAAIskB,EAAkB,EAClBh6D,KAAKid,kBACLjd,KAAKid,gBAAgBw4B,YAGmB,IAApCz1C,KAAKid,gBAAgBV,aACrBy9C,EAAkBh4D,GAAUk1D,qBAGpC,IAAIztD,EAAQzJ,KAAKk5C,gBAAkBl5C,KAAK82C,oBAAsB92C,KAAK+2C,qBAAuBijB,EAEtFh6D,KAAKi6D,kBAAoBj6D,KAAKkoC,iBAAmBV,EAAKe,KACtD9+B,GAASzJ,KAAKk5C,iBAGlBl5C,KAAKwc,SAAS/S,GACdzJ,KAAK01C,cAAe,EAqBxByjB,oBAEI,IAEIe,EACAC,EAGAC,EACAC,EAPAC,EAAQC,EAAAA,EACRC,GAAWD,EAAAA,EAGXE,EAAcz6D,KAAK+a,aAAa6yB,cAChC8sB,EAAa,EAGbC,EAA0BF,EAC1BG,EAAyBF,EAuB7B,OAtBA16D,KAAK22D,WAAWz4C,SAASu6C,IACrB,MAAMv1D,EAAOu1D,EAAS1E,UAChBlsD,EAAI4wD,EAASvwD,OACnBoyD,EAAOn2D,KAAKqlC,IAAI3hC,EAAGyyD,GACnBE,EAAUr2D,KAAK4E,IAAIlB,EAAG2yD,QACH13D,IAAfq3D,GAA4B1B,EAAS3E,gBACrCqG,EAAa1B,EAASxiB,qBAEJnzC,IAAlBo3D,GAAgCzB,EAAS3E,gBACzCoG,EAAgBzB,EAASxiB,gBAE7BwkB,EAAct2D,KAAK4E,IAAI7F,EAAMu3D,GAC7BC,EAAav2D,KAAKqlC,IAAItmC,EAAMw3D,GACxBjC,EAAS3E,eACTsG,OAAgDt3D,IAAzBs3D,EAAqCl3D,EAAOiB,KAAK4E,IAAI7F,EAAMk3D,GAClFC,OAA8Cv3D,IAAxBu3D,EAAoCn3D,EAAOiB,KAAKqlC,IAAItmC,EAAMm3D,KAGhFM,EAA0Bx2D,KAAK4E,IAAI7F,EAAMy3D,GACzCC,EAAyBz2D,KAAKqlC,IAAItmC,EAAM03D,MAE7C56D,MACI,CACH+nC,MAAOuyB,EACPtyB,SAAUwyB,EACVK,YAAaV,EACbW,gBAAiBZ,EACjBa,aAAcN,EACdO,YAAaN,EACbO,uBAAwBb,EACxBc,sBAAuBb,EACvBc,2BAA4BR,EAC5BS,0BAA2BR,GAInCS,oBACI,OAAOr7D,KAAKi2C,eAAiBj2C,KAAKoX,QAGtCkkD,kBAEI,OADet7D,KAAKq7D,oBACJr7D,KAAKk5C,gBAErBqiB,gBACA,OAAOv7D,KAAK22D,WAAWvzD,QAGvBo4D,iBAEA,OAzuBJl4D,QAAQC,KAAK,uEAAwE,iDAyuB1EvD,KAAKu7D,UAGhBE,kBACI,MAAMvhD,EAAQla,KAAK+a,cACb,MAAEvC,EAAO2oB,gBAAgB,UAAE+V,IAAiBl3C,KAC5C8Y,EAAM9Y,KAAK0U,eACXjL,EAAQ+O,EAAM+D,WAAyB,EAAZ26B,EAC3BwkB,EAAc,GAAKljD,EAAM+D,WAAa26B,GAAa1P,EAAKiB,MAAQ,EACtE,GAAIzoC,KAAKimC,SACL,OACJ,IAAKntB,EACD,MAAM,IAAIzW,EAAa,kBAAmB,wCAE9C,MAAM,aAAE04D,EAAY,YAAEC,EAAW,uBAAEC,EAAsB,2BAAEE,EAA0B,sBAAED,EAAqB,0BAAEE,EAAyB,YAAEP,EAAW,gBAAEC,GAAqB96D,KAAKm5D,oBAEhL,GAAI4B,EAAe,GAAKC,EAAc,EAClC,OACJ,MAAMW,EAAQx3D,KAAKqlC,IAAIqxB,MAAAA,EAAiDA,EAAc,EAAGC,MAAAA,EAAyDA,EAAkB,GAC9Jc,EAAiB,CAAC/zD,EAAGg0D,EAAQ1+B,KAC/B,IAAIt6B,EAEAA,EADAs6B,GAAa0+B,EACTF,EAAQzkB,EACP2kB,GACAf,MAAAA,EAAyDA,EAAkB,GAAK5jB,GAEhF2jB,MAAAA,EAAiDA,EAAc,GAAK3jB,EAC7E,MAAM4kB,EAAcD,GAAU1+B,EAAYu+B,EAAcjyD,EACxDqP,EAAIQ,YACJR,EAAIS,OAAO1W,EAAGgF,GACdiR,EAAIU,OAAO3W,EAAIi5D,EAAaj0D,GAC5BiR,EAAIikB,UAEFvvB,EAAQnN,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAImE,EAAM6hD,6BAA8B/7D,KAAK25D,sBACvF35D,KAAK0T,WAAWoF,EAAKtL,GAErB,IAAK,IAAItK,EAAO,EAAGA,GAAQ63D,IAAgB73D,EAAM,CAC7C,MAAM24D,OAA6B/4D,IAApBg4D,GAAiC53D,GAAQi4D,EAClDh+B,OAAuCr6B,IAA3Bm4D,GAAwC/3D,GAAQ+3D,EAClEW,EAAe1hD,EAAMo6C,YAAYpxD,GAAO24D,EAAQ1+B,GAGpD,IAAK,IAAIj6B,EAAO,EAAGA,GAAQ83D,IAAe93D,EAAM,CAC5C,MAAM24D,OAA6B/4D,IAApBg4D,GAAiC53D,GAAQk4D,EAClDj+B,OAAsCr6B,IAA1Bo4D,GAAuCh4D,GAAQg4D,EACjEU,EAAe1hD,EAAMo6C,YAAYpxD,GAAO24D,EAAQ1+B,GAEpDn9B,KAAKuU,aAAauE,EAAKtL,GAG3BwuD,gBACI,MAAMljD,EAAM9Y,KAAK0U,eACjBoE,EAAI+1B,UAAU,aACd,IAAK,IAAInnC,EAAI,EAAGA,EAAI1H,KAAKmzC,UAAUruC,OAAQ4C,IAAK,CAC5C,MAAMg/B,EAAW1mC,KAAKmzC,UAAUzrC,GAC1B0J,EAAQs1B,EAAS5pB,aACjB27C,EAAWz4D,KAAK22D,WAAWvlD,GAC3B6qD,EAAgBxD,EAAShlD,WAC/BglD,EAAS/kD,WAAWoF,EAAKmjD,GACzBv1B,EAASrxB,WAAWyD,GACpB4tB,EAASjyB,gBACTgkD,EAASlkD,aAAauE,EAAKmjD,GAE/BnjD,EAAIi3B,aAERkqB,iBACI,MAAM3sB,OAAwBxqC,IAAd9C,KAAKsgC,KACf00B,EAAUh1D,KAAKwY,MAAMgoB,KACrB07B,OAA0Bp5D,IAAd9C,KAAKu5C,KACvB,OAAOjM,GAAW0nB,GAAWkH,EAGjCC,WACI,IAAIpvD,EACJ,MAAM+L,EAAM9Y,KAAK0U,eACjB,IAAKoE,EACD,MAAM,IAAIzW,EAAa,kBAAmB,wCAE9C,GAAIrC,KAAKi6D,iBAAkB,CACvB,MAAM,MAAElyB,EAAK,SAAEC,GAAahoC,KAAKm5D,oBAE3BiD,EAAiBp8D,KAAKsgC,KAAK2I,YAC3BozB,EAAQr8D,KAAKivC,WAKbqtB,OAA0Bx5D,IAAd9C,KAAKwgC,KAAqBxgC,KAAKwgC,KAAKnmB,eAAehD,QAAU,EACzEklD,EAAQv8D,KAAKutC,qBAAuB/F,EAAKgB,KAEvCT,EAAQq0B,EAAiB,EAAIE,EAE7Bt0B,EAAWo0B,EAAiB,EAAIE,EAExCxjD,EAAI+1B,UAAU,YAAQ/rC,EAAW,CAAE05D,aAAa,IAChDx8D,KAAK0T,WAAWoF,EAAK9Y,KAAK85D,gBACL,QAApB/sD,EAAK/M,KAAKwgC,YAAyB,IAAPzzB,GAAyBA,EAAG6N,OAAO9B,EAAKujD,EAAOE,GAC5Ev8D,KAAKuU,aAAauE,EAAK9Y,KAAK85D,gBAC5BhhD,EAAIi3B,cAIZ0sB,gBACI,MAAM3jD,EAAM9Y,KAAK0U,eACjB1U,KAAK22D,WAAWz4C,SAASu6C,IACrB3/C,EAAI+1B,UAAU,gBAAY/rC,EAAW,CAAE05D,aAAa,IACpD/D,EAASpjD,WAAWyD,GAAKnE,OACzBmE,EAAIi3B,gBAGZimB,SAASC,GACL,IAAIlpD,EAIJ,MAAM+L,EAAM9Y,KAAK0U,eACbuhD,GACAj2D,KAAK60D,QAAQ,IAAIrtB,EAAKyuB,IAItBj2D,KAAKi6D,kBAAoBj6D,KAAKsgC,MAC9BtgC,KAAKsgC,KAAKyJ,sBAEdjxB,EAAI+1B,UAAU,YAAQ/rC,EAAW,CAAE05D,aAAa,IAC3B,QAApBzvD,EAAK/M,KAAKsgC,YAAyB,IAAPvzB,GAAyBA,EAAGsI,WAAWyD,GAAKnE,OACzEmE,EAAIi3B,aAKRqlB,mBACI,MAAMsH,EAAuBj6D,MAAM2yD,mBACnC,IAAKp1D,KAAKwY,MAAM8nB,KACZ,OAAOo8B,EAEX,MAAMx0B,EAAiBloC,KAAKutC,mBAC5B,GAAIrF,IAAmBloC,KAAK04D,gCACxB,OAAOgE,EAEX,IAAIC,EAUAA,EARAz0B,IAAmBV,EAAKe,GADR,EASkBvoC,KAAKq2D,QAGnBr2D,KAAKs2D,QAZT,EAepB,MAAMsG,EAAkCD,EAAoB,IAC5D,GAAIC,GAAmC,EACnC,OAAOF,EAEX,MAAMxiD,EAAQla,KAAK8d,WACnB,IAAI++C,EAAwB,GAI5B,OAHa/5D,MAAToX,IACA2iD,EAAwB3iD,EAAMsoB,0BAE3Bk6B,EAAuBE,EAAkCC,EAGpEloD,OACI,IAAI5H,EACJ,GAAuB,IAAnB/M,KAAKqpC,GAAGvkC,OACR,MAAM,IAAIzC,EAAa,YAAa,qCAExC,MAAMyW,EAAM9Y,KAAK0U,eACXooD,EAAS98D,KAAKq7D,oBACd0B,EAAmB/8D,KAAKstC,YAActtC,KAAKu5C,KAEjDv5C,KAAK22D,WAAWz4C,SAASu6C,GAAaA,EAASpwD,KAAKy0D,KAEpD,MAAME,EAAQh9D,KAAKivC,WACE,QAApBliC,EAAK/M,KAAKsgC,YAAyB,IAAPvzB,GAAyBA,EAAG47B,mBAAmBq0B,EAAOA,GAz5B3F,YAAc/5D,GACNjB,GAAUk/B,OACVn+B,EAAI,qBAAsBE,GAw5B1B,CAAE,aAAcjD,KAAKk5D,UAAY,UAAY,SAAUl5D,KAAKsS,MAE5DtS,KAAK0T,aACL1T,KAAK+R,aAAa,KAAM+G,EAAI+1B,UAAU,YAAa7uC,KAAK6R,aAAa,QACrE7R,KAAKy7D,kBACL3iD,EAAI+1B,UAAU,YAAQ/rC,EAAW,CAAE05D,aAAa,IAC5CO,GACA/8D,KAAKg2D,WACTh2D,KAAKy8D,gBACLz8D,KAAKm8D,WACLrjD,EAAIi3B,aACJ/vC,KAAKg8D,gBACLljD,EAAIi3B,aACJ/vC,KAAKuU,eACLvU,KAAKgV,eCv7BN,SAASioD,GAAaC,GACzB,IAAKA,EACD,OAAO,EACX,MAAM1c,EAAS99C,IACf,MAEqC,mBAA7B89C,EAAO2c,mBAAoCD,aAAmB1c,EAAO2c,mBAG1C,mBAAvBD,EAAQ9nD,YAA0D,mBAAtB8nD,EAAQE,UDi7BpEp7D,GAAUk/B,OAAQ,EEx7BX,MAAMm8B,WAAsBzqB,GAC/BvxC,YAAYsS,GACRlR,QAEAzC,KAAKyoD,WAAa,EAClBzoD,KAAKs9D,UAAY3pD,EACZA,EAAQ4pD,OAOTv9D,KAAKu9D,OAAS5pD,EAAQ4pD,OANtBv9D,KAAKu9D,OAAS,CACV9zD,MAAO4zD,GAAc50B,MACrB/+B,OAAQ2zD,GAAc30B,QAOvBD,mBACP,OAAO,IAEAC,oBACP,OAAO,IAEA80B,uCACP,OAAO,MAMX/4D,0BAA0BgF,EAAOC,GAC7B,MAAM+zD,EAAQz9D,KAAKw9D,0BAUnB,OATIr5D,KAAK4E,IAAIU,EAAOC,GAAU+zD,IAC1Bl6D,EAAK,uDAAyDk6D,GAC1Dh0D,EAAQg0D,IACRh0D,EAAQg0D,GAER/zD,EAAS+zD,IACT/zD,EAAS+zD,IAGV,CAACh0D,EAAOC,GAKnB6H,QACIvR,KAAKs9D,UAAUI,UAAU,EAAG,EAAG19D,KAAKu9D,OAAO9zD,MAAOzJ,KAAKu9D,OAAO7zD,QAGlEmlC,UAAU8uB,EAAK3sD,EAAIgC,IAGnB+8B,cAIAxqC,IAAIq4D,IAGJ1pD,aAAa1G,GAET,OADAxN,KAAKs9D,UAAUrpD,UAAYzG,EACpBxN,KAIX69D,uBAAuBrwD,GAEnB,OAAOxN,KAEXoU,eAAe5G,GAEX,OADAxN,KAAKs9D,UAAUnpD,YAAc3G,EACtBxN,KAEX8T,eAAe8jC,GAEX,OADA53C,KAAKs9D,UAAUzpD,YAAc+jC,EACtB53C,KAEXgU,cAAc8pD,GAKV,MAAMl5D,EAAI5E,KAAKs9D,UAAUS,eACnB5mD,EAAQhT,KAAKiH,KAAKxG,EAAEjB,EAAIiB,EAAEjB,EAAIiB,EAAEhB,EAAIgB,EAAEhB,EAAIgB,EAAEqG,EAAIrG,EAAEqG,EAAIrG,EAAES,EAAIT,EAAES,GAEpE,OADArF,KAAKs9D,UAAUvpD,WAAaoD,EAAQ2mD,EAC7B99D,KAEXsU,aAAa7K,GAET,OADAzJ,KAAKs9D,UAAUjpD,UAAY5K,EACpBzJ,KAEXg+D,WAAWC,GAEP,OADAj+D,KAAKs9D,UAAUY,QAAUD,EAClBj+D,KAEXm+D,YAAYC,GAER,OADAp+D,KAAKs9D,UAAUa,YAAYC,GACpBp+D,KAEXmX,MAAMtU,EAAGgF,GAEL,OADA7H,KAAKs9D,UAAUnmD,MAAMtU,EAAGgF,GACjB7H,KAEXq+D,OAAO50D,EAAOC,GACV,MAAM6zD,EAASv9D,KAAKs9D,UAAUC,OACxBe,EAAmB57D,IAAe47D,kBAAoB,EAc5D,OAZC70D,EAAOC,GAAU2zD,GAAckB,mBAAmB90D,EAAQ60D,EAAkB50D,EAAS40D,GAEtF70D,EAASA,EAAQ60D,EAAoB,EACrC50D,EAAUA,EAAS40D,EAAoB,EACvCf,EAAO9zD,MAAQA,EAAQ60D,EACvBf,EAAO7zD,OAASA,EAAS40D,EAGrBrB,GAAaM,KACbA,EAAO/vD,MAAM/D,MAAQA,EAAQ,KAC7B8zD,EAAO/vD,MAAM9D,OAASA,EAAS,MAE5B1J,KAAKmX,MAAMmnD,EAAkBA,GAExCE,KAAK37D,EAAGgF,EAAG4B,EAAOC,GAEd,OADA1J,KAAKs9D,UAAUkB,KAAK37D,EAAGgF,EAAG4B,EAAOC,GAC1B1J,KAEX09C,SAAS76C,EAAGgF,EAAG4B,EAAOC,GAElB,OADA1J,KAAKs9D,UAAU5f,SAAS76C,EAAGgF,EAAG4B,EAAOC,GAC9B1J,KAKX09D,UAAU76D,EAAGgF,EAAG4B,EAAOC,GAEnB,OADA1J,KAAKs9D,UAAUI,UAAU76D,EAAGgF,EAAG4B,EAAOC,GAC/B1J,KAEXsZ,YAEI,OADAtZ,KAAKs9D,UAAUhkD,YACRtZ,KAEXuZ,OAAO1W,EAAGgF,GAEN,OADA7H,KAAKs9D,UAAU/jD,OAAO1W,EAAGgF,GAClB7H,KAEXwZ,OAAO3W,EAAGgF,GAEN,OADA7H,KAAKs9D,UAAU9jD,OAAO3W,EAAGgF,GAClB7H,KAEX0Z,cAAc+kD,EAAMC,EAAMC,EAAMC,EAAM/7D,EAAGgF,GAErC,OADA7H,KAAKs9D,UAAU5jD,cAAc+kD,EAAMC,EAAMC,EAAMC,EAAM/7D,EAAGgF,GACjD7H,KAEXyZ,iBAAiBolD,EAAKC,EAAKj8D,EAAGgF,GAE1B,OADA7H,KAAKs9D,UAAU7jD,iBAAiBolD,EAAKC,EAAKj8D,EAAGgF,GACtC7H,KAEX83C,IAAIj1C,EAAGgF,EAAGq/C,EAAQ6X,EAAYC,EAAUC,GAEpC,OADAj/D,KAAKs9D,UAAUxlB,IAAIj1C,EAAGgF,EAAGq/C,EAAQ6X,EAAYC,EAAUC,GAChDj/D,KAEX2Z,OAEI,OADA3Z,KAAKs9D,UAAU3jD,OACR3Z,KAEX+8B,SAEI,OADA/8B,KAAKs9D,UAAUvgC,SACR/8B,KAEX+3C,YAEI,OADA/3C,KAAKs9D,UAAUvlB,YACR/3C,KAEX+uC,YAAY9qC,GACR,MAAMwL,EAAUzP,KAAKs9D,UAAUvuB,YAAY9qC,GAC3C,IAAI4D,EAAI,EACJ6B,EAAS,EAUb,OATI+F,EAAQyvD,uBACRr3D,GAAK4H,EAAQyvD,sBACbx1D,EAAS+F,EAAQ0vD,uBAAyB1vD,EAAQyvD,wBAGlDr3D,GAAK4H,EAAQ2vD,wBACb11D,EAAS+F,EAAQ4vD,yBAA2B5vD,EAAQ2vD,yBAGjD,CACHv8D,EAAG,EACHgF,EAAGA,EACH4B,MAAOgG,EAAQhG,MACfC,OAAQA,GAGhBomC,SAAS7rC,EAAMpB,EAAGgF,GAEd,OADA7H,KAAKs9D,UAAUxtB,SAAS7rC,EAAMpB,EAAGgF,GAC1B7H,KAEX4T,OAEI,OADA5T,KAAKs9D,UAAU1pD,OACR5T,KAEXwU,UAEI,OADAxU,KAAKs9D,UAAU9oD,UACRxU,KAEPiU,cAAUzG,GACVxN,KAAKs9D,UAAUrpD,UAAYzG,EAE3ByG,gBACA,OAAOjU,KAAKs9D,UAAUrpD,UAEtBE,gBAAY3G,GACZxN,KAAKs9D,UAAUnpD,YAAc3G,EAE7B2G,kBACA,OAAOnU,KAAKs9D,UAAUnpD,YAU1BmB,QAAQ/N,EAAG+F,EAAMC,EAAQC,GACrB,MAAMY,EAAW1B,EAAKsJ,SAASzO,EAAG+F,EAAMC,EAAQC,GAGhD,OAFAxN,KAAKs9D,UAAUtvD,KAAOtB,EAAK6I,YAAYnH,GACvCpO,KAAKyoD,WAAa/7C,EAAK8J,wBAAwBpI,EAASd,MACjDtN,KAGXiW,UACI,OAAOjW,KAAKs9D,UAAUtvD,MC3O9B,MAAMsxD,GAAuB,CACzBC,KAAM,CACF18D,GAAG,EACHgF,GAAG,EACH4B,OAAO,EACPC,QAAQ,EACR,eAAe,EACf,eAAe,EACf,cAAc,EACd,aAAa,GAEjB80D,KAAM,CACF,eAAe,EACf,eAAe,EACf,cAAc,EACd,aAAa,GAEjBv6D,KAAM,CACFwF,OAAO,EACPC,QAAQ,IAIV81D,GAAS,6BACTC,GAAS,EAAIt7D,KAAKC,GA+CjB,MAAMs7D,WAAmB9sB,GAC5BvxC,YAAY67D,GACRz6D,QACAzC,KAAKyJ,MAAQ,EACbzJ,KAAK0J,OAAS,EACd1J,KAAK2/D,oBAAsB,QAE3B3/D,KAAK4/D,cAAgB,GACrB5/D,KAAKk9D,QAAUA,EAEf,MAAM2C,EAAM7/D,KAAKmtC,OAAO,OACxBntC,KAAKk9D,QAAQ4C,YAAYD,GACzB7/D,KAAK6/D,IAAMA,EACX7/D,KAAK+/D,OAAS//D,KAAK6/D,IACnB7/D,KAAK+uD,OAAS,CAAC/uD,KAAK6/D,KACpB7/D,KAAKu/D,KAAO,GACZv/D,KAAKggE,IAAM,CAAEn9D,EAAGsG,IAAKtB,EAAGsB,KACxBnJ,KAAKqU,UAAY,EACjB,MAAM4rD,EAAwB,CAC1B,cAAevzD,EAAKiB,WACpB,YAAajB,EAAKI,KAAO,KACzB,cAAexB,EAAWsC,OAC1B,aAAcrC,EAAUqC,QAE5B5N,KAAKyhC,MAAQphC,OAAO0V,OAAO,CAAEoB,MAAO,CAAEtU,EAAG,EAAGgF,EAAG,IAAOo4D,GACtDjgE,KAAKkgE,WAAa7/D,OAAO0V,OAAO,CAAE,eAAgB,GAAK,mBAAoB,OAAQ4D,KAAM,QAASojB,OAAQ,SAAWkjC,GACrHjgE,KAAKmgE,kBAAoB,CACrB12D,MAAO,EACPmuC,MAAO,SAEX53C,KAAKogE,YAAc,GAEvBjzB,OAAOkzB,GACH,OAAOvyD,SAASwyD,gBAAgBd,GAAQa,GAG5CxxB,UAAU8uB,EAAK3sD,EAAIgC,GACf,MAAMg8C,EAAQhvD,KAAKmtC,OAAO,KAW1B,OAVAntC,KAAK+uD,OAAOl3C,KAAKm3C,GACjBhvD,KAAK+/D,OAAOD,YAAY9Q,GACxBhvD,KAAK+/D,OAAS/Q,EACV2O,GACA3O,EAAMj9C,aAAa,QAAS/N,EAAO25D,IACnC3sD,GACAg+C,EAAMj9C,aAAa,KAAM/N,EAAOgN,IAChCgC,GAASA,EAAMwpD,aACfxN,EAAMj9C,aAAa,iBAAkB,gBAElCi9C,EAEXjf,aACI/vC,KAAK+uD,OAAO7Z,MACZl1C,KAAK+/D,OAAS//D,KAAK+uD,OAAO/uD,KAAK+uD,OAAOjqD,OAAS,GAEnDS,IAAIkM,GACAzR,KAAK+/D,OAAOD,YAAYruD,GAE5ByC,aAAa1G,GAET,OADAxN,KAAKkgE,WAAWvmD,KAAOnM,EAChBxN,KAMX69D,uBAAuBrwD,GAEnB,OADAxN,KAAK2/D,oBAAsBnyD,EACpBxN,KAEXoU,eAAe5G,GAEX,OADAxN,KAAKkgE,WAAWnjC,OAASvvB,EAClBxN,KAEX8T,eAAe8jC,GAEX,OADA53C,KAAKmgE,kBAAkBvoB,MAAQA,EACxB53C,KAOXgU,cAAc8pD,GAEV,OADA99D,KAAKmgE,kBAAkB12D,MAAQq0D,EACxB99D,KAMXsU,aAAa7K,GAGT,OAFAzJ,KAAKkgE,WAAW,gBAAkBz2D,EAClCzJ,KAAKqU,UAAY5K,EACVzJ,KAQXm+D,YAAYoC,GACR,GAAiD,mBAA7ClgE,OAAOS,UAAUmG,SAASjG,KAAKu/D,GAE/B,OADAvgE,KAAKkgE,WAAW,oBAAsBK,EAASl9D,KAAK,KAC7CrD,KAGP,MAAM,IAAIqC,EAAa,gBAAiB,0CAOhD27D,WAAWC,GAEP,OADAj+D,KAAKkgE,WAAW,kBAAoBjC,EAC7Bj+D,KAOXq+D,OAAO50D,EAAOC,GACV1J,KAAKyJ,MAAQA,EACbzJ,KAAK0J,OAASA,EACd1J,KAAKk9D,QAAQ1vD,MAAM/D,MAAQA,EAAMxC,WACjCjH,KAAK6/D,IAAIryD,MAAM/D,MAAQA,EAAMxC,WAC7BjH,KAAK6/D,IAAIryD,MAAM9D,OAASA,EAAOzC,WAC/B,MAAMi5D,EAAa,CACfz2D,MAAAA,EACAC,OAAAA,GAIJ,OAFA1J,KAAKwgE,gBAAgBxgE,KAAK6/D,IAAKK,GAC/BlgE,KAAKmX,MAAMnX,KAAKyhC,MAAMtqB,MAAMtU,EAAG7C,KAAKyhC,MAAMtqB,MAAMtP,GACzC7H,KAEXmX,MAAMtU,EAAGgF,GAYL7H,KAAKyhC,MAAMtqB,MAAQ,CAAEtU,EAAAA,EAAGgF,EAAAA,GACxB,MAAM44D,EAAezgE,KAAKyJ,MAAQ5G,EAC5B69D,EAAgB1gE,KAAK0J,OAAS7B,EAEpC,OADA7H,KAAK2gE,WAAW,EAAG,EAAGF,EAAcC,GAC7B1gE,KAMX2gE,WAAWC,EAAiBhI,EAAMnvD,EAAOC,GACrC,GAA+B,iBAApBk3D,EACP5gE,KAAK6/D,IAAI9tD,aAAa,UAAW6uD,OAEhC,CACD,MAAMC,EAAgBD,EAAkB,IAAMhI,EAAO,IAAMnvD,EAAQ,IAAMC,EACzE1J,KAAK6/D,IAAI9tD,aAAa,UAAW8uD,IAIzCL,gBAAgBtD,EAASgD,GACrB,MAAMY,EAAoBxB,GAAqBpC,EAAQ6D,UACvD,IAAK,MAAMC,KAAYd,EACfY,GAAqBA,EAAkBE,IAG3C9D,EAAQ+D,eAAe,KAAMD,EAAUd,EAAWc,IAEtD,OAAO9D,EAGX3rD,QASI,KAAOvR,KAAK6/D,IAAIqB,WACZlhE,KAAK6/D,IAAIsB,YAAYnhE,KAAK6/D,IAAIqB,WAGlClhE,KAAKmX,MAAMnX,KAAKyhC,MAAMtqB,MAAMtU,EAAG7C,KAAKyhC,MAAMtqB,MAAMtP,GAGpD22D,KAAK37D,EAAGgF,EAAG4B,EAAOC,EAAQw2D,GAElBx2D,EAAS,IACT7B,GAAK6B,EACLA,IAAW,GAEf,MAAM03D,EAAYphE,KAAKmtC,OAAO,QAI9B,OAHA+yB,EAAaA,MAAAA,EAA+CA,EAAa,CAAEvmD,KAAM,OAAQ,eAAgB3Z,KAAKqU,UAAW0oB,OAAQ,SACjI/8B,KAAKwgE,gBAAgBY,EAAW/gE,OAAO0V,OAAO,CAAElT,EAAAA,EAAGgF,EAAAA,EAAG4B,MAAAA,EAAOC,OAAAA,GAAUw2D,IACvElgE,KAAKuF,IAAI67D,GACFphE,KAEX09C,SAAS76C,EAAGgF,EAAG4B,EAAOC,GAClB,MAAMw2D,EAAa,CAAEvmD,KAAM3Z,KAAKkgE,WAAWvmD,MAE3C,OADA3Z,KAAKw+D,KAAK37D,EAAGgF,EAAG4B,EAAOC,EAAQw2D,GACxBlgE,KAEX09D,UAAU76D,EAAGgF,EAAG4B,EAAOC,GAQnB,OADA1J,KAAKw+D,KAAK37D,EAAGgF,EAAG4B,EAAOC,EAAQ,CAAE,eAAgB,EAAGiQ,KAAM3Z,KAAK2/D,sBACxD3/D,KAGXsZ,YAII,OAHAtZ,KAAKu/D,KAAO,GACZv/D,KAAKggE,IAAIn9D,EAAIsG,IACbnJ,KAAKggE,IAAIn4D,EAAIsB,IACNnJ,KAEXuZ,OAAO1W,EAAGgF,GAIN,OAHA7H,KAAKu/D,MAAQ,IAAM18D,EAAI,IAAMgF,EAC7B7H,KAAKggE,IAAIn9D,EAAIA,EACb7C,KAAKggE,IAAIn4D,EAAIA,EACN7H,KAEXwZ,OAAO3W,EAAGgF,GAIN,OAHA7H,KAAKu/D,MAAQ,IAAM18D,EAAI,IAAMgF,EAC7B7H,KAAKggE,IAAIn9D,EAAIA,EACb7C,KAAKggE,IAAIn4D,EAAIA,EACN7H,KAEX0Z,cAAcxQ,EAAIE,EAAIC,EAAIC,EAAIzG,EAAGgF,GAI7B,OAHA7H,KAAKu/D,MAAQ,IAAMr2D,EAAK,IAAME,EAAK,IAAMC,EAAK,IAAMC,EAAK,IAAMzG,EAAI,IAAMgF,EACzE7H,KAAKggE,IAAIn9D,EAAIA,EACb7C,KAAKggE,IAAIn4D,EAAIA,EACN7H,KAEXyZ,iBAAiBvQ,EAAIE,EAAIvG,EAAGgF,GAIxB,OAHA7H,KAAKu/D,MAAQ,IAAMr2D,EAAK,IAAME,EAAK,IAAMvG,EAAI,IAAMgF,EACnD7H,KAAKggE,IAAIn9D,EAAIA,EACb7C,KAAKggE,IAAIn4D,EAAIA,EACN7H,KAEX83C,IAAIj1C,EAAGgF,EAAGq/C,EAAQ6X,EAAYC,EAAUC,GACpC,MAAMoC,EAAKx+D,EAAIqkD,EAAS/iD,KAAKm9D,IAAIvC,GAC3BwC,EAAK15D,EAAIq/C,EAAS/iD,KAAKq9D,IAAIzC,GAIjC,IAAME,GAAoBD,EAAWD,GAAcU,IAC9CR,GAAoBF,EAAaC,GAAYS,GAAS,CACvD,MAAMv2D,EAAKrG,EAAIqkD,EAAS/iD,KAAKm9D,IAAIvC,EAAa56D,KAAKC,IAC7CgF,EAAKvB,EAAIq/C,EAAS/iD,KAAKq9D,IAAIzC,EAAa56D,KAAKC,IAGnDpE,KAAKu/D,MAAQ,IAAI8B,KAAME,MAAOra,KAAUA,WAAgBh+C,KAAME,KAC9DpJ,KAAKu/D,MAAQ,IAAIrY,KAAUA,WAAgBma,KAAME,IACjDvhE,KAAKggE,IAAIn9D,EAAIw+D,EACbrhE,KAAKggE,IAAIn4D,EAAI05D,MAEZ,CACD,MAAMr4D,EAAKrG,EAAIqkD,EAAS/iD,KAAKm9D,IAAItC,GAC3B51D,EAAKvB,EAAIq/C,EAAS/iD,KAAKq9D,IAAIxC,GAGjC,IAAIyC,EAFJ1C,EAAa76D,EAAe66D,GAC5BC,EAAW96D,EAAe86D,GAGtByC,EADAt9D,KAAK6C,IAAIg4D,EAAWD,GAAc56D,KAAKC,GAC/B66D,GAGCA,EAETF,EAAaC,IACbyC,GAASA,GAEb,MAAMC,GAASzC,EACfj/D,KAAKu/D,MAAQ,IAAI8B,KAAME,MAAOra,KAAUA,QAAaua,MAAUC,KAASx4D,KAAME,IAC9EpJ,KAAKggE,IAAIn9D,EAAIqG,EACblJ,KAAKggE,IAAIn4D,EAAIuB,EAEjB,OAAOpJ,KAEX+3C,YAEI,OADA/3C,KAAKu/D,MAAQ,IACNv/D,KAEX2hE,iBACI,MAAMC,EAAK5hE,KAAKmgE,kBAIhB,MAAO,2BAA2ByB,EAAGn4D,MAAQ,SAASm4D,EAAGhqB,SAE7Dj+B,KAAKumD,GACD,MAAMX,EAAOv/D,KAAKmtC,OAAO,QAUzB,YAT0B,IAAf+yB,IACPA,EAAa7/D,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkgE,YAAa,CAAEnjC,OAAQ,UAE7EmjC,EAAW76D,EAAIrF,KAAKu/D,KAChBv/D,KAAKmgE,kBAAkB12D,MAAQ,IAC/By2D,EAAW1yD,MAAQxN,KAAK2hE,kBAE5B3hE,KAAKwgE,gBAAgBjB,EAAMW,GAC3BlgE,KAAKuF,IAAIg6D,GACFv/D,KAEX+8B,SACI,MAAMwiC,EAAOv/D,KAAKmtC,OAAO,QACnB+yB,EAAa7/D,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkgE,YAAa,CAAEvmD,KAAM,OAAQ,eAAgB3Z,KAAKqU,UAAWhP,EAAGrF,KAAKu/D,OAM7H,OALIv/D,KAAKmgE,kBAAkB12D,MAAQ,IAC/By2D,EAAW1yD,MAAQxN,KAAK2hE,kBAE5B3hE,KAAKwgE,gBAAgBjB,EAAMW,GAC3BlgE,KAAKuF,IAAIg6D,GACFv/D,KAGX+uC,YAAY9qC,GACR,OAAOy7D,GAAWmC,iBAAiB3oD,OAAOjV,EAAMjE,KAAK6/D,IAAK7/D,KAAKkgE,YAEnEpwB,SAAS7rC,EAAMpB,EAAGgF,GACd,IAAK5D,GAAQA,EAAKa,QAAU,EACxB,OAAO9E,KAEX,MAAMkgE,EAAa7/D,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkgE,YAAa,CAAEnjC,OAAQ,OAAQl6B,EAAAA,EACnFgF,EAAAA,IACEi6D,EAAM9hE,KAAKmtC,OAAO,QAIxB,OAHA20B,EAAIC,YAAc99D,EAClBjE,KAAKwgE,gBAAgBsB,EAAK5B,GAC1BlgE,KAAKuF,IAAIu8D,GACF9hE,KAGX4T,OAyBI,OAxBA5T,KAAKogE,YAAYvoD,KAAK,CAClB4pB,MAAO,CACH,cAAezhC,KAAKyhC,MAAM,eAC1B,cAAezhC,KAAKyhC,MAAM,eAC1B,aAAczhC,KAAKyhC,MAAM,cACzB,YAAazhC,KAAKyhC,MAAM,aACxBtqB,MAAOnX,KAAKyhC,MAAMtqB,OAEtB+oD,WAAY,CACR,cAAelgE,KAAKkgE,WAAW,eAC/B,cAAelgE,KAAKkgE,WAAW,eAC/B,aAAclgE,KAAKkgE,WAAW,cAC9B,YAAalgE,KAAKkgE,WAAW,aAC7BvmD,KAAM3Z,KAAKkgE,WAAWvmD,KACtBojB,OAAQ/8B,KAAKkgE,WAAWnjC,OACxB,eAAgB/8B,KAAKkgE,WAAW,gBAChC,mBAAoBlgE,KAAKkgE,WAAW,qBAExCC,kBAAmB,CACf12D,MAAOzJ,KAAKmgE,kBAAkB12D,MAC9BmuC,MAAO53C,KAAKmgE,kBAAkBvoB,OAElCvjC,UAAWrU,KAAKqU,YAEbrU,KAGXwU,UACI,MAAMwtD,EAAahiE,KAAKogE,YAAYlrB,MACpC,GAAI8sB,EAAY,CACZ,MAAMvgC,EAAQugC,EACdhiE,KAAKyhC,MAAM,eAAiBA,EAAMA,MAAM,eACxCzhC,KAAKyhC,MAAM,eAAiBA,EAAMA,MAAM,eACxCzhC,KAAKyhC,MAAM,cAAgBA,EAAMA,MAAM,cACvCzhC,KAAKyhC,MAAM,aAAeA,EAAMA,MAAM,aACtCzhC,KAAKyhC,MAAMtqB,MAAQsqB,EAAMA,MAAMtqB,MAC/BnX,KAAKkgE,WAAW,eAAiBz+B,EAAMy+B,WAAW,eAClDlgE,KAAKkgE,WAAW,eAAiBz+B,EAAMy+B,WAAW,eAClDlgE,KAAKkgE,WAAW,cAAgBz+B,EAAMy+B,WAAW,cACjDlgE,KAAKkgE,WAAW,aAAez+B,EAAMy+B,WAAW,aAChDlgE,KAAKkgE,WAAWvmD,KAAO8nB,EAAMy+B,WAAWvmD,KACxC3Z,KAAKkgE,WAAWnjC,OAAS0E,EAAMy+B,WAAWnjC,OAC1C/8B,KAAKkgE,WAAW,gBAAkBz+B,EAAMy+B,WAAW,gBACnDlgE,KAAKkgE,WAAW,oBAAsBz+B,EAAMy+B,WAAW,oBACvDlgE,KAAKmgE,kBAAkB12D,MAAQg4B,EAAM0+B,kBAAkB12D,MACvDzJ,KAAKmgE,kBAAkBvoB,MAAQnW,EAAM0+B,kBAAkBvoB,MACvD53C,KAAKqU,UAAYotB,EAAMptB,UAE3B,OAAOrU,KAEPiU,cAAUzG,GACVxN,KAAKkU,aAAa1G,GAElByG,gBACA,OAAOjU,KAAKkgE,WAAWvmD,KAEvBxF,gBAAY3G,GACZxN,KAAKoU,eAAe5G,GAEpB2G,kBACA,OAAOnU,KAAKkgE,WAAWnjC,OAY3BznB,QAAQ/N,EAAG+F,EAAMC,EAAQC,GACrB,MAAMY,EAAW1B,EAAKsJ,SAASzO,EAAG+F,EAAMC,EAAQC,GAChDxN,KAAK4/D,cAAgBlzD,EAAK6I,YAAYnH,GACtC,MAAM6zD,EAAiB,CACnB,cAAe7zD,EAASV,OACxB,YAAaU,EAASd,KACtB,cAAec,EAASb,OACxB,aAAca,EAASZ,OAI3B,OAFAxN,KAAKkgE,WAAa7/D,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkgE,YAAa+B,GACpEjiE,KAAKyhC,MAAQphC,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKyhC,OAAQwgC,GACnDjiE,KAGXiW,UACI,OAAOjW,KAAK4/D,eCvfb,IAAIsC,GAMAC,GCNAC,GCFAC,GH4fX3C,GAAWmC,iBAAmB,IAje9B,MACIxgE,cAGIrB,KAAKiZ,MAAQ,GAEjBC,OAAOjV,EAAM47D,EAAKK,GACd,IAAI/kD,EAAUnb,KAAKiZ,MAAMhV,QACTnB,IAAZqY,IACAA,EAAU,GACVnb,KAAKiZ,MAAMhV,GAAQkX,GAEvB,MAIMhb,EAAM,GAJG+/D,EAAW,kBACbA,EAAW,gBACTA,EAAW,kBACZA,EAAW,gBAEzB,IAAI7kD,EAAQF,EAAQhb,GAKpB,YAJc2C,IAAVuY,IACAA,EAAQrb,KAAKsiE,YAAYr+D,EAAM47D,EAAKK,GACpC/kD,EAAQhb,GAAOkb,GAEZA,EAEXinD,YAAYr+D,EAAM47D,EAAKK,GACnB,IAAI4B,EAAM9hE,KAAK8hE,IACVA,IAGDA,EAAMh0D,SAASwyD,gBAAgBd,GAAQ,QACvCx/D,KAAK8hE,IAAMA,GAEfA,EAAIC,YAAc99D,EAClB69D,EAAIb,eAAe,KAAM,cAAef,EAAW,gBACnD4B,EAAIb,eAAe,KAAM,YAAaf,EAAW,cACjD4B,EAAIb,eAAe,KAAM,aAAcf,EAAW,eAClD4B,EAAIb,eAAe,KAAM,cAAef,EAAW,gBACnDL,EAAIC,YAAYgC,GAChB,MAAM9qD,EAAO8qD,EAAIS,UAEjB,OADA1C,EAAIsB,YAAYW,GACT,CAAEj/D,EAAGmU,EAAKnU,EAAGgF,EAAGmP,EAAKnP,EAAG4B,MAAOuN,EAAKvN,MAAOC,OAAQsN,EAAKtN,UChEvE,SAAWw4D,GACPA,EAAiBA,EAAyB,OAAI,GAAK,SACnDA,EAAiBA,EAAsB,IAAI,GAAK,MAFpD,CAGGA,KAAqBA,GAAmB,KAG3C,SAAWC,GACPA,EAAoBA,EAA0B,KAAI,GAAK,OACvDA,EAAoBA,EAAwB,GAAI,GAAK,KACrDA,EAAoBA,EAA0B,KAAI,GAAK,OAH3D,CAIGA,KAAwBA,GAAsB,KAI1C,MAAMK,GACTnhE,YAAYohE,EAAMC,GACd,GzCoBgCzhE,EyCpBZwhE,EzCoB4BhhE,EAASmxC,eyClBrD5yC,KAAK8Y,IAAM2pD,MAEV,CACD,QAAa3/D,IAAT4/D,EAEA,MAAM,IAAIrgE,EAAa,kBAAmB,4BAE9C,MAAMsgE,EAAUD,EAChB,IAAIxF,EACJ,GAAmB,iBAARuF,EAAkB,CACzB,MAAMG,EAAe90D,SAAS8D,eAAe6wD,GAC7C,IAAKG,EACD,MAAM,IAAIvgE,EAAa,eAAgB,+BAA+BugE,MAE1E1F,EAAU0F,OAGV1F,EAAUuF,EAGd,GAAIE,IAAYH,GAASK,SAASC,OAAQ,CACtC,IAAK7F,GAAaC,GACd,MAAM,IAAI76D,EAAa,aAAc,iDAEzC,MAAMsR,EAAUupD,EAAQ9nD,WAAW,MACnC,IAAKzB,EACD,MAAM,IAAItR,EAAa,aAAc,4BAEzCrC,KAAK8Y,IAAM,IAAIukD,GAAc1pD,OAE5B,IAAIgvD,IAAYH,GAASK,SAASE,IAOnC,MAAM,IAAI1gE,EAAa,iBAAkB,2BAA2BsgE,KANpE,IHrCT,SAAmBzF,GACtB,IAAKA,EACD,OAAO,EACX,MAAM1c,EAAS99C,IACf,MAEkC,mBAA1B89C,EAAOwiB,gBAAiC9F,aAAmB1c,EAAOwiB,gBAEtC,mBAAxB9F,EAAQ4C,aAAuD,iBAAlB5C,EAAQ1vD,MG6BhDy1D,CAAU/F,GACX,MAAM,IAAI76D,EAAa,aAAc,2CAEzCrC,KAAK8Y,IAAM,IAAI4mD,GAAWxC,KAOtCz4D,oBAAoBy+D,EAAWP,EAASl5D,EAAOC,EAAQy5D,EAAa,QAChE,MAAMC,EAAW,IAAIZ,GAASU,EAAWP,GACrCl5D,GAASC,GACT05D,EAAS/E,OAAO50D,EAAOC,GAE3B,MAAMoP,EAAMsqD,EAAShuD,aAGrB,OAFA0D,EAAI+kD,uBAAuBsF,GAC3BX,GAASa,YAAcvqD,EAChBA,EAEXrU,wBAAwBy+D,EAAWz5D,EAAOC,EAAQy5D,GAC9C,OAAOX,GAASc,aAAaJ,EAAWV,GAASK,SAASC,OAAQr5D,EAAOC,EAAQy5D,GAErF1+D,qBAAqBy+D,EAAWz5D,EAAOC,EAAQy5D,GAC3C,OAAOX,GAASc,aAAaJ,EAAWV,GAASK,SAASE,IAAKt5D,EAAOC,EAAQy5D,GAKlF1+D,sBAAsBkP,EAAS4vD,EAAOC,EAAOC,EAAKC,EAAKC,GACnDhwD,EAAQ2F,YACR,MAAMsqD,EAAKH,EAAMF,EACXM,EAAKH,EAAMF,EACXM,EAAQ3/D,KAAK4/D,MAAMF,EAAID,GAC7B,IAAI/gE,EAAI0gE,EACJ17D,EAAI27D,EACR7vD,EAAQ4F,OAAOgqD,EAAOC,GACtB,IAAIQ,EAAM,EACNrvD,GAAO,EACX,OAAUivD,EAAK,EAAI/gE,GAAK4gE,EAAM5gE,GAAK4gE,MAASI,EAAK,EAAIh8D,GAAK67D,EAAM77D,GAAK67D,IAAO,CACxE,MAAMO,EAAaN,EAAYK,IAAQL,EAAY7+D,QAC7Co/D,EAAKrhE,EAAIsB,KAAKm9D,IAAIwC,GAASG,EACjCphE,EAAI+gE,EAAK,EAAIz/D,KAAK4E,IAAI06D,EAAKS,GAAM//D,KAAKqlC,IAAIi6B,EAAKS,GAC/C,MAAMC,EAAKt8D,EAAI1D,KAAKq9D,IAAIsC,GAASG,EACjCp8D,EAAIg8D,EAAK,EAAI1/D,KAAK4E,IAAI26D,EAAKS,GAAMhgE,KAAKqlC,IAAIk6B,EAAKS,GAC3CxvD,EACAhB,EAAQ6F,OAAO3W,EAAGgF,GAGlB8L,EAAQ4F,OAAO1W,EAAGgF,GAEtB8M,GAAQA,EAEZhB,EAAQokC,YACRpkC,EAAQopB,SAEZshC,OAAO50D,EAAOC,GAEV,OADA1J,KAAK8Y,IAAIulD,OAAO50D,EAAOC,GAChB1J,KAEXoV,aACI,OAAOpV,KAAK8Y,KAGpB0pD,GAASK,SAAWX,GACpBM,GAAS4B,YAAcjC,GAIvBK,GAASa,iBAAcvgE,EGlHhB,MAAMuhE,WAAqB9oD,EAC9Bla,YAAYgoD,GACR5mD,QACAzC,KAAKskE,cAAgBjb,EACrBrpD,KAAKwc,SAAS,IACdxc,KAAKyb,SAAWF,EAASG,SAASO,MAClCjc,KAAKoX,QAAU,EACfpX,KAAKqX,QAAU,EACfrX,KAAKwb,UAAY,EACjBxb,KAAKugC,YAAc,EACnBvgC,KAAKkoD,SAAW,EAChBloD,KAAKkpC,SAAW,EAChBlpC,KAAKukE,QAAS,EACdvkE,KAAKwkE,IAAMhC,GAAS4B,YAAYnoB,KAChCj8C,KAAKknD,OAAS,EACdlnD,KAAKkW,YAEE5U,sBACP,OAAOG,EAAS4iE,aAGT50D,qBACP,OAAO8sB,EAAOoF,mBAAmB7xB,aAAaK,OAAOs0D,aAIzDhgE,cAAc0jD,EAAM1mB,GAChB,MAAMK,EAAaL,EAAMK,WACnBuM,EAAc5M,EAAM4M,YAE1B,IAAK8Z,GAAwB,IAAhBA,EAAKrjD,OACd,OAAO,EACX,MAAMsjD,EAAY,GAClB,IAAIC,EAAY,KACZqc,EAAa,EACb56C,EAAc,EAElB,IAAK,IAAIpiB,EAAI,EAAGA,EAAIygD,EAAKrjD,SAAU4C,EAAG,CAClC,MAAMye,EAAMgiC,EAAKzgD,GACXgV,EAAOyJ,EAAI1J,UACX+rC,EAAMriC,EAAI/I,cAChB,IAAKrb,EAAY2a,GACb,MAAM,IAAIra,EAAa,eAE3B,MAAM+O,EAAQ+U,EAAIrJ,aACZslB,EAAQ1lB,EAAK2lB,cAAcjxB,GAC3BikC,EAAK34B,EAAKM,qBACVowB,EAAoC,EAAbjnB,EAAI+gC,OAAc3qB,EAAOuC,oBAAsB,GAW5E,GAVIuW,IACImT,IAAQ9xC,EAAiBuF,OACzBkK,EAAI3K,UAAY65B,EAAG2E,WAAW/L,cAC9BxM,EAAMwM,eAAiBb,GAElBob,IAAQ9xC,EAAiByF,QAC9BgK,EAAI3K,UAAY65B,EAAG2E,WAAWx+B,UAC9BimB,EAAMjmB,WAAa4xB,IAGvB1wB,IAAS2rC,EAAW,CACpB,IAAK,IAAIvkD,EAAI,EAAGA,EAAI4Y,EAAKpK,KAAKxN,SAAUhB,EACjB,IAAfg+B,IACA4iC,EAAavgE,KAAK4E,IAAI2T,EAAK4lB,yBAA0BoiC,IAErC,IAAhBr2B,IACAvkB,EAAc3lB,KAAK4E,IAAI2T,EAAKk8B,0BAA2B9uB,IAG/Du+B,EAAY3rC,EAEhB,MAAMioD,EAA6BviC,EAAMl/B,KACzCklD,EAAUvwC,KAAK,CACX2wC,IAAAA,EACA9rC,KAAAA,EACAyJ,IAAAA,EACAjjB,KAAMyhE,EACNxiC,OAAQuiC,EACRhc,OAAQ5+B,IAIhBs+B,EAAUxlB,MAAK,CAACj/B,EAAGC,IAAMA,EAAEV,KAAOS,EAAET,OACpC,IAAI0hE,EAAa,EACb1R,EAAW,EACXC,EAAW,EACXxL,EAAY,KACZC,EAAY,KAChB,IAAK,IAAIlgD,EAAI,EAAGA,EAAI0gD,EAAUtjD,SAAU4C,EAAG,CACvC,IAAIuhD,EAAY,EAChB,MAAMvsC,EAAO0rC,EAAU1gD,GAAGgV,KACpB8rC,EAAMJ,EAAU1gD,GAAG8gD,IACnBriC,EAAMiiC,EAAU1gD,GAAGye,IACnBjjB,EAAOklD,EAAU1gD,GAAGxE,KACpBwlD,EAASN,EAAU1gD,GAAGghD,OAExBxlD,IAASykD,GAAajrC,IAASkrC,IAC/Bgd,EAAav2B,EAAcqa,GAE/B,MAAMmc,EAAY1+C,EAAI5J,WApEN,EAqEZisC,IAAQjtC,EAASG,SAASC,MAC1BwK,EAAIhM,UAAU2nB,GACdmnB,EAAYyb,EAAaG,EACzB3R,EAAWjK,EAAYiK,EAAWjK,EAAYiK,GAEzC1K,IAAQjtC,EAASG,SAASY,QAC/B6J,EAAIhM,UAAUyqD,GACd3b,GAAa4b,EACb1R,EAAWlK,EAAYkK,EAAWlK,EAAYkK,GAElDxL,EAAYzkD,EACZ0kD,EAAYlrC,EAIhB,OAFA+kB,EAAMK,YAAcoxB,EACpBzxB,EAAM4M,aAAe8kB,GACd,EAEX2R,eAAeN,GAIX,OAHIA,GAAOhC,GAAS4B,YAAYnoB,MAAQuoB,GAAOhC,GAAS4B,YAAY57B,OAChExoC,KAAKwkE,IAAMA,GAERxkE,KAEX+kE,gBAAgB1b,GAEZ,OADArpD,KAAKskE,cAAgBjb,EACdrpD,KAEX0pD,WAAW7mD,GAEP,OADA7C,KAAKkoD,SAAWrlD,EACT7C,KAEX2pD,WAAW9hD,GAEP,OADA7H,KAAKkpC,SAAWrhC,EACT7H,KAEXglE,YAAYtoD,GAER,OADA1c,KAAK4nD,UAAYlrC,EACV1c,KAEXilE,UAAUV,GAEN,OADAvkE,KAAKukE,OAASA,EACPvkE,KAEX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAMoyB,EAAQ1qB,EAAK2qB,mBAAmBrnC,KAAKyb,SAAUzb,KAAKoR,OACpDi8B,EAAgB3wB,EAAK4wB,UAAY5wB,EAAK6wB,mBAAqB/F,EAAKe,GACtE,IAAIqV,EAAQxW,EAAMvkC,EAAI7C,KAAKoX,QAAUpX,KAAKkoD,SACtChZ,EAAW,GACXxyB,EAAK4wB,YACL4B,EAAWxyB,EAAK2yB,YAAYlG,cAEhC,IAAI2U,EAAQ1W,EAAMv/B,EAAI7H,KAAKqX,QAAUrX,KAAKkpC,SAC1C,OAAQlpC,KAAKyb,UACT,KAAKF,EAASG,SAASO,MAGf6hC,EADWphC,EAAK4yB,QACLC,QAAO,CAAC5rC,EAAGC,IAAOD,EAAIC,EAAID,EAAIC,IACrC8Y,EAAK4wB,WAAaD,GAAiB7F,EAAKe,KACxCuV,EAAQ5O,EAASxF,KAAO26B,GAAa50D,QAAQy1D,aAEjDpnB,GAAS99C,KAAKknD,OAASmd,GAAa50D,QAAQ01D,gBAAkBnlE,KAAKwb,UAAY+gB,EAAOuC,oBAE1F,MACJ,KAAKvjB,EAASG,SAASS,MAGf2hC,EADWphC,EAAK4yB,QACLC,QAAO,CAAC5rC,EAAGC,IAAOD,EAAIC,EAAID,EAAIC,IACrC8Y,EAAK4wB,WAAaD,GAAiB7F,EAAKgB,OACxCsV,EAAQ5O,EAASxF,KAAO26B,GAAa50D,QAAQy1D,aAEjDpnB,GAAS99C,KAAKknD,OAASmd,GAAa50D,QAAQ01D,gBAAkBnlE,KAAKwb,UAAY+gB,EAAOuC,oBAE1F,MACJ,KAAKvjB,EAASG,SAASC,KACnBiiC,GAAS59C,KAAKknD,OAAS,EAAImd,GAAa50D,QAAQ21D,YAChD,MACJ,KAAK7pD,EAASG,SAASY,MACnBshC,GAAS59C,KAAKknD,OAAS,EAAImd,GAAa50D,QAAQ41D,aAChD,MACJ,QACI,MAAM,IAAIhjE,EAAa,kBAAmB,gBAAgBrC,KAAKyb,uBAEvE3C,EAAIlF,OACJkF,EAAIQ,YACJR,EAAIg/B,IAAI8F,EAAOE,EAAO99C,KAAKknD,OAAQ,EAAa,EAAV/iD,KAAKC,IAAQ,GACnD0U,EAAIxE,aAAa,KACjBwE,EAAIikB,SACJjkB,EAAIxD,QAAQtV,KAAKwV,UACjB,MAAM3S,EAAI+6C,EAAQ9kC,EAAIi2B,YAAY/uC,KAAKskE,eAAe76D,MAAQ,EAC9DqP,EAAIg3B,SAAS,GAAK9vC,KAAKskE,cAAezhE,EAAGi7C,EAAQ,KACjD,MAAMkL,EAAWhpD,KAAK4nD,UACtB,GAAI3lD,EAAgB+mD,GAAW,CAE3B,MAAMnM,EAAMmM,EAAS/Z,WAAavyB,EAAKzU,OAAS,EAUhD,IAAIq9D,EACAC,EACJ,OAXAzsD,EAAI1E,eAAe,WACnB0E,EAAIklD,WAAW,SACfllD,EAAIxE,aAAa,IACbtU,KAAKukE,OACL/B,GAASgD,eAAe1sD,EAAK8kC,EAAQ,GAAIE,EAAOF,EAAQf,EAAKiB,EAAO,CAAC,EAAG,IAGxE0kB,GAASgD,eAAe1sD,EAAK8kC,EAAQ,GAAIE,EAAOF,EAAQf,EAAKiB,EAAO,CAAC,EAAG,IAIpE99C,KAAKwkE,KACT,KAAKhC,GAAS4B,YAAY77B,GACtB+8B,GAAO,GACPC,EAAUvlE,KAAKukE,OAAS,CAAC,EAAG,GAAK,CAAC,EAAG,GACrC/B,GAASgD,eAAe1sD,EAAK8kC,EAAQf,EAAKiB,EAAOF,EAAQf,EAAKiB,EAAQwnB,EAAKC,GAC3E,MACJ,KAAK/C,GAAS4B,YAAY57B,KACtB88B,EAAM,GACNC,EAAUvlE,KAAKukE,OAAS,CAAC,EAAG,GAAK,CAAC,EAAG,GACrC/B,GAASgD,eAAe1sD,EAAK8kC,EAAQf,EAAKiB,EAAOF,EAAQf,EAAKiB,EAAQwnB,EAAKC,IAMvFzsD,EAAItE,WAGZ6vD,GAAa3uD,UAAY,CACrBhI,OAAQhB,EAAKiB,WACbL,KAAMZ,EAAKI,KACXS,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUqC,QCtOd,MAAM63D,WAAelqD,EACxBla,YAAY4P,EAAMiH,GACdzV,QACAzC,KAAKkY,QAAU7X,OAAO0V,OAAO,CAAE2vD,YAAY,GAAQxtD,GAEnDlY,KAAK0lE,WAAa1lE,KAAKkY,QAAQwtD,WAE/B1lE,KAAKiR,KAAOA,EACZjR,KAAKyb,SAAWF,EAASG,SAASC,KAClC3b,KAAKmhC,eAAiB,CAClBC,WAAY,IAEhBphC,KAAKkW,YACLlW,KAAKma,UAAU,GACfna,KAAKwc,SAAS,IAEPlb,sBACP,OAAOG,EAASgkE,OAGpBhhE,cAAckhE,EAASlkC,GACnB,MAAMK,EAAaL,EAAMK,WAEzB,IAAK6jC,GAA8B,IAAnBA,EAAQ7gE,OACpB,OAAO,EACX,MAAM8gE,EAAaD,EAAQpzD,KAAKwqB,IAC5B,MAAMrgB,EAAOqgB,EAAOtgB,UACdrL,EAAQ2rB,EAAOjgB,aACrB,GAAI/a,EAAY2a,GAAO,CAEnB,MAAM,KAAExZ,GAASwZ,EAAK2lB,cAAcjxB,GAEpC,MAAO,CAAElO,KAAAA,EAAM8B,MADD0X,EAAK4lB,yBACGvF,OAAAA,GAErB,GAAI56B,EAAUua,GAAO,CAEtB,MAAQjV,IAAKo+D,GAAWnpD,EAAKopD,eAAe10D,GAC5C,MAAO,CAAElO,KAAM2iE,EAAQ7gE,MAAO,EAAG+3B,OAAAA,GAGjC,MAAM,IAAI16B,EAAa,WAAY,2BAGrC0jE,EAAcjkC,EAEdtnB,EAASorD,EAAWr2B,QAAO,CAAC/0B,GAAUuiB,OAAAA,EAAQ/3B,MAAAA,MAChD+3B,EAAO5iB,UAAU4rD,EAAc/gE,GACxBb,KAAK4E,IAAIg0B,EAAOxgB,WAzBJ,EAyBiC/B,KACrD,GAEH,OADAinB,EAAMK,YAActnB,GACb,EAEX4C,cACI,OAAOpd,KAAKyb,SAEhBuqD,WAAWtpD,GAEP,OADA1c,KAAKimE,SAAWvpD,EACT1c,KAEX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAMoyB,EAAQ1qB,EAAK2qB,mBAAmBrnC,KAAKyb,SAAUzb,KAAKoR,OAC1D,IAAIi4B,EAAK3sB,EAAK4yB,QACV5F,EAAOtC,EAAMv/B,EACb21C,EAAOpW,EAAMv/B,EACjB,MAAMhF,EAAIukC,EAAMvkC,EAAI,EACdqjE,EAAaxpD,EAAK3B,aAAaynB,yBAC/B3E,EAAQ79B,KAAKkd,uBAAuB08B,WAAWl9B,EAAKvJ,eAC1D,IAAK,IAAIzL,EAAI,EAAGA,EAAIm2B,EAAM/4B,OAAQ4C,IAAK,CACnC,MAAMgV,EAAOmhB,EAAMn2B,GACnB,GAAI7F,EAAO6a,GAAO,CAGd2sB,EAAK3sB,EAAK4yB,QACV,IAAK,IAAIxrC,EAAI,EAAGA,EAAIulC,EAAGvkC,OAAQhB,KACvB9D,KAAK0c,OAASmhB,EAAMn2B,IAAM1H,KAAK0lE,cAC/Bh8B,EAAOvlC,KAAKqlC,IAAIE,EAAML,EAAGvlC,IACzB05C,EAAOr5C,KAAK4E,IAAIy0C,EAAMnU,EAAGvlC,MAKzC,IAAIqiE,EAAQ,GACRC,EAAgB,EAChBC,EAAU,EACVrc,EAAe,EACfsc,EAAS,EACb,OAAQtmE,KAAKiR,MACT,KAAKw0D,GAAOc,KAAKC,WACbL,EAAQ,mBACRC,GAAiB,EACjBC,EAAU38B,EAAOw8B,EAAa,EAAI,GAClC1oB,GAAQ0oB,EAAa,EACrB,MACJ,KAAKT,GAAOc,KAAKE,SACbN,EAAQ,qBACRC,EAAgB,GAChBC,EAAU7oB,EAAO0oB,EAAa,EAC9Bx8B,GAAQw8B,EAAa,EACrB,MACJ,KAAKT,GAAOc,KAAKG,UACjB,KAAKjB,GAAOc,KAAKI,cACbR,EAAQ,mBACRC,GAAiB,EACjBpc,EAAehqD,KAAKoX,QAAUgvD,EAAgB,EAC1CrkE,EAAY2a,IACZgtB,GAAQ,IAAMw8B,EAEV1oB,IADCA,EAAO9T,GAAQ,GAAM,EACd,GAAMw8B,EAGNA,EAEZG,EAAU38B,EAAOw8B,EACjBI,EAAS9oB,EAAO0oB,EAAa,IAG7Bx8B,GAAQ,IAAMw8B,EACd1oB,GAAQ0oB,EACRG,EAAU38B,EAAO,IAAOw8B,EACxBI,EAAS9oB,EAAO,IAAO0oB,GAE3B,MACJ,KAAKT,GAAOc,KAAKK,QACjB,KAAKnB,GAAOc,KAAKM,YACbV,EAAQ,qBACRC,GAAiB,EACjBpc,EAAehqD,KAAKoX,QAAUgvD,EAAgB,EAC1CrkE,EAAY2a,IACZ2pD,EAAUH,EAAa,EACvBx8B,GAAQ,GAAMw8B,GACT1oB,EAAO9T,GAAQ,GAAM,IACtB8T,GAAQ0oB,EAAa,GAEzBG,EAAU7oB,EAAO,GAAM0oB,EACvBI,EAAS58B,EAAO,KAAOw8B,IAGvBx8B,GAAQ,IAAOw8B,EACf1oB,GAAQ,GAAM0oB,EACdG,EAAU7oB,EAAO,IAAO0oB,EACxBI,EAAS58B,EAAOw8B,GAEpB,MACJ,KAAKT,GAAOc,KAAKO,uBACbp9B,GAAQ,GAAMw8B,EACd1oB,GAAQ0oB,EACR,MACJ,QACI,MAAM,IAAI7jE,EAAa,cAAe,mBAAmBrC,KAAKiR,uBAEtE,IAAI81D,EAAa,WAEjB,GAAI/mE,KAAKiR,OAASw0D,GAAOc,KAAKC,YAAcxmE,KAAKiR,OAASw0D,GAAOc,KAAKE,SAClE3tD,EAAI4kC,SAAS76C,EAAI7C,KAAKoX,QAASsyB,EAAM,EAAG8T,EAAO9T,QAI/C,GADAq9B,EAAa,SACThlE,EAAY2a,GACZ,IAAK,IAAIhV,EAAIgiC,EAAMhiC,GAAK81C,EAAM91C,GAAKw+D,EAC/BpvD,EAAMu8C,YAAYv6C,EAAKjW,EAAI7C,KAAKoX,QAAU,EAAG1P,EAAG1H,KAAKmhC,eAAeC,WAAY,2BAGnF,CACD,IAAI15B,EACJ,IAAKA,EAAIgiC,EAAMhiC,GAAK81C,EAAM91C,GAAK,GAC3BoP,EAAMu8C,YAAYv6C,EAAKjW,EAAI7C,KAAKoX,QAAU,EAAG1P,EAAG1H,KAAKmhC,eAAeC,WAAY,uBAEhFphC,KAAKiR,OAASw0D,GAAOc,KAAKI,gBAC1BL,EAAS5+D,EAAI,IAAOw+D,GAI5BlmE,KAAKiR,OAASw0D,GAAOc,KAAKO,yBAI9BhwD,EAAMu8C,YAAYv6C,EAAKjW,EAAI7C,KAAKoX,QAAUgvD,EAAeC,EAASrmE,KAAKmhC,eAAeC,WAAY+kC,EAAO,CACrGjlE,SAAU,UAAUilE,KAASY,MAG7B/mE,KAAKiR,OAASw0D,GAAOc,KAAKI,eAAiB3mE,KAAKiR,OAASw0D,GAAOc,KAAKM,cACrE/tD,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKwV,UACjBsD,EAAIg3B,SAAS,IAAKjtC,EAAImnD,EAAcsc,GACpCxtD,EAAItE,aAIhBixD,GAAOc,KAAO,CACVC,WAAY,EACZC,SAAU,EACVC,UAAW,EACXE,QAAS,EACTD,cAAe,EACfE,YAAa,EACbC,uBAAwB,GAE5BrB,GAAO/vD,UAAY,CACfhI,OAAQhB,EAAK8D,MACblD,KAAMZ,EAAKI,KACXS,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUoD,QC/Md,MAAMq4D,WAAgBzrD,EACzBla,cACIoB,QACAzC,KAAKyb,SAAWF,EAASG,SAASY,MAClCtc,KAAKmhC,eAAiB,CAClB8lC,OAAO,EACPC,cAAe,GACfC,YAAa,EACbC,WAAY,EACZC,WAAY,GAEhBrnE,KAAKsnE,gBAAgBtnE,KAAKmhC,eAAe+lC,eAElC5lE,sBACP,OAAOG,EAASulE,QAGpBviE,cAAc8iE,EAAU9lC,EAAO9tB,GAC3B,IAAK4zD,GAAgC,IAApBA,EAASziE,OACtB,OAAO,EAEX,IAAI0W,EAAYimB,EAAMwM,cAClBxkC,EAAQ,EACRzE,EAAQy8B,EAAM4M,YAAc,EAEhC,MAAMqQ,EAAQ/qC,EAAQimC,WAAWqE,GAAK38C,UACtC,GAAIo9C,GAASA,EAAM55C,OAAS,EAAG,CAE3B0W,GADmBkjC,EAAMnsC,KAAK6Q,GAAOA,EAAG27B,kBAAiBxP,QAAO,CAAC5rC,EAAGC,IAAOD,EAAIC,EAAID,EAAIC,IAAM24B,EAAOuC,oBAC9D,OAGtC2C,EAAMwM,eAAiB,EAG3B,IAAK,IAAIvmC,EAAI,EAAGA,EAAI6/D,EAASziE,SAAU4C,EAAG,CACtC,MAAM8/D,EAAUD,EAAS7/D,GACzB8/D,EAAQrtD,UAAUnV,GAClBwiE,EAAQlqD,YAAY9B,GACpB/R,GAAS+9D,EAAQjrD,WACjBvX,GAASyE,EAGb,OADAg4B,EAAM4M,aAAe5kC,GACd,EAGXg+D,SAASR,GAEL,OADAjnE,KAAKmhC,eAAe8lC,MAAQA,EACrBjnE,KAGXsnE,gBAAgB79D,GAGZ,OAFAzJ,KAAKmhC,eAAe+lC,cAAgBz9D,EACpCzJ,KAAKwc,SAAS/S,GACPzJ,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MACM0yD,EADQhrD,EAAK2qB,mBAAmB9rB,EAASG,SAASY,MAAOtc,KAAKoR,OACnDvO,EAAI7C,KAAKoX,QACpBuwD,EAAKjrD,EAAK+yB,eAAezvC,KAAKwb,WAAa,EACjDwrD,GAAQY,cAAc9uD,EAAK4uD,EAAIC,EAAI3nE,KAAKmhC,gBAM5C18B,qBAAqBqU,EAAKjW,EAAGgF,EAAGggE,GAC5B,MAAM,MAAEZ,EAAK,cAAEC,EAAa,WAAEE,EAAU,WAAEC,EAAU,YAAEF,GAAgBU,EAChEC,EAAYZ,EAAgBE,EAElC,IAAI1/D,EACJ,GAFAoR,EAAIQ,YAEA2tD,EAAO,CAEP,IADAnuD,EAAIS,OAAO1W,EAAGgF,EAAIw/D,EAAa,GAC1B3/D,EAAI,EAAGA,EAAIogE,EAAY,IAAKpgE,EAC7BoR,EAAIU,OAAO3W,EAAIukE,EAAYv/D,EAAIs/D,EAAc,GAC7CtkE,GAAKukE,EACLtuD,EAAIU,OAAO3W,EAAIukE,EAAYv/D,EAAIs/D,EAAc,GAC7CtkE,GAAKukE,EAET,IAAK1/D,EAAI,EAAGA,EAAIogE,EAAY,IAAKpgE,EAC7BoR,EAAIU,OAAO3W,EAAIukE,EAAYv/D,EAAIs/D,EAAc,EAAIE,EAAa,GAC9DxkE,GAAKukE,EACLtuD,EAAIU,OAAO3W,EAAIukE,EAAYv/D,EAAIs/D,EAAc,EAAIE,EAAa,GAC9DxkE,GAAKukE,EAETtuD,EAAIa,WAEH,CAED,IADAb,EAAIS,OAAO1W,EAAGgF,EAAIw/D,GACb3/D,EAAI,EAAGA,EAAIogE,EAAY,IAAKpgE,EAC7BoR,EAAIW,iBAAiB5W,EAAIukE,EAAa,EAAGv/D,EAAIs/D,EAAc,EAAGtkE,EAAIukE,EAAYv/D,GAC9EhF,GAAKukE,EACLtuD,EAAIW,iBAAiB5W,EAAIukE,EAAa,EAAGv/D,EAAIs/D,EAAc,EAAGtkE,EAAIukE,EAAYv/D,GAC9EhF,GAAKukE,EAET,IAAK1/D,EAAI,EAAGA,EAAIogE,EAAY,IAAKpgE,EAC7BoR,EAAIW,iBAAiB5W,EAAIukE,EAAa,EAAGv/D,EAAIs/D,EAAc,EAAIE,EAAYxkE,EAAIukE,EAAYv/D,EAAIw/D,GAC/FxkE,GAAKukE,EACLtuD,EAAIW,iBAAiB5W,EAAIukE,EAAa,EAAGv/D,EAAIs/D,EAAc,EAAIE,EAAYxkE,EAAIukE,EAAYv/D,EAAIw/D,GAC/FxkE,GAAKukE,EAETtuD,EAAIa,SCtFhB,SAAS,MAAK1W,GACN8kE,GAAgB7mC,OAChBn+B,EAAI,2BAA4BE,GAEjC,MAAM8kE,GACT1mE,cAEIrB,KAAKyhC,MAAQ,CACTK,WAAY,EACZuM,YAAa,EACb7yB,UAAW,EACXyyB,cAAe,GAGnBjuC,KAAKgoE,QAAU,GACfhoE,KAAK01C,cAAe,EACpB11C,KAAK41C,eAAgB,EACrB51C,KAAKioE,WAAY,EACjBjoE,KAAKyJ,MAAQ,EACbzJ,KAAKmvC,QAAU,EAEnBvI,YAAYshC,GAER,OADA,GAAE,qDACKloE,KAAKs1C,UAAU4yB,GAQ1B5yB,UAAU4yB,GACN,MAAMhnE,EAAWgnE,EAAO/0D,cAOxB,OANKnT,KAAKgoE,QAAQ9mE,KACdlB,KAAKgoE,QAAQ9mE,GAAY,IAE7BlB,KAAKgoE,QAAQ9mE,GAAU2W,KAAKqwD,GAC5BA,EAAO/qD,mBAAmBnd,MAC1BA,KAAK01C,cAAe,EACb11C,KAKXymC,aAAavlC,GAET,OADA,GAAE,uDACKlB,KAAK45C,WAAW14C,GAE3B04C,WAAW14C,GACP,IAAI6L,EACJ,OAAyC,QAAjCA,EAAK/M,KAAKgoE,QAAQ9mE,UAA8B,IAAP6L,EAAgBA,EAAK,GAE1EwP,WACI,OAAOvc,KAAKyJ,MAEhB0+D,eACI,OAAOnoE,KAAKyhC,MAAMK,WAEtBu3B,gBACI,OAAOr5D,KAAKyhC,MAAM4M,YAEtB2L,WACI,OAAOh6C,KAAKyhC,MAEhB3xB,aACI,IAAK9P,KAAKioE,UACN,MAAM,IAAI5lE,EAAa,oBAAqB,sCAEhD,MAAO,CACHoH,MAAOzJ,KAAKyhC,MAAMK,WAAa9hC,KAAKyhC,MAAM4M,YAAcruC,KAAKmvC,QAC7DA,QAASnvC,KAAKmvC,SAGtBsG,YACI,GAAIz1C,KAAK01C,aACL,OACJ,GAAE,iCACF,MAAMjU,EAAQzhC,KAAKyhC,MACbumC,EAAUhoE,KAAKgoE,QAErBhmE,GAAUssD,OAAO0Z,EAAQvmE,EAASO,WAAYy/B,GAC9CuxB,GAAY1E,OAAO0Z,EAAQvmE,EAASuxD,aAAcvxB,GAClDwlB,GAAIqH,OAAO0Z,EAAQvmE,EAASwlD,KAAMxlB,GAClCumB,GAAesG,OAAO0Z,EAAQvmE,EAASumD,gBAAiBvmB,GACxDR,EAAWqtB,OAAO0Z,EAAQvmE,EAASw/B,YAAaQ,GAChDgkC,GAAOnX,OAAO0Z,EAAQvmE,EAASgkE,QAAShkC,GACxCoF,GAAeynB,OAAO0Z,EAAQvmE,EAASolC,gBAAiBpF,GACxDqtB,GAAaR,OAAO0Z,EAAQvmE,EAASqtD,cAAertB,GACpD4iC,GAAa/V,OAAO0Z,EAAQvmE,EAAS4iE,cAAe5iC,GACpDkP,GAAa2d,OAAO0Z,EAAQvmE,EAASkvC,cAAelP,GACpDuvB,GAAS1C,OAAO0Z,EAAQvmE,EAASuvD,UAAWvvB,GAC5CmL,GAAW0hB,OAAO0Z,EAAQvmE,EAASmrC,YAAanL,GAChDwe,GAAYqO,OAAO0Z,EAAQvmE,EAASw+C,aAAcxe,GAClDwc,GAAKqQ,OAAO0Z,EAAQvmE,EAASw8C,MAAOxc,GACpCulC,GAAQ1Y,OAAO0Z,EAAQvmE,EAASulE,SAAUvlC,EAAOzhC,MAEjDA,KAAKyJ,MAAQg4B,EAAMK,WAAaL,EAAM4M,YACtCruC,KAAK01C,cAAe,EAExBC,aACQ31C,KAAK41C,gBAET,GAAE,kCAEF5zC,GAAU2zC,WAAW31C,KAAK45C,WAAWn4C,EAASO,cAGtD+lE,GAAgB7mC,OAAQ,EClHjB,MAAMknC,WAAaptB,GAEtB35C,YAAY4P,EAAM3D,EAAM2/B,GACpBxqC,QAKAzC,KAAKw8B,KAAO4rC,GAAKC,MAAc,OAC/BroE,KAAKqd,YAAYo9B,GAAsB+B,OACvCx8C,KAAKy8C,QAAQxrC,EAAM3D,EAAM2/B,GACzBjtC,KAAKwc,SAAS+f,EAAOoF,mBAAmBvxB,aAAa,QAAQpQ,KAAKsN,eApB1E,YAAcrK,GACNmlE,GAAKlnC,OACLn+B,EAAI,gBAAiBE,GAmBrB,CAAE,iBAAkBgO,GAEb3P,sBACP,OAAOG,EAAS2mE,KAMTC,mBACP,MAAO,CACHzgD,OAAQ,CACJrlB,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEXiR,KAAM,CACFvlB,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEXmR,KAAM,CACFzlB,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEXkR,MAAO,CACHxlB,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEXqR,WAAY,CACR3lB,KAAM,aACNW,KAAM,EACN2T,MAAO,GAEXoR,QAAS,CACL1lB,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEX,gBAAiB,CACbtU,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEX,aAAc,CACVtU,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEX,aAAc,CACVtU,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEXsR,QAAS,CACL5lB,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEXuR,OAAQ,CACJ7lB,KAAM,QACNW,KAAM,EACN2T,MAAO,GAEXyxD,IAAK,CACD/lE,KAAM,iBACNsU,MAAO,IAKnB4lC,QAAQxrC,EAAM3D,EAAM2/B,GAChBjtC,KAAKiR,KAAOA,EACZjR,KAAKw8B,KAAO4rC,GAAKC,MAAMp3D,GAEnBjR,KAAKsN,UADIxK,IAATwK,EACY,UAGAA,EAEhB,MAAMo0B,EAAYnF,EAAOoF,mBAMzB,GALA3hC,KAAKw8B,KAAK3lB,MAAQ6qB,EAAUtxB,aAAa,QAAQpQ,KAAKsN,aAAc,GACpEtN,KAAKwY,MAAQ,IAAI1B,EAAM9W,KAAKw8B,KAAKj6B,KAAMvC,KAAKw8B,KAAK3lB,MAAO,CACpD3V,SAAU,QAAQlB,KAAKw8B,KAAKj6B,QAAQvC,KAAKsN,cAG1BxK,IAAfmqC,EAA0B,CAC1B,MAAM1qC,EAAOm/B,EAAUtxB,aAAa,oBAAoB68B,eAClDp2B,EAAQ6qB,EAAUtxB,aAAa,oBAAoB68B,KAAcjtC,KAAKsN,cACtEpK,EAAOw+B,EAAUtxB,aAAa,oBAAoB68B,KAAcjtC,KAAKsN,QAAQtN,KAAKiR,aAClFmG,EAAUsqB,EAAUtxB,aAAa,oBAAoB68B,KAAcjtC,KAAKsN,QAAQtN,KAAKiR,eAC3FjR,KAAKitC,WAAa,CAAE1qC,KAAAA,EAAMsU,MAAAA,EAAO3T,KAAAA,EAAMkU,QAAAA,GACvCpX,KAAKuoE,WAAa,IAAIzxD,EAAM9W,KAAKitC,WAAW1qC,KAAMvC,KAAKitC,WAAWp2B,OAClE7W,KAAKuoE,WAAW94D,QAAQkJ,MAAQ,EAChC3Y,KAAKuoE,WAAWpuD,UAAUna,KAAKitC,WAAW71B,cAG1CpX,KAAKitC,gBAAanqC,EAEtB,OAAO9C,KAGXuc,WAII,MAHkB,QAAdvc,KAAKiR,MACLrO,EAAQ5C,KAAKka,MAAO,YAAa,kCAE9Bla,KAAKyJ,MAGhBwQ,SAASC,GAEL,GADAla,KAAKka,MAAQA,EACK,QAAdla,KAAKiR,KAAgB,CACrB,MAAMuH,EAAQ5V,EAAQ5C,KAAKwY,MAAO,YAAa,kCACzCgwD,EAAWxoE,KAAKka,MAAM0zB,cACtBlM,EAAYnF,EAAOoF,mBACnB9qB,EAAQ6qB,EAAUtxB,aAAa,kBAAkBo4D,WACjDC,EAAS/mC,EAAUtxB,aAAa,kBAAkBo4D,YACxDhwD,EAAMwB,SAASnD,GACf2B,EAAM4B,UAAUquD,GAEpB,OAAOzoE,KAGX2U,OACI,MAAM6D,EAAQ5V,EAAQ5C,KAAKwY,MAAO,YAAa,kCACzC0B,EAAQla,KAAK+a,aACbjC,EAAMoB,EAAMxF,eAClB1U,KAAKgV,cACL8D,EAAI+1B,UAAU,OAAQ7uC,KAAK6R,aAAa,OACxC2G,EAAMyB,SAASC,GACf1B,EAAMnD,WAAWyD,QACMhW,IAAnB9C,KAAKw8B,KAAKt5B,MACVlD,KAAKi7C,iBAAiBziC,EAAO0B,EAAOla,KAAKw8B,KAAKt5B,MAElDsV,EAAMwC,cAAchb,KAAK6C,QACDC,IAApB9C,KAAKitC,iBAAgDnqC,IAApB9C,KAAKuoE,aACtCvoE,KAAKi7C,iBAAiBj7C,KAAKuoE,WAAYruD,EAAOla,KAAKitC,WAAW/pC,MAC9DlD,KAAKuoE,WAAWtuD,SAASC,GACzBla,KAAKuoE,WAAWlzD,WAAWyD,GAC3B9Y,KAAKuoE,WAAWvtD,cAAchb,KAAK6C,IAEvCiW,EAAIi3B,cAIZq4B,GAAKlnC,OAAQ,ECrKN,MAAMwnC,WAAqB1tB,GAE9B35C,YAAYu8B,EAAS+qC,EAAeC,GAChCnmE,QACAzC,KAAKiiC,QAAU,GACfjiC,KAAK6oE,UAAUjrC,EAAS+qC,EAAeC,GACvC5oE,KAAKqd,YAAYo9B,GAAsB+B,OACvCx8C,KAAK8oE,eAAiB,GACtB9oE,KAAKmQ,OAAS,GACdnQ,KAAK+oE,WAAa,GAClB/oE,KAAKgpE,eAAgB,EAEd1nE,sBACP,OAAOG,EAASinE,aAKpBO,eAAe3iD,EAAK4iD,GAChB,MAAMC,EAAe5sC,EAAOgF,gBAAgBjb,EAAIrV,MAC1CuH,EAAQ,IAAI1B,EAAMqyD,EAAa5mE,KAAMvC,KAAK8oE,gBAEhD,IAAIM,EAAa,EACjB,GAAiB,MAAb9iD,EAAIrV,MAAgBi4D,EAAS,CAC7B,MAAM/5B,EAAUu5B,GAAa3mC,kBAAkBmnC,EAAQj4D,MACvD,GAAIk+B,EAAS,CAETi6B,EADgBF,EAAQhmE,MAAQojB,EAAIpjB,KACbisC,EAAQnzB,MAAQmzB,EAAQjzB,OAIvDlc,KAAKi7C,iBAAiBziC,EAAOxY,KAAK+a,aAAcuL,EAAIpjB,MACpDlD,KAAKmQ,OAAO0H,KAAKW,GACjB,MAAM6wD,EAAYrpE,KAAK+oE,WAAW/oE,KAAK+oE,WAAWjkE,OAAS,GACrDm1C,EAAazhC,EAAM1I,aAAarG,MAAQ2/D,EAE9CppE,KAAK+oE,WAAWlxD,KAAKwxD,EAAYpvB,GAEjCj6C,KAAKyJ,OAASwwC,EAIlBqvB,UAAU3rC,GAGN,OAFA39B,KAAKioE,WAAY,EACjBjoE,KAAK2oE,cAAgBhrC,EACd39B,KAEXupE,uBAAuB5rC,GAEnB,MAAM6rC,EAAiBjtC,EAAOjX,aAAaqY,GAErC8rC,EAAkBzpE,KAAKiiC,QAAQn9B,OAAS,GAAK0kE,EAAe1kE,OAAS,GAAK0kE,EAAe,GAAGv4D,OAASjR,KAAKiiC,QAAQ,GAAGhxB,KAErHy4D,EAAWD,EAAkBD,EAAe1kE,OAAS0kE,EAAe1kE,OAAS9E,KAAKiiC,QAAQn9B,OAEhG,GAAI4kE,EAAW,EACX,OAEJ,MAAMC,EAAY,GAClB,IAAK,IAAIjiE,EAAI,EAAGA,EAAIgiE,EAAUhiE,IAAK,CAC/B,IAAI0J,EAAQ1J,EACP+hE,IACDr4D,EAAQo4D,EAAe1kE,OAAS4kE,EAAWhiE,GAE/C,MAAM4e,EAAMkjD,EAAep4D,GAC3Bu4D,EAAU9xD,KAAK,CAAE5G,KAAM,IAAK/N,KAAMojB,EAAIpjB,OAI1C,OADAlD,KAAKiiC,QAAU0nC,EAAUC,OAAO5pE,KAAKiiC,SAC9B,CACHA,QAAS0nC,EACT14D,KAAMu4D,EAAe,GAAGv4D,MAIhC44D,WAAW3vD,GAGP,OAFAla,KAAKgpE,eAAgB,EACrB9uD,EAAM0sB,YAAY5mC,MACXA,KAIX8pE,gBAAgBttC,EAAMvrB,EAAMgxB,EAAUjiC,KAAKiiC,SACvC,IACI8nC,EAuCAriE,EAxCAsiE,EAAS,EAEb,OAAQxtC,GAEJ,IAAK,UACY,MAATvrB,EACA84D,EAAc,CAAC,IAAK,GAAK,EAAG,EAAG,KAAM,GAAK,GAE1CC,GAAU,EACd,MACJ,IAAK,gBACY,MAAT/4D,EACA84D,EAAc,CAAC,EAAG,EAAG,GAAK,IAAK,EAAG,EAAG,KAErCC,EAAS,IACb,MACJ,IAAK,OACDA,EAAS,GACT,MACJ,IAAK,QACY,MAAT/4D,EACA84D,EAAc,CAAC,EAAG,EAAG,IAAK,GAAK,EAAG,EAAG,KAErCC,GAAU,GACd,MACJ,IAAK,aACL,IAAK,aACY,MAAT/4D,EACA84D,EAAc,CAAC,GAAK,IAAK,EAAG,EAAG,IAAK,IAAK,GAEzCC,EAAS,EACb,MACJ,IAAK,OACL,IAAK,SACDA,EAAS,EAOjB,QAA2B,IAAhBD,EACP,IAAKriE,EAAI,EAAGA,EAAIu6B,EAAQn9B,SAAU4C,EAC9Bu6B,EAAQv6B,GAAGxE,KAAO6mE,EAAYriE,QAGjC,GAAe,IAAXsiE,EACL,IAAKtiE,EAAI,EAAGA,EAAIu6B,EAAQn9B,SAAU4C,EAC9Bu6B,EAAQv6B,GAAGxE,MAAQ8mE,EAI/B7uB,WAAW/pC,GAGP,OAFKpR,KAAKioE,WACNjoE,KAAKsuD,SACqB,IAAvBtuD,KAAKmQ,OAAOrL,SAAkB9E,KAAKgpE,eAAiB53D,EAAQ,EAAK,EAAIpR,KAAKkyC,QAErF31B,WAGI,OAFKvc,KAAKioE,WACNjoE,KAAKsuD,SACFtuD,KAAKyJ,MAEhBo/D,UAAUjrC,EAAS+qC,EAAeC,GAK9B,OAJA5oE,KAAKioE,WAAY,EACjBjoE,KAAK49B,QAAUA,EACf59B,KAAK2oE,cAAgBA,EACrB3oE,KAAK4oE,aAAeA,EACb5oE,KAKXiqE,SAASrB,GAGL,OAFA5oE,KAAKioE,WAAY,EACjBjoE,KAAK4oE,aAAeA,EACb5oE,KAEXkqE,sBAAsBtB,GAClB,MAAM7/D,EAAM5E,KAAKqlC,IAAIo/B,EAAa9jE,OAAQ9E,KAAKiiC,QAAQn9B,QACvD,IAAK,IAAI4C,EAAI,EAAGA,EAAIqB,IAAOrB,EACnBkhE,EAAalhE,KACb1H,KAAKiiC,QAAQv6B,GAAGuJ,KAAO23D,EAAalhE,IAIhD4mD,SACI,MAAMp0C,EAAQla,KAAK+a,aACnB/a,KAAKyJ,MAAQ,EACbzJ,KAAKmQ,OAAS,GACdnQ,KAAK+oE,WAAa,CAAC,GACnB/oE,KAAKiiC,QAAU1F,EAAOjX,aAAa1iB,EAAQ5C,KAAK49B,UAChD,MAAMqE,EAAUjiC,KAAKiiC,QACfkoC,EAAsBloC,EAAQn9B,OAAS,EAAIm9B,EAAQ,GAAGhxB,UAAOnO,EACnE,IAAIsnE,EAOJ,GANIpqE,KAAK2oE,gBACLyB,EAAgBpqE,KAAKupE,uBAAuBvpE,KAAK2oE,gBAEjD3oE,KAAK4oE,cACL5oE,KAAKkqE,sBAAsBlqE,KAAK4oE,cAEhC5oE,KAAKiiC,QAAQn9B,OAAS,EAAG,CACzB,MAAM03B,GAAQx8B,KAAKyb,WAAag/B,GAAsBoB,IAAM3hC,EAAMmwD,aAAenwD,EAAMowD,YAAcpwD,EAAMowD,UACvGF,GACApqE,KAAK8pE,gBAAgBttC,EAAM4tC,EAAcn5D,KAAMm5D,EAAcnoC,SAEjEjiC,KAAK8pE,gBAAgBttC,EAAM2tC,EAAqBloC,GAChD,IAAK,IAAIv6B,EAAI,EAAGA,EAAI1H,KAAKiiC,QAAQn9B,SAAU4C,EACvC1H,KAAKipE,eAAejpE,KAAKiiC,QAAQv6B,GAAI1H,KAAKiiC,QAAQv6B,EAAI,IAG9D1H,KAAKioE,WAAY,EAErBtzD,OACI,MAAMuF,EAAQla,KAAK+a,aACbjC,EAAMoB,EAAMxF,eACb1U,KAAKioE,WACNjoE,KAAKsuD,SACTtuD,KAAKgV,cACL8D,EAAI+1B,UAAU,eAAgB7uC,KAAK6R,aAAa,OAChD,IAAK,IAAInK,EAAI,EAAGA,EAAI1H,KAAKmQ,OAAOrL,OAAQ4C,IAAK,CACzC,MAAM8Q,EAAQxY,KAAKmQ,OAAOzI,GACpB7E,EAAI7C,KAAK6C,EAAI7C,KAAK+oE,WAAWrhE,GACnC8Q,EAAMyB,SAASC,GACf1B,EAAMnD,WAAWyD,GACjBN,EAAMwC,cAAcnY,GAExBiW,EAAIi3B,cAKZ24B,GAAa3mC,kBAAoB,CAC7B,IAAK,CACD/lB,MAAO,EACPE,MAAO,GAEXtY,EAAG,CACCoY,MAAO,EACPE,MAAO,GAEXpY,EAAG,CACCkY,MAAO,EACPE,MAAO,GAEX,KAAM,CACFF,MAAO,EACPE,MAAO,GAEXkH,GAAI,CACApH,MAAO,EACPE,MAAO,GAEXmG,GAAI,CACArG,MAAO,EACPE,MAAO,GAEX7W,EAAG,CACC2W,MAAO,EACPE,MAAO,GAEXiP,IAAK,CACDnP,MAAO,EACPE,MAAO,GAEX,KAAM,CACFF,MAAO,EACPE,MAAO,GAEX,IAAK,CACDF,MAAO,EACPE,MAAO,GAEX,KAAM,CACFF,MAAO,EACPE,MAAO,GAEX,MAAO,CACHF,MAAO,EACPE,MAAO,GAEX+O,GAAI,CACAjP,MAAO,EACPE,MAAO,IAEXgP,IAAK,CACDlP,MAAO,EACPE,MAAO,KClRR,MAAMquD,WAAmBvvB,GAC5B35C,YAAY4P,EAAMpO,EAAGwU,GACjB5U,QACAzC,KAAKwqE,YAAcv5D,EACnBjR,KAAK6C,EAAIA,EACT7C,KAAKoX,QAAU,EACfpX,KAAKqX,QAAUA,EACfrX,KAAKkW,YAEE5U,sBACP,OAAOG,EAAS8oE,WAEpBE,UAAU5nE,GAEN,OADA7C,KAAKoX,QAAUvU,EACR7C,KAEX0qE,UAAU7iE,GAEN,OADA7H,KAAKqX,QAAUxP,EACR7H,KAEX2U,KAAKuF,EAAOrX,GAER,OADA7C,KAAKgV,cACGhV,KAAKwqE,aACT,KAAKD,GAAWt5D,KAAK05D,WACjB3qE,KAAK4qE,cAAc1wD,EAAOrX,EAAIqX,EAAMqC,YACpC,MACJ,KAAKguD,GAAWt5D,KAAK45D,UACjB7qE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,QAAQ,GACtC,MACJ,KAAK0nE,GAAWt5D,KAAK85D,WACjB/qE,KAAKgrE,eAAe9wD,EAAOrX,GAC3B,MACJ,KAAK0nE,GAAWt5D,KAAKg6D,YACjBjrE,KAAKgrE,eAAe9wD,EAAOrX,EAAIqX,EAAMqC,YACrC,MACJ,KAAKguD,GAAWt5D,KAAKi6D,GACjBlrE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,QAAQ,GACtC,MACJ,KAAK0nE,GAAWt5D,KAAKk6D,WACjBnrE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,WAAW,GACzC,MACJ,KAAK0nE,GAAWt5D,KAAKm6D,WACjBprE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,gBAAgB,GAC9C,MACJ,KAAK0nE,GAAWt5D,KAAKo6D,GACjBrrE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,QAAQ,GACtC,MACJ,KAAK0nE,GAAWt5D,KAAKq6D,WACjBtrE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,WAAW,GACzC,MACJ,KAAK0nE,GAAWt5D,KAAKs6D,WACjBvrE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,gBAAgB,GAC9C,MACJ,KAAK0nE,GAAWt5D,KAAKu6D,KACjBxrE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,QAAQ,GACtC,MACJ,KAAK0nE,GAAWt5D,KAAKw6D,QACjBzrE,KAAK8qE,eAAe5wD,EAAOrX,EAAG,MAAM,GAK5C,OAAO7C,KAEX4qE,cAAc1wD,EAAOrX,GACjB,MAAMgF,EAAIqS,EAAMu1B,eAAev1B,EAAM0zB,eAAiB5tC,KAAKqX,QAE3D,OADAP,EAAMu8C,YAAYn5C,EAAMxF,eAAgB1U,KAAK6C,EAAIA,EAAI7C,KAAKoX,QAASvP,EAAI00B,EAAOoF,mBAAmBvxB,aAAa,mCAAoC,GAAI,OAAQ,CAAElP,SAAU,SACnKlB,KAEXgrE,eAAe9wD,EAAOrX,GAClB,MAAMgF,EAAIqS,EAAMu1B,eAAev1B,EAAM0zB,eAAiB5tC,KAAKqX,QAE3D,OADAP,EAAMu8C,YAAYn5C,EAAMxF,eAAgB1U,KAAK6C,EAAIA,EAAI7C,KAAKoX,QAASvP,EAAI00B,EAAOoF,mBAAmBvxB,aAAa,mCAAoC,GAAI,QAAS,CAAElP,SAAU,UACpKlB,KAEX8qE,eAAe5wD,EAAOrX,EAAGoB,EAAMynE,GAC3B,MAAM5yD,EAAMoB,EAAMxF,eAClBoE,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKwV,UACjB,IAAIm2D,EAAS,EACTC,EAAW,EACf,MAAMC,EAAgB3xD,EAAMigC,gBAAkBn6C,KAAK6C,EACnD,OAAQ7C,KAAKwqE,aAET,KAAKD,GAAWt5D,KAAK45D,UAEjBc,EAAS3rE,KAAK6C,EAAIqX,EAAM4xD,sBACxBF,EACID,EACI7yD,EAAIi2B,YAAY9qC,GAAMwF,MACtB8yB,EAAOoF,mBAAmBvxB,aAAa,wCAC/C,MAEJ,KAAKm6D,GAAWt5D,KAAKi6D,GACrB,KAAKX,GAAWt5D,KAAKm6D,WACrB,KAAKb,GAAWt5D,KAAKo6D,GACrB,KAAKd,GAAWt5D,KAAKs6D,WACrB,KAAKhB,GAAWt5D,KAAKu6D,KACjBG,EACI3rE,KAAK6C,EACDA,EACA7C,KAAKoX,QACL8C,EAAMqC,WACNggB,EAAOoF,mBAAmBvxB,aAAa,mCACvCy7D,EACA/yD,EAAIi2B,YAAY9qC,GAAMwF,MAC9B,MAEJ,QACIkiE,EACI3rE,KAAK6C,EACDA,EACA7C,KAAKoX,QACL8C,EAAMqC,WACNggB,EAAOoF,mBAAmBvxB,aAAa,mCACvCy7D,EACA/yD,EAAIi2B,YAAY9qC,GAAMwF,MACtB8yB,EAAOoF,mBAAmBvxB,aAAa,wCAC/Cw7D,EACID,EACI7yD,EAAIi2B,YAAY9qC,GAAMwF,MACtB8yB,EAAOoF,mBAAmBvxB,aAAa,wCAGvD,MAAMvI,EAAIqS,EAAMu1B,eAAev1B,EAAM0zB,eACjC5tC,KAAKqX,QACLklB,EAAOoF,mBAAmBvxB,aAAa,mCAM3C,OALIs7D,GACA50D,EAAMu8C,YAAYv6C,EAAK8yD,EAAU/jE,EAAG,GAAI,OAAQ,CAAE3G,SAAU,SAEhE4X,EAAIg3B,SAAS7rC,EAAM0nE,EAAQ9jE,EAAI,GAC/BiR,EAAItE,UACGxU,MAGfuqE,GAAW70D,UAAY,CACnBhI,OAAQhB,EAAK8D,MACblD,KAAM,GACNC,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUqC,QAErB28D,GAAWt5D,KAAO,CACdgrC,KAAM,EACN4uB,UAAW,EACXF,WAAY,EACZI,WAAY,EACZE,YAAa,EACbC,GAAI,EACJC,WAAY,EACZC,WAAY,EACZC,GAAI,EACJC,WAAY,GACZC,WAAY,GACZC,KAAM,GACNC,QAAS,IC3JN,MAAMM,WAAqB/wB,GAC9B35C,YAAY2qE,EAASnpE,EAAGy6B,GACpB76B,QACAzC,KAAKwc,SAAS,IACdxc,KAAKgsE,QAAUA,EACfhsE,KAAK6C,EAAIA,EACT7C,KAAKisE,QAAU,EACfjsE,KAAKs9B,QAAUA,EACft9B,KAAKkW,YAEE5U,sBACP,OAAOG,EAASsqE,aAEpBG,gBAAgBF,GAEZ,OADAhsE,KAAKgsE,QAAUA,EACRhsE,KAEXyqE,UAAU5nE,GAEN,OADA7C,KAAKisE,QAAUppE,EACR7C,KAEX0qE,UAAU7iE,GAEN,OADA7H,KAAKs9B,QAAUz1B,EACR7H,KAEX2U,KAAKuF,EAAO+xD,GACR,MAAMnzD,EAAMoB,EAAMxF,eAClB1U,KAAKgV,cACL8D,EAAIlF,OACJkF,EAAIxE,aAAa,GACjBwE,EAAIxD,QAAQtV,KAAKwV,UACjB,MAGM22D,EAAmBrzD,EAAIi2B,YAAY/uC,KAAKgsE,SAGxCviE,EAFY0iE,EAAiB1iE,MAET,EACpBC,EAFayiE,EAAiBziE,OAER,EAEtB7B,EAAIqS,EAAMu1B,eAAe,GAAKzvC,KAAKs9B,QACnCz6B,EAAI7C,KAAK6C,EAAIopE,EAOnB,OANAnzD,EAAIQ,YACJR,EAAIxE,aAVc,GAWlBwE,EAAI0lD,KAAK37D,EAAGgF,EAAIskE,EAAiBtkE,EAZhB,EAY8B4B,EAAOC,GACtDoP,EAAIikB,SACJjkB,EAAIg3B,SAAS9vC,KAAKgsE,QAASnpE,EAfV,EAewBgF,GACzCiR,EAAItE,UACGxU,MAGf+rE,GAAar2D,UAAY,CACrBhI,OAAQhB,EAAKiB,WACbL,KAAM,GACNC,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUqC,QCrDd,MAAMw+D,WAAmBpxB,GAC5B35C,YAAYgrE,EAAOxpE,EAAGy6B,GAClB76B,QAEAzC,KAAKmhC,eAAiB,CAAE8V,iBAAkB,IAC1Cj3C,KAAKqsE,MAAQA,EACbrsE,KAAKyb,SAAWg/B,GAAsBx+B,MACtCjc,KAAK6C,EAAIA,EACT7C,KAAKisE,QAAU,GACfjsE,KAAKs9B,QAAUA,EACft9B,KAAKkW,YAEE5U,sBACP,OAAOG,EAAS2qE,WAEpBE,SAASD,GAEL,OADArsE,KAAKqsE,MAAQA,EACNrsE,KAEXyqE,UAAU5nE,GAEN,OADA7C,KAAKisE,QAAUppE,EACR7C,KAEX0qE,UAAU7iE,GAEN,OADA7H,KAAKs9B,QAAUz1B,EACR7H,KAEX2U,KAAKuF,EAAO+xD,GACR,MAAMnzD,EAAMoB,EAAMxF,eAClB1U,KAAKgV,cACL,MAAMkD,EAAUlY,KAAKmhC,eAGfhqB,EAAQe,EAAQ++B,iBAAmB,GACnCrqC,EAAO5M,KAAKqsE,MAAMz/D,KAClBmxB,EAAW/9B,KAAKqsE,MAAMtuC,SACtBoa,EAAOn4C,KAAKqsE,MAAMl0B,MAAQ,EAC1Bo0B,EAAMvsE,KAAKqsE,MAAME,IACvB,IAAI1pE,EAAI7C,KAAK6C,EAAI7C,KAAKisE,QAAUA,EAChC,MAAMpkE,EAAIqS,EAAMu1B,eAAe,GAAKzvC,KAAKs9B,QAOzC,GANAxkB,EAAIlF,OACAhH,IACAkM,EAAIxD,QAAQtV,KAAKwV,UACjBsD,EAAIg3B,SAASljC,EAAM/J,EAAGgF,GACtBhF,GAAKiW,EAAIi2B,YAAYniC,GAAMnD,OAE3Bs0B,GAAYwuC,EAAK,CAEjBzzD,EAAIxD,QAAQjV,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKwV,UAAW,CAAEjI,OAAQ,SAAUC,MAAO,YACnFZ,IACA/J,GAAKiW,EAAIi2B,YAAY,KAAKtlC,MAC1BqP,EAAIg3B,SAAS,IAAKjtC,EAAGgF,GACrBhF,GAAKiW,EAAIi2B,YAAY,KAAKtlC,OAE9B,MAAMlH,EAAOg6B,EAAOoa,cAAc5Y,GAKlC,GAJAl7B,GAAK,EAAIsU,EACTL,EAAMu8C,YAAYv6C,EAAKjW,EAAGgF,EAAGqQ,EAAQ++B,iBAAkB10C,EAAKg8B,WAC5D17B,GAAKN,EAAKga,WAAapF,EAEnB5U,EAAK+9B,KAAM,CACX,IAAIksC,EAAc,GACdjqE,EAAKq+B,aACL4rC,GAAe,GAAKjqE,EAAKq+B,WAAa,IAC1C4rC,GAAer1D,EACf,MAAM4wB,EAAQlgC,EAAI2kE,EAClB1zD,EAAI4kC,SAAS76C,EAAIsU,EAAO4wB,EAAO5wB,EAAOq1D,GAClCjqE,EAAKi+B,OACL1pB,EAAMu8C,YAAYv6C,EAAKjW,EAAGklC,EAAO7vB,EAAQ++B,iBAAkB10C,EAAKu+B,iBAAkB,CAC9E5/B,SAAU,oBAETi3C,IACDt1C,GAAK,EAAIsU,IAIrB,IAAK,IAAIzP,EAAI,EAAGA,EAAIywC,EAAMzwC,IACtB7E,GAAK,EAAIsU,EACT2B,EAAIQ,YACJR,EAAIg/B,IAAIj1C,EAAGgF,EAAI,EAAIsP,EAAO,EAAIA,EAAO,EAAa,EAAVhT,KAAKC,IAAQ,GACrD0U,EAAIa,OAERb,EAAIg3B,SAAS,MAAQy8B,GAAO3/D,EAAO,IAAM,IAAK/J,EAAI,EAAIsU,EAAOtP,GAGjE,OADAiR,EAAItE,UACGxU,MAGfosE,GAAW12D,UAAY,CACnBhI,OAAQhB,EAAK8D,MACblD,KAAM,GACNC,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUqC,QV1FrB,SAAWw0D,GACPA,EAAcA,EAAoB,KAAI,GAAK,OAC3CA,EAAcA,EAAsB,OAAI,GAAK,SAC7CA,EAAcA,EAAqB,MAAI,GAAK,QAHhD,CAIGA,KAAkBA,GAAgB,KAO9B,MAAMqK,WAAiB3qE,GAC1BT,YAAY60C,GAaR,GAZAzzC,MAAMyzC,GACNl2C,KAAKiE,KAAOiyC,EAAWjyC,MAAQ,GAC/BjE,KAAK0sE,YAAcx2B,EAAWw2B,YAC9B1sE,KAAK2sE,UAAYz2B,EAAWy2B,UAC5B3sE,KAAKsV,QAAQ4gC,EAAWloC,MACxBhO,KAAKkD,KAAOgzC,EAAWhzC,MAAQ,EAC/BlD,KAAK4sE,OAAS12B,EAAW02B,SAAU,EACnC5sE,KAAKuzC,aAAe2C,EAAW3C,eAAgB,EAC/CvzC,KAAK6sE,cAAgBzK,GAAczmD,KAI/Bu6B,EAAW19B,MAAO,CAClB,MAAMs0D,EAASL,GAASM,OAAO72B,EAAW19B,OAC1C,IAAKs0D,EACD,MAAM,IAAIzqE,EAAa,uBAAyB6zC,EAAW19B,OAC/DxY,KAAKwY,MAAQ,IAAI1B,EAAMg2D,EAAOvqE,KAAM,GAAI,CAAErB,SAAU,aACpDlB,KAAKwc,SAASxc,KAAKwY,MAAM1I,aAAarG,YAGtCzJ,KAAKwY,WAAQ1V,EAGVxB,sBACP,OAAOG,EAASgrE,SAETrK,2BACP,OAAOA,GAGA2K,oBACP,MAAO,CACHC,MAAO,CACHzqE,KAAM,SAEV44B,GAAI,CACA54B,KAAM,iBAEVw4B,QAAS,CACLx4B,KAAM,mBAEV0qE,cAAe,CACX1qE,KAAM,sBAEV2qE,cAAe,CACX3qE,KAAM,mBAEVgF,EAAG,CACChF,KAAM,gBAEV4qE,EAAG,CACC5qE,KAAM,gBAEVqf,EAAG,CACCrf,KAAM,gBAEV8E,EAAG,CACC9E,KAAM,oBAEV6qE,EAAG,CACC7qE,KAAM,YAEV8qE,KAAM,CACF9qE,KAAM,QAEV+qE,WAAY,CACR/qE,KAAM,oBAEVgrE,YAAa,CACThrE,KAAM,mBAEVirE,iBAAkB,CACdjrE,KAAM,WAEVkrE,eAAgB,CACZlrE,KAAM,iBAEVmrE,OAAQ,CACJnrE,KAAM,mBAEVwuD,KAAM,CACFxuD,KAAM,kBAEV04B,KAAM,CACF14B,KAAM,gBAEV24B,cAAe,CACX34B,KAAM,sBAKlBmsC,iBAAiBH,GAEb,OADAvuC,KAAK6sE,cAAgBt+B,EACdvuC,KAGXg0D,QAAQ9wD,GAEJ,OADAlD,KAAKkD,KAAOA,EACLlD,KAGXy1C,YACI,GAAIz1C,KAAK01C,aACL,OACJ,MAAM93B,EAAc5d,KAAKg0C,iBAAiB,0CAC1C,GAAIh0C,KAAK4sE,OACL5sE,KAAKwc,SAAS,QAGd,GAAIxc,KAAKwY,WAGJ,CACD,MAAMM,EAAM9Y,KAAK0U,eACjBoE,EAAIxD,QAAQtV,KAAKwV,UACjBxV,KAAKwc,SAAS1D,EAAIi2B,YAAY/uC,KAAKiE,MAAMwF,OAG7CzJ,KAAK6sE,gBAAkBzK,GAAcrmD,OACrC/b,KAAK82C,oBAAsB92C,KAAKyJ,MAAQ,EAEnCzJ,KAAK6sE,gBAAkBzK,GAAc9lD,QAC1Ctc,KAAK82C,oBAAsB92C,KAAKyJ,OAGpCzJ,KAAK+2C,qBAAuBn5B,EAAY9N,aAAaoqC,QAAU,EAC/Dl6C,KAAK01C,cAAe,EAMxB/gC,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXwF,EAAQla,KAAK+a,aACb6C,EAAc5d,KAAKg0C,iBAAiB,qCAC1Ch0C,KAAKgV,cAEL,IAAInS,EAAI7C,KAAKi2C,eAAiBr4B,EAAY9N,aAAaoqC,QAAU,EAEjE,MAAMzwC,EAAQzJ,KAAKuc,WAOnB,IAAI1U,EACJ,GAPI7H,KAAK6sE,gBAAkBzK,GAAcrmD,OACrClZ,GAAK4G,EAAQ,EAERzJ,KAAK6sE,gBAAkBzK,GAAc9lD,QAC1CzZ,GAAK4G,GAGLzJ,KAAKwY,MACL3Q,EAAIqS,EAAMuoB,YAAYziC,KAAKkD,MAAQ,GACnClD,KAAKwY,MAAMoC,OAAO9B,EAAKjW,EAAGgF,OAEzB,CACDA,EAAIqS,EAAMuoB,YAAYziC,KAAKkD,MAAQ,GACnClD,KAAK0T,WAAWoF,GAChBA,EAAIxD,QAAQtV,KAAKwV,UACjBsD,EAAIg3B,SAAS9vC,KAAKiE,KAAMpB,EAAGgF,GAC3B,MAAM6B,EAASoP,EAAIi2B,YAAY/uC,KAAKiE,MAAMyF,QAGpC,OAAEgE,EAAM,KAAEJ,EAAI,OAAEC,EAAM,MAAEC,GAAUxN,KAAKwV,SAEvC2wC,EAAkBz5C,EAAKq1C,UAAUz0C,EAAM,SACzCtN,KAAK0sE,cACL5zD,EAAIxD,QAAQ5H,EAAQy4C,EAAiB54C,EAAQC,GAC7CsL,EAAIg3B,SAAS9vC,KAAK0sE,YAAa7pE,EAAI7C,KAAKyJ,MAAQ,EAAG5B,EAAI6B,EAAS,MAEhE1J,KAAK2sE,YACL7zD,EAAIxD,QAAQ5H,EAAQy4C,EAAiB54C,EAAQC,GAC7CsL,EAAIg3B,SAAS9vC,KAAK2sE,UAAW9pE,EAAI7C,KAAKyJ,MAAQ,EAAG5B,EAAI6B,EAAS,IAAM,IAExE1J,KAAKuU,aAAauE,KAI9B2zD,GAAS/2D,UAAY,CACjBhI,OAAQhB,EAAKiB,WACbL,KAAM,GACNC,OAAQjC,EAAWsC,OACnBJ,MAAOjC,EAAUqC,QWlMd,MAAM+/D,WAAkB3yB,GAC3B35C,YAAY4C,EAAMwX,EAAUvD,EAAU,IAClCzV,QACAzC,KAAKwc,SAAS,IACdxc,KAAKiE,KAAOA,EACZjE,KAAKyb,SAAWA,EAChBzb,KAAKkY,QAAU7X,OAAO0V,OAAO,CAAEk2D,QAAS,EAAG3uC,QAAS,EAAGuvC,cAAeJ,GAASrK,cAAcrmD,QAAU7D,GACvGlY,KAAKkW,YAEE5U,sBACP,OAAOG,EAASksE,UAEpBC,aAAa3pE,GAET,OADAjE,KAAKiE,KAAOA,EACLjE,KAEXyqE,UAAU5nE,GAEN,OADA7C,KAAKisE,QAAUppE,EACR7C,KAEX0qE,UAAU7iE,GAEN,OADA7H,KAAKs9B,QAAUz1B,EACR7H,KAEX6tE,QAAQ5pE,GAEJ,OADAjE,KAAKiE,KAAOA,EACLjE,KAEX2U,KAAKuF,GACD,MAAMpB,EAAMoB,EAAMxF,eAClB1U,KAAKgV,cACL8D,EAAIlF,OACJkF,EAAIxE,aAAa,GACjBwE,EAAIxD,QAAQtV,KAAKwV,UACjB,MAAMs5B,EAAah2B,EAAIi2B,YAAY,GAAK/uC,KAAKiE,MAAMwF,MACnD,IAAI5G,EACAgF,EACJ,OAAQ7H,KAAKyb,UACT,KAAKg/B,GAAsB9+B,KAC3B,KAAK8+B,GAAsBn+B,MACvBzU,GAAKqS,EAAMuoB,YAAY,GAAKvoB,EAAM4zD,kBAAoB,EAAI9tE,KAAKkY,QAAQolB,QAEnEz6B,EADA7C,KAAKyb,WAAag/B,GAAsB9+B,KACpCzB,EAAMjS,OAAS6mC,EAAa,GAAK9uC,KAAKkY,QAAQ+zD,QAG9C/xD,EAAMjS,OAASiS,EAAMqC,WAAa,GAAKvc,KAAKkY,QAAQ+zD,QAE5D,MACJ,KAAKxxB,GAAsBx+B,MAC3B,KAAKw+B,GAAsBt+B,MACvBtZ,EAAIqX,EAAMjS,OAASjI,KAAKkY,QAAQ+zD,QAC5BjsE,KAAKkY,QAAQ20D,gBAAkBzK,GAAcrmD,OAC7ClZ,GAAKqX,EAAMqC,WAAa,EAAIuyB,EAAa,EAEpC9uC,KAAKkY,QAAQ20D,gBAAkBzK,GAAc9lD,QAClDzZ,GAAKqX,EAAMqC,WAAauyB,GAGxBjnC,EADA7H,KAAKyb,WAAag/B,GAAsBx+B,MACpC/B,EAAMu1B,eAAe,GAAKzvC,KAAKkY,QAAQolB,QAGvCpjB,EAAMw1B,kBAAkB,GAAK1vC,KAAKkY,QAAQolB,QAElD,MACJ,QACI,MAAM,IAAIj7B,EAAa,kBAAmB,uCAIlD,OAFAyW,EAAIg3B,SAAS,GAAK9vC,KAAKiE,KAAMpB,EAAGgF,EAAI,GACpCiR,EAAItE,UACGxU,MAGf2tE,GAAUj4D,UAAY,CAClBhI,OAAQhB,EAAK8D,MACblD,KAAM,GACNC,OAAQjC,EAAWsC,OACnBJ,MAAOjC,EAAUqC,QV7ErB,SAAWy0D,GACPA,EAAUA,EAAgB,KAAI,GAAK,OACnCA,EAAUA,EAAiB,MAAI,GAAK,QACpCA,EAAUA,EAAe,IAAI,GAAK,MAClCA,EAAUA,EAAe,IAAI,GAAK,MAClCA,EAAUA,EAAqB,UAAI,GAAK,YAL5C,CAMGA,KAAcA,GAAY,KACtB,MAAM0L,WAAc/yB,GACvB35C,YAAY4P,EAAMo4C,EAAQxmD,EAAGwU,GACzB5U,QACAzC,KAAKguE,MAAQ/8D,EACbjR,KAAK6C,EAAIA,EACT7C,KAAKqX,QAAUA,EACfrX,KAAKqpD,OAASA,EACdrpD,KAAKkW,YAEE5U,sBACP,OAAOG,EAASssE,MAET98D,kBACP,OAAOoxD,GAEXqI,UAAU7iE,GAEN,OADA7H,KAAKqX,QAAUxP,EACR7H,KAEX2U,KAAKuF,EAAOrX,GACR,MAAMiW,EAAMoB,EAAMxF,eAClB1U,KAAKgV,cACL,IAAIvL,EAAQyQ,EAAMqC,WAAa1Z,EAC/B,MAAMorE,EAAQ/zD,EAAMu1B,eAAev1B,EAAM0zB,eAAiB5tC,KAAKqX,QACzD62D,EAAc,IAAMh0D,EAAMsoB,yBAChC,OAAQxiC,KAAKguE,OACT,KAAK3L,GAAU7lB,MACX1jC,EAAI4kC,SAAS19C,KAAK6C,EAAIA,EAAGorE,EAAO,EAAGC,GACnC,MACJ,KAAK7L,GAAUxmB,IACXpyC,GAAS,EACTqP,EAAI4kC,SAAS19C,KAAK6C,EAAIA,EAAI4G,EAAOwkE,EAAO,EAAGC,GAC3C,MACJ,KAAK7L,GAAU8L,UACX1kE,GAAS,EACTqP,EAAI4kC,SAAS19C,KAAK6C,EAAIA,EAAGorE,EAAO,EAAGC,GACnCp1D,EAAI4kC,SAAS19C,KAAK6C,EAAIA,EAAI4G,EAAOwkE,EAAO,EAAGC,GAanD,OAPIluE,KAAKguE,QAAU3L,GAAU7lB,OAASx8C,KAAKguE,QAAU3L,GAAU8L,YAC3Dr1D,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKwV,UACjBsD,EAAIg3B,SAAS9vC,KAAKqpD,OAAQrpD,KAAK6C,EAAIA,EAAI,EAAGorE,EAAQ,IAClDn1D,EAAItE,WAERsE,EAAI4kC,SAAS19C,KAAK6C,EAAIA,EAAGorE,EAAOxkE,EAAO,GAChCzJ,MAGf+tE,GAAMr4D,UAAY,CACdhI,OAAQhB,EAAKiB,WACbL,KAAM,EACNC,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUqC,QW9Dd,MAAMwgE,WAA2Bt3D,EACpCzV,YAAYgtE,EAAeC,EAAWC,EAAWhsE,EAAMsU,EAAOqB,GAC1D,IAAInL,EACJtK,MAAMF,EAAMsU,EAAOqB,GACnBlY,KAAKquE,cAAgBA,EACrBruE,KAAKmY,UAAY,GACjBnY,KAAKoY,UAAY,GACjB,IAAIo2D,EAAW,EACf,IAAK,IAAI9mE,EAAI,EAAGA,EAAI4mE,EAAUxpE,SAAU4C,EAAG,CACvC,IAAI+mE,EAAcH,EAAU5mE,GAC5B,OAAQ4mE,EAAU5mE,IACd,IAAK,IACD+mE,EAAc,QACd,MACJ,IAAK,IACDA,EAAcF,EAAUzpE,OAAS,EAAI,YAAc,OACnD,MACJ,IAAK,IACD2pE,EAAcF,EAAUzpE,OAAS,EAAI,kBAAoB,aACzD,MACJ,IAAK,IACD2pE,EAAcF,EAAUzpE,OAAS,EAAI,mBAAqB,cAGlE,MAAM4pE,EAAW,IAAI53D,EAAM,UAAY23D,EAAazuE,KAAKquE,cAAcx3D,OACvE7W,KAAKmY,UAAUN,KAAK62D,GACpBF,GAAmD,QAAtCzhE,EAAK2hE,EAAS5+D,aAAarG,aAA0B,IAAPsD,EAAgBA,EAAK,EAEpF,IAAI4hE,EAAW,EACf,IAAK,IAAIjnE,EAAI,EAAGA,EAAI6mE,EAAUzpE,SAAU4C,EAAG,CACvC,IAAI+mE,EAAcF,EAAU7mE,GAC5B,OAAQ6mE,EAAU7mE,IACd,IAAK,IACD+mE,EAAc,YACd,MACJ,IAAK,IACDA,EAAc,kBACd,MACJ,IAAK,IACDA,EAAc,mBAGtB,MAAMG,EAAW,IAAI93D,EAAM,UAAY23D,EAAazuE,KAAKquE,cAAcx3D,OACvE7W,KAAKoY,UAAUP,KAAK+2D,GACpBD,GAAY/rE,EAAQgsE,EAAS9+D,aAAarG,OAE9CzJ,KAAKyJ,MAAQtF,KAAK4E,IAAIylE,EAAUG,GAChC3uE,KAAKo8C,KAAOp8C,KAAK8P,aAAa4I,MAC9B1Y,KAAK6uE,WAAa7uE,KAAKyJ,MAAQ+kE,GAAY,EAC3CxuE,KAAK8uE,WAAa9uE,KAAKyJ,MAAQklE,GAAY,EAC3C3uE,KAAKuY,QAETzI,aACI,MAAO,CACH4I,MAAO1Y,KAAKo8C,KACZzjC,MAAO3Y,KAAKo8C,KAAOp8C,KAAKyJ,MACxBA,MAAOzJ,KAAKyJ,OAGpBuR,cAAcnY,GACV,MAAMqX,EAAQla,KAAK+a,aACbjC,EAAM9Y,KAAK0U,eACjB,IAAIq6D,EAAUlsE,EAAI7C,KAAK6uE,UACnBhnE,EAAI,EAEJA,EADA7H,KAAKoY,UAAUtT,OAAS,EACpBoV,EAAMuoB,YAAYziC,KAAKquE,cAAcW,UAEpC90D,EAAMuoB,YAAYziC,KAAKquE,cAAcW,SAAW90D,EAAMuoB,YAAYziC,KAAKquE,cAAcY,aAAe,EAC7G,IAAK,IAAIvnE,EAAI,EAAGA,EAAI1H,KAAKmY,UAAUrT,SAAU4C,EAAG,CAC5C,MAAM8Q,EAAQxY,KAAKmY,UAAUzQ,GAC7BoP,EAAMsC,cAAcN,EAAKN,EAAM1I,aAAaoH,QAASlX,KAAKmX,MAAO43D,EAAU/uE,KAAKoX,QAASvP,GACzFknE,GAAWnsE,EAAQ4V,EAAM1I,aAAarG,OAE1CslE,EAAUlsE,EAAI7C,KAAK8uE,UACnBjnE,EAAIqS,EAAMuoB,YAAYziC,KAAKquE,cAAcY,YACzC,IAAK,IAAIvnE,EAAI,EAAGA,EAAI1H,KAAKoY,UAAUtT,SAAU4C,EAAG,CAC5C,MAAM8Q,EAAQxY,KAAKoY,UAAU1Q,GAC7B1H,KAAKquE,cAAcpzB,iBAAiBziC,EAAO0B,EAAO,GAClDpD,EAAMsC,cAAcN,EAAKN,EAAM1I,aAAaoH,QAASlX,KAAKmX,MAAO43D,EAAUv2D,EAAM1I,aAAasH,QAASvP,GACvGknE,GAAWnsE,EAAQ4V,EAAM1I,aAAarG,SC9D3C,MAAMylE,WAAsBl0B,GAC/B35C,YAAY8tE,EAAW,MAAOC,EAAgB,GAAIC,GAAgB,GAC9D5sE,QACAzC,KAAKqvE,cAAgBA,EACrB,MAAMn9B,EAAUk9B,EACV1tC,EAAYnF,EAAOoF,mBACzB3hC,KAAK6W,MAAQ6qB,EAAUtxB,aAAa,gBACpC,MAAMk/D,EAAgB5tC,EAAUtxB,aAAa,mBAAoB,GACjEpQ,KAAKgvE,QAAU,EAAIM,EACnBtvE,KAAKivE,WAAa,EAAIK,EACtBtvE,KAAKqd,YAAYo9B,GAAsB+B,OACvCx8C,KAAK6S,KAAO7S,KAAKuvE,cAAcJ,GAC/BnvE,KAAKwc,SAAS5Z,EAAQ5C,KAAK6S,KAAK2F,MAAM1I,aAAarG,QACnDzJ,KAAKo7C,WAAWlJ,GAET5wC,sBACP,OAAOG,EAASytE,cAET/+D,oBACP,MAAO,CACH+V,EAAG,CACC3jB,KAAM,gBACNsU,MAAO,GACP3T,KAAM,GAEV,KAAM,CACFX,KAAM,mBACNsU,MAAO,GACP3T,KAAM,IAIlBqsE,cAAcJ,GACV,IAAIpiE,EAAIkF,EACR,GAAiB,MAAbk9D,GAAiC,OAAbA,EAAmB,CACvC,MAAM,KAAEjsE,EAAI,KAAEX,EAAI,MAAEsU,GAAUq4D,GAAc/+D,OAAOg/D,GACnD,MAAO,CACHjsE,KAAAA,EACAijB,KAAK,EACL3N,MAAO,IAAI1B,EAAMvU,EAAMsU,IAG3B7W,KAAKqvE,eAtDY,CAACF,IAC1B,MAAMK,EAAUL,EAASxnE,MAAM,KAC/B,GAAuB,IAAnB6nE,EAAQ1qE,QAA+B,MAAf0qE,EAAQ,IAA6B,MAAfA,EAAQ,GACtD,MAAM,IAAIntE,EAAa,mBAAoB,sBAAsB8sE,sDAErEK,EAAQtxD,SAASmrC,IAEb,GAAoC,GAAhC,gBAAgBomB,KAAKpmB,GACrB,MAAM,IAAIhnD,EAAa,mBAAoB,sBAAsB8sE,yCA+CjEO,CAAqBP,GAEzB,MAAMv3D,EAAQu3D,EAASxnE,MAAM,KAC7B,MAAO,CACHwe,KAAK,EACL3N,MAAOxY,KAAK2vE,uBAA2C,QAAnB5iE,EAAK6K,EAAM,UAAuB,IAAP7K,EAAgBA,EAAK,GAAwB,QAAnBkF,EAAK2F,EAAM,UAAuB,IAAP3F,EAAgBA,EAAK,KAGjJ09D,uBAAuBrB,EAAWC,GAC9B,OAAO,IAAIH,GAAmBpuE,KAAMsuE,EAAWC,EAAW,WAAYvuE,KAAK6W,OAE/E+4D,UACI,OAAO5vE,KAAK6S,KAEhBg9D,WAAWV,GAEP,OADAnvE,KAAK6S,KAAO7S,KAAKuvE,cAAcJ,GACxBnvE,KAEX2U,OACI,MAAMuF,EAAQla,KAAK+a,aACbjC,EAAMoB,EAAMxF,eAClB1U,KAAKgV,cACL8D,EAAI+1B,UAAU,gBAAiB7uC,KAAK6R,aAAa,OACjD7R,KAAK6S,KAAK2F,MAAMyB,SAASC,GACzBla,KAAK6S,KAAK2F,MAAMnD,WAAWyD,GAC3B9Y,KAAKi7C,iBAAiBj7C,KAAK6S,KAAK2F,MAAO0B,EAAOla,KAAK6S,KAAK3P,MACxDlD,KAAK6S,KAAK2F,MAAMwC,cAAchb,KAAK6C,GACnCiW,EAAIi3B,cCzEZ,MAAM+/B,GAA2B,CAC7B,CAACpuE,GAAQJ,UAAW,EACpB,CAAC8mE,GAAK9mE,UAAW,EACjB,CAAConE,GAAapnE,UAAW,EACzB,CAAC4tE,GAAc5tE,UAAW,GAExByuE,GAA2B,CAC7B,CAACb,GAAc5tE,UAAW,EAC1B,CAAConE,GAAapnE,UAAW,EACzB,CAACI,GAAQJ,UAAW,EACpB,CAAC8mE,GAAK9mE,UAAW,GAEd,MAAM0uE,WAAcj9D,EACvB1R,YAAYwB,EAAGgF,EAAG4B,EAAOyO,GACrBzV,QAEAzC,KAAK0J,OAAS,EACd1J,KAAK6C,EAAIA,EACT7C,KAAK6H,EAAIA,EACT7H,KAAKyJ,MAAQA,EACbzJ,KAAKioE,WAAY,EACjBjoE,KAAK+uE,QAAUlsE,EAAI,EACnB7C,KAAKiwE,MAAQptE,EAAI4G,EACjBzJ,KAAKmzC,UAAY,GACjBnzC,KAAKkwE,QAAU,EACflwE,KAAKw8B,KAAO,SACZx8B,KAAKmwE,aAAUrtE,EACf9C,KAAKkW,YACLlW,KAAKkY,QAAU7X,OAAO0V,OAAO,CAAEq6D,mBAAoB,GAAIC,UAAW,EAAGC,WAAY,UAAWC,UAAU,EAAMC,WAAW,EAAMC,yBAA0Bl0C,EAAOuC,oBAAqB4xC,qBAAsB,EAAGC,qBAAsB,EAAGC,kBAAmB,EAAGC,qBAAsB,EAAGC,YAAa,IAAM54D,GACvSlY,KAAK+wE,OAAS,CAAEluE,EAAG7C,KAAK6C,EAAGgF,EAAG7H,KAAK6H,EAAGC,EAAG9H,KAAKyJ,MAAO1B,EAAG,GACxD/H,KAAKgxE,uBAAyB,CAAE78D,YAAa,OAAQE,UAAW,KAChErU,KAAKixE,aAELjxE,KAAK4mC,YAAY,IAAIllC,GAAQ1B,KAAKkY,QAAQq4D,SAAW71B,GAAYiB,OAASjB,GAAYuB,OAEtFj8C,KAAKkxE,eAAe,IAAIxvE,GAAQ1B,KAAKkY,QAAQs4D,UAAY91B,GAAYiB,OAASjB,GAAYuB,OAEnF36C,sBACP,OAAOG,EAASuuE,MAITmB,4BACP,MAAMzvC,EAAYnF,EAAOoF,mBACzB,OAAOD,EAAUtxB,aAAa,iBAAmBsxB,EAAUtxB,aAAa,uBAGjEi1D,0BAEP,OADkB9oC,EAAOoF,mBACRvxB,aAAa,uBAGlCghE,0BAA0B5jE,GACtBxN,KAAKgxE,uBAAyBxjE,EAGlCuuD,4BACI,OAAO17D,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKyT,YAAazT,KAAKgxE,wBAElEr9B,MAAMxE,GACF,OAAOnvC,KAAKkY,QAAQu4D,yBAA2BthC,EAEnD8hC,aACIjxE,KAAKkY,QAAQ44D,YAAc,GAC3B,IAAK,IAAIppE,EAAI,EAAGA,EAAI1H,KAAKkY,QAAQm4D,UAAW3oE,IACxC1H,KAAKkY,QAAQ44D,YAAYj5D,KAAK,CAAEw5D,SAAS,IAE7CrxE,KAAK0J,QAAU1J,KAAKkY,QAAQm4D,UAAYrwE,KAAKkY,QAAQw4D,sBAAwB1wE,KAAKkY,QAAQu4D,yBAC1FzwE,KAAKkY,QAAQ24D,qBAAuB7wE,KAAKkY,QAAQm4D,UAErDiB,cAAczuE,GACL7C,KAAKioE,WACNjoE,KAAKsuD,SACTtuD,KAAK+uE,QAAUlsE,EACf,MAAM0uE,EAAavxE,KAAKmzC,UAAU,GAElC,OADAo+B,EAAWlpE,KAAKrI,KAAK+uE,QAAUwC,EAAWh1D,YACnCvc,KAEXm6C,gBAGI,OAFKn6C,KAAKioE,WACNjoE,KAAKsuD,SACFtuD,KAAK+uE,QAEhByC,cAGI,OAFKxxE,KAAKioE,WACNjoE,KAAKsuD,SACFtuD,KAAKiwE,MAEhB/kB,eACI,OAAOlrD,KAAK+uE,QAEhB5jB,aACI,OAAOnrD,KAAKiwE,MAEhBhoE,OACI,OAAOjI,KAAK6C,EAEhB+qC,cACI,OAAO5tC,KAAKkY,QAAQm4D,UAExBoB,YAAY3tE,GAGR,OAFA9D,KAAKkY,QAAQm4D,UAAYvsE,EACzB9D,KAAKixE,aACEjxE,KAEXsI,KAAKT,GAED,OADA7H,KAAK6H,EAAIA,EACF7H,KAEXkI,OACI,OAAOlI,KAAK6H,EAEhB8nC,iBACI,OAAO3vC,KAAKyiC,YAAY,GAAKlG,EAAOqC,qBAAuB,EAE/D6e,uBACI,OAAOz9C,KAAKyiC,YAAYziC,KAAK4tC,cAAgB,GAAKrR,EAAOqC,qBAAuB,EAEpFv2B,KAAKxF,GACD,MAAMmC,EAAQnC,EAAI7C,KAAK6C,EACvB7C,KAAKioE,WAAY,EACjBjoE,KAAK6C,EAAIA,EACT7C,KAAK+uE,SAAW/pE,EAChBhF,KAAKiwE,OAASjrE,EACd,IAAK,IAAI0C,EAAI,EAAGA,EAAI1H,KAAKmzC,UAAUruC,OAAQ4C,IAAK,CAC5C,MAAMgqE,EAAM1xE,KAAKmzC,UAAUzrC,GAC3BgqE,EAAIrpE,KAAKqpE,EAAIzpE,OAASjD,GAE1B,OAAOhF,KAEXwc,SAAS/S,GAML,OALAzJ,KAAKioE,WAAY,EACjBjoE,KAAKyJ,MAAQA,EACbzJ,KAAKiwE,MAAQjwE,KAAK6C,EAAI4G,EAGfzJ,KAEXuc,WACI,OAAOvc,KAAKyJ,MAEhBgK,WACI,OAAOpT,OAAO0V,OAAO,CAAE9B,UAAWjU,KAAKkY,QAAQo4D,WAAYn8D,YAAanU,KAAKkY,QAAQo4D,WAAYj8D,UAAWkoB,EAAOqC,sBAAwB5+B,KAAKwN,OAEpJmkE,WAAWzB,GAEP,OADAlwE,KAAKkwE,QAAUA,EACRlwE,KAQX4xE,kBAAkBxgE,EAAQ,GACtB,GAAqB,iBAAVA,EACP,MAAM,IAAI/O,EAAa,eAAgB,0BAI3C,GAFKrC,KAAKioE,WACNjoE,KAAKsuD,SACqD,IAA1DtuD,KAAKymC,aAAagU,GAAsB+B,OAAO13C,OAC/C,OAAO,EAGX,GAAI9E,KAAKmzC,UAAU/hC,GAAOgM,gBAAkBq9B,GAAsBn+B,MAC9D,OAAO,EAEX,IAAIyyD,EAAU/uE,KAAK+uE,QAAU/uE,KAAK6C,EAClC,MAAM0uE,EAAavxE,KAAKmzC,UAAU,GAIlC,OAHIo+B,EAAWr0B,YAAcxC,GAAYoB,cAAgBizB,EAAUwC,EAAWh1D,aAC1EwyD,GAAWwC,EAAWh1D,YAEnBwyD,EAGX8C,kBAAkB5gE,EAAMyJ,EAAS,GAE7B,OADA1a,KAAKmzC,UAAUt7B,KAAK,IAAI0yD,GAAWt5D,EAAMjR,KAAK6C,EAAG6X,IAC1C1a,KAGX8xE,aAAa7gE,EAAM8gE,EAAUlqE,GAEzB,OADA7H,KAAKmzC,UAAUt7B,KAAK,IAAIk2D,GAAM98D,EAAM8gE,EAAU/xE,KAAK6C,EAAGgF,IAC/C7H,KAGXgyE,WAAWhG,EAASnkE,EAAG4nD,EAAU,EAAG5iD,GAChC,MAAMolE,EAAe,IAAIlG,GAAaC,EAAShsE,KAAK6C,EAAI4sD,EAAS5nD,GAIjE,OAHIgF,GACAolE,EAAa97D,YAAYtJ,GAC7B7M,KAAKmzC,UAAUt7B,KAAKo6D,GACbjyE,KAGXssE,SAASD,EAAOxkE,GAEZ,OADA7H,KAAKmzC,UAAUt7B,KAAK,IAAIu0D,GAAWC,EAAOrsE,KAAK6C,EAAGgF,IAC3C7H,KAGX6tE,QAAQ5pE,EAAMwX,EAAUvD,EAAU,IAE9B,OADAlY,KAAKmzC,UAAUt7B,KAAK,IAAI81D,GAAU1pE,EAAMwX,EAAUvD,IAC3ClY,KAEXipC,YACI,OAAOjpC,KAAK0J,OAEhB84B,yBACI,OAAOxiC,KAAKkY,QAAQu4D,yBAExBt7D,iBACI,OAAO,IAAIvN,EAAY5H,KAAK6C,EAAG7C,KAAK6H,EAAG7H,KAAKyJ,MAAOzJ,KAAKuyC,aAAevyC,KAAK6H,GAEhF0qC,aACI,MAAMr6B,EAAUlY,KAAKkY,QACfi3B,EAAUj3B,EAAQu4D,yBAExB,OADqBzwE,KAAKyiC,YAAYvqB,EAAQm4D,WAAan4D,EAAQy4D,qBAAuBxhC,EAG9F2+B,iBACI,OAAO9tE,KAAKyiC,YAAYziC,KAAKkY,QAAQm4D,WAIzC5tC,YAAYv/B,GACR,MAAMgV,EAAUlY,KAAKkY,QACfi3B,EAAUj3B,EAAQu4D,yBAClByB,EAAWh6D,EAAQw4D,qBAEzB,OADU1wE,KAAK6H,EAAI3E,EAAOisC,EAAU+iC,EAAW/iC,EAGnDgjC,YAAYtqE,GAGR,MAAMqQ,EAAUlY,KAAKkY,QACfi3B,EAAUj3B,EAAQu4D,yBAClByB,EAAWh6D,EAAQw4D,qBACzB,OAAQ7oE,EAAI7H,KAAK6H,GAAKsnC,EAAU+iC,EAEpCziC,eAAevsC,EAAO,GAClB,OAAOlD,KAAKyiC,aAAav/B,EAAOlD,KAAKkY,QAAQ04D,mBAEjDlhC,kBAAkBxsC,EAAO,GACrB,OAAOlD,KAAKyiC,YAAYziC,KAAKkY,QAAQ24D,qBAAuB3tE,GAEhEoxD,YAAYpxD,GACR,MAAMgV,EAAUlY,KAAKkY,QACfi3B,EAAUj3B,EAAQu4D,yBAClByB,EAAWh6D,EAAQw4D,qBACzB,OAAO1wE,KAAK6H,EAAIqqE,EAAW/iC,EAAU,EAAIA,EAAUjsC,EAAOisC,EAE9Dl0B,gBACI,OAAOjb,KAAKyiC,YAAY,GAI5BmE,YAAYF,EAAUjrB,GAOlB,YANiB3Y,IAAb2Y,GACAirB,EAASrpB,YAAY5B,GAEzBirB,EAASzsB,SAASja,MAClBA,KAAKioE,WAAY,EACjBjoE,KAAKmzC,UAAUt7B,KAAK6uB,GACb1mC,KAEXkxE,eAAexqC,GAEX,OADA1mC,KAAK4mC,YAAYF,EAAU+T,GAAsBoB,KAC1C77C,KAGXoyE,cAAcnhE,GAEV,MAAM,OAAE0qC,EAAM,aAAEG,EAAY,KAAEG,GAASvB,GAKvC,OAJIzpC,IAAS0qC,GAAU1qC,IAAS6qC,GAAgB7qC,IAASgrC,IACrDj8C,KAAKmzC,UAAU,GAAGsJ,QAAQxrC,GAC1BjR,KAAKioE,WAAY,GAEdjoE,KAEXqyE,cAAcphE,GAMV,OAJIA,IAASypC,GAAYoB,eACrB97C,KAAKmzC,UAAU,GAAGsJ,QAAQxrC,GAC1BjR,KAAKioE,WAAY,GAEdjoE,KAEXsyE,QAAQC,EAAUjlE,EAAM2/B,EAAYxxB,QACf3Y,IAAb2Y,IACAA,EAAWg/B,GAAsB+B,OAEjC/gC,IAAag/B,GAAsBoB,IACnC77C,KAAKmwE,QAAUoC,EAGfvyE,KAAKw8B,KAAO+1C,EAEhB,MAAM5qD,EAAQ3nB,KAAKymC,aAAahrB,EAAU2sD,GAAK9mE,UAO/C,OANqB,IAAjBqmB,EAAM7iB,OACN9E,KAAKwyE,QAAQD,EAAUjlE,EAAM2/B,EAAYxxB,GAGzCkM,EAAM,GAAG80B,QAAQ81B,EAAUjlE,EAAM2/B,GAE9BjtC,KAEXsqE,UACI,OAAOtqE,KAAKw8B,KAEhBi2C,WAAWF,EAAUjlE,EAAM2/B,GAEvB,OADAjtC,KAAKsyE,QAAQC,EAAUjlE,EAAM2/B,EAAYwN,GAAsBoB,KACxD77C,KAEXqqE,aACI,OAAOrqE,KAAKmwE,QAEhBuC,gBAAgB90C,EAAS+qC,EAAeltD,QACnB3Y,IAAb2Y,IACAA,EAAWg/B,GAAsB+B,OAErC,MAAMv2B,EAAgBjmB,KAAKymC,aAAahrB,EAAUitD,GAAapnE,UAO/D,OAN6B,IAAzB2kB,EAAcnhB,OACd9E,KAAK2yE,gBAAgB/0C,EAAS+qC,EAAeltD,GAG7CwK,EAAc,GAAG4iD,UAAUjrC,EAAS+qC,GAEjC3oE,KAEX4yE,mBAAmBh1C,EAAS+qC,GAExB,OADA3oE,KAAK0yE,gBAAgB90C,EAAS+qC,EAAeluB,GAAsBoB,KAC5D77C,KAEX6yE,iBAAiB1D,EAAUC,EAAe3zD,QACrB3Y,IAAb2Y,IACAA,EAAWg/B,GAAsB+B,OAErC,MAAMs2B,EAAiB9yE,KAAKymC,aAAahrB,EAAUyzD,GAAc5tE,UAOjE,OAN8B,IAA1BwxE,EAAehuE,OACf9E,KAAK+yE,iBAAiB5D,EAAUC,EAAe3zD,GAG/Cq3D,EAAe,GAAGjD,WAAWV,GAE1BnvE,KAEXgzE,oBAAoB7D,EAAUC,GAE1B,OADApvE,KAAK6yE,iBAAiB1D,EAAUC,EAAe30B,GAAsBoB,KAC9D77C,KAYX2yE,gBAAgB/0C,EAAS+qC,EAAeltD,GAKpC,YAJiB3Y,IAAb2Y,IACAA,EAAWg/B,GAAsB+B,OAErCx8C,KAAK4mC,YAAY,IAAI8hC,GAAa9qC,EAAS+qC,GAAetrD,YAAY5B,GAAWA,GAC1Ezb,KAcXwyE,QAAQh2C,EAAMlvB,EAAM2/B,EAAYxxB,GAQ5B,YAPiB3Y,IAAb2Y,GAA0BA,IAAag/B,GAAsB+B,MAC7Dx8C,KAAKw8B,KAAOA,EAEP/gB,IAAag/B,GAAsBoB,MACxC77C,KAAKmwE,QAAU3zC,GAEnBx8B,KAAK4mC,YAAY,IAAIwhC,GAAK5rC,EAAMlvB,EAAM2/B,GAAaxxB,GAC5Czb,KAEXizE,WAAWz2C,EAAMlvB,EAAM2/B,GAEnB,OADAjtC,KAAKwyE,QAAQh2C,EAAMlvB,EAAM2/B,EAAYwN,GAAsBoB,KACpD77C,KAaX+yE,iBAAiB5D,EAAUC,EAAe3zD,GAEtC,OADAzb,KAAK4mC,YAAY,IAAIsoC,GAAcC,EAAUC,GAAgB3zD,GACtDzb,KAEXkzE,oBAAoB/D,EAAUC,GAE1B,OADApvE,KAAK+yE,iBAAiB5D,EAAUC,EAAe30B,GAAsBoB,KAC9D77C,KAGXmzE,iBAEI,OADAnzE,KAAKwyE,QAAQ,UACNxyE,KAOXymC,aAAahrB,EAAUva,GACnB,MAAMkyE,OAA0BtwE,IAAb2Y,EACb43D,OAA0BvwE,IAAb5B,EACnB,OAAIkyE,GAAcC,EACPrzE,KAAKmzC,UAEPigC,EAEEpzE,KAAKmzC,UAAUyd,QAAQhvC,GAAM1gB,IAAa0gB,EAAEzO,gBAE9CkgE,EAEErzE,KAAKmzC,UAAUyd,QAAQhvC,GAAMnG,IAAamG,EAAExE,gBAI5Cpd,KAAKmzC,UAAUyd,QAAQhvC,GAAMnG,IAAamG,EAAExE,eAAiBlc,IAAa0gB,EAAEzO,gBAO3FmgE,eAAeC,EAAOC,GAClB,IAAK,IAAI9rE,EAAI6rE,EAAMzuE,OAAS,EAAG4C,GAAK,EAAGA,IACnC,IAAK,IAAIy6C,EAAI,EAAGA,EAAIz6C,EAAGy6C,IACnB,GAAIqxB,EAAMD,EAAMpxB,GAAGhvC,eAAiBqgE,EAAMD,EAAMpxB,EAAI,GAAGhvC,eAAgB,CACnE,MAAMsgE,EAAOF,EAAMpxB,GACnBoxB,EAAMpxB,GAAKoxB,EAAMpxB,EAAI,GACrBoxB,EAAMpxB,EAAI,GAAKsxB,GAK/BnlB,SACI,MAAMijB,EAAavxE,KAAKmzC,UAAU,GAC5BugC,EAAa1zE,KAAKmzC,UAAU,GAC5BwgC,EAAe3zE,KAAKymC,aAAagU,GAAsB+B,OACvDo3B,EAAe5zE,KAAKymC,aAAagU,GAAsBoB,KAU7D,IAAIpyC,EACAyoC,EACAxL,EAXJ1mC,KAAKszE,eAAeK,EAAc7D,IAClC9vE,KAAKszE,eAAeM,EAAc7D,IAC9B4D,EAAa7uE,OAAS,GAAKysE,EAAWr0B,YAAcxC,GAAYoB,eAChE63B,EAAa97D,KAAK87D,EAAahtC,OAAO,EAAG,GAAG,IAC5CgtC,EAAahtC,OAAO,EAAG,EAAG,IAAIjlC,GAAQg5C,GAAYiB,UAElDi4B,EAAaptC,QAAQktC,GAAc,GACnCE,EAAajtC,OAAO,EAAG,EAAG,IAAIjlC,GAAQg5C,GAAYuB,OAKtD,IAAI+tB,EAAS,EACTnnE,EAAI7C,KAAK6C,EACb,IAAK,IAAI6E,EAAI,EAAGA,EAAIisE,EAAa7uE,OAAQ4C,IACrCg/B,EAAWitC,EAAajsE,GACxBwqC,EAAUxL,EAASyU,WAAWzzC,EAAIsiE,GAClCvgE,EAAQi9B,EAASnqB,WACjB1Z,GAAKqvC,EACLxL,EAASr+B,KAAKxF,GACdA,GAAK4G,EACDyoC,EAAUzoC,IAAU,GACpBugE,IAERhqE,KAAK+uE,QAAUlsE,EACfA,EAAI7C,KAAK6C,EAAI7C,KAAKyJ,MAClB,MAAMiyC,EAAS,CACXt/B,KAAM,EACNC,MAAO,EACPkgC,aAAc,EACdD,YAAa,GAEjB,IAAIu3B,EAAiB,EACrB,IAAK,IAAInsE,EAAI,EAAGA,EAAIksE,EAAa9uE,OAAQ4C,IAAK,CAC1Cg/B,EAAWktC,EAAalsE,GACxBmsE,EAAiBryE,EAAUklC,GAAYh/B,EAAImsE,EAC3Cn4B,EAAOr/B,MAAQ,EACfq/B,EAAOt/B,KAAO,EACds/B,EAAOa,aAAe,EACtBb,EAAOY,YAAc,EACrB,MAAMhB,EAAgB5U,EAAS6U,mBAC3BD,GACU,IAAN5zC,IACAg0C,EAAOr/B,MAAQi/B,EAAce,MAAQ,EACrCX,EAAOa,aAAejB,EAAciB,cAAgB,GAExDb,EAAOt/B,MAAQk/B,EAAcc,MAAQ,EACrCV,EAAOY,YAAchB,EAAcgB,aAAe,EAC9C50C,IAAMksE,EAAa9uE,OAAS,IAC5B42C,EAAOY,YAAc,KAIzBZ,EAAOa,aAAe7V,EAASyU,WAAWzzC,EAAImsE,GACpC,IAANnsE,IACAg0C,EAAOr/B,MAAQqqB,EAASnqB,YAElB,IAAN7U,IACAg0C,EAAOt/B,KAAOsqB,EAASnqB,aAG/B1Z,GAAK64C,EAAOa,aACZ15C,GAAK64C,EAAOr/B,MACZqqB,EAASr+B,KAAKxF,GACdA,GAAK64C,EAAOt/B,KACZvZ,GAAK64C,EAAOY,YAEhBt8C,KAAKiwE,MAAgC,IAAxB2D,EAAa9uE,OAAe9E,KAAK6C,EAAI7C,KAAKyJ,MAAQ5G,EAC/D7C,KAAKioE,WAAY,EAKrBtzD,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL8D,EAAI+1B,UAAU,QAAS7uC,KAAK6R,aAAa,OACpC7R,KAAKioE,WACNjoE,KAAKsuD,SACT,MAAM+hB,EAAYrwE,KAAKkY,QAAQm4D,UACzB5mE,EAAQzJ,KAAKyJ,MACb5G,EAAI7C,KAAK6C,EACf,IAAIgF,EAEJ,IAAK,IAAI3E,EAAO,EAAGA,EAAOmtE,EAAWntE,IACjC2E,EAAI7H,KAAKyiC,YAAYv/B,GACrBlD,KAAK0T,aACD1T,KAAKkY,QAAQ44D,YAAY5tE,GAAMmuE,UAC/Bv4D,EAAIQ,YACJR,EAAIS,OAAO1W,EAAGgF,GACdiR,EAAIU,OAAO3W,EAAI4G,EAAO5B,GACtBiR,EAAIikB,UAER/8B,KAAKuU,eAGT,IAAK,IAAI7M,EAAI,EAAGA,EAAI1H,KAAKmzC,UAAUruC,OAAQ4C,IAAK,CAC5C,MAAMg/B,EAAW1mC,KAAKmzC,UAAUzrC,GAEH,mBAAlBg/B,EAAS/xB,OAChB+xB,EAAShzB,WAAWoF,GACpB4tB,EAAS/xB,KAAK3U,KAAMA,KAAK4xE,kBAAkBlqE,IAC3Cg/B,EAASnyB,aAAauE,IAI9B,GAAI9Y,KAAKkwE,QAAU,EAAG,CAClBp3D,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKwV,UACjB,MAAMioB,EAAY3kB,EAAIi2B,YAAY,GAAK/uC,KAAKkwE,SAASzmE,MACrD5B,EAAI7H,KAAKyvC,eAAe,GAAK,EAC7B32B,EAAIg3B,SAAS,GAAK9vC,KAAKkwE,QAASlwE,KAAK6C,EAAI46B,EAAY,EAAG51B,GACxDiR,EAAItE,UAGR,OADAsE,EAAIi3B,aACG/vC,KAEX8rE,sBACI,OAAO9rE,KAAKkY,QAAQk4D,mBAMxB0D,oBACI,OAAO9zE,KAAKkY,QAAQ44D,YASxBiD,iBAAiBC,EAAalD,GAC1B,GAAIkD,GAAeh0E,KAAKkY,QAAQm4D,WAAa2D,EAAc,EACvD,MAAM,IAAI3xE,EAAa,mBAAoB,iFAE/C,QAA4BS,IAAxBguE,EAAYO,QACZ,MAAM,IAAIhvE,EAAa,mBAAoB,oEAE/C,GAAmC,kBAAxByuE,EAAYO,QACnB,MAAM,IAAIhvE,EAAa,mBAAoB,4EAG/C,OADArC,KAAKkY,QAAQ44D,YAAYkD,GAAelD,EACjC9wE,KAWXi0E,kBAAkBC,GACd,GAAIA,EAAoBpvE,SAAW9E,KAAKkY,QAAQm4D,UAC5C,MAAM,IAAIhuE,EAAa,mBAAoB,2FAK/C,IAAK,MAAMyuE,KAAeoD,EAE0BpxE,MAA5CoxE,EAAoBpD,GAAaO,UACjC6C,EAAoBpD,GAAe9wE,KAAKkY,QAAQ44D,YAAYA,IAEhE9wE,KAAKkY,QAAQ44D,YAAYA,GAAezwE,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkY,QAAQ44D,YAAYA,IAAeoD,EAAoBpD,IAGxI,OADA9wE,KAAKkY,QAAQ44D,YAAcoD,EACpBl0E,MCnoBf,SAASm0E,GAAmBr7D,EAAK7H,EAAMmjE,EAAM1qC,EAAM8T,GAC/C,GAAIvsC,IAASojE,GAAepjE,KAAKqjE,kBAAoBrjE,IAASojE,GAAepjE,KAAKsjE,kBAC9E,MAAM,IAAIlyE,EAAa,mBAAoB,uDAE/C,IAAI+U,EAAU,EACVo9D,EAAgB,IAEhBvjE,IAASojE,GAAepjE,KAAKsjE,oBAC7Bn9D,GAAW,EACXo9D,EAAgB,GAGpB17D,EAAI4kC,SAAS02B,EAAOh9D,EAASsyB,EAAM,EAAG8T,EAAO9T,GAE7C5wB,EAAI4kC,SAAS02B,EARW,EAQa1qC,EAAM8qC,EAAeh3B,EAAO9T,GDwnBrEsmC,GAAMt6D,UAAY,CACdhI,OAAQhB,EAAKiB,WACbL,KAAM,EACNC,OAAQjC,EAAWsC,OACnBJ,MAAOjC,EAAUqC,QCznBd,MAAMymE,WAAuBthE,EAChC1R,YAAYozE,EAAWC,GACnBjyE,QACAzC,KAAKw7C,UAAYjf,EAAOqC,qBACxB5+B,KAAKyJ,MAAQ,EACbzJ,KAAKy0E,UAAYA,EACjBz0E,KAAK00E,aAAeA,EACpB10E,KAAKiR,KAAOojE,GAAepjE,KAAK2qC,OAChC57C,KAAKkW,YAGLlW,KAAKoX,QAAU,EACfpX,KAAK20E,MAAQ,GAENrzE,sBACP,OAAOG,EAAS4yE,eAMpB53B,QAAQxrC,GAKJ,OAJAA,EAAuB,iBAATA,EAAoBojE,GAAe33B,WAAWzrC,GAAQA,IACxDojE,GAAepjE,KAAK2jE,cAAgB3jE,GAAQojE,GAAepjE,KAAKgrC,OACxEj8C,KAAKiR,KAAOA,GAETjR,KAGX6tE,QAAQ5pE,EAAMiU,EAAU,IAKpB,OAJAlY,KAAK20E,MAAM98D,KAAK,CACZg9D,QAAS5wE,EACTiU,QAAS7X,OAAO0V,OAAO,CAAEk2D,QAAS,EAAG3uC,QAAS,GAAKplB,KAEhDlY,KAEXma,UAAU/C,GACN,GAAuB,iBAAZA,EACP,MAAM,IAAI/U,EAAa,cAAe,4BAG1C,OADArC,KAAKoX,QAAUA,EACRpX,KAEXyd,YACI,OAAOzd,KAAKoX,QAGhBzC,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL,IAAI00B,EAAO1pC,KAAKy0E,UAAUhyC,YAAY,GAClC+a,EAAOx9C,KAAK00E,aAAajyC,YAAYziC,KAAK00E,aAAa9mC,cAAgB,GAAK5tC,KAAKw7C,UACjF/xC,EAAQzJ,KAAKyJ,MACb2qE,EAAOp0E,KAAKy0E,UAAUxsE,QACIjI,KAAKiR,OAASojE,GAAepjE,KAAK2jE,cAC5D50E,KAAKiR,OAASojE,GAAepjE,KAAKsjE,mBAClCv0E,KAAKiR,OAASojE,GAAepjE,KAAK6jE,eAElCV,EAAOp0E,KAAKy0E,UAAUxsE,OAASjI,KAAKy0E,UAAUl4D,YAElD,IAAIw4D,EAAoBv3B,EAAO9T,EAC/B,OAAQ1pC,KAAKiR,MACT,KAAKojE,GAAepjE,KAAK0qC,OAGzB,KAAK04B,GAAepjE,KAAK+jE,YAGzB,KAAKX,GAAepjE,KAAK2jE,aACrBnrE,EAAQ,EACR,MACJ,KAAK4qE,GAAepjE,KAAK2qC,OACrBw4B,GAAQp0E,KAAKyJ,MAAQ,EACrBigC,GAAQ1pC,KAAKw7C,UACbu5B,GAAqB,GACrB,MACJ,KAAKV,GAAepjE,KAAKgkE,MAAO,CAC5BxrE,EAAQ,GAER,MAAMP,EAAKlJ,KAAKy0E,UAAUxsE,OAAS,EAAIjI,KAAKoX,QACtChO,EAAKsgC,EACLwrC,EAAKhsE,EACLisE,EAAK33B,EACLn0C,EAAKH,EAAKO,EACVH,EAAKF,EAAK2rE,EAAoB,EAC9BK,EAAO/rE,EAAK,GAAMI,EAClB4rE,EAAOjsE,EAAK,GAAM2rE,EAClBO,EAAOpsE,EAAK,IAAMO,EAClB8rE,EAAOjsE,EAAK,KAAQyrE,EACpBS,EAAOF,EACPG,EAAOnsE,EAAK,KAAQyrE,EACpBW,EAAON,EACPO,EAAOR,EAAK,GAAMJ,EAClBa,EAAOvsE,EAAKI,EACZosE,EAAOF,EACPG,EAAO5sE,EAAK,GAAMO,EAClBssE,EAAOzsE,EAAK,KAAQyrE,EACpBiB,EAAOF,EACPG,EAAO3sE,EAAK,KAAQyrE,EACpBmB,EAAON,EACPO,EAAOd,EACbv8D,EAAIQ,YACJR,EAAIS,OAAOrQ,EAAIE,GACf0P,EAAIY,cAAc07D,EAAMC,EAAMC,EAAMC,EAAMlsE,EAAIC,GAC9CwP,EAAIY,cAAc87D,EAAMC,EAAMC,EAAMC,EAAMT,EAAIC,GAC9Cr8D,EAAIY,cAAck8D,EAAMC,EAAMC,EAAMC,EAAM1sE,EAAIC,GAC9CwP,EAAIY,cAAcs8D,EAAMC,EAAMC,EAAMC,EAAMjtE,EAAIE,GAC9C0P,EAAIa,OACJb,EAAIikB,SACJ,MAEJ,KAAKs3C,GAAepjE,KAAKmlE,QACrB1sC,GAAQ,EACR8T,GAAQ,EACRu3B,EAAoBv3B,EAAO9T,EAC3B5yB,EAAMu8C,YAAYv6C,EAAKs7D,EAAO,EAAG1qC,EAAM,GAAI,cAC3C5yB,EAAMu8C,YAAYv6C,EAAKs7D,EAAO,EAAG52B,EAAM,GAAI,iBAC3C42B,GAAQp0E,KAAKyJ,MAAQ,EACrB,MACJ,KAAK4qE,GAAepjE,KAAKqjE,iBACrBH,GAAmBr7D,EAAK9Y,KAAKiR,KAAMmjE,EAAOp0E,KAAKoX,QAASsyB,EAAM8T,EAAOx9C,KAAKw7C,WAC1E,MACJ,KAAK64B,GAAepjE,KAAKsjE,kBACrBJ,GAAmBr7D,EAAK9Y,KAAKiR,KAAMmjE,EAAM1qC,EAAM8T,EAAOx9C,KAAKw7C,WAC3D,MACJ,KAAK64B,GAAepjE,KAAK6jE,YACrBrrE,EAAQ,EACRsrE,GAAqB/0E,KAAKw7C,UAC1B,MACJ,KAAK64B,GAAepjE,KAAKgrC,KACrB,MACJ,QACI,MAAM,IAAI55C,EAAa,cAAe,qCAAqCrC,KAAKiR,qBAEpFjR,KAAKiR,OAASojE,GAAepjE,KAAKgkE,OAClCj1E,KAAKiR,OAASojE,GAAepjE,KAAKqjE,kBAClCt0E,KAAKiR,OAASojE,GAAepjE,KAAKsjE,mBAClCv0E,KAAKiR,OAASojE,GAAepjE,KAAKgrC,MAClCnjC,EAAI4kC,SAAS02B,EAAM1qC,EAAMjgC,EAAOsrE,GAGhC/0E,KAAKiR,OAASojE,GAAepjE,KAAK6jE,aAClCh8D,EAAI4kC,SAAS02B,EAAO,EAAG1qC,EAAMjgC,EAAOsrE,GAExCj8D,EAAIlF,OACJkF,EAAIxE,aAAa,GACjBwE,EAAIxD,QAAQtV,KAAKwV,UAEjB,IAAK,IAAI9N,EAAI,EAAGA,EAAI1H,KAAK20E,MAAM7vE,OAAQ4C,IAAK,CACxC,MAAMzD,EAAOjE,KAAK20E,MAAMjtE,GAClBonC,EAAah2B,EAAIi2B,YAAY,GAAK9qC,EAAK4wE,SAASprE,MAChD5G,EAAI7C,KAAKy0E,UAAUxsE,OAAS6mC,EAAa,GAAK7qC,EAAKiU,QAAQ+zD,QAC3DpkE,GAAK7H,KAAKy0E,UAAUhyC,YAAY,GAAKziC,KAAK00E,aAAa5G,kBAAoB,EAAI7pE,EAAKiU,QAAQolB,QAClGxkB,EAAIg3B,SAAS,GAAK7rC,EAAK4wE,QAAShyE,EAAGgF,EAAI,GAE3CiR,EAAItE,WAGZ6/D,GAAe3+D,UAAY,CACvBhI,OAAQhB,EAAK8D,MACblD,KAAM,GACNC,OAAQjC,EAAWsC,OACnBJ,MAAOjC,EAAUqC,QAOrBymE,GAAepjE,KAAO,CAClB2jE,aAAc,EACdI,YAAa,EACbr5B,OAAQ,EACRC,OAAQ,EACRq5B,MAAO,EACPmB,QAAS,EACT9B,iBAAkB,EAClBC,kBAAmB,EACnBO,YAAa,EACb74B,KAAM,GAeVo4B,GAAe33B,WAAa,CACxB25B,YAAahC,GAAepjE,KAAK2jE,aACjC0B,WAAYjC,GAAepjE,KAAK+jE,YAChCr4B,OAAQ03B,GAAepjE,KAAK0qC,OAC5BiB,OAAQy3B,GAAepjE,KAAK2qC,OAC5B26B,MAAOlC,GAAepjE,KAAKgkE,MAC3BuB,QAASnC,GAAepjE,KAAKmlE,QAC7BK,eAAgBpC,GAAepjE,KAAKqjE,iBACpCoC,gBAAiBrC,GAAepjE,KAAKsjE,kBACrCoC,WAAYtC,GAAepjE,KAAK6jE,YAChC73B,KAAMo3B,GAAepjE,KAAKgrC,MCvN9B,MAAM26B,GAAYC,GAAQA,EAAItnC,QAAO,CAAC5rC,EAAGC,IAAMD,EAAIC,GAAG,GAKtD,SAASkzE,GAAe5xC,EAAQ6xC,EAAaC,GACzC,MAAMxrB,EAAuB4C,GAAU7B,wBAAwBrnB,GAEzD+xC,EAAmB,GACnBC,EAAW,GACXnnB,EAAW,GAsBjB,OAnBA7qB,EAAOhnB,SAAQ,CAACmnB,EAAOorB,KAGnB,MAAM9E,EAAY,IAAItnD,EAAS,EAAGmnD,GAClCnmB,EAAME,eAAernB,SAASuuC,IAC1B,MAAM0qB,EAAexrB,EAAUrnD,UAE/B,IAAK2yE,EAAiBE,GAAe,CACjC,MAAMC,EAAaL,EAAY,CAAE7nB,OAAQioB,IACzCpnB,EAASl4C,KAAKu/D,GACdH,EAAiBE,GAAgBC,EAEjCF,EAASr/D,KAAKs/D,GAGlBH,EAAavqB,EAAUwqB,EAAiBE,GAAe1mB,GACvD9E,EAAUpmD,IAAIknD,EAAS/mB,kBAGxB,CACHnzB,IAAK0kE,EACLI,MAAOtnB,EACPunB,KAAMJ,EAASt0C,MAAK,CAACj/B,EAAGC,IAAMD,EAAIC,IAClC4nD,qBAAAA,GAgBR,SAAS+rB,GAA4B15C,EAAO25C,EAAcC,EAAevxE,GAErE,IAAIwxE,EAAeF,EAEnB,IAAK,IAAIG,EAAYF,EAAgB,EAAGE,EAAY95C,EAAM/4B,OAAQ6yE,IAAa,CAC3E,MAAMj7D,EAAOmhB,EAAM85C,GACnB,GAAI91E,EAAO6a,KAAUA,EAAKupB,WAAavpB,EAAK8oB,oBAAqB,CAC7DkyC,EAAeh7D,EAAKs8B,iBACpB,OAIR,GAAI9yC,GAAWsxE,IAAiBE,EAAc,CAG1CA,EAAeh0E,EAFHS,KAAK4E,IAAIyuE,EAAcE,GACvBvzE,KAAKqlC,IAAIguC,EAAcE,IAGvC,OAAOA,EAkBJ,MAAMtpB,GACT/sD,YAAY6W,GACRlY,KAAK43E,iBAAmBv3E,OAAO0V,OAAO,CAAE8hE,eAAe,EAAOhsB,cAAe,IAAKisB,cAAe,GAAK5/D,GACtGlY,KAAK+3E,aAAe,EACpB/3E,KAAKg4E,UAAY,EACjBh4E,KAAK4kC,WAAa,EAClB5kC,KAAKi4E,cAAgB,GAErBj4E,KAAKk4E,cAAgB,EAErBl4E,KAAKm4E,kBAAmB,EAExBn4E,KAAKo4E,kBAAet1E,EACpB9C,KAAKq4E,sBAAmBv1E,EAGxB9C,KAAKs4E,YAAc,CACfC,MAAO,EACPC,KAAM,IAEVx4E,KAAKklC,OAAS,GACdllC,KAAKy4E,YAAc,GAMvBh0E,oBAAoBo5B,EAAOh7B,EAAI,GAAG,eAAE61E,EAAiB,IAAO,IACxD76C,EAAM0R,QAAO,CAACopC,EAAaj8D,KACvBA,EAAK04B,qBAAqB,IAAI2yB,IAC9B,MAAMhX,GAAO,IAAI9B,IAAc1B,YAAY7wC,GAAM+4B,YAC3ChmC,EAAUshD,EAAKjhD,aAErB,OADAihD,EAAK1oD,KAAKswE,EAAclpE,EAAQkgD,aACzBgpB,EAAc5nB,EAAKx0C,WAAa9M,EAAQmgD,aAAe8oB,IAC/D71E,GAGP4B,qBAAqBqU,EAAKyyB,EAAW1wB,EAAMzR,EAAIE,EAAI4O,GAE/C,MAAMrV,EAAIgY,GADV3C,EAAU7X,OAAO0V,OAAO,CAAE6iE,aAAcr8C,EAAOoF,mBAAmBvxB,aAAa,kBAAoB8H,IAC1E0gE,aACnBN,EAAc/sC,EAAU+sC,YAQ9Bx/D,EAAIlF,OACJkF,EAAIxD,QAAQ5I,EAAKiB,WAAY,GAC7B2qE,EAAYE,KAAKt6D,SAAS26D,IAT1B,IAAgB3vE,EAAIG,EAAIuuC,EAAR1uC,EAULrG,EAAIg2E,EAAI3vE,GAVCG,EAUGxG,EAAIg2E,EAAIxvE,GAVPuuC,EAUW,wBAT/B9+B,EAAIQ,YACJR,EAAI1E,eAAewjC,GACnB9+B,EAAI5E,aAAa0jC,GACjB9+B,EAAIxE,aAAa,GACjBwE,EAAI4kC,SAASx0C,EAAIE,EAAIjF,KAAK4E,IAAIM,EAAKH,EAAI,GAAII,EAAKF,GAMhD0P,EAAI5E,aAAa,SACjB4E,EAAIg3B,SAAS3rC,KAAKw+B,MAAMk2C,EAAIxvE,GAAKwvE,EAAI3vE,IAAIjC,WAAYpE,EAAIg2E,EAAI3vE,GAAII,EAAK,OAE1EwP,EAAI5E,aAAa,OACjB4E,EAAIg3B,SAAS,UAAUvE,EAAUysC,WAAa,GAAGc,QAAQ,cAAcvtC,EAAU3G,YAAc,GAAGk0C,QAAQ,WAAWR,EAAYC,MAAMO,QAAQ,KAAMj2E,EAAI,GAAIyG,EAAK,IAClKwP,EAAItE,UAiBR/P,qBAAqBqU,EAAKoB,EAAO2jB,EAAOnB,GACpC,IAAIxkB,EAAU,CACV6gE,WAAW,EACXC,aAAa,GAEK,iBAAXt8C,EACPxkB,EAAU7X,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAImC,GAAUwkB,GAE7B,kBAAXA,IACZxkB,EAAQ6gE,UAAYr8C,GAGxB,MAAM2I,EAAQ,IAAIgmB,GAAM9uB,EAAO4D,SAASmsB,QAAQjB,GAAMW,KAAKY,MAAMY,aAAa3vB,GAExEgwB,EAAQ31C,EAAQ6gE,UAAYtqB,GAAKwqB,iBAAiB5zC,GAAS,GASjE,OAPA,IAAI+oB,IACCC,WAAW,CAAChpB,IACZ6zC,cAAc,CAAC7zC,GAAQnrB,EAAO,CAAE8+D,YAAa9gE,EAAQ8gE,YAAa9+D,MAAAA,IAEvEmrB,EAAMprB,SAASC,GAAOvF,KAAKmE,EAAKoB,GAChC2zC,EAAM3vC,SAASq7B,GAASA,EAAKlkC,WAAWyD,GAAKnE,SAEtC0wB,EAAMlwB,iBAejB1Q,wBAAwBqU,EAAKqgE,EAAUj/D,EAAOk/D,EAAUv7C,EAAOw7C,EAAU38C,GACrE,IAAImrC,EAAO,CACPkR,UAAWM,EACXL,aAAa,GAEK,iBAAXt8C,EACPmrC,EAAOxnE,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI8xD,GAAOnrC,GAEvB,kBAAXA,IACZmrC,EAAKkR,UAAYr8C,GAGrB,MAAM48C,EAAY,IAAIjuB,GAAM9uB,EAAO4D,SAASmsB,QAAQjB,GAAMW,KAAKY,MAAMY,aAAa3vB,GAE5E07C,EAAW,IAAIluB,GAAM9uB,EAAO4D,SAASmsB,QAAQjB,GAAMW,KAAKY,MAAMY,aAAa4rB,GAE3EvrB,EAAQga,EAAKkR,UAAYtqB,GAAKwqB,iBAAiBK,GAAa,IAElE,IAAIlrB,IACCC,WAAW,CAACirB,IACZjrB,WAAW,CAACkrB,IACZL,cAAc,CAACI,EAAWC,GAAWr/D,EAAO,CAAE8+D,YAAanR,EAAKmR,cAErEM,EAAU3kE,KAAKmE,EAAKoB,GACpBq/D,EAAS5kE,KAAKmE,EAAKqgE,GACnBtrB,EAAM3vC,SAASq7B,GAASA,EAAKlkC,WAAWyD,GAAKnE,SAE7C,IAAI0/D,GAAen6D,EAAOi/D,GAAU9jE,WAAWyD,GAAKnE,OAQxDlQ,yBAAyBqhC,EAAW0zC,EAAeC,GAC/C3zC,EAAU5nB,SAAQ,CAACw7D,EAActoE,KAC7B,GAAIrP,EAAY23E,IAAiBA,EAAazzC,SAAU,CACpD,GAAIyzC,EAAajlC,cAAgBglC,EAC7B,OAGJ,MAAMh+D,EAAWi+D,EAAazgC,WAAWx9B,SAASohB,cAClD,GAAiB,QAAbphB,GAAmC,QAAbA,EACtB,OAEJ,GAAI+9D,GAAiBE,EAAapgC,UAAW,CAEzC,MAAMlX,EAAQs3C,EAAar3C,cAAc,GACzC,GAAc,IAAVjxB,EACAgxB,EAAMl/B,KAAOq0E,GAA4BzxC,EAAW1D,EAAMl/B,KAAMkO,GAAO,QAEtE,GAAIA,EAAQ,GAAKA,EAAQ00B,EAAUhhC,OAAQ,CAE5C,MAAM60E,EAAe7zC,EAAU10B,EAAQ,GACvC,GAAIrP,EAAY43E,GACZ,GAAIA,EAAa1zC,SACb7D,EAAMl/B,KAAOy2E,EAAat3C,cAAc,GAAGn/B,SAE1C,CACD,MAAMo2D,EAAWqgB,EAAa3gC,iBAE9B5W,EAAMl/B,KAAOq0E,GAA4BzxC,EAAWwzB,EAAUloD,GAAO,IAIjFsoE,EAAanjB,WAAW,EAAGn0B,EAAMl/B,WAWjD02E,WAAW10C,EAAQs0C,GACf,IAAKt0C,IAAWA,EAAOpgC,OACnB,MAAM,IAAIzC,EAAa,cAAe,6BAE1C6iC,EAAOhnB,SAASmnB,GAAU+oB,GAAUyrB,kBAAkBx0C,EAAME,eAAgBi0C,KAoBhFM,0BAA0B50C,GACtB,MAAM60C,EAAmBx9C,EAAOoF,mBAAmBvxB,aAAa,8BAGhE,IAAI4pE,EAAoB,EACpBC,EAAO,EACPC,EAAO,EACX,MAAMx+B,EAAS,GACT31B,EAAY,GAElB,GAAI/lB,KAAKm4E,iBACL,OAAOn4E,KAAKk4E,cAEhB,IAAKl4E,KAAKo4E,aAAc,CACpB,IAAKlzC,EACD,MAAM,IAAI7iC,EAAa,cAAe,sDAE1CrC,KAAKm6E,mBAAmBj1C,GAG5B,MAAQoyC,KAAM8C,EAAa7nE,IAAK8nE,GAAer6E,KAAKo4E,aACpDp4E,KAAKk4E,cAAgB,EAGrBkC,EAAYl8D,SAAS6yC,IACjB,MAAMp9C,EAAU0mE,EAAWtpB,GAC3Bp9C,EAAQ8hC,YAGJ9hC,EAAQ4xB,eAAezgC,OAASogC,EAAOpgC,SACvCk1E,GAAqB,GAGzBrmE,EAAQ4xB,eAAernB,SAAStZ,IAC5Bq1E,GAAQr1E,EAAEkL,aAAarG,MACvBywE,GAAQt1E,EAAE8gC,WAAWxgC,QACrBw2C,EAAO7jC,KAAKjT,EAAEkL,aAAarG,OAC3Bsc,EAAUlO,KAAKjT,EAAE8gC,WAAWxgC,YAEhC,MAAMuE,EAAQkK,EAAQ4I,WACtBvc,KAAKk4E,eAAiBzuE,KAE1BzJ,KAAKm4E,kBAAmB,EAExB,MAAMmC,EAAOL,EAAO,EAAIA,EAAOv+B,EAAO52C,OAAS,EAAI42C,EAAO52C,OACpDy1E,EAAO3D,GAASl7B,EAAOnpC,KAAKioE,GAAOr2E,KAAK6G,IAAIwvE,EAAKF,EAAM,MACvDG,EAAQt2E,KAAK6G,IAAIuvE,EAAO7+B,EAAO52C,OAAQ,IAAOw1E,EAC9CI,EAAOR,EAAOn0D,EAAUjhB,OACxB61E,EAAO/D,GAAS7wD,EAAUxT,KAAKioE,GAAOr2E,KAAK6G,IAAIwvE,EAAKE,EAAM,MAC1DE,EAAQz2E,KAAK6G,IAAI2vE,EAAO50D,EAAUjhB,OAAQ,IAAO41E,EAEjDG,EAAS12E,KAAK4E,IAAI6xE,EAAOH,GAASL,EAAYt1E,OAASi1E,EACvDe,EAAef,EAAmBC,EACxC,OAAOh6E,KAAKk4E,cAAgB/zE,KAAK4E,IAAI+xE,EAAcD,GAMvDtsB,mBACI,IAAKvuD,KAAKm4E,iBACN,MAAM,IAAI91E,EAAa,kBAAmB,qFAE9C,OAAOrC,KAAKk4E,cAGhBzzE,+BAA+BygC,GAC3B,IAAKA,IAAWA,EAAOpgC,OACnB,MAAM,IAAIzC,EAAa,cAAe,uBAE1C,MAAMypD,EAAa5mB,EAAO,GAAG+mB,gBAU7B,OAT6B/mB,EAAOqK,QAAO,CAACopC,EAAatzC,KACrD,IAAKA,EAAM4mB,gBAAgBhmD,OAAO6lD,GAC9B,MAAM,IAAIzpD,EAAa,eAAgB,yDAE3C,GAAIgjC,EAAMgnB,YAAchB,GAAMW,KAAKN,SAAWrmB,EAAMwnB,aAChD,MAAM,IAAIxqD,EAAa,kBAAmB,qCAE9C,OAAO8B,KAAK4E,IAAI4vE,EAAat0E,EAASU,IAAI4zE,EAAatzC,EAAMknB,8BAC9D,GAIPwuB,uBAAuB71C,GACnB,MACM6qB,EAAW+mB,GAAe5xC,GAAQ,IAAM,IAAI6iC,KADvC,CAACtb,EAAU94C,IAAY84C,EAASrX,qBAAqBzhC,KAGhE,OADA3T,KAAKq4E,iBAAmBtoB,EACjBA,EAMXoqB,mBAAmBj1C,GACf,MACM6qB,EAAW+mB,GAAe5xC,GAAS6rB,GAAS,IAAI9B,GAAY8B,KADvD,CAACtE,EAAU94C,EAAS88C,IAAe98C,EAAQ45C,YAAYd,EAAUgE,KAE5EzwD,KAAKo4E,aAAeroB,EACpB,MAAMirB,EAAeh7E,KAAKo4E,aAAaf,MAIvC,OAHA2D,EAAa98D,SAASvK,IAClBA,EAAQk8C,UAAYmrB,KAEjBjrB,EAQXta,UAAUsiC,EAAe,EAAGkD,EAAkBC,EAAahhE,GAEvD,MAAM61C,EAAW/vD,KAAKo4E,aACtB,IAAKroB,EACD,MAAM,IAAI1tD,EAAa,iBAAkB,mCAE7C,MAAQi1E,KAAM8C,EAAa7nE,IAAK8nE,GAAetqB,EAE/C/vD,KAAKy4E,YAAc,GAGfyC,GAAehhE,GACfghE,EAAYh9D,SAASmnB,GAAUA,EAAMprB,SAASC,GAAOu7B,cAIzD,IAAI5yC,EAAI,EACJmC,EAAQ,EACZhF,KAAKk4E,cAAgB,EACrB,IAAIpsB,EAAa,EAEjBsuB,EAAYl8D,SAAS6yC,IACjB,MAAMp9C,EAAU0mE,EAAWtpB,GAG3Bp9C,EAAQ8hC,YACR,MAAMhsC,EAAQkK,EAAQ4I,WACtBvc,KAAKk4E,eAAiBzuE,EACtB,MAAM2lD,EAAWz7C,EAAQy8C,cAAclrD,QACvC4mD,GAAcsD,EACd,MAAM3/C,EAAUkE,EAAQ7D,aACxBjN,EAAIA,EAAImC,EAAQyK,EAAQkgD,YACxBh8C,EAAQtL,KAAKxF,GAEbmC,EAAQyE,EAAQgG,EAAQkgD,eAG5B,MAAM,cAAEkoB,EAAa,cAAEhsB,EAAa,cAAEisB,GAAkB93E,KAAK43E,iBAEvD1qB,EAAe0pB,GAASwD,EAAY7nE,KAD7Bw+C,GAAS5sD,KAAK6G,IAAI6gD,EAAgBwuB,EAAWtpB,GAAMX,cAAclrD,QAAU4mD,MAKxF,GAHA9rD,KAAKk4E,cAAgBr1E,EAAImC,EACzBhF,KAAKm4E,kBAAmB,EAEpBJ,GAAgB,EAChB,OAAO/3E,KAAKm7E,WAGhB,MAAMC,EAAef,EAAWD,EAAY,IACtC/W,EAAcgX,EAAWD,EAAYA,EAAYt1E,OAAS,IAGhE,SAASu2E,EAAwBC,GA8D7B,OA7DkBlB,EAAY7nE,KAAI,CAACw+C,EAAMrpD,KACrC,MAAMiM,EAAU0mE,EAAWtpB,GACrB7rB,EAASvxB,EAAQ+8C,sBACvB,IAAI6qB,EACJ,GAAI7zE,EAAI,EAAG,CACP,MAAM8zE,EAAcnB,EAAWD,EAAY1yE,EAAI,IAI/C,IAAK,IAAIy6C,EAAIz6C,EAAI,EAAGy6C,GAAK,EAAGA,IAAK,CAC7B,MACMs5B,EADWpB,EAAWD,EAAYj4B,IACZuO,sBAEtBgrB,EAAiB,GAMvB,GALAr7E,OAAOiS,KAAK4yB,GAAQhnB,SAASmvC,IACrBouB,EAAWpuB,IACXquB,EAAe7jE,KAAKw1C,MAGxBquB,EAAe52E,OAAS,EAAG,CAE3B,IAAIsqD,EAAW,EACXusB,EAAqBphB,EAAAA,EACrBqhB,EAAmB,EAqBvB,GApBAF,EAAex9D,SAASmvC,IACpB,MAAMlvB,EAAQs9C,EAAWpuB,GAAG3nB,WAAWxgC,QACnCi5B,EAAQixB,IACRmsB,EAAeE,EAAWpuB,GAC1B+B,EAAWjxB,GAGf,MAAM09C,EAAe32C,EAAOmoB,GACtByuB,EAAiBD,EAAa5zE,QAC/B4zE,EAAa/rE,aAAakO,UAAY69D,EAAa/rE,aAAagnC,qBAC/DilC,EAAcN,EAAWpuB,GAAGv9C,aAC5BksE,EAAkBP,EAAWpuB,GAAGplD,OAAS8zE,EAAYxkC,OAASwkC,EAAY99D,WAAa89D,EAAYhlC,qBAEzG4kC,EAAqBx3E,KAAKqlC,IAAImyC,EAAoBG,EAAiBE,MAIvEL,EAAqBx3E,KAAKqlC,IAAImyC,EAAoBhoE,EAAQ1L,QAAUuzE,EAAYvzE,OAAgC,IAAvBqzE,IAGrFzD,EAAe,CACf,MAAMjzE,EAAIknD,EACV8vB,EAAoBz3E,KAAK6G,IAAI6gD,EAAgBuD,EAAWxqD,GAAMsoD,EAAgBouB,YAEjD,IAAjBC,IACZK,EAAmBL,EAAahnC,WAAW4Y,QAAQiC,GAAYksB,GAEnE,MAAO,CACHM,iBAAAA,EACAD,mBAAAA,EACAM,aAAcV,KAK9B,MAAO,CAAEK,iBAAkB,EAAGM,eAAgB,EAAGP,mBAAoB,MAI7E,SAASQ,EAAsBC,GAE3B,MAAMC,EAAUf,EAAuB,EACvC,IAAIgB,EAAa,EAsBjB,OArBAlC,EAAYl8D,SAAQ,CAAC6yC,EAAM3/C,KACvB,MAAMuC,EAAU0mE,EAAWtpB,GAC3B,GAAI3/C,EAAQ,EAAG,CACX,MAAMmrE,EAAW5oE,EAAQ1L,OACnBu0E,EAAQJ,EAAehrE,GACvBqrE,EAAU75E,EAAQ45E,EAAMP,cAAch0E,OAASu0E,EAAMZ,kBAAoBW,EAAWD,GAC1F,IAAII,EAAkB,EAClBD,EAAU,EACVH,GAAcG,EAETA,EAAU,IACfC,EAAkBv4E,KAAKqlC,IAAIgzC,EAAMb,mBAAoBx3E,KAAK6C,IAAIy1E,IAC9DH,IAAeI,GAEnB/oE,EAAQtL,KAAKk0E,EAAWD,GAG5B3oE,EAAQg9C,4BAA4BzyC,SAASuuC,IACzCA,EAASrY,gBAAgBioC,EAAU1oE,EAAQ1L,cAG5Co7D,EAAYp7D,OAASmzE,EAAanzE,OAE7C,MAAMqzE,EAAuBvD,EACzB1U,EAAYvzD,aAAaynC,OACzB8rB,EAAYvzD,aAAa8/C,aACzBwrB,EAAatrE,aAAa6/C,YACxBjuB,EAAYnF,EAAOoF,mBACnBg7C,EAAmBj7C,EAAUtxB,aAAa,uBAC1CwsE,EAAmBl7C,EAAUtxB,aAAa,uBAChD,IAAIysE,EAAcvB,EAClB,MAAMwB,EAAYzB,EAAwBwB,GAC1C,IAAIE,EAAcZ,EAAsBW,GAIxC,MASME,EATkB,EAACH,EAAaC,KAClC,IAAIG,EAASJ,EAAc,EAC3B,GAAIC,EAAUh4E,OAAS,EACnB,IAAK,IAAIo4E,EAAK,EAAGA,EAAKJ,EAAUh4E,SAAUo4E,EACtCD,EAAS94E,KAAKqlC,IAAIszC,EAAUI,GAAItB,iBAAmB,EAAGqB,GAG9D,OAAOA,GAESE,CAAgBN,EAAaC,GAEjD,GAA2B,IAAvB1C,EAAYt1E,OACZ,OAAO,EAIX,MAAMs4E,EAAgC,EAAnBR,EAAuBI,EAAcA,EAAcJ,EAEhES,EAAO/B,GADM8B,GAAcR,EAAmBD,IAEpD,IAAIjpC,EAAaokC,EAGjB,KAAQiF,EAAcM,GAAQ3pC,EAAa,GAAOqpC,EAAcK,EAAaC,GAAQ3pC,EAAa,GAC9FmpC,GAAeE,EAAcM,EAC7BN,EAAcZ,EAAsBd,EAAwBwB,IAC5DnpC,IAGJ,OADA1zC,KAAK+3E,aAAeA,EACb/3E,KAAKm7E,WAGhBA,WACI,IAAKn7E,KAAKo4E,aACN,OAAO,EACX,MAAMroB,EAAW/vD,KAAKo4E,aAChBL,EAAe/3E,KAAK+3E,aAG1B/3E,KAAKs4E,YAAc,CAAEC,MAAO,EAAGC,KAAM,IACrCzoB,EAASunB,KAAKp5D,SAAQ,CAAC6yC,EAAM3/C,KACzB,GAAc,IAAVA,EACA,OACJ,MAAMksE,EAAWvtB,EAASunB,KAAKlmE,EAAQ,GACjCoqE,EAAczrB,EAASx9C,IAAI+qE,GAC3B3pE,EAAUo8C,EAASx9C,IAAIw+C,GACvBwsB,EAAc/B,EAAY1rE,aAC1B0tE,EAAc7pE,EAAQ7D,aAEtBksE,EAAkBR,EAAYvzE,OAASs1E,EAAYhmC,OAASgmC,EAAY3tB,aAExEksB,EAAiBnoE,EAAQ1L,OAASu1E,EAAY7tB,YAC9CkpB,EAAMiD,EAAiBE,EAC7Bh8E,KAAKs4E,YAAYC,OAASM,EAC1B74E,KAAKs4E,YAAYE,KAAK3gE,KAAK,CAAE3O,GAAI8yE,EAAiB3yE,GAAIyyE,IAEtDnoE,EAAQsgC,sBAAsBR,QAAQr3B,KAAOy8D,EAC7C2C,EAAYvnC,sBAAsBR,QAAQp3B,MAAQw8D,KAItD74E,KAAKi4E,cAAgB,GACrB,MAAMA,EAAgBj4E,KAAKi4E,cAW3Bj4E,KAAKklC,OAAOhnB,SAASmnB,IACjBA,EAAME,eAAernB,SAAQ,CAACxB,EAAMhV,EAAGm2B,KACnC,MAAME,EAAWrhB,EAAKgpB,WAAWh/B,QAAQvB,WAAW8B,WAC9CwI,EAAUiN,EAAK5M,aACf0jC,EAAmB92B,EAAKu3B,sBACxBwpC,EAAe/gE,EAAKzU,OAASwH,EAAQ8nC,OAAS9nC,EAAQwO,WAAaxO,EAAQsnC,qBACjF,IAAIpD,EAAQ,EACZ,GAAIjsC,EAAIm2B,EAAM/4B,OAAS,EAAG,CACtB,MAAM44E,EAAY7/C,EAAMn2B,EAAI,GACtBi2E,EAAeD,EAAU5tE,aAE/B6jC,EADsB+pC,EAAUz1E,OAAS01E,EAAa3/D,UAAY2/D,EAAa7mC,oBACvD2mC,EACxBjqC,EAAiBG,MAAMC,KAAO8pC,EAAUz1E,OAASyU,EAAKzU,OACtDy1E,EAAUzpC,sBAAsBR,QAAQr3B,KAAOu3B,OAG/CA,EAAQokC,EAAe0F,EACvBjqC,EAAiBG,MAAMC,KAAOmkC,EAAer7D,EAAKzU,OAEtDurC,EAAiBC,QAAQp3B,MAAQs3B,EA7BzC,SAAqB5V,EAAU4V,GAC3B,MAAMiqC,EAAQ3F,EAAcl6C,QACdj7B,IAAV86E,EACA3F,EAAcl6C,GAAY,CAAE8V,KAAMF,EAAOkqC,MAAO,IAGhDD,EAAMC,OAAS,EACfD,EAAM/pC,MAAQ+pC,EAAM/pC,KAAOF,GAAS,GAuBpCmqC,CAAY//C,EAAUyV,EAAiBG,MAAMC,YAKrD,IAAImqC,EAAiB,EAcrB,OAbA/9E,KAAKklC,OAAOhnB,SAASmnB,IACjBA,EAAME,eAAernB,SAASxB,IAC1B,MAAMqhB,EAAWrhB,EAAKgpB,WAAWh/B,QAAQvB,WAAW8B,WAC9CwI,EAAUiN,EAAKu3B,sBACrBxkC,EAAQkkC,MAAME,KAAOokC,EAAcl6C,GAAU8V,KAC7CpkC,EAAQsuB,SAAWA,EACnBtuB,EAAQikC,YAAc,EACtBjkC,EAAQkkC,MAAMG,UAAYrkC,EAAQkkC,MAAMC,KAAOnkC,EAAQkkC,MAAME,KAC7DkqC,GAAkB55E,KAAK6G,IAAIyE,EAAQkkC,MAAMG,UAAW,SAG5D9zC,KAAKg4E,UAAY7zE,KAAKiH,KAAK2yE,GAC3B/9E,KAAKy4E,YAAY5gE,KAAK7X,KAAKg4E,WACpBh4E,KAAKg4E,UAUhBgG,KAAK9lE,GACD,IAAInL,EACJ,MAAMgjD,EAAW/vD,KAAKo4E,aACtB,IAAKroB,EACD,OAAO,EAEX,MAAMkuB,EAAmF,QAA1ElxE,EAAKmL,MAAAA,OAAyC,EAASA,EAAQ+lE,aAA0B,IAAPlxE,EAAgBA,EAAK,GAYtH,IAAI/H,EAAQ,EAsBZ,OArBAhF,KAAK4kC,WAAa,EAClBmrB,EAASunB,KAAKp5D,SAAQ,CAAC6yC,EAAM3/C,EAAOkmE,KAChC,MAAM3jE,EAAUo8C,EAASx9C,IAAIw+C,GACvByqB,EAAcpqE,EAAQ,EAAI2+C,EAASx9C,IAAI+kE,EAAKlmE,EAAQ,SAAMtO,EAC1DgwD,EAAc1hD,EAAQkmE,EAAKxyE,OAAS,EAAIirD,EAASx9C,IAAI+kE,EAAKlmE,EAAQ,SAAMtO,GAdlF,SAAco7E,EAASl5E,EAAOm+C,EAAMj3C,GAChCgyE,EAAQ71E,KAAK61E,EAAQj2E,OAASjD,GAC9Bk5E,EAAQjqC,sBAAsBR,QAAQr3B,MAAQpX,EAC9Ck5E,EAAQjqC,sBAAsBR,QAAQp3B,OAASrX,EAC3Cm+C,IACAA,EAAKlP,sBAAsBR,QAAQp3B,OAASrX,GAC5CkH,IACAA,EAAK+nC,sBAAsBR,QAAQr3B,MAAQpX,GAQ/CyD,CAAKkL,EAAS3O,EAAOw2E,EAAa1oB,GAClC,MAAMqrB,GAAQvH,GAASjjE,EAAQ4xB,eAAehzB,KAAK3N,GAAMA,EAAEqvC,sBAAsBN,MAAMG,aACnFqqC,EAAO,EACPn5E,GAASb,KAAKqlC,IAAI71B,EAAQsgC,sBAAsBR,QAAQp3B,MAAOlY,KAAK6C,IAAIm3E,IAEnEA,EAAO,IAERn5E,EADA8tD,EACQ3uD,KAAKqlC,IAAIspB,EAAY7e,sBAAsBR,QAAQp3B,MAAOlY,KAAK6C,IAAIm3E,IAGnE,GAGhBn5E,GAASi5E,EACTj+E,KAAK4kC,YAAc5/B,KAEhBhF,KAAKm7E,WAOhBxlC,aACI,MAAMyoC,EAAsBruB,GAAaA,EAASunB,KAAKp5D,SAAS6yC,GAAShB,EAASx9C,IAAIw+C,GAAMpb,eAK5F,OAJI31C,KAAKq4E,kBACL+F,EAAmBp+E,KAAKq4E,kBACxBr4E,KAAKo4E,cACLgG,EAAmBp+E,KAAKo4E,cACrBp4E,KAMXquD,WAAWnpB,GAGP,OAFAllC,KAAK+6E,uBAAuB71C,GAC5BllC,KAAKm4E,kBAAmB,EACjBn4E,KAYXsuD,OAAOppB,EAAQ6yC,EAAc7/D,GACzB,MAAM2vD,EAAOxnE,OAAO0V,OAAO,CAAEijE,aAAa,GAAS9gE,GACnDlY,KAAKklC,OAASA,EACd,MAAM2mB,EAAgB7rD,KAAK43E,iBAAiB/rB,cAU5C,OATIA,GACA7rD,KAAKklC,OAAOhnB,SAASmvC,GAAMA,EAAEN,iBAAiBlB,KAElD7rD,KAAK45E,WAAW10C,EAAQ2iC,EAAKmR,aAC7Bh5E,KAAKm6E,mBAAmBj1C,GACxBllC,KAAKy1C,UAAUsiC,EAAclQ,EAAKl0D,QAASuxB,EAAQ2iC,EAAK3tD,OAEpD2tD,EAAK3tD,OACLla,KAAK21C,aACF31C,KAGXk5E,cAAch0C,EAAQhrB,EAAOmkE,GACzB,MAAMnmE,EAAU7X,OAAO0V,OAAO,CAAEpC,QAASuG,EAAM9E,cAAgBipE,GAEzDtG,EAAe79D,EAAMs3D,cAAgBt3D,EAAMigC,gBAAkB61B,GAAMmB,eAEzE,OApuBR,YAAcluE,GACNmrD,GAAUltB,OACVn+B,EAAI,qBAAsBE,GAiuB1B,CAAE,+BAAgC80E,GAC3B/3E,KAAKsuD,OAAOppB,EAAQ6yC,EAAc7/D,GAE7C2F,eAAekzC,GACX,IAAIhkD,EACJ,OAAoC,QAA5BA,EAAK/M,KAAKo4E,oBAAiC,IAAPrrE,OAAgB,EAASA,EAAGwF,IAAIw+C,IC3uB7E,IAAIutB,GD+uBXlwB,GAAUltB,OAAQ,EC9uBlB,SAAWo9C,GACPA,EAAeA,EAAuB,QAAK,GAAK,SAChDA,EAAeA,EAAoB,IAAI,GAAK,MAFhD,CAGGA,KAAmBA,GAAiB,KAChC,MAAMC,WAAexrE,EACxB1R,YAAYw8B,EAAO3lB,EAAU,IAIzB,GAHAzV,QACAzC,KAAKw+E,iBAAmB,GACxBx+E,KAAKy+E,aAAe,IACf5gD,IAAUA,EAAM/4B,OACjB,MAAM,IAAIzC,EAAa,eAAgB,iCAE3CrC,KAAKkY,QAAUA,EACflY,KAAK69B,MAAQA,EACb79B,KAAK0+E,UAAsC57E,MAA1B9C,KAAKkY,QAAQwmE,UAAyB1+E,KAAKkY,QAAQwmE,UAAY7gD,EAAM/4B,OAGlF9E,KAAKkY,QAAQymE,gBACb3+E,KAAK4+E,kCAET5+E,KAAK6+E,eAAiB7+E,KAAKkY,QAAQ2mE,gBAAkB7+E,KAAKkY,QAAQymE,gBAAkB,EACtD77E,MAA1B9C,KAAKkY,QAAQ4mE,UACb9+E,KAAK8+E,UAAY9+E,KAAKkY,QAAQ4mE,UAG9B9+E,KAAK8+E,UAAYjhD,EAAMymB,MAAM5nC,IAAUA,EAAK+8B,YAEhDz5C,KAAK++E,QACuBj8E,MAAxB9C,KAAKkY,QAAQ6mE,QAAuB/+E,KAAKkY,QAAQ6mE,QAAU56E,KAAK6C,IAAIhH,KAAK6+E,eAAiB7+E,KAAK0+E,WAAa,EAChH1+E,KAAK6W,MAAQ0lB,EAAOoF,mBAAmBvxB,aAAa,sBACpDpQ,KAAKgZ,MAAQ,GACbhZ,KAAK+Y,MAAQ,IACb/Y,KAAKyJ,MAAQ,IACbzJ,KAAKg/E,kBAAkBh/E,KAAKkY,QAAQ+mE,UAAYV,GAAOW,cACvD9wB,GAAUyrB,kBAAkBh8C,GAAO,GAAM,GACzC79B,KAAKm/E,gBACLn/E,KAAKo/E,SAEE99E,sBACP,OAAOG,EAAS88E,OAETW,0BACP,OAAOZ,GAAevxC,IAEfsyC,6BACP,OAAOf,GAAepwC,OAEfoxC,4BACP,OAAO,GAGA7vE,qBACP,OAAO8sB,EAAOoF,mBAAmB7xB,aAAaK,OAAOukC,OAEzD0qC,SACI,IAAK,IAAI13E,EAAI,EAAGA,EAAI1H,KAAK69B,MAAM/4B,OAAQ4C,IAAK,CAC3B1H,KAAK69B,MAAMn2B,GACnBytC,UAAUn1C,OAGvBu/E,SACI,IAAK,IAAI73E,EAAI,EAAGA,EAAI1H,KAAK69B,MAAM/4B,OAAQ4C,IAAK,CAC3B1H,KAAK69B,MAAMn2B,GACnBktC,YAAY50C,OAMzBw/E,aAAaV,GAET,OADA9+E,KAAK8+E,YAAcA,EACZ9+E,KAKXy/E,WAAWV,GAEP,OADA/+E,KAAK++E,UAAYA,EACV/+E,KAKXg/E,kBAAkBC,GAOd,OANIA,IAAaV,GAAOW,cAAgBD,IAAaV,GAAOc,kBAExD/7E,QAAQC,KAAK,4BAA4B07E,kCACzCA,EAAWV,GAAOW,cAEtBl/E,KAAKi/E,SAAWA,EACTj/E,KAEX0/E,WACI,OAAO1/E,KAAK69B,MAEhBkX,eACI,OAAO/0C,KAAK0+E,UAEhBE,kCAEIt7E,QAAQC,KAAK,kGAAmG,4GAA6G,mDAEjOo8E,mBAEI,OADA3/E,KAAK4+E,kCACE5+E,KAAKg1C,mBAEhB4qC,iBAAiBC,GAEb,OADA7/E,KAAK4+E,kCACE5+E,KAAK8/E,iBAAiBD,GAEjC7qC,mBACI,OAAOh1C,KAAK6+E,eAEhBiB,iBAAiBjiD,GACb79B,KAAKu/E,SACLv/E,KAAK6+E,eAAiBhhD,EACtB79B,KAAKm/E,gBACLn/E,KAAKo/E,SAETD,gBACIn/E,KAAKw+E,iBAAmB,GACxB,IAAI16E,EAAI9D,KAAK0+E,UACb,KAAO56E,GAAK,GACR9D,KAAKw+E,iBAAiBuB,QAAQ,IAAIjpE,EAAM,UAAahT,EAAI,GAAK9D,KAAK6W,QACnE/S,EAAIC,UAAUD,EAAI,IAAImD,WAAY,IAItC,IAFAjH,KAAKy+E,aAAe,GACpB36E,EAAI9D,KAAK6+E,eACF/6E,GAAK,GACR9D,KAAKy+E,aAAasB,QAAQ,IAAIjpE,EAAM,UAAahT,EAAI,GAAK9D,KAAK6W,QAC/D/S,EAAIC,UAAUD,EAAI,IAAImD,WAAY,IAM1C+4E,uBACI,MAAMf,EAAWj/E,KAAKi/E,SAChB70B,EAAapqD,KAAK69B,MAAM,GAC9B,IAAIoiD,EAAiBC,EAAa91B,EAAY60B,GAC1CkB,EAAiBD,EAAa91B,EAAY60B,GAG9C,SAASiB,EAAaxjE,EAAMuiE,GACxB,OAAOviE,EAAKi4B,iBAAiBic,QAAQlc,GAAWA,EAAOuqC,WAAaA,IAAUn6E,OAOlF,OALA9E,KAAK69B,MAAM3f,SAASxB,IAChB,MAAM0jE,EAAcF,EAAaxjE,EAAMuiE,GACvCgB,EAAiBG,EAAcH,EAAiBG,EAAcH,EAC9DE,EAAiBC,EAAcD,EAAiBC,EAAcD,KAE3DF,EAAiBE,EAG5BE,eAGI,MAAMC,EAAyBtgF,KAAKggF,uBAAyBzB,GAAOe,gBAAkBt/E,KAAKi/E,SAErF/1C,EAAWlpC,KAAKkY,QAAQgxB,UAAY,EAGpCkhB,EAAapqD,KAAK69B,MAAM,GAC9B,IAAI7kB,EACJ,GAAIhZ,KAAKi/E,WAAaV,GAAOW,aAAc,CACvClmE,EAAQoxC,EAAWrvC,aAAa0nB,YAAY,GAAK87C,GAAO9uE,QAAQ8wE,kBAEhE,IAAK,IAAI74E,EAAI,EAAGA,EAAI1H,KAAK69B,MAAM/4B,SAAU4C,EAAG,CACxC,MAAMgV,EAAO1c,KAAK69B,MAAMn2B,GACxB,IAAI84E,EAAW,EACf,MAAMnrC,EAAK34B,EAAKM,qBACZq4B,IACAmrC,EAAWr8E,KAAK4E,IAAIy3E,EAAUnrC,EAAG2E,WAAW/L,gBAEhD,MAAMwyC,EAAO/jE,EAAK+yB,eAAe+wC,GAAYjC,GAAO9uE,QAAQixE,eAC5D,GAAIhkE,EAAK4wB,WAAa5wB,EAAKupB,SAAU,CACjC,MAAMgoC,EAAQvxD,EAAK6wB,qBAAuB/F,EAAKe,GACzC7rB,EAAKmzB,iBAAiBnG,KAAO60C,GAAO9uE,QAAQkxE,WAC5CjkE,EAAKmzB,iBAAiBlG,MAAQ40C,GAAO9uE,QAAQixE,eACnD1nE,EAAQ7U,KAAKqlC,IAAIykC,EAAOj1D,GACpBwnE,EAAW,IACXxnE,EAAQ7U,KAAKqlC,IAAIi3C,EAAMznE,UAKlC,CACD,IAAI4nE,EAAYrC,GAAO9uE,QAAQw/D,WAE/BjvE,KAAK69B,MAAM3f,SAAS2iE,IAChB,MAAMxrC,EAAKwrC,EAAG7jE,qBACVq4B,IACAurC,EAAYz8E,KAAK4E,IAAI63E,EAAWvrC,EAAG2E,WAAWx+B,UAAY,OAGlExC,EAAQoxC,EAAWrvC,aAAa0nB,YAAYm+C,GAAarC,GAAO9uE,QAAQixE,eACxE,IAAK,IAAIh5E,EAAI,EAAGA,EAAI1H,KAAK69B,MAAM/4B,SAAU4C,EACrC,GAAI1H,KAAK69B,MAAMn2B,GAAG4lC,WAAattC,KAAK69B,MAAMn2B,GAAGu+B,SAAU,CACnD,MAAM66C,EAAW9gF,KAAK69B,MAAMn2B,GAAG6lC,qBAAuB/F,EAAKe,GACrDvoC,KAAK69B,MAAMn2B,GAAGmoC,iBAAiBlG,MAAQ40C,GAAO9uE,QAAQixE,eACtD1gF,KAAK69B,MAAMn2B,GAAGmoC,iBAAiBnG,KAAO60C,GAAO9uE,QAAQkxE,WACvDG,EAAW9nE,IACXA,EAAQ8nE,IAKxB,OAAO9nE,EAAQsnE,EAAyBp3C,EAE5Cv0B,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cAEL,MAAMo1C,EAAapqD,KAAK69B,MAAM,GACxB+pB,EAAY5nD,KAAK69B,MAAM79B,KAAK69B,MAAM/4B,OAAS,GAC5C9E,KAAK8+E,WAKN9+E,KAAK+Y,MAAQqxC,EAAW9P,cAAgB,EACxCt6C,KAAKyJ,MAAQm+C,EAAUxN,eAAiBp6C,KAAK+Y,MAAQ,IALrD/Y,KAAK+Y,MAAQqxC,EAAWnb,WACxBjvC,KAAKyJ,MAAQm+C,EAAU3Y,WAAajvC,KAAK+Y,OAO7C/Y,KAAKgZ,MAAQhZ,KAAKqgF,eAClB,MAAMU,EAAgB,CAACt3E,EAAO+O,IAAU/O,EAAQ7G,EAAQ4V,EAAM1I,aAAarG,OAE3E,IAAIA,EAAQzJ,KAAKw+E,iBAAiBjvC,OAAOwxC,EAAe,GACpD/gF,KAAK++E,UACLt1E,EAAQzJ,KAAKy+E,aAAalvC,OAAOwxC,EAAet3E,GAChDA,GAAsB,IAAbzJ,KAAK6W,OAElB,MACMmqE,EADoBhhF,KAAK+Y,MAAQ/Y,KAAKyJ,MAAQ,EACPA,EAAQ,EAErD,GAAIzJ,KAAK8+E,UAAW,CAChB,MAAMzgC,EAAar+C,KAAKyJ,MAAQ,EAAIA,EAAQ,EAAI,EAE5C40C,EAAa,IACbvlC,EAAI4kC,SAAS19C,KAAK+Y,MAAO/Y,KAAKgZ,MAAOqlC,EAAY,GACjDvlC,EAAI4kC,SAAS19C,KAAK+Y,MAAQ/Y,KAAKyJ,MAAQ,EAAIA,EAAQ,EAAI,EAAGzJ,KAAKgZ,MAAOqlC,EAAY,GAClFvlC,EAAI4kC,SAAS19C,KAAK+Y,MAAO/Y,KAAKgZ,OAAShZ,KAAKi/E,WAAaV,GAAOc,gBAAkB,EAAI,GAAI,EAAmB,GAAhBr/E,KAAKi/E,UAClGnmE,EAAI4kC,SAAS19C,KAAK+Y,MAAQ/Y,KAAKyJ,MAAOzJ,KAAKgZ,OAAShZ,KAAKi/E,WAAaV,GAAOc,gBAAkB,EAAI,GAAI,EAAmB,GAAhBr/E,KAAKi/E,WAIvH,MAAMxW,EAASlsC,EAAOoF,mBAAmBvxB,aAAa,gBAAiB,GACvE,IAAI83C,EAAW,EAMf,GALAloD,KAAKw+E,iBAAiBtgE,SAAS1F,IAC3BA,EAAMoC,OAAO9B,EAAKkoE,EAAmB94B,EAAUloD,KAAKgZ,MAAQhZ,KAAK6W,MAAQ,EAAI,EAAI4xD,GACjFvgB,GAAYtlD,EAAQ4V,EAAM1I,aAAarG,UAGvCzJ,KAAK++E,QAAS,CACd,MAAMkC,EAAUD,EAAmB94B,EAAwB,IAAbloD,KAAK6W,MAC7CqqE,EAA4B,IAAblhF,KAAK6W,MAC1BiC,EAAIQ,YACJR,EAAIg/B,IAAImpC,EAASjhF,KAAKgZ,MAAqB,IAAbhZ,KAAK6W,MAAcqqE,EAAc,EAAa,EAAV/8E,KAAKC,IAAQ,GAC/E0U,EAAIi/B,YACJj/B,EAAIa,OACJb,EAAIQ,YACJR,EAAIg/B,IAAImpC,EAASjhF,KAAKgZ,MAAqB,IAAbhZ,KAAK6W,MAAcqqE,EAAc,EAAa,EAAV/8E,KAAKC,IAAQ,GAC/E0U,EAAIi/B,YACJj/B,EAAIa,OACJuuC,GAAyB,IAAbloD,KAAK6W,MACjB7W,KAAKy+E,aAAavgE,SAAS1F,IACvBA,EAAMoC,OAAO9B,EAAKkoE,EAAmB94B,EAAUloD,KAAKgZ,MAAQhZ,KAAK6W,MAAQ,EAAI,EAAI4xD,GACjFvgB,GAAYtlD,EAAQ4V,EAAM1I,aAAarG,YCtTvD,SAAS03E,GAAuBtjD,GAC5B,IAAIujD,EAAU,EAQd,OAPAvjD,EAAM3f,SAASxB,IACPA,EAAK65B,UACL75B,EAAK65B,SAASr4B,SAASmjE,IACnBD,GAAWC,EAAQn+E,KAAO,QAIlCk+E,GAAW,EACJ55C,EAAKgB,KAEThB,EAAKe,GAShB,MAAM+4C,GAAY,IAEZC,GAAY,IAEX,MAAM9yB,WAAa17C,EACtB1R,YAAYw8B,EAAOi5B,GAAY,GAI3B,GAHAr0D,QACAzC,KAAKwhF,MAAQ,EACbxhF,KAAKqX,QAAU,GACVwmB,GAA0B,IAAjBA,EAAM/4B,OAChB,MAAM,IAAIzC,EAAa,eAAgB,+BAE3C,GAAqB,IAAjBw7B,EAAM/4B,OACN,MAAM,IAAIzC,EAAa,eAAgB,2BAI3C,GADArC,KAAKm+B,MAAQN,EAAM,GAAGgY,oBAClB71C,KAAKm+B,OAAS5B,EAAO+b,gBAAgB,KACrC,MAAM,IAAIj2C,EAAa,eAAgB,mEAE3C,IAAIqF,EACAgV,EAEJ,IADA1c,KAAKkoC,eAAiBV,EAAKe,GACtB7gC,EAAI,EAAGA,EAAIm2B,EAAM/4B,SAAU4C,EAE5B,GADAgV,EAAOmhB,EAAMn2B,GACTgV,EAAK4wB,UAAW,CAChBttC,KAAKkoC,eAAiBxrB,EAAK6wB,mBAC3B,MAGR,IAAIrF,EAAiBloC,KAAKkoC,eAE1B,GAAI4uB,GAAa/0D,EAAY87B,EAAM,IAC/BqK,EAAiBi5C,GAAuBtjD,QAEvC,GAAIi5B,GAAa30D,EAAU07B,EAAM,IAAK,CAEvC,MAAM4jD,EAAc5jD,EAAM0R,QAAO,CAACmyC,EAAMhlE,IAASglE,EAAOhlE,EAAK6wB,oBAAoB,GACjFrF,EAAiBu5C,GAAe,EAAIj6C,EAAKe,GAAKf,EAAKgB,KAGvD,IAAK9gC,EAAI,EAAGA,EAAIm2B,EAAM/4B,SAAU4C,EAC5BgV,EAAOmhB,EAAMn2B,GACTovD,IACAp6C,EAAK64C,iBAAiBrtB,GACtBloC,KAAKkoC,eAAiBA,GAE1BxrB,EAAKg9B,QAAQ15C,MAEjBA,KAAK41C,eAAgB,EACrB51C,KAAK69B,MAAQA,EACb79B,KAAK4gC,WAAa5gC,KAAKq1D,eACvBr1D,KAAK2hF,iBAAmB,GACxB3hF,KAAKmhC,eAAiB,CAClButB,WAAY,EACZkzB,UAAW,IACXC,WAAY,IACZC,iBAAkB,GAClBC,WAAY,IACZC,eAAe,EACfC,kBAAmB,EACnBtzB,oBAAqB,GACrBuzB,YAAY,EACZC,qBAAsB,IAGnB7gF,sBACP,OAAOG,EAASgtD,KAGpBlhB,mBACI,OAAOvtC,KAAKkoC,eAOhBzjC,4BAA4B29E,GACnBA,GAAyB,MAAbA,IACbA,EAAW,OAEf,MAkBMrzB,EAlBW,CACb,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,MAAO,CAAC,OACR,OAAQ,CAAC,QACT,OAAQ,CAAC,QACT,OAAQ,CAAC,QACT,OAAQ,CAAC,SAEWqzB,GACxB,QAAet/E,IAAXisD,EAiBA,OAAOA,EAAOx8C,KAAKy8C,IAAU,IAAI3qD,GAAWmD,MAAMwnD,KAjB5B,CAGtB,MAAMqzB,EAAYt+E,SAASq+E,EAASz6E,MAAM,KAAK,GAAI,IAC7C26E,EAAYv+E,SAASq+E,EAASz6E,MAAM,KAAK,GAAI,IAEnD,GADoB06E,EAAY,GAAM,EAElC,MAAO,CAAC,IAAIh+E,EAAS,EAAGi+E,IAEvB,GAAIA,EAAY,EACjB,MAAO,CAAC,IAAIj+E,EAAS,EAAGi+E,IAEvB,GAAIA,GAAa,EAClB,MAAO,CAAC,IAAIj+E,EAAS,EAAGi+E,IAMhC,MAAO,CAAC,IAAIj+E,EAAS,EAAG,IAS5BI,wBAAwB4gC,EAAO6C,EAAgB6mB,GAC3C,OAAON,GAAK8zB,cAAcl9C,EAAME,eAAgB,CAAEwpB,OAAAA,EAAQ7mB,eAAAA,IA2B9DzjC,qBAAqBo5B,EAAO2kD,EAAS,IAC5BA,EAAOzzB,QAAWyzB,EAAOzzB,OAAOjqD,SACjC09E,EAAOzzB,OAAS,CAAC,IAAI1qD,EAAS,EAAG,KAGrC,MAAMo+E,EAAaD,EAAOzzB,OAAOx8C,KAAKy8C,IAClC,IAAKA,EAAMjpD,SACP,MAAM,IAAI1D,EAAa,oBAAqB,0DAEhD,OAAO2sD,EAAMtoD,QAAQX,SAASw2B,EAAOzW,WAAY,MAE/C48D,EAAmB7kD,EACzB,IAAI8kD,EAAmB,EACnBC,EAAa,GACbC,EAAe,GAInB,SAASC,IACDL,EAAW39E,OAAS,EAAI69E,EACxBA,GAAoB,EAGpBA,EAAmB,GAG3B,WACI,IAAII,EAAY,GAEZC,EAAyB,IAAI3+E,EAAS,EAAG,GAC7Cq+E,EAAiBxkE,SAAS+kE,IAEtB,GADAF,EAAY,GACRE,EAAgBz9C,oBAGhB,OAFAo9C,EAAW/qE,KAAKgrE,QAChBA,EAAeE,GAGnBF,EAAahrE,KAAKorE,GAClB,MAAMC,EAAgBT,EAAWE,GAAkBj8E,QAC7ColD,GAxBSq3B,EAwBkBN,EAvB9BM,EAAS5zC,QAAO,CAACmyC,EAAMhlE,IAASA,EAAKgpB,WAAWh/B,QAAQnB,IAAIm8E,IAAO,IAAIr9E,EAAS,EAAG,KAuBvCkB,IAAIy9E,GAxB3D,IAAuBG,EA0Bf,MAAMC,EAAa7mD,EAAOm4B,iBAAiBuuB,EAAgB9pC,eAAiB,EAK5E,GAJIiqC,GAAcH,EAAgBxuC,cAC9ByuC,EAAc5+E,WAAa,GAG3BwnD,EAAWxlD,YAAY48E,GAAgB,CAGvC,IAAKE,EAAY,CACb,MAAM1mE,EAAOmmE,EAAa3tC,MACtBx4B,GACAqmE,EAAUlrE,KAAK6E,GAEvBkmE,EAAW/qE,KAAKgrE,GAKhB,GACIG,EAAyBl3B,EAAWhmD,SAAS28E,EAAWE,IACxDG,UACKE,EAAuBz8E,kBAAkBk8E,EAAWE,KAC7DE,EAAeE,OAEVj3B,EAAW7lD,OAAOi9E,KACvBN,EAAW/qE,KAAKgrE,GAChBG,EAAyB,IAAI3+E,EAAS,EAAG,GACzCw+E,EAAeE,EACfD,QAIJD,EAAa/9E,OAAS,GACtB89E,EAAW/qE,KAAKgrE,GA6GxBQ,GA3FA,WACI,MAAMC,EAAkB,GACxBV,EAAW1kE,SAAS8wC,IAChB,IAAIu0B,EAAY,GAChBv0B,EAAM9wC,SAAQ,CAACxB,EAAMtL,EAAO49C,KACxB,MAAMw0B,EAA0B,IAAVpyE,GAAeA,IAAU49C,EAAMlqD,OAAS,EACxDo9B,EAAW8sB,EAAM59C,EAAQ,GACzBqyE,GAAoBjB,EAAOkB,YAAchnE,EAAKupB,SAC9C09C,EAA0BnB,EAAOkB,YAAclB,EAAOoB,kBAAoBlnE,EAAKupB,UAAYu9C,EACjG,IAAIK,GAAoB,EACxB,GAAIrB,EAAOsB,0BAA4B5hD,IAAaxlB,EAAKupB,WAAa/D,EAAS+D,SAAU,CACrF,MAAM89C,EAAgB7hD,EAASqL,mBAE/Bs2C,EADyBnnE,EAAK6wB,qBACWw2C,EAE7C,MAAMC,EAAuBjgF,SAAS2Y,EAAKy8B,cAAe,IAAM,EAE5CsqC,GAAoBE,GAA2BE,GAAqBG,GAGhFT,EAAUz+E,OAAS,GACnBw+E,EAAgBzrE,KAAK0rE,GAKzBA,EAAYM,EAAoB,CAACnnE,GAAQ,IAIzC6mE,EAAU1rE,KAAK6E,MAInB6mE,EAAUz+E,OAAS,GACnBw+E,EAAgBzrE,KAAK0rE,MAG7BX,EAAaU,EAsDjBW,GAnDIrB,EAAW1kE,SAAS8wC,IAChB,IAAI3hB,EACJ,GAAIm1C,EAAOsB,yBAA0B,CACjC,MAAMpnE,EAclB,SAAuBsyC,GACnB,IAAK,IAAItnD,EAAI,EAAGA,EAAIsnD,EAAMlqD,OAAQ4C,IAAK,CACnC,MAAMgV,EAAOsyC,EAAMtnD,GACnB,IAAKgV,EAAKupB,SACN,OAAOvpB,EAGf,OAAO,EArBcwnE,CAAcl1B,GAC3B3hB,EAAgB3wB,EAAOA,EAAK6wB,mBAAqB/F,EAAKe,QAIlD8E,EADAm1C,EAAOt6C,eACSs6C,EAAOt6C,eAGPi5C,GAAuBnyB,IAevD,SAA4BA,EAAOzqC,GAC/ByqC,EAAM9wC,SAASxB,IACXA,EAAK64C,iBAAiBhxC,MAdtB4/D,CAAmBn1B,EAAO3hB,MAwClC,MAAM+2C,EA7GKxB,EAAWhyB,QAAQ5B,IACtB,GAAIA,EAAMlqD,OAAS,EAAG,CAClB,IAAIu/E,GAAW,EAMf,OALAr1B,EAAM9wC,SAASxB,IACPA,EAAKm5B,qBAAuBtZ,EAAO+b,gBAAgB,OACnD+rC,GAAW,MAGZA,EAEX,OAAO,KAqGTC,EAxBN,WACI,MAAMC,EAAgB,GAYtB,OAVA3B,EAAW1kE,SAAS8wC,IAChB,IAAIta,EACJsa,EAAM9wC,SAASxB,IACX,MAAM8nE,EAAa9nE,EAAK+3B,YACpB+vC,GAAc9vC,IAAW8vC,IACzB9vC,EAAS8vC,EACTD,EAAc1sE,KAAK68B,UAIxB6vC,EAWQE,GAEb52B,EAAQ,GA+Bd,OA9BAu2B,EAAiBlmE,SAAS8wC,IACtB,MAAMzV,EAAO,IAAIkV,GAAKO,GAClBwzB,EAAOR,gBACPzoC,EAAKpY,eAAe6gD,eAAgB,GAEpCQ,EAAOkC,mBACPnrC,EAAKpY,eAAewjD,sBAAwBpoD,EAAO+b,gBAAgBkqC,EAAOkC,oBAEpD,IAAtBlC,EAAON,aACP3oC,EAAKpY,eAAe+gD,YAAa,EACjC3oC,EAAKpY,eAAeyjD,iBAAmBpC,EAAOoC,kBAElD/2B,EAAMh2C,KAAK0hC,MAGf+qC,EAAWpmE,SAASw2B,IAEhB,MAAMnwB,EAAYmwB,EAAO7W,MAAM,GAAGqK,iBAAmBV,EAAKgB,KAAO81C,GAAepwC,OAASowC,GAAevxC,IACxG2H,EAAOsqC,kBAAkBz6D,GAEzB,IAAIu6D,GAAY,EAChB,IAAK,IAAIp3E,EAAI,EAAGA,EAAIgtC,EAAO7W,MAAM/4B,OAAQ4C,IAAK,CAE1C,IADagtC,EAAO7W,MAAMn2B,GAChB+xC,UAAW,CACjBqlC,GAAY,EACZ,OAGRpqC,EAAO8qC,aAAaV,MAEjBjxB,EAGX6xB,WACI,OAAO1/E,KAAK69B,MAGhBw3B,eAGI,OAFmBr1D,KAAK69B,MAAMtrB,KAAKmK,GAASA,EAAKu8B,WAAWrY,aAC5B2O,QAAO,CAACxmC,EAAK87E,IAAeA,EAAY97E,EAAM87E,EAAY97E,IAI9F+7E,iBAAiBC,GAEb,OADA/kF,KAAK2hF,iBAAmBoD,EACjB/kF,KAGXglF,UAAUniF,EAAG+nD,EAAYC,EAAY22B,GACjC,OAAO32B,GAAchoD,EAAI+nD,GAAc42B,EAG3CyD,iBACI,MAAM,MAAEpnD,EAAOqK,eAAgBmF,EAAelM,gBAAgB,UAAEygD,EAAS,UAAEC,EAAS,iBAAEC,EAAgB,WAAEC,IAAkB/hF,KACpHklF,EAAYrnD,EAAM,GAClBsnD,EA3Zd,SAAsBD,EAAWl8B,GAC7B,MAAMo8B,EAAgBF,EAAUr1C,iBAAiBnG,KAC3C27C,EAAaH,EAAUj2C,WAG7B,OAFqB+Z,EAASnZ,iBAAiBnG,KAExB07C,IADLp8B,EAAS/Z,WAC0Bo2C,GAsZ5BC,CAAaJ,EAAWrnD,EAAMA,EAAM/4B,OAAS,IAC5DgsC,GAAa8wC,EAAYC,GAAaC,EAC5C,IAAIyD,EAAU7gF,OAAO8gF,UACjBC,EAAY,EACZ/qE,EAAS,EAEb,IAAK,IAAI8mE,EAAQK,EAAWL,GAASI,EAAWJ,GAAS1wC,EAAW,CAChE,IAAI40C,EAAqB,EACrBC,EAAa,EAEjB,IAAK,IAAIj+E,EAAI,EAAGA,EAAIm2B,EAAM/4B,SAAU4C,EAAG,CACnC,MAAMgV,EAAOmhB,EAAMn2B,GACnB,GAAIgV,EAAK4wB,WAAa5wB,EAAKupB,SAAU,CACjC,MAAM2/C,EAAmB5lF,KAAKglF,UAAUtoE,EAAKuyB,WAAYi2C,EAAUj2C,WAAYi2C,EAAUr1C,iBAAiBnG,KAAM83C,GAASmE,EACnHxzC,EAAWz1B,EAAKmzB,iBAAiBnG,KAEvC,GAAIyI,EAAW9E,EAAgBu4C,EAAmBv4C,EAAe,CAC7D,MAAMw4C,EAAO1hF,KAAK6C,IAAImrC,EAAWyzC,GACjCD,GAAcE,GAAQx4C,EACtBq4C,GAAsBG,EAAOn+E,OAI7Bg+E,IAAuBvzC,EAAWyzC,GAAoBv4C,GAMlE,MAAMy4C,EAAaX,EAAe,EAI5BhH,EAAO4D,EAHa59E,KAAK6C,IAAI8+E,EAAatE,GAGFr9E,KAAK6C,IAAI0+E,GAEnDvH,EAAOoH,IACPA,EAAUpH,EACVsH,EAAYjE,EACZ9mE,EAASirE,GAGjB3lF,KAAKwhF,MAAQiE,EACbzlF,KAAKqX,QAAUqD,EAGnBqrE,qBACI,MAAM,MAAEloD,EAAK,eAAEqK,EAAgB/G,gBAAgB,WAAEutB,EAAU,qBAAEyzB,EAAoB,iBAAEyC,IAAwB5kF,KAG3G,IAAIu4E,EAAQ,EACRyN,EAAW,EACXC,EAAmB,EACnBC,EAAiB,EACrB,IAAK,IAAIx+E,EAAI,EAAGA,EAAIm2B,EAAM/4B,OAAQ4C,IAAK,CAEnC,MAAMgV,EAAOmhB,EAAMn2B,GACbyqC,EAAWz1B,EAAKmzB,iBAAiBnG,KACvC6uC,GAASpmC,EAGLjK,IAAmBV,EAAKgB,MAAQ09C,EAAiB/zC,GACjD+zC,EAAiB/zC,EACjB6zC,EAAW7hF,KAAK4E,OAAO2T,EAAK4yB,SAC5B22C,EAAmBvpE,EAAK24C,gBAEnBntB,IAAmBV,EAAKe,KAA0B,IAAnB29C,GAAwBA,EAAiB/zC,KAC7E+zC,EAAiB/zC,EACjB6zC,EAAW7hF,KAAKqlC,OAAO9sB,EAAK4yB,SAC5B22C,EAAmBvpE,EAAK24C,gBAKhC,IAAI2U,EAASuO,EAAQ16C,EAAM/4B,OAK3B,MACMqhF,EAAchE,EAAuB8D,GADZ,IAAbv3B,GAEZ03B,EAAYJ,EAAWG,GAAej+C,EACxCA,IAAmBV,EAAKgB,MAAQwhC,EAASoc,EACzCpc,EAASgc,EAAWG,EAEfj+C,IAAmBV,EAAKe,IAAMyhC,EAASoc,IAC5Cpc,EAASgc,EAAWG,GAEnBvB,GAII18C,IAAmBV,EAAKgB,MAAQwhC,EAAS4a,GAGzC18C,IAAmBV,EAAKe,IAAMyhC,EAAS4a,KAF5C5kF,KAAKmhC,eAAeyjD,iBAAmB5a,GAHvChqE,KAAKmhC,eAAeyjD,iBAAmB5a,EAS3ChqE,KAAKwhF,MAAQ,EACbxhF,KAAKqX,QAAU,EAGnBgvE,iBAGI,IAAIC,EAFctmF,KAAK69B,MAAM,GACGgS,iBAAiBnG,KAOjD,OAHI1pC,KAAKmhC,eAAe+gD,YAAcliF,KAAKmhC,eAAeyjD,mBACtD0B,EAAQtmF,KAAKmhC,eAAeyjD,kBAEzB0B,EAMXC,sBACI,MAAM,MAAE1oD,EAAK,MAAE2jD,EAAK,QAAEnqE,EAAO,eAAE6wB,EAAc,WAAEtH,EAAYO,gBAAgB,cAAE6gD,EAAa,kBAAEC,EAAiB,WAAEvzB,IAAkB1uD,KAC3HklF,EAAYrnD,EAAM,GAClBunD,EAAgBplF,KAAKqmF,iBACrBhB,EAAaH,EAAUj2C,WAC7B,IAAK,IAAIvnC,EAAI,EAAGA,EAAIm2B,EAAM/4B,SAAU4C,EAAG,CACnC,MAAMgV,EAAOmhB,EAAMn2B,GACb44B,EAAO5jB,EAAKgxB,UAClB,GAAIpN,EAAM,CACN,MAAM08B,EAAQtgD,EAAKuyB,YACXvF,KAAMyI,GAAaz1B,EAAKmzB,iBAC1B22C,EAAiBxmF,KAAKglF,UAAUhoB,EAAOqoB,EAAYD,EAAe5D,GAASnqE,EAC3EovE,EAAmBnmD,EAAKyI,eACxB29C,EAAgBx+C,IAAmBV,EAAKe,GAAK4J,EAAWq0C,EAAiBA,EAAiBr0C,EAGhG,GAFA7R,EAAKuI,aAAa49C,EAAmBC,GACrCpmD,EAAK0J,sBACDttB,EAAKupB,UAAY+7C,EAAe,CAChC,MACM2E,GAAkB/lD,EAAa,GADnB8tB,EACoC,IADpCA,EAElBpuB,EAAKsJ,eAAc,GAAME,YAAW,EAAM68C,EAAiB1E,MAM3E2E,oBAAoB7oD,EAAU8oD,EAAW91B,EAAM+1B,GAC3C,GAAiB,MAAb/oD,EACA,OAAOujD,GAEX,MAAMyF,EAAkB,GAAGxqD,EAAOm4B,iBAAiB32B,GAAY,EACzDipD,EAAsBH,EAAYtqD,EAAO+b,gBAAgByuC,GACzDE,EAAsBH,EAAYvqD,EAAO+b,gBAAgByuC,GACzDG,EAAiBn2B,EAAOx0B,EAAO+b,gBAAgByuC,GACrD,OAAIC,GAAuBC,GAAuBC,EACvC3F,GAEFyF,IAAwBC,GAAuBC,EAC7C5F,IAED0F,GAAuBC,GAAuBC,EA/iB7C,IAkjBJlnF,KAAK4mF,oBAAoBG,EAAiBF,EAAW91B,EAAM+1B,GAGtEK,aAAappD,GACT,MAAMqpD,EAAmB7qD,EAAO+b,gBAAgBva,GAChD,IAAIspD,GAAe,EACnB,MAAMC,EAAa,GACnB,IAAIC,EACJ,MAAM54B,EAAsB3uD,KAAKmhC,eAAewtB,oBAChD,IAAI64B,GAAwB,EACxBC,EAAa,EACjB,IAAK,IAAI//E,EAAI,EAAGA,EAAI1H,KAAK69B,MAAM/4B,SAAU4C,EAAG,CACxC,MAAMgV,EAAO1c,KAAK69B,MAAMn2B,GAGxB+/E,GADc/qE,EAAKgpB,WAAWxgC,QAE9B,IAAIwiF,GAAe,EAEf3jF,SAASg6B,EAAU,KAAO,IAE1B2pD,GAAqD,IAAtC1nF,KAAK2hF,iBAAiBn7C,QAAQ9+B,GAGzC1H,KAAKmhC,eAAewjD,uBAAyB8C,GAAcznF,KAAKmhC,eAAewjD,wBAC/E8C,EAAa,EACbC,GAAe,IAGvB,MAAMR,EAAiBxqE,EAAKm5B,oBAAsBuxC,EAC5Cn9C,EAASvtB,EAAKuyB,WAAazH,EAAKiB,MAAQ,EAGxC4f,EAAYroD,KAAK69B,MAAMn2B,EAAI,GAC3BigF,EAAY3nF,KAAK69B,MAAMn2B,EAAI,GAC3Bu/E,EAAsBU,GAAaA,EAAU9xC,oBAAsBuxC,EACnEJ,EAAsB3+B,GAAaA,EAAUxS,oBAAsBuxC,EACnEQ,EAAav/B,GAAas/B,GAAaT,IAAmBF,IAAwBC,EAExF,GAAIC,EAEA,GAAIG,EAGAE,EAAeD,EAAWA,EAAWxiF,OAAS,GAC9CyiF,EAAa1qC,IAAM5S,EAEfy9C,IACAL,GAAe,EACXM,IAAcV,QAA4CnkF,IAArBykF,EAAa1qC,MAGlD0qC,EAAa1qC,IAAM0qC,EAAangD,MAAQunB,QAI/C,CAID,GAFA44B,EAAe,CAAEngD,MAAO6C,EAAQ4S,SAAK/5C,GACrCukF,GAAe,EACXO,EAAY,CAEZ,MAAMf,EAAYx+B,EAAUxS,oBACtBixC,EAAYa,EAAU9xC,oBACtBkb,EAAOr0C,EAAKm5B,oBACZgyC,EAAiB7nF,KAAK4mF,oBAAoB7oD,EAAU8oD,EAAW91B,EAAM+1B,GACvE,CAACxF,GAAWC,IAAWzuE,SAAS+0E,GAChCN,EAAa1qC,IAAM0qC,EAAangD,MAAQunB,EAGxC44B,EAAa1qC,IAAM0qC,EAAangD,MAAQunB,OAGtCs4B,EAYDS,IAGLH,EAAa1qC,IAAM0qC,EAAangD,MAAQunB,EACxC04B,GAAe,GAXXE,EAAa1qC,KAHZ2qC,GAA+B,IAAN9/E,IAAYigF,EAGnBJ,EAAangD,MAAQunB,EAIrB44B,EAAangD,MAAQunB,EAShD24B,EAAWzvE,KAAK0vE,QAKpBF,GAAe,EAInBG,EAAwBE,EAG5B,MAAMI,EAAYR,EAAWA,EAAWxiF,OAAS,GAIjD,OAHIgjF,QAA+BhlF,IAAlBglF,EAAUjrC,MACvBirC,EAAUjrC,IAAMirC,EAAU1gD,MAAQunB,GAE/B24B,EAGXS,UAAUjvE,GACN9Y,KAAK69B,MAAM3f,SAASxB,IAChB,MAAM4jB,EAAO5jB,EAAKgxB,UACdpN,GACAA,EAAKjrB,WAAWyD,GAAKnE,SAE1B3U,MAGPgoF,cAAclvE,GACV,MAAMmvE,EAAuB,CAAC,IAAK,IAAK,KAAM,KAAM,MAC9C/C,EAAYllF,KAAK69B,MAAM,GAC7B,IAAIyoD,EAAQtmF,KAAKqmF,iBACjB,MAAMhB,EAAaH,EAAUj2C,WACvBi5C,EAAgBloF,KAAKmhC,eAAeutB,WAAa1uD,KAAKkoC,eAE5D,IAAK,IAAIxgC,EAAI,EAAGA,EAAIugF,EAAqBnjF,SAAU4C,EAAG,CAClD,MAAMq2B,EAAWkqD,EAAqBvgF,GAChCygF,EAAYnoF,KAAKmnF,aAAappD,GACpC,IAAK,IAAIokB,EAAI,EAAGA,EAAIgmC,EAAUrjF,SAAUq9C,EAAG,CACvC,MAAMimC,EAAYD,EAAUhmC,GACtBkmC,EAAaD,EAAUhhD,MACvBkhD,EAAatoF,KAAKglF,UAAUqD,EAAYhD,EAAYiB,EAAOtmF,KAAKwhF,OAChE+G,EAAYH,EAAUvrC,IAC5B,IAAI0rC,EAWA,MAAM,IAAIlmF,EAAa,cAAe,wBAX3B,CACX,MAAMmmF,EAAYxoF,KAAKglF,UAAUuD,EAAWlD,EAAYiB,EAAOtmF,KAAKwhF,OACpE1oE,EAAIQ,YACJR,EAAIS,OAAO8uE,EAAYC,GACvBxvE,EAAIU,OAAO6uE,EAAYC,EAAaJ,GACpCpvE,EAAIU,OAAO+uE,EAAY,EAAGC,EAAYN,GACtCpvE,EAAIU,OAAO+uE,EAAY,EAAGC,GAC1B1vE,EAAIi/B,YACJj/B,EAAIa,QAMZ2sE,GAAyB,IAAhB4B,GAIjBzyC,YACI,OAAOz1C,KAOX21C,aACQ31C,KAAK41C,gBAGLzzC,EAAUnC,KAAK69B,MAAM,KAAO79B,KAAKmhC,eAAe+gD,WAChDliF,KAAK+lF,qBAGL/lF,KAAKilF,iBAETjlF,KAAKumF,sBACLvmF,KAAK41C,eAAgB,GAGzBjhC,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACDhV,KAAKojF,aAEJpjF,KAAK41C,eACN51C,KAAK21C,aAET31C,KAAK+nF,UAAUjvE,GACf9Y,KAAK0T,aACL1T,KAAKgoF,cAAclvE,GACnB9Y,KAAKuU,iBCjwBN,MAAMk0E,WAAiB3mF,GAC1BT,YAAY4P,EAAM3D,EAAM2/B,GACpBxqC,MAAM,CAAEs7B,SAAU,MAClB/9B,KAAKiR,KAAOA,EACZjR,KAAK0oF,SAAW,IAAItgB,GAAKn3D,EAAM3D,EAAM2/B,GACrCjtC,KAAKw8B,KAAOx8B,KAAK0oF,SAASlsD,KAC1Bx8B,KAAKwY,MAAQ,IAAI1B,EAAM9W,KAAKw8B,KAAKj6B,KAAMvC,KAAKw8B,KAAK3lB,OACjD7W,KAAKwc,SAASxc,KAAKwY,MAAM1I,aAAarG,OAEtCzJ,KAAKuzC,cAAe,EAEbjyC,sBACP,OAAOG,EAASgnF,SAGpBhsC,QAAQxrC,EAAM3D,EAAM2/B,GAMhB,OALAjtC,KAAKiR,KAAOA,EACZjR,KAAK0oF,SAAW,IAAItgB,GAAKn3D,EAAM3D,EAAM2/B,GACrCjtC,KAAKw8B,KAAOx8B,KAAK0oF,SAASlsD,KAC1Bx8B,KAAKwY,MAAQ,IAAI1B,EAAM9W,KAAKw8B,KAAKj6B,KAAMvC,KAAKw8B,KAAK3lB,OACjD7W,KAAKwc,SAASxc,KAAKwY,MAAM1I,aAAarG,OAC/BzJ,KAGXsqE,UACI,OAAOtqE,KAAKw8B,KAGhBnnB,WAAW1B,GAGP,OAFAlR,MAAM4S,WAAW1B,GACjB3T,KAAKwY,MAAMnD,WAAWrV,KAAKoV,cACpBpV,KAGXmV,iBACI,OAAO1S,MAAM0S,iBAIjBigC,qBAAqBC,GAEjB,OAAOr1C,KAEXy1C,YAEI,OADAz1C,KAAK01C,cAAe,EACb11C,KAGX2U,OACI,IAAI5H,EACJ,MAAMmN,EAAQla,KAAK+a,aACd/a,KAAKwY,MAAMpD,cACZpV,KAAKwY,MAAMnD,WAAWrV,KAAKoV,cAE/BpV,KAAKgV,cACL,MAAM2zE,EAAQ3oF,KAAKi2C,eAKnB,GAJAj2C,KAAKwY,MAAMyB,SAASC,GACpBla,KAAKwY,MAAM4B,UAAUF,EAAMuoB,YAAsC,QAAzB11B,EAAK/M,KAAKw8B,KAAKt5B,YAAyB,IAAP6J,EAAgBA,EAAK,GAAKmN,EAAMe,iBACzGjb,KAAKwY,MAAMwC,cAAc2tE,QAEQ7lF,IAA7B9C,KAAK0oF,SAASz7C,WAA0B,CACxC,MAAMs7B,EAAa,IAAIzxD,EAAM9W,KAAK0oF,SAASz7C,WAAW1qC,KAAMvC,KAAK0oF,SAASz7C,WAAWp2B,OAChF0xD,EAAWnzD,cACZmzD,EAAWlzD,WAAWrV,KAAKoV,cAE/BmzD,EAAWtuD,SAASC,GACpBquD,EAAWnuD,UAAUF,EAAMuoB,YAAYziC,KAAK0oF,SAASz7C,WAAW/pC,MAAQgX,EAAMe,iBAC9EstD,EAAWpuD,UAAUna,KAAK0oF,SAASz7C,WAAW71B,SAC9CmxD,EAAWvtD,cAAc2tE,KCvC9B,MAAMC,WAAkB9mF,GAE3BT,YAAY60C,GACRzzC,MAAMyzC,GACNl2C,KAAKkY,QAAU,CAEX2wE,YAAa,EACbC,aAAc,EAEdzxE,QAAS,GAGbrX,KAAK+oF,aAAc,EAEnB/oF,KAAKkD,KAAOgzC,EAAWhzC,MAAQ,EAE/BlD,KAAK0J,OAAS,GAGPpI,sBACP,OAAOG,EAASmnF,UAGpB50B,QAAQ9wD,GAEJ,OADAlD,KAAKkD,KAAOA,EACLlD,KAGXgpF,UAAUt/E,GAEN,OADA1J,KAAK0J,OAASA,EACP1J,KAIXipF,eAAeC,GAEX,OADAlpF,KAAK+oF,YAAcG,EACZlpF,KAGXy1C,YAEI,OADAz1C,KAAK01C,cAAe,EACb11C,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXwF,EAAQla,KAAK+a,aACnB/a,KAAKgV,cACL,MAAMm0E,EAAenpF,KAAK6d,iBACpBurE,EAAen6B,GAAY8D,eAAeo2B,GAC1CE,EAAUrpF,KAAKi2C,eACfg6B,EAAQmZ,EAAeA,EAAanhF,OAASiS,EAAMjS,OAASiS,EAAMqC,WAClE1U,EAAIqS,EAAMuoB,YAAYziC,KAAKkD,MAAQ,GAAK,GA5EtD,YAAcD,GACN2lF,GAAU1nD,OACVn+B,EAAI,qBAAsBE,GA2E1B,CAAE,WAAYjD,KAAK+oF,YAAc,eAAiB,aAAc/oF,KAAK0J,OAAQ,IAAK2/E,EAAUpZ,GAxEpG,SAAuBn3D,EAAK4jB,GACxB,MAAM2sD,EAAU3sD,EAAO2sD,QACjBpZ,EAAQvzC,EAAOuzC,MACfpoE,EAAI60B,EAAO70B,EACXyhF,EAAc5sD,EAAOhzB,OAAS,EACpCoP,EAAIQ,YACAojB,EAAO6sD,SACPzwE,EAAIS,OAAO8vE,EAASxhF,EAAIyhF,GACxBxwE,EAAIU,OAAOy2D,EAAOpoE,GAClBiR,EAAIU,OAAO6vE,EAASxhF,EAAIyhF,KAGxBxwE,EAAIS,OAAO02D,EAAOpoE,EAAIyhF,GACtBxwE,EAAIU,OAAO6vE,EAASxhF,GACpBiR,EAAIU,OAAOy2D,EAAOpoE,EAAIyhF,IAE1BxwE,EAAIikB,SACJjkB,EAAIi/B,YAwDAyxC,CAAc1wE,EAAK,CACfuwE,QAASA,EAAUrpF,KAAKkY,QAAQ2wE,YAChC5Y,MAAOA,EAAQjwE,KAAKkY,QAAQ4wE,aAC5BjhF,EAAGA,EAAI7H,KAAKkY,QAAQb,QACpB3N,OAAQ1J,KAAK0J,OACb6/E,QAASvpF,KAAK+oF,eCzFnB,IAAIU,GD6FXb,GAAU1nD,OAAQ,EC5FlB,SAAWuoD,GACPA,EAAcA,EAAyB,UAAI,GAAK,YAChDA,EAAcA,EAAwB,SAAI,GAAK,WAFnD,CAGGA,KAAkBA,GAAgB,KAC9B,MAAMC,WAAc32E,EAOvB1R,YAAYsoF,EAAMC,EAAI1xE,GAClBzV,QACAzC,KAAKmhC,eAAiB9gC,OAAO0V,OAAO,CAAEylC,UAAW,EAAGpkC,QAAS,EAAGC,QAAS,GAAIoE,SAAUguE,GAAcI,UAAWC,aAAcL,GAAcI,UAAWE,QAAQ,EAAOC,IAAK,CACnK,CAAEnnF,EAAG,EAAGgF,EAAG,IACX,CAAEhF,EAAG,EAAGgF,EAAG,MACVqQ,GACTlY,KAAK2pF,KAAOA,EACZ3pF,KAAK4pF,GAAKA,EAEHtoF,sBACP,OAAOG,EAASioF,MAEThuE,sBACP,OAAO+tE,GAEA5tE,4BACP,MAAO,CACHouE,SAAUR,GAAcI,UACxBK,QAAST,GAAcU,UAG/BtgC,SAAS8/B,EAAMC,GACX,IAAKD,IAASC,EACV,MAAM,IAAIvnF,EAAa,eAAgB,kDAI3C,OAFArC,KAAK2pF,KAAOA,EACZ3pF,KAAK4pF,GAAKA,EACH5pF,KAKXuqD,YACI,OAAQvqD,KAAK2pF,OAAS3pF,KAAK4pF,GAE/BQ,YAAY1tD,GACR,MAAM5jB,EAAM9Y,KAAK0U,eACX0C,EAAUpX,KAAKmhC,eAAe/pB,QAC9BC,EAAUrX,KAAKmhC,eAAe9pB,QAAUqlB,EAAOnY,UAC/C8lE,EAAU3tD,EAAO2tD,QAAUjzE,EAC3BkzE,EAAU5tD,EAAO4tD,QAAUjzE,EAC3BkzE,EAAS7tD,EAAO6tD,OAASnzE,EACzBozE,EAAS9tD,EAAO8tD,OAASnzE,EACzBmkC,EAAYx7C,KAAKmhC,eAAeqa,UAChCwuC,EAAMhqF,KAAKmhC,eAAe6oD,KACxBnnF,EAAG4nF,EAAM5iF,EAAG6iF,GAASV,EAAI,IACzBnnF,EAAG47D,EAAM52D,EAAG62D,GAASsrB,EAAI,GAC3BW,GAAcJ,EAASF,IAAYL,EAAIllF,OAAS,GACtDgU,EAAIQ,YACJR,EAAIS,OAAO8wE,EAASC,GACpBxxE,EAAIY,cAAc2wE,EAAUM,EAAaF,EAAMH,EAAUI,EAAOhuD,EAAOnY,UAAWgmE,EAASI,EAAalsB,EAAM+rB,EAAS9rB,EAAOhiC,EAAOnY,UAAWgmE,EAAQC,GACxJ1xE,EAAIY,cAAc6wE,EAASI,EAAalsB,EAAM+rB,GAAU9rB,EAAOljB,GAAa9e,EAAOnY,UAAW8lE,EAAUM,EAAaF,EAAMH,GAAWI,EAAOlvC,GAAa9e,EAAOnY,UAAW8lE,EAASC,GACrLxxE,EAAIikB,SACJjkB,EAAIi/B,YACJj/B,EAAIa,OAERhF,OACI3U,KAAK0U,eACL1U,KAAKgV,cACL,MAAMo1C,EAAapqD,KAAK2pF,KAClB/hC,EAAY5nD,KAAK4pF,GACvB,IAAIS,EACAE,EACAD,EACAE,EACAtiD,EAAiB,EACjB6Y,EAAS,QACT6pC,EAAa,QACjB,SAASxtE,EAAY3B,GACjB,MAA2B,iBAAbA,EAAwBiuE,GAAM7tE,eAAeJ,GAAYA,EAE3E,MAAMA,EAAW2B,EAAYpd,KAAKmhC,eAAe1lB,UAC3CquE,EAAe1sE,EAAYpd,KAAKmhC,eAAe2oD,cAWrD,GAVIruE,IAAaguE,GAAcU,WAC3BppC,EAAS,OACT6pC,EAAa,QAEbd,IAAiBL,GAAcI,UAC/Be,EAAa,QAERd,IAAiBL,GAAcU,WACpCS,EAAa,QAEbxgC,EACAigC,EAAUjgC,EAAWhQ,eACrBlS,EAAiBkiB,EAAW7c,mBAC5B+8C,EAAUlgC,EAAWva,iBAAiBkR,OAErC,CAEDspC,EADcziC,EAAU7sC,aACRmwC,eAChBo/B,EAAU1iC,EAAU/X,iBAAiBkR,GAEzC,GAAI6G,EACA2iC,EAAS3iC,EAAUtN,cACnBpS,EAAiB0f,EAAUra,mBAC3Bi9C,EAAS5iC,EAAU/X,iBAAiB+6C,OAEnC,CAEDL,EADcngC,EAAWrvC,aACVowC,aACfq/B,EAASpgC,EAAWva,iBAAiB+6C,GASzC,OAPA5qF,KAAKoqF,YAAY,CACbC,QAAAA,EACAE,OAAAA,EACAD,QAAAA,EACAE,OAAAA,EACAjmE,UAAW2jB,IAAiD,IAA/BloC,KAAKmhC,eAAe4oD,QAAmB,EAAI,MAErE,GC3Hf,SAAS,MAAK9mF,GACN4nF,GAAO3pD,OACPn+B,EAAI,kBAAmBE,GAQ/B,SAAS6nF,GAAe5qD,GACpB,GAAI,kBAAmBA,EACnB,OAAOA,EAAE6qD,cACb,GAAI,YAAa7qD,EACb,OAAO4qD,GAAe5qD,EAAE8qD,SAC5B,MAAMA,EAAU9qD,EAChB,OAAuB,IAAnB8qD,EAAQlmF,OACDgmF,GAAeE,EAAQ,IACX,IAAnBA,EAAQlmF,OACD,KACJkmF,EAAQz4E,IAAIu4E,IAKhB,MAAMD,GAGTxpF,YAAY4pF,GACRjrF,KAAKirF,QAAUA,EACfjrF,KAAKkD,KAAO,GACZlD,KAAKwoD,IAAM,EACXxoD,KAAKkrF,UA5BQ,EAiCjB1jF,MAAMtE,GACFlD,KAAKkD,KAAOA,EACZlD,KAAKwoD,IAAM,EACXxoD,KAAKkrF,UApCQ,EAqCb,MAAM9+E,EAASpM,KAAKmrF,OAAOnrF,KAAKirF,QAAQttC,SAExC,OADAvxC,EAAO8+E,SAAWlrF,KAAKkrF,SAChB9+E,EAEXg/E,UAAUC,IAzCO,IA0CTrrF,KAAKkrF,WACLlrF,KAAKkrF,SAAWlrF,KAAKwoD,KACzBxoD,KAAKwoD,IAAM6iC,EAEfC,eACItrF,KAAKkrF,UA/CQ,EAmDjBK,WAAWC,EAAOC,GAAU,GACxB,MAAMC,EAASD,EAAU,IAAIE,OAAO,MAAQH,EAAQ,MAAQ,IAAIG,OAAO,MAAQH,EAAQ,UAEjFp/E,EADcpM,KAAKkD,KAAKE,MAAMpD,KAAKwoD,KACd7kC,MAAM+nE,GACjC,OAAe,OAAXt/E,EACO,CACHw/E,SAAS,EACTb,cAAe3+E,EAAO,GACtBy/E,aAAcz/E,EAAO,GAAGtH,OACxB0jD,IAAKxoD,KAAKwoD,KAIP,CAAEojC,SAAS,EAAOpjC,IAAKxoD,KAAKwoD,KAO3CsjC,UAAUC,EAAMC,GAAQ,GACpB,MAAMhB,EAAU,GACVxiC,EAAMxoD,KAAKwoD,IACjB,IAAIyjC,GAAa,EACbC,GAAW,EAGf,GAFAF,GAAkB,IAAVA,IAAiC,IAAfD,EAAKC,MAE3BD,EAAKZ,OACL,IAAK,MAAMj/E,KAAQ6/E,EAAKZ,OAAQ,CAC5B,MAAMgB,EAAWnsF,KAAKwoD,IAChBp8C,EAASpM,KAAKmrF,OAAOj/E,GAG3B,GAAIE,EAAOw/E,SAGP,GAFAZ,EAAQnzE,KAAKzL,GACb8/E,GAAW,EACPH,EAAKK,GACL,WAIJ,GADAH,GAAa,GACRF,EAAKK,GAAI,CACVpsF,KAAKwoD,IAAM2jC,EACX,OAKhB,MAAME,EAAUN,EAAKK,IAAMF,GAAaD,EAClCL,EAAUS,IAAoB,IAAVL,EACpBM,EAAaD,EAAS,EAAI,EAShC,OARIL,IAAUK,IACVrsF,KAAKwoD,IAAMA,GACXojC,EACA5rF,KAAKsrF,eAGLtrF,KAAKorF,UAAU5iC,GAEZ,CAAEojC,QAAAA,EAASZ,QAAAA,EAASsB,WAAAA,GAI/BC,gBAAgBR,EAAMC,GAAQ,GAC1B,MAAMhB,EAAU,GACVxiC,EAAMxoD,KAAKwoD,IACjB,IAAI8jC,EAAa,EACbE,GAAO,EACX,EAAG,CACC,MAAMpgF,EAASpM,KAAK8rF,UAAUC,GAC1B3/E,EAAOw/E,SAAWx/E,EAAO4+E,SACzBsB,IACAtB,EAAQnzE,KAAKzL,EAAO4+E,UAGpBwB,GAAO,QAENA,GACT,MAAMZ,EAAUU,EAAa,IAAe,IAAVN,EASlC,OARIA,GAAWM,EAAa,IACxBtsF,KAAKwoD,IAAMA,GACXojC,EACA5rF,KAAKsrF,eAGLtrF,KAAKorF,UAAU5iC,GAEZ,CAAEojC,QAAAA,EAASZ,QAAAA,EAASsB,WAAAA,GAG/BG,iBAAiBV,GACb,OAAO/rF,KAAKusF,gBAAgBR,GAAM,GAKtCZ,OAAOuB,GAEH,GADA,GAAE,4BAA6BA,IAC1BA,EACD,MAAM,IAAIrqF,EAAa,yBAE3B,IAAI+J,EAOJ,MAAM2/E,EAAOW,EAASC,KAAK3sF,KAAKirF,QAAnByB,GACb,GAAIX,EAAKP,MAILp/E,EAASpM,KAAKurF,WAAWQ,EAAKP,OAAwB,IAAjBO,EAAKN,SACtCr/E,EAAOw/E,UAGP5rF,KAAKwoD,KAAOp8C,EAAOy/E,kBAGtB,KAAIE,EAAKZ,OAcV,MADA,GAAEY,GACI,IAAI1pF,EAAa,gDAAkD0pF,GAXrE3/E,EADA2/E,EAAKa,UACI5sF,KAAKusF,gBAAgBR,GAEzBA,EAAKc,WACD7sF,KAAKysF,iBAAiBV,GAGtB/rF,KAAK8rF,UAAUC,GAUhC,MAAMe,EAAU,GAQhB,OAPA1gF,EAAO0gF,QAAUA,EACb1gF,EAAO4+E,SACP5+E,EAAO4+E,QAAQ9sE,SAASgiB,GAAM4sD,EAAQj1E,KAAKizE,GAAe5qD,MAE1D6rD,EAAKgB,KAAO3gF,EAAOw/E,SACnBG,EAAKgB,IAAI,CAAED,QAAAA,IAER1gF,GCrMf,SAAS,MAAKnJ,GACN+pF,GAAU9rD,OACVn+B,EAAI,qBAAsBE,GDsMlC4nF,GAAO3pD,OAAQ,ECpMR,MAAM+rD,GACT5rF,YAAY6vC,GACRlxC,KAAKkxC,QAAUA,EAEnByM,QACI,OAAO39C,KAAK+X,KAEhBA,OACI,MAAO,CACHozE,OAAQ,CAACnrF,KAAKktF,MAAOltF,KAAKmtF,OAAQntF,KAAKotF,MAG/CF,QACI,MAAO,CACH/B,OAAQ,CAACnrF,KAAKqtF,YAAartF,KAAKstF,QAChCP,IAAK,IAAM/sF,KAAKkxC,QAAQq8C,eAGhCJ,SACI,MAAO,CACHhC,OAAQ,CAACnrF,KAAKwtF,MAAOxtF,KAAKktF,OAC1BL,YAAY,GAGpBS,SACI,MAAO,CACHnC,OAAQ,CAACnrF,KAAKytF,SAAUztF,KAAKy7C,KAAMz7C,KAAK0tF,KAAM1tF,KAAK2tF,OAG3DN,cACI,MAAO,CACHlC,OAAQ,CAACnrF,KAAK4tF,MAAO5tF,KAAK6tF,YAC1BzB,IAAI,GAGZwB,QACI,MAAO,CACHzC,OAAQ,CAACnrF,KAAK8tF,OAAQ9tF,KAAK+tF,MAAO/tF,KAAKguF,QAEvCjB,IAAMtrD,GAAUzhC,KAAKkxC,QAAQ+8C,SAASxsD,EAAMqrD,QAAQ,KAG5DiB,QACI,MAAO,CACH5C,OAAQ,CAACnrF,KAAKkuF,MACdtB,WAAW,GAGnBsB,OACI,MAAO,CACH/C,OAAQ,CAACnrF,KAAKmuF,SAAUnuF,KAAKouF,WAAYpuF,KAAKquF,SAGtDR,aACI,MAAO,CACH1C,OAAQ,CAACnrF,KAAKmuF,SAAUnuF,KAAKouF,WAAYpuF,KAAKquF,QAC9CtB,IAAMtrD,IAEF,MAAMp6B,EAAIo6B,EACVzhC,KAAKkxC,QAAQo9C,cAAcjnF,EAAEylF,QAAQ,GAAIzlF,EAAEylF,QAAQ,GAAIzlF,EAAEylF,QAAQ,MAI7EsB,aACI,MAAO,CACHjD,OAAQ,CAACnrF,KAAKuuF,WAAYvuF,KAAKwuF,aAC/BxC,OAAO,EACPI,IAAI,GAGZsB,OACI,MAAO,CACHvC,OAAQ,CAACnrF,KAAKyuF,KACd5B,YAAY,EAEZE,IAAMtrD,GAAUzhC,KAAKkxC,QAAQw9C,YAAYjtD,EAAMqrD,UAGvDrxC,OACI,MAAO,CACH0vC,OAAQ,CAACnrF,KAAK2uF,MAAO3uF,KAAK4uF,WAAY5uF,KAAK6uF,OAC3C7C,OAAO,EAEPe,IAAMtrD,GAAUzhC,KAAKkxC,QAAQ49C,YAAYrtD,EAAMqrD,QAAQ,KAG/DW,WACI,MAAO,CACHtC,OAAQ,CAACnrF,KAAK2uF,MAAO3uF,KAAK+uF,WAC1B/C,OAAO,EAEPe,IAAMtrD,GAAUzhC,KAAKkxC,QAAQ89C,gBAAgBvtD,EAAMqrD,QAAQ,KAGnEa,OACI,MAAO,CACHxC,OAAQ,CAACnrF,KAAKivF,SAAUjvF,KAAKkvF,OAAQlvF,KAAKmvF,QAASnvF,KAAKovF,UACxDpD,OAAO,GAGfmD,UACI,MAAO,CACHhE,OAAQ,CAACnrF,KAAKwtF,MAAOxtF,KAAKkvF,QAC1BrC,YAAY,GAGpBqC,SAEI,MAAO,CACH/D,OAAQ,CAACnrF,KAAKqvF,IAAKrvF,KAAKsvF,OAAQtvF,KAAKuvF,KAErCxC,IAAMtrD,GAAUzhC,KAAKkxC,QAAQs+C,cAAc/tD,EAAMqrD,QAAQ,GAAYrrD,EAAMqrD,QAAQ,GAJ1D1pF,MAAM,GAAI,KAO3CmsF,MACI,MAAO,CACHpE,OAAQ,CAACnrF,KAAKyvF,KAAMzvF,KAAK0vF,MACzBtD,IAAI,GAGZiD,MACI,MAAO,CAAE7D,MAAO,wBAEpBkE,OACI,MAAO,CAAElE,MAAO,eAEpBiE,OACI,MAAO,CAAEjE,MAAO,eAEpB2C,WACI,MAAO,CAAE3C,MAAO,YAEpB6C,SACI,MAAO,CAAE7C,MAAO,UAEpBgD,cACI,MAAO,CAAEhD,MAAO,eAEpB+C,aACI,MAAO,CAAE/C,MAAO,+CAEpBuD,YACI,MAAO,CAAEvD,MAAO,aAEpBqD,QACI,MAAO,CAAErD,MAAO,gBAEpBsC,SACI,MAAO,CAAEtC,MAAO,OAEpBwC,SACI,MAAO,CAAExC,MAAO,OAEpBgC,QACI,MAAO,CAAEhC,MAAO,OAEpBiD,MACI,MAAO,CAAEjD,MAAO,OAEpBmD,QACI,MAAO,CAAEnD,MAAO,OAEpBoD,aACI,MAAO,CAAEpD,MAAO,QAEpB8D,SACI,MAAO,CAAE9D,MAAO,OAEpByD,WACI,MAAO,CAAEzD,MAAO,OAEpB4D,WACI,MAAO,CAAE5D,MAAO,OAEpB4B,MACI,MAAO,CAAE5B,MAAO,MAGjB,MAAMmE,GACTtuF,YAAY08B,GACR/9B,KAAK4vF,MAAQ,GACb5vF,KAAKm4C,KAAO,EACZn4C,KAAKkY,QAAU,GACflY,KAAK+9B,SAAWA,GAGjB,MAAM8xD,GACTxuF,YAAY5B,GACRO,KAAK8vF,YAAc,GACnB9vF,KAAKP,QAAUA,EACfO,KAAKuY,QAETA,MAAML,GACFlY,KAAKkY,QAAU7X,OAAO0V,OAAO,CAAEuqB,KAAM,OAAQ9D,KAAM,UAAYtkB,GAC/DlY,KAAK+vF,SAAW,CAAElyD,MAAO,GAAIhc,YAAa,IAC1C7hB,KAAKgwF,gBAAkB,IACvBhwF,KAAKiwF,aAETz+C,aACI,OAAOxxC,KAAKP,QAEhBywF,cACI,OAAOlwF,KAAK+vF,SAEhBI,cAAcC,GACVpwF,KAAK8vF,YAAYj4E,KAAKu4E,GAE1BH,aACI,GAAE,cACFjwF,KAAKqwF,MAAQ,IAAIV,GAAM3vF,KAAKgwF,iBAEhCtB,YAAYv2C,GACR,GAAE,eAAgBA,GACdA,IACAn4C,KAAKqwF,MAAMl4C,KAAOA,EAAKrzC,QAE/BkqF,gBAAgBjxD,GACZ,GAAE,mBAAoBA,GACtB/9B,KAAKgwF,gBAAkBhwF,KAAKqwF,MAAMtyD,SAAWA,GAAY/9B,KAAKgwF,gBAElElB,YAAY79E,GACR,GAAE,eAAgBA,GACdA,IACAjR,KAAKqwF,MAAMp/E,KAAOA,GAE1Bu+E,cAAcrvF,EAAK+E,GACf,GAAE,sBAAuB/E,EAAK,SAAU+E,GACxClF,KAAKqwF,MAAMn4E,QAAQ/X,GAAO+E,EAE9BorF,QAAQnwF,EAAK8xD,EAAOtyC,GAChB,GAAE,WAAYxf,EAAK8xD,EAAOtyC,GAC1B3f,KAAKqwF,MAAMT,MAAM/3E,KAAK,CAClB1X,IAAKA,EACL8xD,MAAAA,EACAtyC,OAAAA,IAGR2uE,cAAcnuF,EAAK8xD,EAAOtyC,GACtB,GAAE,iBAAkBxf,EAAK8xD,EAAOtyC,GAChC3f,KAAKswF,QAAQnwF,EAAK8xD,EAAOtyC,GAG7BsuE,SAASpwD,GACL,GAAE,cACsB,iBAAbA,EAAM,GACb79B,KAAKsuF,cAAczwD,EAAM,IAGzBA,EAAM3f,SAASpa,IACPA,GACA9D,KAAKswF,WAAWxsF,MAG5B,GAAE,YAENypF,cACI,GAAE,eACF,MAAM,QAAE9tF,GAAYO,KACpB,IAAKP,EACD,OACJ,MAAMyY,EAAU7X,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkY,SAAUlY,KAAKqwF,MAAMn4E,SAGpEooB,EAAO19B,EAAQsV,EAAQooB,KAAM,eAAgB,+BAA+BjzB,cAE5EmvB,EAAO55B,EAAQsV,EAAQskB,KAAM,eAAgB,+BAA+BnvB,eAC5E,MAAEuiF,EAAK,SAAE7xD,EAAQ,KAAEoa,EAAI,KAAElnC,GAASjR,KAAKqwF,MAIvCE,EAAsBjyE,EAAMuD,YAC5BvP,EAAOs9E,EAAMr9E,KAAKi+E,IACpB,IAAIzjF,EACJ,OAAOyjF,EAAUrwF,KACZowF,EAAoBz9E,SAAoC,QAA1B/F,EAAKyjF,EAAUv+B,aAA0B,IAAPllD,EAAgBA,EAAK,IAAMyjF,EAAUv+B,MAAQ,IAC9G,IACAu+B,EAAU7wE,UAEZm3C,EAAqB,SAATx2B,EAEZ5jB,EAA2E,MAAnEzL,MAAAA,OAAmC,EAASA,EAAK5D,eACzD5N,EAAQgxF,UAAU,CAAE1yD,SAAAA,EAAUoa,KAAAA,IAC9B14C,EAAQuC,UAAU,CAAEsQ,KAAAA,EAAMyrB,SAAAA,EAAUoa,KAAAA,EAAMlnC,KAAAA,EAAMurB,KAAAA,EAAMs6B,UAAAA,IACvDA,GACDp6C,EAAK64C,iBAA0B,OAATj1B,EAAgBkH,EAAKe,GAAKf,EAAKgB,MAEzD,MAAM3mB,EAAc,GACpB+tE,EAAM1xE,SAAQ,CAACsyE,EAAWp/E,KACtB,MAAM6gD,EAAQu+B,EAAUv+B,MACxB,GAAqB,iBAAVA,EAAoB,CAC3B,MAAMlzC,EAAatf,EAAQwhC,WAAW,CAAEhwB,KAAMghD,IAC9Cv1C,EAAKkqB,YAAY7nB,EAAY3N,GAC7ByQ,EAAYhK,KAAKkH,QAGjB8C,EAAYhK,UAAK/U,MAIzB,IAAK,IAAI4E,EAAI,EAAGA,EAAIywC,EAAMzwC,IACtBu/C,GAAIypC,eAAe,CAACh0E,GAAO,CAAEyqC,KAAK,IACtCnnD,KAAK8vF,YAAY5xE,SAASkyE,GAAeA,EAAWl4E,EAASwE,EAAM1c,QACnEA,KAAK+vF,SAASlyD,MAAMhmB,KAAK6E,GACzB1c,KAAK+vF,SAASluE,YAAYhK,KAAKgK,GAC/B7hB,KAAKiwF,cAMb,SAASU,GAAMz4E,EAASwE,QACD5Z,IAAfoV,EAAQlH,IAEZ0L,EAAK3K,aAAa,KAAMmG,EAAQlH,IAGpC,MAAM4/E,GAAsB,UAI5B,SAASC,GAAS34E,EAASwE,QACD5Z,IAAlBoV,EAAQhH,OAEZgH,EAAQhH,MAAMvJ,MAAMipF,IAAqB1yE,SAASvL,GAAc+J,EAAK7H,SAASlC,KAK3E,MAAMq6E,GACT3rF,YAAY6W,EAAU,IAClBlY,KAAK8wF,SAAW,CACZt0D,KAAM,SACN8uB,KAAM,MACNhrB,KAAM,QAEVtgC,KAAKsY,WAAWJ,GAUpB1T,IAAIssF,GAEA,OADA9wF,KAAK8wF,SAAWzwF,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAK8wF,UAAWA,GACzD9wF,KAMXsY,WAAWJ,GACP,IAAInL,EAAIkF,EAER,MAAMxS,EAAUyY,EAAQzY,QAClByxC,EAAqC,QAA1BnkC,EAAKmL,EAAQg5B,eAA4B,IAAPnkC,EAAgBA,EAAK,IAAI8iF,GAAQpwF,GAQpF,OAPAO,KAAKkY,QAAU7X,OAAO0V,OAAO1V,OAAO0V,OAAO,CAAE+5E,YAAa,CAACa,GAAOE,GAAUlgD,GAAaogD,cAAe/oC,GAAe+oC,eAAgBC,cAAc,GAAS94E,GAAU,CAAEzY,QAAAA,EACtKyxC,QAAAA,IACJlxC,KAAKP,QAAUA,EACfO,KAAKkxC,QAAUA,EACflxC,KAAKirF,QAAU,IAAIgC,GAAiBjtF,KAAKkxC,SACzClxC,KAAKixF,OAAS,IAAIpG,GAAO7qF,KAAKirF,SACM,QAAnCh5E,EAAKjS,KAAKkY,QAAQ43E,mBAAgC,IAAP79E,GAAyBA,EAAGiM,SAASkyE,GAAepwF,KAAKmwF,cAAcC,KAC5GpwF,KAEXqV,WAAW1B,GAEP,OADA3T,KAAKP,QAAQ4V,WAAW1B,GACjB3T,KAEXwH,MAAMtE,EAAMgV,EAAU,IAClBlY,KAAKkxC,QAAQ34B,MAAML,GACnB,MAAM9L,EAASpM,KAAKixF,OAAOzpF,MAAMtE,GACjC,IAAKkJ,EAAOw/E,SAAW5rF,KAAKkY,QAAQ84E,aAEhC,MADA,GAAE5kF,GACI,IAAI/J,EAAa,uBAAyBa,GAEpD,OAAOkJ,EAEXmtC,KAAK1b,EAAO3lB,GAER,OADAlY,KAAKP,QAAQgvD,KAAK,CAAE5wB,MAAAA,EAAO3lB,QAAAA,IACpB2lB,EAEX6W,OAAO7W,EAAO3lB,GAEV,OADAlY,KAAKP,QAAQ8+E,OAAO,CAAE1gD,MAAAA,EAAO3lB,QAAAA,IACtB2lB,EAEXA,MAAM36B,EAAMgV,EAAU,IAGlB,OAFAA,EAAU7X,OAAO0V,OAAO,CAAEymB,KAAMx8B,KAAK8wF,SAASt0D,KAAM8D,KAAMtgC,KAAK8wF,SAASxwD,MAAQpoB,GAChFlY,KAAKwH,MAAMtE,EAAMgV,GACVlY,KAAKkxC,QAAQg/C,cAAcryD,MAEtCwH,MAAMxH,EAAO3lB,EAAU,IAEnB,OADAA,EAAU7X,OAAO0V,OAAO,CAAEu1C,KAAMtrD,KAAK8wF,SAASxlC,MAAQpzC,GAC/ClY,KAAKP,QAAQ4rD,MAAMnzC,GAASs1C,aAAa3vB,GAEpDsyD,cAAcC,GACVpwF,KAAKkxC,QAAQi/C,cAAcC,IAGnCpD,GAAU9rD,OAAQ,EC1ZlB,MAAMgwD,GAAY,uEACX,MAAMT,WAAkBvuF,GAChBZ,sBACP,OAAOG,EAASgvF,UAEpBpvF,YAAY8vF,GACR,IAAKA,EACD,MAAM,IAAI9uF,EAAa,eAAgB6uF,IAE3C,IAAIh7C,EACJ,GAAyB,iBAAdi7C,EAEPj7C,EAAa,CAAEnY,SAAUozD,OAExB,IAAyB,iBAAdA,EAIZ,MAAM,IAAI9uF,EAAa,eAAgB6uF,IAHvCh7C,EAAai7C,EAKjB1uF,MAAMyzC,GAENl2C,KAAKwc,SAAS,GAKlBypB,SACI,OAAO,EAEXhsB,SAASC,GAEL,OADAzX,MAAMwX,SAASC,GACRla,KAIXo1C,qBAAqBC,GAEjB,OAAOr1C,KAEXy1C,YAEI,OADAz1C,KAAK01C,cAAe,EACb11C,KAEX2U,OAEI3U,KAAKgV,cACL,IAAK,IAAItN,EAAI,EAAGA,EAAI1H,KAAKmzC,UAAUruC,SAAU4C,EAAG,CAC5C,MAAMg/B,EAAW1mC,KAAKmzC,UAAUzrC,GlEhBPzG,EkEiBRylC,ElEjBwBjlC,EAASmrC,ckEkB9ClG,EAASrxB,WAAWrV,KAAKoV,cACzBsxB,EAASjyB,mBCtDlB,MAAM28E,WAAkBtvF,GAC3BT,YAAYmX,EAAO09B,EAAYh+B,GAC3BzV,MAAMyzC,GACNl2C,KAAKkY,QAAU7X,OAAO0V,OAAO,CAAEs7E,aAAa,EAAOnuF,KAAM,GAAKgV,GAE9DlY,KAAKuzC,aAAevzC,KAAKkY,QAAQm5E,YAC7B74E,GACAxY,KAAKsxF,SAAS94E,GAGXlX,sBACP,OAAOG,EAAS2vF,UAEpBE,SAAS94E,GAGL,OAFAxY,KAAKwY,MAAQA,EACbxY,KAAKwc,SAASxc,KAAKwY,MAAM1I,aAAarG,OAC/BzJ,KAEXmV,iBACI,OAAOnV,KAAKwY,MAAMrD,iBAEtBsgC,YAKI,OAJKz1C,KAAK01C,cAAgB11C,KAAKid,iBAC3Bjd,KAAKid,gBAAgBw4B,YAEzBz1C,KAAK01C,cAAe,EACb11C,KAEXg8D,gBACI,MAAMljD,EAAM9Y,KAAK0U,eACjBoE,EAAI+1B,UAAU,aACd,IAAK,IAAInnC,EAAI,EAAGA,EAAI1H,KAAKmzC,UAAUruC,OAAQ4C,IAAK,CAC5C,MAAMg/B,EAAW1mC,KAAKmzC,UAAUzrC,GAChCg/B,EAASrxB,WAAWyD,GACpB4tB,EAASjyB,gBAEbqE,EAAIi3B,aAERp7B,OACI,MAAMuF,EAAQla,KAAK+a,aACbjC,EAAMoB,EAAMxF,eAClB1U,KAAKgV,cACL8D,EAAI+1B,UAAU,YAAa7uC,KAAK6R,aAAa,OAE7C,MAAM2G,EAAQxY,KAAKwY,MACdA,EAAMpD,cACPoD,EAAMnD,WAAWyD,GAErBN,EAAMyB,SAASC,GACf1B,EAAM4B,UAAUF,EAAMuoB,YAAYziC,KAAKkY,QAAQhV,MAAQgX,EAAMe,iBAC7D,MAAMpY,EAAI7C,KAAKm0C,kBAAoBn0C,KAAKi2C,eAAiBj2C,KAAKuc,WAAa,EAAIvc,KAAKi2C,eACpFz9B,EAAMwC,cAAcnY,GACpB7C,KAAKg8D,gBACLljD,EAAIi3B,cClDL,MAAMnuC,WAAkBI,GAC3BX,YAAY60C,GACRzzC,MAAMpC,OAAO0V,OAAO,CAAEkhC,iBAAkB1a,EAAOkC,oBAAsB78B,GAAU2vF,MAAOr6C,UAAWt1C,GAAUg1D,oBAAsB1gB,IACjIl2C,KAAKwxF,MAAQt7C,EAAWs7C,QAAS,EACjCxxF,KAAK2tD,MAAO,EACZ3tD,KAAKm4D,iBACLn4D,KAAKyJ,MAAQ,EAENnI,sBACP,OAAOG,EAASG,UAETg1D,gCACP,OAAO,EAEA26B,mBACP,MAAO,IAEXn8B,mBACI,GAAIp1D,KAAK81D,wBACL,OAAO91D,KAAK81D,wBAEhB,MAAMt9C,EAAQxY,KAAKi5C,WACnB,GAAIzgC,EAAO,CACP,IAAIi5E,EAAMhvF,MAAM2yD,mBAChB,GAAI58C,EAAM8nB,KAAM,CACZ,MAAMoxD,EAAiB1xF,KAAK2xF,oBAC5BF,GAAOjqD,EAAKkB,OAAS+oD,GAAOC,EAAiBlqD,EAAKkB,OAEtD,OAAO+oD,EAEX,OAAO,EAGXE,oBACI,OAAO3xF,KAAKmhC,eAAe8V,iBAAmB1a,EAAOkC,oBAEzD9pB,OACIlS,MAAMkS,OACN3U,KAAKgV,cACL,MAAMsrB,EAAOtgC,KAAKsgC,KAClB,GAAItgC,KAAKwxF,OAASlxD,EAAM,CACpB,MAAMoxD,EAAiB1xF,KAAK2xF,oBAEtBC,EAAcF,EAAiB,IACrC,IAAIG,EACJ,MAAMt4C,EAAOv5C,KAAKu5C,KAClB,GAAIA,EAEKA,EAAK3D,eACN2D,EAAK5D,aAETk8C,EAAY7xF,KAAK8xF,yBAAyB,EAAIF,EAAa,EAAIA,EAAa,CACxEtxD,KAAM,EAAIsxD,EACVr4C,KAAM,EAAIq4C,QAGb,CACD,MAAM1pD,EAAiBloC,KAAKutC,mBACtBwkD,EAAiB/xF,KAAKm5D,oBACtBiD,EAAiB97B,EAAK2I,YAC5B,IAAIpmC,EAAI7C,KAAKi2C,eACTpuC,EAAIqgC,IAAmBV,EAAKgB,KAC1BupD,EAAehqD,MAAQq0B,EACvB21B,EAAe/pD,SAAWo0B,EAC5B41B,EAAiBz1D,EAAOoC,YAC5BqzD,GAAkBA,EAAiB,IACnCnqF,GAAKmqF,EAAiBN,EAAiBxpD,EACvC,MAAMstB,EAAUttB,IAAmBV,EAAKe,GAClC,CACEr/B,GAAI,EACJE,GAAI,EACJC,GAAI,GACJC,IAAK,GAEP,CACEJ,IAAK,EACLE,GAAI,EACJC,GAAI,GACJC,GAAI,GAEZzG,GAAK2yD,EAAQtsD,GAAK0oF,EAClB/pF,GAAK2tD,EAAQpsD,GAAKwoF,EAClBC,EAAY,CACR3oF,GAAIrG,EACJuG,GAAIvB,EACJwB,GAAIxG,EAAI2yD,EAAQnsD,GAAKuoF,EACrBtoF,GAAIzB,EAAI2tD,EAAQlsD,GAAKsoF,GAI7B,MAAM94E,EAAM9Y,KAAK0U,eACjBoE,EAAIlF,OACJkF,EAAIxE,aAAa,EAAIs9E,GACrB94E,EAAIQ,YACJR,EAAIS,OAAOs4E,EAAU3oF,GAAI2oF,EAAUzoF,IACnC0P,EAAIU,OAAOq4E,EAAUxoF,GAAIwoF,EAAUvoF,IACnCwP,EAAIi/B,YACJj/B,EAAIikB,SACJjkB,EAAItE,WAGZs9E,yBAAyBG,EAAiBC,EAAiBC,GACvD,MAAM54C,EAAOv5C,KAAKu5C,KAClB,IAAKA,EACD,MAAM,IAAIl3C,EAAa,SAAU,mCACrC,MAAM+vF,EAAa74C,EAAKioC,MAElB6Q,EADgB94C,EAAK1b,MAAM0b,EAAK1b,MAAM/4B,OAAS,KAAO9E,MAC5B,EAAI,EAC9BsyF,EAAanuF,KAAKouF,KAAKH,EAAaC,GAEpCG,EACEruF,KAAKm9D,IAAIgxB,GAAcJ,EADzBM,EAEEruF,KAAKq9D,IAAI8wB,GAAcJ,EAE/BD,GAAmBjyF,KAAKutC,mBACxB,MAAMklD,EAActuF,KAAKouF,MAAMC,EAAkBP,GAAmBO,GAC9DE,EAAqBvuF,KAAKm9D,IAAImxB,GAAeN,EAAY7xD,KAAO+xD,EAChEM,EAAqBxuF,KAAKq9D,IAAIixB,GAAeN,EAAY7xD,KACzDsyD,EAAqBzuF,KAAKm9D,IAAImxB,GAAeN,EAAY54C,KAAO84C,EAChEQ,EAAqB1uF,KAAKq9D,IAAIixB,GAAeN,EAAY54C,KACzDyjB,EAAQh9D,KAAKivC,WACb6jD,EAASv5C,EAAK1b,MAAM,GAAGoR,WACvB8jD,EAAQx5C,EAAK8sC,kBAAoBrpB,EAAQ81B,GAAUV,EAOzD,MANY,CACRlpF,GAAI8zD,EAAQ01B,EACZtpF,GAAI2pF,EAAQd,EAAkBU,EAC9BtpF,GAAI2zD,EAAQw1B,EAAkBH,EAASO,EACvCtpF,GAAIypF,EAAQP,EAAkBK,IChInC,MAAMG,WAAmBlxF,GAC5BT,YAAYu8B,EAAS+qC,EAAeC,GAChCnmE,MAAM,CAAEs7B,SAAU,MAClB/9B,KAAKslB,aAAe,IAAIojD,GAAa9qC,EAAS+qC,EAAeC,GAE7D5oE,KAAKuzC,cAAe,EAEbjyC,sBACP,OAAOG,EAASuxF,WAIpB59C,qBAAqBC,GAEjB,OAAOr1C,KAEXy1C,YAII,OAHAz1C,KAAK01C,cAAe,EACpB11C,KAAKslB,aAAarL,SAASja,KAAK+a,cAChC/a,KAAKwc,SAASxc,KAAKslB,aAAa/I,YACzBvc,KAEX2U,OACI,MAAMmE,EAAM9Y,KAAK+a,aAAarG,eAC9B1U,KAAKgV,cACLhV,KAAKslB,aAAajd,KAAKrI,KAAKi2C,gBAC5Bj2C,KAAKslB,aAAajQ,WAAWyD,GAC7B9Y,KAAKslB,aAAa3Q,QCpB1B,IAAIs+E,GAYG,MAAMC,WAAyBngF,EAMlC1R,YAAY8xF,EAAoBj7E,GAC5BzV,QACAzC,KAAKozF,GAAK,CAAEh3E,KAAMjT,IAAKkT,MAAOlT,KAC9BnJ,KAAKqzF,gBAAiB,EACtBrzF,KAAKszF,iBAAkB,EACvBtzF,KAAKuzF,kBAAmB,EACxBvzF,KAAKwzF,kBAAmB,EACxBxzF,KAAKmzF,mBAAqBA,EAE1BnzF,KAAKqzF,eAAiD,iBAAzBn7E,EAAQu7E,aACrCzzF,KAAKszF,gBAAmD,iBAA1Bp7E,EAAQw7E,cACtC1zF,KAAKuzF,iBAAqD,iBAA3Br7E,EAAQy7E,eACvC3zF,KAAKwzF,iBAAqD,iBAA3Bt7E,EAAQ07E,eACvC,MAAMlyD,EAAYnF,EAAOoF,mBACzB3hC,KAAKmhC,eAAiB9gC,OAAO0V,OAAO,CAAE89E,aAAa,EAAOC,aAAa,EAAMC,aAAc,GAAKC,mBAAoBtyD,EAAUtxB,aAAa,gBAAiBlN,KAAM,EAAGutE,yBAA0Bl0C,EAAOuC,oBAAqBm1D,gBAAiB,EAAGC,2BAA4B33D,EAAOkC,oBAAqBg1D,aAAc,EAAGC,cAAe,EAAGC,eAAgB,EAAGC,eAAgB,GAAK17E,GAClX,MAAMo3D,EAAgB5tC,EAAUtxB,aAAa,mBAAoB,GACjEpQ,KAAKmhC,eAAe4yD,aAAezkB,EAE5BhuE,sBACP,OAAOG,EAASyxF,iBAEpBiB,QACI,OAAOn0F,KAAKozF,GAEhBn5E,SAASC,GAEL,OADAla,KAAKka,MAAQA,EACNla,KAEX8d,WACI,OAAO9d,KAAKka,MAEhBa,aACI,OAAOnY,EAAQ5C,KAAKka,MAAO,UAAW,kCAE1Ck6E,SAASl6E,EAAOpB,EAAKsD,EAAMC,EAAOg4E,GAC9B,MAAMn8E,EAAUlY,KAAKmhC,eACft5B,EAAIqS,EAAMuoB,YAAYvqB,EAAQhV,MAC9BgvC,EAA2B,IAAhB71B,EAAQD,GAGzB,IAAIk4E,EAFJl4E,GAAQ81B,EACR71B,GAAS61B,EAGLoiD,EADAt0F,KAAKuzF,iBACwC,GAAzBr7E,EAAQy7E,eAGc,IAAtBU,EAExB,MAAME,EAAiBr8E,EAAQ+7E,gBACzB9jD,EAAMtoC,EAAIwsF,EACVG,EAAM3sF,EAAIwsF,EACVI,EAAer4E,EAAOm4E,EACtBG,EAAgBr4E,EAAQk4E,EACxBI,EAAU9sF,EAAIysF,EACdM,EAAa/sF,EAAIysF,EACvBx7E,EAAIlF,OACJkF,EAAIQ,YACJR,EAAIS,OAAO6C,EAAM+zB,GACjBr3B,EAAIU,OAAOi7E,EAActkD,GACzBr3B,EAAIU,OAAOi7E,EAAcE,GACzB77E,EAAIU,OAAOk7E,EAAeC,GAC1B77E,EAAIU,OAAOk7E,EAAevkD,GAC1Br3B,EAAIU,OAAO6C,EAAO8zB,GAClBr3B,EAAIU,OAAO6C,EAAOm4E,GAClB17E,EAAIU,OAAOk7E,EAAeF,GAC1B17E,EAAIU,OAAOk7E,EAAeE,GAC1B97E,EAAIU,OAAOi7E,EAAcG,GACzB97E,EAAIU,OAAOi7E,EAAcD,GACzB17E,EAAIU,OAAO4C,EAAMo4E,GACjB17E,EAAIi/B,YACJj/B,EAAIa,OAERk7E,YAAY36E,EAAOpB,EAAKsD,EAAMC,EAAOg4E,GACjC,MAAMS,EAAK3wF,KAAK0C,MAAM7G,KAAKmzF,mBAAqB,GAC1CrvF,EAAI9D,KAAKmzF,mBAAqB,EAC9B4B,EAAK5wF,KAAK0C,MAAM/C,EAAI,GACpBkxF,EAAKlxF,EAAI,EACToU,EAAUlY,KAAKmhC,eAGrB8xD,QAAiBnwF,EACjB,MAAM8mB,EAjGd,WACI,IAAKqpE,GAAgB,CACjB,MAAM/6B,EAAW,IAAI5E,GAAS,CAAEv1B,SAAU,IAAK21B,UAAW,MAC1Du/B,GAAiB,CACbh8C,iBAAkBihB,EAAS/2B,eAAe8V,iBAC1C0c,WAAYuE,EAASvE,WACrBlqD,MAAOyuD,EAAS37C,YAGxB,OAAO02E,GAwFUgC,GACPC,EAAah9E,EAAQg8E,2BACrBiB,EAAavrE,EAAKngB,OAASyrF,EAAatrE,EAAKqtB,kBAC7C9mC,EAAS,CACX,EAAG,CACC1G,MAAoB,GAAb0rF,EACPzrF,OAAQ2qF,GAEZ,EAAG,CACC5qF,MAAO0rF,IAIThmD,EAAUnvC,KAAKwzF,iBAAmBt7E,EAAQ07E,eAAiB,GAEjE,IAAI/wF,EAAIuZ,EAAwB,IAAhBC,EAAQD,GAAsB,IADhC04E,EAAK3kF,EAAO,GAAG1G,MAAQsrF,EAAK5kF,EAAO,GAAG1G,MAAQurF,EAAK7kF,EAAO,GAAG1G,OAASqrF,EAAKC,EAAKC,EAAK,GAAK7lD,GAExG,MAAMjsC,EAAOgV,EAAQhV,KACfo3D,EAAOpgD,EAAMuoB,YAAYv/B,EAAO,GAChCkyF,EAAUl7E,EAAMuoB,YAAYv/B,GAC5Bs3D,EAAUtgD,EAAMuoB,YAAYv/B,EAAO,GACzC4V,EAAIlF,OACJkF,EAAI1E,eAAe,QACnB0E,EAAIxE,aAAa,GACjB,IAAK,IAAI5M,EAAI,EAAGA,EAAIotF,IAAMptF,EACtBoR,EAAI4kC,SAAS76C,EAAGuyF,EAAUjlF,EAAO,GAAGzG,OAAQyG,EAAO,GAAG1G,MAAO0G,EAAO,GAAGzG,QACvEoP,EAAI4kC,SAAS76C,EAAG23D,EAAUrqD,EAAO,GAAGzG,OAAQyG,EAAO,GAAG1G,MAAO0G,EAAO,GAAGzG,QACvE7G,GAAKsN,EAAO,GAAG1G,MAAQ0lC,EAE3B,IAAK,IAAIznC,EAAI,EAAGA,EAAIqtF,IAAMrtF,EACtBoR,EAAI4kC,SAAS76C,EAAGuyF,EAAUjlF,EAAO,GAAGzG,OAAQyG,EAAO,GAAG1G,MAAO0G,EAAO,GAAGzG,QACvE7G,GAAKsN,EAAO,GAAG1G,MAAQ0lC,EAE3B,IAAK,IAAIznC,EAAI,EAAGA,EAAIstF,IAAMttF,EACtBoP,EAAMu8C,YAAYv6C,EAAKjW,EAAGy3D,EAAM46B,EAAYtrE,EAAK+pC,YACjD9wD,GAAKsN,EAAO,GAAG1G,MAAQ0lC,EAE3Br2B,EAAItE,UAERG,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL,MAAMkF,EAAQla,KAAK+a,aACnB,IAAIqB,EAAOlC,EAAMigC,gBACb99B,EAAQnC,EAAMs3D,cAKlB,MAAMmC,EAAez5D,EAAMusB,aAAagU,GAAsB+B,OAClC,IAAxBm3B,EAAa7uE,QAAgBtD,EAAUmyE,EAAa,MACpDv3D,GAAQu3D,EAAa,GAAGp3D,YAE5B,MAAMrE,EAAUlY,KAAKmhC,eACjBnhC,KAAKqzF,iBACLj3E,EAAOlC,EAAMjS,OAASiQ,EAAQu7E,cAE9BzzF,KAAKszF,kBACLj3E,EAAQnC,EAAMjS,OAASiS,EAAMqC,WAAarE,EAAQw7E,eAEtD1zF,KAAKozF,GAAGh3E,KAAOA,EACfpc,KAAKozF,GAAG/2E,MAAQA,EAChB,MAAMg4E,EAAsBn8E,EAAQu4D,yBAOpC,GANIv4D,EAAQ27E,YACR7zF,KAAK60F,YAAY36E,EAAOpB,EAAKsD,EAAMC,EAAOg4E,GAG1Cr0F,KAAKo0F,SAASl6E,EAAOpB,EAAKsD,EAAMC,EAAOg4E,GAEvCn8E,EAAQ47E,YAAa,CACrB,MAAM3kB,EAAW,IAAMnvE,KAAKmzF,mBACtBkC,EAAU,IAAInmB,GAAcC,EAAU,GAAG,GAC/CkmB,EAAQx+E,MAAQqB,EAAQ87E,mBACxBqB,EAAQxlB,WAAWV,GACnBkmB,EAAQp7E,SAASC,GACjBm7E,EAAQhtF,KAAK+T,EAAwB,IAAhBC,EAAQD,GAA2D,GAA7Ci5E,EAAQzlB,UAAUp3D,MAAM1I,aAAarG,OAChF4rF,EAAQpmB,WAAa/2D,EAAQ67E,YAC7BsB,EAAQhgF,WAAWyD,GAAKnE,SCxKpC,SAAS2gF,GAAe1oF,EAAM+G,EAAS9Q,EAAGgF,EAAGgP,GACzC,MAAM0+E,EAAaC,GAAazoB,OAAOngE,GACzB,IAAIkK,EAAMy+E,EAAWhzF,KAAMsU,EAAO,CAAE3V,SAAU,iBACtD0Z,OAAOjH,EAAS9Q,EAAI0yF,EAAWn+E,QAASvP,EAAI0tF,EAAWl+E,SAS1D,MAAMm+E,WAAqBziF,EAC9B1R,YAAYw8B,GACRp7B,QACAzC,KAAK69B,MAAQA,EACb79B,KAAKiR,KAAOukF,GAAavkF,KAAK+xC,KAC9BhjD,KAAKkD,KAAO,EAEZlD,KAAKy1F,oBAAsB,GAC3Bz1F,KAAK01F,oBAAsB,GAC3B11F,KAAKkW,YACLlW,KAAKmhC,eAAiB,CAClBw0D,eAAgB,GAChBC,kBAAmB,EACnBC,mBAAoB,EACpBj+C,MAAO,SAGJt2C,sBACP,OAAOG,EAAS+zF,aAMpB/wF,qBAAqBo5B,GAEjB,OADc,IAAI23D,GAAa33D,GAInCp5B,uBAAuBo5B,GACnB,MAAMi4D,EAAQ,IAAIN,GAAa33D,GAG/B,OAFAi4D,EAAMr5C,QAAQ+4C,GAAavkF,KAAK8kF,OAChCD,EAAME,cAAc,cACbF,EAGXrxF,sBAAsBo5B,GAClB,MAAMi4D,EAAQ,IAAIN,GAAa33D,GAG/B,OAFAi4D,EAAMr5C,QAAQ+4C,GAAavkF,KAAK+xC,MAChC8yC,EAAME,cAAc,YAAa,aAC1BF,EAGXr5C,QAAQxrC,GAKJ,OAJAA,EAAuB,iBAATA,EAAoBukF,GAAa94C,WAAWzrC,GAAQA,IACtDukF,GAAavkF,KAAK+xC,MAAQ/xC,GAAQukF,GAAavkF,KAAK8kF,QAC5D/1F,KAAKiR,KAAOA,GAETjR,KAMXg2F,cAAcC,EAAS/3C,GAGnB,OAFAl+C,KAAKy1F,oBAAsBQ,GAAW,GACtCj2F,KAAK01F,oBAAsBx3C,GAAW,GAC/Bl+C,KAGXg0D,QAAQ9wD,GAEJ,OADAlD,KAAKkD,KAAOA,EACLlD,KAGXk2F,gBACI,MAAMp9E,EAAM9Y,KAAK0U,eACjB,IACIyhF,EACAC,EAFAC,GAAqB,EAIzBr2F,KAAK69B,MAAM3f,SAAQ,CAACxB,EAAMtL,EAAOysB,KAE7Bw4D,GAAsBA,EAEtB,MAAMxzF,EAAI6Z,EAAKu5B,eACTpuC,EAAI6U,EAAK3B,aAAa20B,kBAAkB1vC,KAAKkD,KAAO,GAE1D,GAAIL,EAAIszF,EACJ,MAAM,IAAI9zF,EAAa,uBAAwB,gEAKnD,MAAMi0F,EAAez4D,EAAMzsB,EAAQ,KAAOsL,EACpC65E,EAAe14D,EAAMzsB,EAAQ,KAAOsL,EAC1C,IAAItF,EAAU,EACd,MAAMP,EAAQ0lB,EAAOoF,mBAAmBvxB,aAAa,gBAAgBimF,EAAqB,OAAS,cACnG,GAAIA,EAGA,GADAj/E,EAAUm/E,EAAe,EAAI,EACzBv2F,KAAKiR,OAASukF,GAAavkF,KAAK8kF,OAAUQ,EAgB1Cz9E,EAAIQ,YACJR,EAAIS,OAAO1W,EAAGgF,EAAI7H,KAAKmhC,eAAew0D,gBACtC78E,EAAIU,OAAO3W,EAAIuU,EAASvP,GACxBiR,EAAIikB,SACJjkB,EAAIi/B,iBAlBJ,GAAI/3C,KAAKy1F,oBAAqB,CAE1B,MAAM3mD,EAAah2B,EAAIi2B,YAAY/uC,KAAKy1F,qBAAqBhsF,MAC7DqP,EAAIg3B,SAAS9vC,KAAKy1F,oBAAqB5yF,EAAIisC,EAAa,EAAGjnC,GAC3DuP,EAAU03B,EAAa,EAAI9uC,KAAKmhC,eAAey0D,uBAI/CN,GAAe,gBAAiBx8E,EAAKjW,EAAGgF,EAAGgP,GAC3CO,EAAU,GAAKpX,KAAKmhC,eAAey0D,uBAc3Cx+E,EAAUk/E,GAAgB,EAAI,EAE9Bx9E,EAAIQ,YACJR,EAAIS,OAAO48E,EAAQC,GACnBt9E,EAAIU,OAAO3W,EAAIuU,EAASvP,GACxBiR,EAAIU,OAAO3W,EAAGgF,EAAI7H,KAAKmhC,eAAew0D,gBACtC78E,EAAIikB,SACJjkB,EAAIi/B,YAGRo+C,EAAStzF,EAAIuU,EACbg/E,EAASvuF,KAOjB2uF,WACI,MAAM19E,EAAM9Y,KAAK0U,eACjB,IAAI2hF,GAAqB,EAEzBr2F,KAAK69B,MAAM3f,SAASxB,IAChB25E,GAAsBA,EACtB,MAAMn8E,EAAQwC,EAAK3B,aACblY,EAAI6Z,EAAKu5B,eACTpuC,EAAIqS,EAAMw1B,kBAAkB1vC,KAAKkD,KAAO,GACxC2T,EAAQ0lB,EAAOoF,mBAAmBvxB,aAAa,gBAAgBimF,EAAqB,OAAS,cACnG,IAAIvnD,EAAa,EACbunD,EACIr2F,KAAKy1F,qBACL3mD,EAAah2B,EAAIi2B,YAAY/uC,KAAKy1F,qBAAqBhsF,MACvDqP,EAAIg3B,SAAS9vC,KAAKy1F,oBAAqB5yF,EAAIisC,EAAa,EAAGjnC,IAG3DytF,GAAe,gBAAiBx8E,EAAKjW,EAAGgF,EAAGgP,GAI3C7W,KAAK01F,qBACL5mD,EAAah2B,EAAIi2B,YAAY/uC,KAAK01F,qBAAqBjsF,MACvDqP,EAAIg3B,SAAS9vC,KAAK01F,oBAAqB7yF,EAAIisC,EAAa,EAAGjnC,IAG3DytF,GAAe,gBAAiBx8E,EAAKjW,EAAGgF,EAAGgP,MAM3DlC,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL8D,EAAIlF,OACJkF,EAAI1E,eAAepU,KAAKmhC,eAAeyW,OACvC9+B,EAAI5E,aAAalU,KAAKmhC,eAAeyW,OACrC9+B,EAAIxD,QAAQtV,KAAKwV,UAjMzB,YAAcvS,GACNuyF,GAAat0D,OACbn+B,EAAI,wBAAyBE,GAgM7B,CAAE,2BACEjD,KAAKiR,OAASukF,GAAavkF,KAAKmlE,SAAWp2E,KAAKiR,OAASukF,GAAavkF,KAAK8kF,OAC3Ej9E,EAAIxE,aAAatU,KAAKmhC,eAAe00D,oBACrC71F,KAAKk2F,iBAEAl2F,KAAKiR,OAASukF,GAAavkF,KAAK+xC,MACrChjD,KAAKw2F,WAET19E,EAAItE,WAIZghF,GAAat0D,OAAQ,EACrBs0D,GAAa9/E,UAAY,CACrBhI,OAAQhB,EAAK8D,MACblD,KAAM,GACNC,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUoD,QAGrB6mF,GAAazoB,OAAS,CAClB0pB,cAAe,CACXl0F,KAAM,mBACN6U,SAAU,GACVC,QAAS,GAEbq/E,cAAe,CACXn0F,KAAM,kBACN6U,SAAU,EACVC,QAAS,IAIjBm+E,GAAavkF,KAAO,CAChB+xC,KAAM,EACNozB,QAAS,EACT2f,MAAO,GAGXP,GAAa94C,WAAa,CACtBz4C,KAAMuxF,GAAavkF,KAAK+xC,KACxBwzB,QAASgf,GAAavkF,KAAKmlE,QAC3BugB,MAAOnB,GAAavkF,KAAK8kF,OC/O7B,MAAMa,GAAQ,CACV,EAAK,aACL,EAAK,cACL,EAAK,cACLpF,MAAO,kBAEJ,MAAMqF,WAAmBzF,GACjB9vF,sBACP,OAAOG,EAASo1F,WAEpBx1F,YAAY4P,EAAMilC,EAAYh+B,GAC1BzV,WAAMK,EAAWzC,OAAO0V,OAAO,CAAEgoB,SAAU,IAAKsV,aAAuB,UAATpiC,GAAoBilC,GAAah+B,GAC/F,MACMM,EAAQ,IAAI1B,EADA8/E,GAAM3lF,IAAS,aACEsrB,EAAOoF,mBAAmBvxB,aAAa,mBAAoB,IAAK,CAC/FlP,SAAU,eAEdlB,KAAKsxF,SAAS94E,ICJtB,SAASs+E,GAAch+E,EAAKuoD,EAAIE,EAAIr4D,EAAIE,EAAIC,EAAIC,GAE5CwP,EAAIQ,YACJR,EAAIS,OAAO8nD,EAAIE,GACfzoD,EAAIU,OAAOtQ,EAAIE,GACf0P,EAAIU,OAAOnQ,EAAIC,GACfwP,EAAIU,OAAO6nD,EAAIE,GACfzoD,EAAIi/B,YACJj/B,EAAIa,OAED,MAAMo9E,WAAkBhkF,EAa3B1R,YAAYw8B,GACRp7B,QACAzC,KAAK6pD,SAAShsB,GACd79B,KAAKiE,KAAO,GACZjE,KAAKkW,YACLlW,KAAKmhC,eAAiB,CAElBsyD,aAAc,EACdC,cAAe,EAEfr1C,WAAY,EAEZ24C,eAAWl0F,EAEXm0F,aAAa,EAEbr/C,WAAO90C,EAEPo0F,kBAAkB,EAClBC,gBAAgB,EAEhBC,iBAAkB,GAElBC,gBAAiBlzF,KAAKC,GAAK,EAE3BkzF,uBAAwBP,GAAUQ,qBAAqBxqD,IACvDyqD,mBAAoBT,GAAUU,kBAAkB17E,QAG7Cza,sBACP,OAAOG,EAASs1F,UAGpBlpB,QAAQ5pE,GAEJ,OADAjE,KAAKiE,KAAOA,EACLjE,KAGX6pD,SAAShsB,GACL,IAAKA,EAAMusB,aAAevsB,EAAM+pB,UAC5B,MAAM,IAAIvlD,EAAa,eAAgB,2DAM3C,GAJKw7B,EAAMwsB,gBACPxsB,EAAMwsB,cAAgB,CAAC,IACtBxsB,EAAMysB,eACPzsB,EAAMysB,aAAe,CAAC,IACtBzsB,EAAMwsB,cAAcvlD,SAAW+4B,EAAMysB,aAAaxlD,OAClD,MAAM,IAAIzC,EAAa,eAAgB,qDAO3C,OALArC,KAAK69B,MAAQA,EACb79B,KAAKoqD,WAAavsB,EAAMusB,WACxBpqD,KAAKqqD,cAAgBxsB,EAAMwsB,cAC3BrqD,KAAK4nD,UAAY/pB,EAAM+pB,UACvB5nD,KAAKsqD,aAAezsB,EAAMysB,aACnBtqD,KAGX03F,iBACI,MAAM5+E,EAAM9Y,KAAK0U,eACXysB,EAAiBnhC,KAAKmhC,eACxBA,EAAe61D,WACfl+E,EAAIqlD,YAAYh9B,EAAe61D,WAE/B71D,EAAekd,YACfvlC,EAAIxE,aAAa6sB,EAAekd,YAEhCld,EAAe81D,YACfn+E,EAAIklD,WAAW,SAGfllD,EAAIklD,WAAW,UAIvB25B,iBACI,MAAM7+E,EAAM9Y,KAAK0U,eACjBoE,EAAIxD,QAAQtV,KAAKwV,UACjB,MACMoiC,EADiB53C,KAAKmhC,eACCyW,MACzBA,IACA9+B,EAAI1E,eAAewjC,GACnB9+B,EAAI5E,aAAa0jC,IAIzBggD,cAAc9+E,EAAK++E,EAAKC,GACpB,MAAMC,EAAc/3F,KAAKmhC,eAAe+1D,kBAAoBl3F,KAAKmhC,eAAeg2D,eAC1EjuF,EAAK2uF,EAAIh1F,EACTuG,EAAKyuF,EAAIhwF,EACTwB,EAAKyuF,EAAIj1F,EACTyG,EAAKwuF,EAAIjwF,EAGTmwF,EAAW7zF,KAAKiH,MAAM/B,EAAKH,IAAOG,EAAKH,IAAOI,EAAKF,IAAOE,EAAKF,IAC/D6uF,GAASD,EAAWh4F,KAAKmhC,eAAei2D,iBAAmB,GAAKY,EACtE,IAAI/nB,EACAioB,EACAnpB,EACAopB,EACAn4F,KAAKmhC,eAAeg2D,gBAAkBY,GACtC9nB,EAAQ9rE,KAAKw+B,MAAMz5B,GAAMG,EAAKH,GAAM+uF,GACpCC,EAAQ/zF,KAAKw+B,MAAMv5B,GAAME,EAAKF,GAAM6uF,KAGpChoB,EAAQ5mE,EACR6uF,EAAQ5uF,GAERtJ,KAAKmhC,eAAe+1D,kBAAoBa,GACxChpB,EAAU7lE,GAAMG,EAAKH,IAAO,EAAI+uF,GAChCE,EAAU/uF,GAAME,EAAKF,IAAO,EAAI6uF,KAGhClpB,EAAU7lE,EACVivF,EAAU/uF,GAEVpJ,KAAKmhC,eAAeyW,QACpB9+B,EAAI1E,eAAepU,KAAKmhC,eAAeyW,OACvC9+B,EAAI5E,aAAalU,KAAKmhC,eAAeyW,QAGzC9+B,EAAIQ,YACJR,EAAIS,OAAOw1D,EAASopB,GACpBr/E,EAAIU,OAAOy2D,EAAOioB,GAClBp/E,EAAIikB,SACJjkB,EAAIi/B,YAEJ,MAAMqgD,EAAaj0F,KAAK4/D,MAAMz6D,EAAKF,EAAIC,EAAKH,GAEtCnB,EAAI5D,KAAK6C,IAAIhH,KAAKmhC,eAAei2D,iBAAmBjzF,KAAKm9D,IAAIthE,KAAKmhC,eAAek2D,kBACvF,IAAIgB,EACAC,EACAC,EACAtqB,EACAuqB,EACA1X,GACA9gF,KAAKmhC,eAAeg2D,gBAAkBY,KACtCM,EAASD,EAAaj0F,KAAKC,GAAKpE,KAAKmhC,eAAek2D,gBACpDkB,EAAQlvF,EAAKlF,KAAKm9D,IAAI+2B,GAAUtwF,EAChCkmE,EAAQ3kE,EAAKnF,KAAKq9D,IAAI62B,GAAUtwF,EAChCuwF,EAASF,EAAaj0F,KAAKC,GAAKpE,KAAKmhC,eAAek2D,gBACpDmB,EAAWnvF,EAAKlF,KAAKm9D,IAAIg3B,GAAUvwF,EACnC+4E,EAAWx3E,EAAKnF,KAAKq9D,IAAI82B,GAAUvwF,EACnC+uF,GAAch+E,EAAKy/E,EAAOtqB,EAAO5kE,EAAIC,EAAIkvF,EAAU1X,KAEnD9gF,KAAKmhC,eAAe+1D,kBAAoBa,KACxCM,EAASD,EAAap4F,KAAKmhC,eAAek2D,gBAC1CkB,EAAQrvF,EAAK/E,KAAKm9D,IAAI+2B,GAAUtwF,EAChCkmE,EAAQ7kE,EAAKjF,KAAKq9D,IAAI62B,GAAUtwF,EAChCuwF,EAASF,EAAap4F,KAAKmhC,eAAek2D,gBAC1CmB,EAAWtvF,EAAK/E,KAAKm9D,IAAIg3B,GAAUvwF,EACnC+4E,EAAW13E,EAAKjF,KAAKq9D,IAAI82B,GAAUvwF,EACnC+uF,GAAch+E,EAAKy/E,EAAOtqB,EAAO/kE,EAAIE,EAAIovF,EAAU1X,IAI3DnsE,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL,MAAMo1C,EAAapqD,KAAKoqD,WAClBxC,EAAY5nD,KAAK4nD,UACjBzmB,EAAiBnhC,KAAKmhC,eAC5BroB,EAAIlF,OACJ5T,KAAK03F,iBAEL,IAAIe,EAAiB,CAAE51F,EAAG,EAAGgF,EAAG,GAC5B6wF,EAAe,CAAE71F,EAAG,EAAGgF,EAAG,GAC9B7H,KAAKqqD,cAAcnsC,SAAQ,CAACy6E,EAAajxF,KACrC,MAAMkxF,EAAa54F,KAAKsqD,aAAa5iD,GAErC+wF,EAAiBruC,EAAW/iB,mBAAmB,EAAGsxD,GAClDD,EAAe9wC,EAAUvgB,mBAAmB,EAAGuxD,GAC/C,MAAMC,EAAgBJ,EAAe5wF,EAAI6wF,EAAa7wF,EAEtD4wF,EAAe51F,GAAKunD,EAAWt6C,aAAamO,WAAakjB,EAAesyD,aACxEiF,EAAa71F,GAAK+kD,EAAU93C,aAAakO,UAAYmjB,EAAeuyD,cAEpE,MAAMoF,EAAiB1uC,EAAWnR,WAAW18B,WACrB6tC,EAAW/nB,cAAcs2D,GAAax7D,WACL,IAAlCitB,EAAW7c,qBAC9BkrD,EAAe51F,GAAKi2F,EAAiB33D,EAAesyD,cAGjC7rC,EAAUvlB,cAAcu2D,GAAYz7D,YACH,IAAlCyqB,EAAUra,qBAC5BmrD,EAAa71F,GAAKi2F,EAAiB33D,EAAeuyD,eAGtD+E,EAAe5wF,GAAKgxF,GAAiB,EAAI,EACzCH,EAAa7wF,GAAKgxF,EAAgB,EAAI,EACtC74F,KAAK43F,cAAc9+E,EAAK2/E,EAAgBC,MAE5C5/E,EAAItE,UAEJ,MAAMs6B,EAAah2B,EAAIi2B,YAAY/uC,KAAKiE,MAAMwF,MACxCojE,EAAgB1rC,EAAeq2D,mBACrC,IAAI30F,EAAI,EACR,GAAIgqE,IAAkBkqB,GAAUU,kBAAkB97E,KAC9C9Y,EAAI41F,EAAe51F,OAElB,GAAIgqE,IAAkBkqB,GAAUU,kBAAkB17E,OAAQ,CAG3DlZ,GAFgB61F,EAAa71F,EAAI41F,EAAe51F,GACrB,EAAI41F,EAAe51F,EAC/BisC,EAAa,OAEvB+9B,IAAkBkqB,GAAUU,kBAAkBn7E,QACnDzZ,EAAI61F,EAAa71F,EAAIisC,GAGzB,IAAIjnC,EAAI,EACR,MAAMkxF,EAAoB53D,EAAem2D,uBAYzC,OAXIyB,IAAsBhC,GAAUQ,qBAAqBxqD,IACrDllC,EAAIuiD,EAAWrvC,aAAa00B,iBAEvBspD,IAAsBhC,GAAUQ,qBAAqBrpD,SAC1DrmC,EAAIuiD,EAAWrvC,aAAa20B,kBAAkBnT,EAAOwC,0BAGzDjmB,EAAIlF,OACJ5T,KAAK23F,iBACL7+E,EAAIg3B,SAAS9vC,KAAKiE,KAAMpB,EAAGgF,GAC3BiR,EAAItE,UACGxU,MAIf+2F,GAAUrhF,UAAYrV,OAAO0V,OAAO,GAAIhD,EAAQ2C,WAEhDqhF,GAAUQ,qBAAuB,CAC7BxqD,IAAK,EACLmB,OAAQ,GAEZ6oD,GAAUU,kBAAoB,CAC1B97E,KAAM,EACNI,OAAQ,EACRO,MAAO,GCrQJ,MAAM08E,WAAejmF,EACxB1R,YAAYq7B,EAAS,IACjBj6B,QACAzC,KAAKsY,WAAWokB,GAChB18B,KAAK4X,MAAQ,GAENtW,sBACP,OAAOG,EAASu3F,OAGpB1gF,WAAWJ,EAAU,IACjB,IAAKA,EAAQzY,QACT,MAAM,IAAI4C,EAAa,YAAa,kDAExCrC,KAAKP,QAAUyY,EAAQzY,QACvBO,KAAKkY,QAAU7X,OAAO0V,OAAO1V,OAAO0V,OAAO,CAAEtW,QAASO,KAAKP,QAASoD,EAAG,GAAIgF,EAAG,GAAI4B,MAAO,IAAKwvF,mBAAoB,GAAIC,WAAW,EAAOC,iBAAiB,EAAOC,gBAAgB,EAAOC,iBAAkB,EAAGC,WAAW,GAASphF,GAAU,CAAEqhF,QAASl5F,OAAO0V,OAAO,CAAEkoE,MAAO,IAAO/lE,EAAQqhF,SAAUC,cAAen5F,OAAO0V,OAAO,GAAImC,EAAQshF,kBACzS,IAAjCx5F,KAAKkY,QAAQihF,sBAAsD,IAAlBjhF,EAAQzO,QACzDzJ,KAAKkY,QAAQghF,WAAY,GAIjC7jF,WAAW1B,GAGP,OAFAlR,MAAM4S,WAAW1B,GACjB3T,KAAKP,QAAQ4V,WAAW1B,GACjB3T,KAMXy5F,aAAaxoF,EAAO,UAMhB,OALAjR,KAAK05F,UAAY15F,KAAKP,QAAQ40E,eAAe,CACzCI,UAAWz0E,KAAK4X,MAAM,GAAGsC,MACzBw6D,aAAc10E,KAAK4X,MAAM5X,KAAK4X,MAAM9S,OAAS,GAAGoV,MAChDjJ,KAAAA,IAEGjR,KAAK05F,UAgBhBC,SAASj9D,GACL,IAAI3vB,EACJ,MAAM6sF,EAAev5F,OAAO0V,OAAO,CAAEw6D,UAAU,GAAS7zC,EAAOxkB,SACzDgC,EAAgC,QAAvBnN,EAAK2vB,EAAOxiB,aAA0B,IAAPnN,EAAgBA,EAAK/M,KAAKP,QAAQuwE,MAAM,CAAEntE,EAAG7C,KAAKkY,QAAQrV,EAAGgF,EAAG7H,KAAKkY,QAAQrQ,EAAG4B,MAAOzJ,KAAKkY,QAAQzO,MAAOyO,QAAS0hF,IAC5JzsB,EAAI9sE,OAAO0V,OAAO1V,OAAO0V,OAAO,CAAEmE,MAAAA,EAEpC2/E,WAAY,EAAGC,WAAY,EAAGC,kBAAkB,EAAOZ,iBAAiB,GAASz8D,GAAS,CAAExkB,QAAS0hF,IACnG9gF,EAAM9Y,KAAKoV,aAOjB,OANA+3D,EAAEjoC,OAAOhnB,SAASmnB,GAAUA,EACvBhwB,WAAWyD,GACXmB,SAASC,GACTqrB,eACArnB,SAASuuC,GAAaA,EAASxyC,SAASC,OAC7Cla,KAAK4X,MAAMC,KAAKs1D,GACTjzD,EAGXo0C,SACI,MAAM0rC,EAAkBh6F,KAAKkY,QAAQqhF,QACrC,IAAIxhB,EAAe,EACnB,MAAMxsC,EAAY,IAAI6iB,GAAU4rC,GAChCh6F,KAAKurC,UAAYA,EACjB,IAAI1jC,EAAI7H,KAAKkY,QAAQrQ,EACjBgrD,EAAS,EACTonC,EAAY,GAChB,MAAMC,EAAqB,GAE3Bl6F,KAAK4X,MAAMsG,SAASi8E,IAChBtyF,GAAQsyF,EAAKjgF,MAAMy5B,MAAMwmD,EAAKN,YAC9BM,EAAKjgF,MAAM5R,KAAKT,GACZ7H,KAAKkY,QAAQghF,UACbiB,EAAKj1D,OAAOhnB,SAASmnB,IACjBkG,EAAU8iB,WAAW,CAAChpB,OAI1BkG,EAAU8iB,WAAW8rC,EAAKj1D,QAE9Br9B,GAAQsyF,EAAKjgF,MAAMy5B,MAAMwmD,EAAKL,YAC9BjyF,GAAQsyF,EAAKjgF,MAAMy5B,MAAM3zC,KAAKkY,QAAQ+gF,oBAClCkB,EAAKJ,mBACLG,EAAmBriF,KAAK,CAAEhQ,EAAAA,EAAGw9B,MAAO80D,EAAKj1D,OAAO,KAChDr9B,GAAK,IAEToyF,EAAYA,EAAUrwB,OAAOuwB,EAAKj1D,QAClC2tB,EAAS1uD,KAAK4E,IAAI8pD,EAAQsnC,EAAKjgF,MAAMigC,oBAGzCn6C,KAAK4X,MAAMsG,SAASi8E,GAASA,EAAKjgF,MAAMo3D,cAAcze,KAClD7yD,KAAKkY,QAAQghF,WACbnhB,EAAexsC,EAAUuuC,0BAA0BmgB,GACnDj6F,KAAK4X,MAAMsG,SAASi8E,IAChBA,EAAKjgF,MAAMsC,SAASu7D,EAAe/H,GAAM3K,cAAgBxS,EAAS7yD,KAAKkY,QAAQrV,QAInFk1E,EAAe/3E,KAAKkY,QAAQohF,UACtBt5F,KAAKkY,QAAQzO,MAAQzJ,KAAKkY,QAAQrV,EAClC7C,KAAKkY,QAAQzO,OAASopD,EAAS7yD,KAAKkY,QAAQrV,GAAKmtE,GAAMmB,eAEjE5lC,EAAU+iB,OAAO2rC,EAAWj6F,KAAKkY,QAAQihF,gBAAkB,EAAIphB,EAAc/3E,KAAKkY,QAAQshF,eAC1F,IAAK,IAAI9xF,EAAI,EAAGA,EAAI1H,KAAKkY,QAAQmhF,iBAAkB3xF,IAC/C6jC,EAAUyyC,KAAKgc,GAEnBh6F,KAAK6yD,OAASA,EACd7yD,KAAKk6F,mBAAqBA,EAC1Bl6F,KAAKo6F,MAAQvyF,EACb7H,KAAK2I,YAAc,IAAIf,EAAY5H,KAAKkY,QAAQrV,EAAG7C,KAAKkY,QAAQrQ,EAAG7H,KAAKkY,QAAQzO,MAAOzJ,KAAKo6F,MAAQp6F,KAAKkY,QAAQrQ,GAGrH8M,OAEI,MAAMmE,EAAM9Y,KAAK0U,eACjB,KAAK1U,KAAKurC,WAAcvrC,KAAK6yD,QAAW7yD,KAAKo6F,OAAUp6F,KAAKk6F,oBACxD,MAAM,IAAI73F,EAAa,cAAe,yCAE1CrC,KAAKgV,cACDhV,KAAKkY,QAAQkhF,gBACbhrC,GAAUisC,cAAcvhF,EAAK9Y,KAAKurC,UAAWvrC,KAAK6yD,OAAQ7yD,KAAKkY,QAAQrQ,EAAG7H,KAAKo6F,OAEnFp6F,KAAKk6F,mBAAmBh8E,SAAS7Y,IAC7BA,EAAEggC,MAAME,eAAernB,SAASuuC,GAAa3qD,GAAKw4F,YAAYxhF,EAAK2zC,EAAUpnD,EAAEwC,SCnDpF,MAAMzF,WAAgBF,GAGzBb,YAAY60C,EAAYzI,GAAY,GAChChrC,MAAMyzC,GACNl2C,KAAKmQ,OAAS,GAEdnQ,KAAKmuC,eAAiB,IACXnuC,KAAKu6F,UAAUhoF,KAAK1P,GAAMA,EAAE4E,MAAK8nC,QAAO,CAAC5rC,EAAGC,IAAOD,EAAIC,EAAID,EAAIC,IAG1E5D,KAAKguC,YAAc,IACRhuC,KAAKu6F,UAAUhoF,KAAK1P,GAAMA,EAAE4E,MAAK8nC,QAAO,CAAC5rC,EAAGC,IAAOD,EAAIC,EAAID,EAAIC,IAE1E5D,KAAKw6F,OAAQ,EAGbx6F,KAAKu6F,UAAYrkD,EAAWqkD,WAAa,GAEzCv6F,KAAKmhC,eAAiB9gC,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKmhC,gBAAiB,CAExE8V,iBAAkB1a,EAAOiB,qBAEzBiQ,UAAAA,EAEAgtD,UAAWhtD,EAEXitD,yBAAyB,EAEzBrjF,QAAS,EAETF,MAAO,EAEPnJ,KAAM,GAAGtB,EAAKI,UAAUJ,EAAKiB,eACjC3N,KAAKwY,MAAQ+jB,EAAOoa,cAAc32C,KAAK+9B,SAAU/9B,KAAKw2C,UACtD5zC,EAAQ5C,KAAKwY,MAAO,eAAgB,gCAAgCxY,KAAK+9B,uBAAuB/9B,KAAKw2C,aACrGx2C,KAAK80D,YACD5e,EAAWhO,eACXloC,KAAKu1D,iBAAiBrf,EAAWhO,gBAGjCloC,KAAKu1D,iBAAiB/tB,EAAKe,IAG/BvoC,KAAKw6F,OAAQ,EACbx6F,KAAKy+C,cAEEn9C,sBACP,OAAOG,EAASW,QAEpBmW,QAII,OAHA9V,MAAM8V,QACFvY,KAAKka,OACLla,KAAKia,SAASja,KAAKka,OAChBla,KAIX26F,SAASH,GAGL,OAFAx6F,KAAKw6F,MAAQA,EACbx6F,KAAKy+C,cACEz+C,KAGXstC,UACI,QAAIttC,KAAKmhC,eAAesM,UAK5B2nB,mBACI,OAAoC,MAAhCp1D,KAAK81D,wBACE91D,KAAK81D,wBAEZ91D,KAAKwgC,KAC8B,IAA5BxgC,KAAKutC,oBAA4BvtC,KAAKwgC,KAAKnmB,eAAehD,QAAUrX,KAAKwgC,KAAKnmB,eAAehD,QAEjG,EAGXonC,cACIz+C,KAAKmQ,OAAS,GACdnQ,KAAKyJ,MAAQ,EACb,IAAK,IAAI/B,EAAI,EAAGA,EAAI1H,KAAKu6F,UAAUz1F,SAAU4C,EAAG,CAC5C,IAAI21B,EAAOr9B,KAAKu6F,UAAU7yF,GAAG21B,KACzBr9B,KAAKw6F,QACLn9D,EAAO,IAAMA,EAAO,KACxB,MAAM7kB,EAAQ+jB,EAAOq+D,WAAWv9D,EAAKp2B,WAAYjH,KAAKmhC,eAAehqB,OACrEnX,KAAKmQ,OAAO0H,KAAKW,GACjBxY,KAAKyJ,MAAQtF,KAAK4E,IAAIyP,EAAM+D,WAAYvc,KAAKyJ,OAOjDzJ,KAAKwY,MAAM+D,SAAW,IAAMvc,KAAKyJ,MAGrCwQ,SAASC,GACLzX,MAAMwX,SAASC,GACf,MAAMpB,EAAMoB,EAAM9E,aAGlB,GAFApV,KAAKqV,WAAWyD,GAEZA,EAAK,CACL9Y,KAAKyJ,MAAQ,EACb,IAAK,IAAI/B,EAAI,EAAGA,EAAI1H,KAAKmQ,OAAOrL,SAAU4C,EAAG,CACzC,MAAM8Q,EAAQxY,KAAKmQ,OAAOzI,GACpBzD,EAAO,GAAKuU,EAAMvU,KACG,MAAvBA,EAAK44B,gBACL/jB,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKmhC,eAAenzB,MAChCwK,EAAM/O,MAAQqP,EAAIi2B,YAAY9qC,GAAMwF,MACpCqP,EAAItE,UACJgE,EAAM+D,SAAW,IAAM/D,EAAM/O,OAEjCzJ,KAAKyJ,MAAQtF,KAAK4E,IAAIyP,EAAM+D,WAAYvc,KAAKyJ,OAEjDzJ,KAAKwY,MAAM+D,SAAW,IAAMvc,KAAKyJ,MAIrC,MAAM4/B,EAAKrpC,KAAKu6F,UAAUhoF,KAAI,EAAG9K,IAAKvE,KAAWgX,EAAMuoB,YAAY/9B,OAAOxB,GAAQ,KAKlF,OAJAlD,KAAK24C,MAAMtP,GACPrpC,KAAKsgC,MACLtgC,KAAKsgC,KAAK0I,WAAWhpC,KAAK66F,WAAY76F,KAAK66F,YAExC76F,KAGX8lE,eACI,OAAO9lE,KAAKu6F,UAIhBlzD,mBAAmB5rB,EAAUrK,GACzB,IAAKpR,KAAK01C,aACN,MAAM,IAAIrzC,EAAa,kBAAmB,wDAE9C,GAAuB,IAAnBrC,KAAKqpC,GAAGvkC,OACR,MAAM,IAAIzC,EAAa,YAAa,yCAExC,IAAIQ,EAAI,EACR,GAAI4Y,IAAaF,EAASG,SAASC,KAC/B9Y,GAAI,OAEH,GAAI4Y,IAAaF,EAASG,SAASY,MACpCzZ,EAAI7C,KAAKyJ,MAAQ,OAEhB,GAAIgS,IAAaF,EAASG,SAASS,OAASV,IAAaF,EAASG,SAASO,MAAO,CAEnFpZ,EADyB7C,KAAKwY,MAAM+D,WACb,EAE3B,MAAO,CACH1Z,EAAG7C,KAAKi2C,eAAiBpzC,EACzBgF,EAAG7H,KAAKqpC,GAAGj4B,IAInB4nC,iBACI,OAAOt0C,OAAO1E,KAAKu6F,UAAU,GAAG9yF,KAGpCguC,YACQz1C,KAAK01C,eAEL11C,KAAKid,iBACLjd,KAAKid,gBAAgBw4B,YAEzBz1C,KAAK01C,cAAe,GAGxBzG,WACI,OAAOjvC,KAAK61D,kBAGhBglC,WACI,MAIMC,EAJY96F,KAAK+a,aAAa6yB,cAIH,GAC3BmtD,EAAgBvzD,EAAKe,KAAOvoC,KAAKkoC,gBAFnB,GAEiD4yD,EACrE,OAAO96F,KAAK+a,aAAa0nB,YAAYs4D,GAGzClrD,iBACI,OAAO7vC,KAAKqvC,YAAYlG,aAG5BgzB,WACI,MAAM,KAAE5iB,EAAI,MAAE/gC,EAAK,eAAE0vB,EAAgB/G,gBAAgB,UAAEsM,EAAS,iBAAEwJ,IAAwBj3C,KACpF2T,EAAU3T,KAAK0U,eACfulD,EAAyBn3D,MAARy2C,GAAqB9L,EAE5C,GAAIj1B,EAAMgoB,MAAQy5B,EAAgB,CAC9B,MAAM+gC,EAASh7F,KAAKivC,WAAa,EAC3BgsD,EAASj7F,KAAK66F,WAAa76F,KAAKqvC,YAAYpG,YAC5CiyD,EAAYhzD,IAAmBV,EAAKgB,KACpChwB,EAAMuoB,mBACNvoB,EAAMsoB,iBAEZhqB,EAAMu8C,YAAY1/C,EAASqnF,EAAQC,EAAQhkD,EAAkBikD,EAAW,CAAEh6F,SAAU,kBAI5F86D,gBACIh8D,KAAKmzC,UAAUj1B,SAASwoB,I3EvQFzlC,E2EyQRylC,E3EzQwBjlC,EAASwlD,O2EyQnBjnD,KAAKmhC,eAAes5D,YAG5C/zD,EAASrxB,WAAWrV,KAAKoV,cACzBsxB,EAASjyB,oBAIjB0mF,kBACI,MAAMn+B,EAAQh9D,KAAKivC,WACb8jD,EAAQ/yF,KAAK66F,WACb/hF,EAAM9Y,KAAK0U,eACXshD,EAAWh2D,KAAKmhC,eAAesM,UAC/B2tD,EAAcp7F,KAAKmhC,eAAeu5D,wBACxC,GAAI1kC,GAAYolC,EAAa,CACzB,MAGMC,EArRlB,SAA6BnxD,EAAQoxD,EAAgBphF,EAAOguB,GACxD,MAAMqzD,EAA6B,IAAnBrzD,EACVszD,GAAgC,IAApBtzD,EACZuzD,EAAevhF,EAAMsoB,yBACrBk5D,EAAcxhF,EAAM0zB,cACpB+tD,EAAa,GA2CnB,OA1CAL,EAAep9E,SAAS09E,IACpB,MAAMC,EAAqBD,EAAQp1D,QAAQk1D,IAAgB,EACrDI,EAAsBF,EAAQp1D,QAAQ,IAAM,EAClD,GAAK+0D,GAAWO,GAAyBN,GAAaK,EAClD,OAKmB,IAAnBD,EAAQ92F,QACR82F,EAAQ/jF,KAAK+jF,EAAQ,IAEzB,MAAMG,EAAU,GAEhBH,EAAQ19E,SAAQ,CAAC2nD,EAAQz0D,EAAOwqF,KAC5B,MAAMI,EAAwB,IAAXn2B,EACbo2B,EAAgBp2B,IAAW61B,EAGjC,IAAI7zF,EAAIqS,EAAMuoB,YAAYojC,EAAS,GAGrB,IAAVz0D,GAAgB4qF,EAGX5qF,IAAUwqF,EAAQ92F,OAAS,GAAMm3F,IACtCp0F,GAAK4zF,EAAe,EAAI,GAHxB5zF,GAAK4zF,EAAe,EAAI,EAM5BM,EAAQlkF,KAAKhQ,GAGU,IAAnBqgC,GAAwB8zD,EACxBD,EAAQlkF,KAAKqyB,EAAS,IAEG,IAApBhC,GAAyB+zD,GAC9BF,EAAQlkF,KAAKqyB,EAAS,MAI9ByxD,EAAW9jF,KAAKkkF,EAAQn5D,MAAK,CAACj/B,EAAGC,IAAMD,EAAIC,QAExC+3F,EAqOmBO,CAAoBnJ,EA9SlD,SAA+B1iB,EAAW8rB,GACtC,MAAMC,EAAe,GACrB,IAAIptC,EAAQ,GACZ,IAAK,IAAI6W,EAAS,EAAGA,GAAUwK,EAAWxK,IACtBs2B,EAAa31D,QAAQq/B,IAAW,GAK5Cu2B,EAAavkF,KAAKm3C,GAClBA,EAAQ,IAJRA,EAAMn3C,KAAKguD,GASnB,OAFI7W,EAAMlqD,OAAS,GACfs3F,EAAavkF,KAAKm3C,GACfotC,EA8RuBC,CAFLr8F,KAAK+a,aAAa6yB,cACf5tC,KAAKu6F,UAAUhoF,KAAKkJ,GAAa/W,OAAO+W,EAAShU,QAETzH,KAAK+a,aAAc/a,KAAKutC,oBACpFz0B,EAAIlF,OACJkF,EAAIxE,aAAakzB,EAAKiB,OACtB4yD,EAAUn9E,SAAS6yD,IACO,IAAlBA,EAAOjsE,SAEXgU,EAAIQ,YACJR,EAAIS,OAAOyjD,EAAO+T,EAAO,IACzBj4D,EAAIU,OAAOwjD,EAAO+T,EAAOA,EAAOjsE,OAAS,IACzCgU,EAAIikB,SACJjkB,EAAIi/B,gBAERj/B,EAAItE,WAIZ8nF,gBACI,MAAMxjF,EAAM9Y,KAAK0U,eACX7R,EAAI7C,KAAKi2C,eACT5M,EAAKrpC,KAAKqpC,GAChB,IAAK,IAAI3hC,EAAI,EAAGA,EAAI1H,KAAKu6F,UAAUz1F,SAAU4C,EAAG,CAC5C,MAAMG,EAAIwhC,EAAG3hC,GAAK1H,KAAKmhC,eAAe9pB,QAChCmB,EAAQxY,KAAKmQ,OAAOzI,GAGpB60F,EAAQ15F,EADW7C,KAAKwY,MAAM+D,WACC,EAAI/D,EAAM+D,WAAa,EAG5D,GADAzD,EAAI4kD,UAAU6+B,EAAQ,EAAG10F,EAAI,EAAG2Q,EAAM+D,WAAa,EAAG,GAClD/D,EAAMjW,KACNuU,EAAMu8C,YAAYv6C,EAAKyjF,EAAO10F,EAAG7H,KAAKmhC,eAAe8V,iBAAmBj3C,KAAKmhC,eAAehqB,MAAOqB,EAAMjW,UAExG,CACDuW,EAAIlF,OACJkF,EAAIxD,QAAQtV,KAAKmhC,eAAenzB,MAChC,MAAM/J,EAAOuU,EAAMvU,KAAKgD,WACxB6R,EAAIg3B,SAAS7rC,EAAMs4F,EAAO10F,EAAI,EAAI7H,KAAKmhC,eAAehqB,OACtD2B,EAAItE,YAKhBG,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB,GAAuB,IAAnB1U,KAAKqpC,GAAGvkC,OACR,MAAM,IAAIzC,EAAa,YAAa,qCAExCrC,KAAKgV,cACL,MAAMwnF,EAA2B15F,MAAb9C,KAAKu5C,MAAqBv5C,KAAKmhC,eAAesM,UAIlE,GAHA30B,EAAI+1B,UAAU,eAAW/rC,EAAW,CAAE05D,aAAa,IACnDx8D,KAAKs8F,gBACLt8F,KAAKm7F,kBACDn7F,KAAKsgC,MAAQk8D,EAAa,CAC1B,MAAMvyD,EAASjqC,KAAKivC,WACpBjvC,KAAKsgC,KAAKqI,mBAAmBsB,EAAQA,GACrCnxB,EAAI+1B,UAAU,YAAQ/rC,EAAW,CAAE05D,aAAa,IAChDx8D,KAAKsgC,KAAKjrB,WAAWyD,GAAKnE,OAC1BmE,EAAIi3B,aAER/vC,KAAKm8D,WACLn8D,KAAKg8D,gBACLljD,EAAIi3B,cC5XL,MAAM0sD,WAAiBzsB,GACf1uE,sBACP,OAAOG,EAASg7F,SAEpBp7F,YAAYwB,EAAGgF,EAAG4B,EAAOyO,GAErBzV,MAAMI,EAAGgF,EAAG4B,EADQpJ,OAAO0V,OAAO,CAAE06D,yBAA0B,GAAIJ,UAAW,EAAGO,kBAAmB,GAAK14D,IAG5G+C,gBACI,OAAOjb,KAAKyiC,YAAY,KAG5Bi6D,cAEI,OADA18F,KAAKwyE,QAAQ,OACNxyE,MCHf,SAAS,MAAKiD,GACN05F,GAAYz7D,OACZn+B,EAAI,uBAAwBE,GAE7B,IAAI25F,IACX,SAAWA,GACPA,EAAoBA,EAAyB,IAAI,GAAK,MACtDA,EAAoBA,EAA4B,QAAK,GAAK,SAF9D,CAGGA,KAAwBA,GAAsB,KAC1C,MAAMD,WAAoB5pF,EAC7B1R,aAAY,MAAE+lC,EAAK,KAAEy1D,EAAI,KAAE54F,EAAO,GAAE,YAAEyoE,EAAc,GAAE,SAAEjxD,EAAWmhF,GAAoB7vD,MACnFtqC,QACAzC,KAAKonC,MAAQA,EACbpnC,KAAK68F,KAAOA,EACZ78F,KAAKiE,KAAOA,EACZjE,KAAK0sE,YAAcA,EACnB1sE,KAAKyb,SAA+B,iBAAbA,EAAwBkhF,GAAY9gF,eAAeJ,GAAYA,EACtFzb,KAAKkD,KAAO,EACZlD,KAAKkW,YACLlW,KAAKmhC,eAAiB,CAClBojC,QAAQ,EACRnG,KAAM,CAAC,GACPxmB,MAAO,QACPyG,WAAY,EACZy+C,cAAc,EACdnH,eAAgB,EAGhBoH,uBAAuB,GAGpBz7F,sBACP,OAAOG,EAASk7F,YAETjhF,sBACP,OAAOkhF,GAEA/gF,4BACP,MAAO,CACHs0B,IAAKysD,GAAoB7vD,IACzBqD,OAAQwsD,GAAoB1uD,QAMzB8uD,uBAEP,OADA,GAAE,6DACKJ,GAKAK,6BAEP,OADA,GAAE,8DACKN,GAAY9gF,eAOvBnI,WAAWoF,GACPA,EAAIxD,QAAQtV,KAAKgO,MACjB,MAAMkK,EAAUlY,KAAKmhC,eAIrB,OAHAroB,EAAI1E,eAAe8D,EAAQ0/B,OAC3B9+B,EAAI5E,aAAagE,EAAQ0/B,OACzB9+B,EAAIxE,aAAa4D,EAAQmmC,YAClBr+C,KAIXilE,UAAUV,EAAQnG,GAId,OAHAp+D,KAAKmhC,eAAeojC,OAASA,EACzBnG,IACAp+D,KAAKmhC,eAAei9B,KAAOA,GACxBp+D,KAGXg0D,QAAQ9wD,GAEJ,OADAlD,KAAKkD,KAAOA,EACLlD,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL,IAAInN,EAAI,EACR,OAAQ7H,KAAKyb,UACT,KAAKmhF,GAAoB7vD,IACrBllC,EAAI7H,KAAKonC,MAAMrsB,aAAa00B,eAAezvC,KAAKkD,MAChD,MACJ,KAAK05F,GAAoB1uD,OACrBrmC,EAAI7H,KAAKonC,MAAMrsB,aAAa20B,kBAAkB1vC,KAAKkD,KAAOq5B,EAAOwC,yBACjE,MACJ,QACI,MAAM,IAAI18B,EAAa,kBAAmB,gBAAgBrC,KAAKyb,wBAGvE,MAAM2rB,EAAQ,CAAEvkC,EAAG7C,KAAKonC,MAAM6O,eAAgBpuC,EAAAA,GACxCg1F,EAAO,CAAEh6F,EAAG7C,KAAK68F,KAAK5mD,eAAgBpuC,EAAAA,GAC5C,GAAE,gCAAiCu/B,EAAO,QAASy1D,EAAM,KAAMh1F,GAC/D,MAAM8tF,EAAiB31F,KAAKmhC,eAAew0D,eAAiB31F,KAAKyb,SACjE3C,EAAIlF,OACJ5T,KAAK0T,WAAWoF,GAEhBA,EAAIg3B,SAAS9vC,KAAKiE,KAAMmjC,EAAMvkC,EAAGukC,EAAMv/B,GAEvC,MAAMq1F,EAAepkF,EAAIi2B,YAAY/uC,KAAKiE,MACpCk5F,EAAaD,EAAazzF,MAC1B2zF,EAAcF,EAAaxzF,OAE3B2zF,EAAUj2D,EAAMv/B,EAAIu1F,EAAc,KAGlC,OAAE1vF,EAAM,KAAEJ,EAAI,OAAEC,EAAM,MAAEC,GAAUxN,KAAKwV,SAEvC2wC,EAAkBz5C,EAAKq1C,UAAUz0C,EAAM,SAC7CwL,EAAIxD,QAAQ5H,EAAQy4C,EAAiB54C,EAAQC,GAC7CsL,EAAIg3B,SAAS9vC,KAAK0sE,YAAatlC,EAAMvkC,EAAIs6F,EAAa,EAAGE,GAEzD,MAAMC,EAAgBxkF,EAAIi2B,YAAY/uC,KAAK0sE,aACrC6wB,EAAcD,EAAc7zF,MAC5B+zF,EAAeF,EAAc5zF,OAEnC,IAAIqlE,EAAU3nC,EAAMvkC,EAChB46F,EAASJ,EACb,MAAMptB,EAAQ4sB,EAAKh6F,EAAI7C,KAAK68F,KAAK5jD,WAAW18B,WAExCvc,KAAKyb,WAAamhF,GAAoB7vD,KACtCgiC,GAAWouB,EAAaI,EAAc,EACtCE,GAAUD,EAAe,KAEpBx9F,KAAKyb,WAAamhF,GAAoB1uD,SAC3CuvD,GAAUD,EAAe,IACzBzuB,GAAWouB,EAAa,EACnBn9F,KAAKmhC,eAAe47D,wBACrBhuB,GAAWwuB,IAGfv9F,KAAKmhC,eAAeojC,QAEpB/B,GAASgD,eAAe1sD,EAAKi2D,EAAS0uB,EAAQxtB,EAAOwtB,EAAQz9F,KAAKmhC,eAAei9B,MAE7Ep+D,KAAKmhC,eAAe27D,cACpBt6B,GAASgD,eAAe1sD,EAAKm3D,EAAOwtB,EAAS,EAAIz9F,KAAKyb,SAAUw0D,EAAOwtB,EAAS9H,EAAgB31F,KAAKmhC,eAAei9B,QAIxHtlD,EAAIQ,YACJR,EAAIS,OAAOw1D,EAAS0uB,GAEpB3kF,EAAIU,OAAOy2D,EAAOwtB,GACdz9F,KAAKmhC,eAAe27D,cAEpBhkF,EAAIU,OAAOy2D,EAAOwtB,EAAS9H,GAE/B78E,EAAIikB,SACJjkB,EAAIi/B,aAERj/B,EAAItE,WCvKZ,SAAS,MAAKvR,GACNy6F,GAAax8D,OACbn+B,EAAI,wBAAyBE,GDwKrC05F,GAAYz7D,OAAQ,EACpBy7D,GAAYjnF,UAAY,CACpBhI,OAAQhB,EAAK8D,MACblD,KAAM,GACNC,OAAQjC,EAAWsC,OACnBJ,MAAOjC,EAAUoD,QCpKd,MAAM+uF,WAAqB57F,GAU9BT,YAAY60C,GACRzzC,MAAMyzC,GACNl2C,KAAK29F,UAAYznD,EAAWjyC,MAAQ,IAAIoJ,cACxCrN,KAAKkD,KAAOgzC,EAAWhzC,MAAQ,EAC/BlD,KAAKmQ,OAAS,GACdnQ,KAAKmhC,eAAiB9gC,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKmhC,gBAAiB,CAAEy8D,gBAAiB,KAC/F,GAAE,sBAAuB59F,KAAK29F,UAEvBr8F,sBACP,OAAOG,EAASi8F,aAGT3wB,oBACP,MAAO,CACHxlE,EAAG,CACChF,KAAM,eACNkH,MAAO,IAEX0jE,EAAG,CACC5qE,KAAM,eACNkH,MAAO,IAEXmY,EAAG,CACCrf,KAAM,eACNkH,MAAO,IAEXpC,EAAG,CACC9E,KAAM,mBACNkH,MAAO,IAEX2jE,EAAG,CACC7qE,KAAM,WACNkH,MAAO,IAEXy2B,EAAG,CACC39B,KAAM,qBACNkH,MAAO,KAKnBuqD,QAAQ9wD,GAEJ,OADAlD,KAAKkD,KAAOA,EACLlD,KAGXy1C,YACI,IAAIooD,EAAc,EAoBlB,OAhBA79F,KAAKmQ,OAAS,GAEdnQ,KAAK29F,SAASh2F,MAAM,IAAIuW,SAAS4/E,IAE7B,MAAMvI,EAAamI,GAAa3wB,OAAO+wB,GACvC,IAAKvI,EACD,MAAM,IAAIlzF,EAAa,+BAAiCy7F,GAC5D,MAAMxwF,EAAO1K,EAAQ5C,KAAKmhC,eAAey8D,iBACnCplF,EAAQ,IAAI1B,EAAMy+E,EAAWhzF,KAAM+K,EAAM,CAAEpM,SAAU,aAE3DlB,KAAKmQ,OAAO0H,KAAKW,GACjBqlF,GAAetI,EAAW9rF,SAG9BzJ,KAAKwc,SAASqhF,GACd79F,KAAK01C,cAAe,EACb11C,KAGX2U,OACI3U,KAAKgV,cACL,MAAMnS,EAAI7C,KAAKi2C,eACTpuC,EAAI7H,KAAK+a,aAAa0nB,YAAYziC,KAAKkD,MAAQ,GACrD,GAAE,uBAAwBlD,KAAK29F,UAC/B,IAAII,EAAWl7F,EACf7C,KAAKmQ,OAAO+N,SAAQ,CAAC1F,EAAOpH,KACxB,MAAM4sF,EAAiBh+F,KAAK29F,SAASvsF,GACrCoH,EAAMoC,OAAO5a,KAAK0U,eAAgBqpF,EAAUl2F,GAC5Ck2F,GAAYL,GAAa3wB,OAAOixB,GAAgBv0F,UAK5Di0F,GAAax8D,OAAQ,EC3Gd,MAAM+8D,WAAoBn8F,GAC7BT,YAAY8tE,EAAUC,GAClB3sE,MAAM,CAAEs7B,SAAU,MAClB,MAAMswC,EAAgB,IAAIa,GAAcC,EAAUC,GAClDpvE,KAAKk+F,YAAc7vB,EAAcuB,UACjC5vE,KAAKwc,SAASxc,KAAKk+F,YAAY1lF,MAAM1I,aAAarG,OAElDzJ,KAAKuzC,cAAe,EAEbjyC,sBACP,OAAOG,EAASw8F,YAIpB7oD,qBAAqBC,GAEjB,OAAOr1C,KAEXy1C,YAEI,OADAz1C,KAAK01C,cAAe,EACb11C,KAEX2U,OACI,MAAMuF,EAAQla,KAAK+a,aACbjC,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACAhV,KAAKk+F,YAAY1lF,MAAMpD,cACxBpV,KAAKk+F,YAAY1lF,MAAMnD,WAAWyD,GAEtC9Y,KAAKk+F,YAAY1lF,MAAMyB,SAASC,GAChCla,KAAKk+F,YAAY1lF,MAAM4B,UAAUF,EAAMuoB,YAAY,GAAKvoB,EAAMe,iBAC9Djb,KAAKk+F,YAAY1lF,MAAMwC,cAAchb,KAAKi2C,iBCvB3C,MAAMkoD,WAAuBprF,EAMhC1R,YAAY+8F,GACR37F,QACI27F,EAAah3D,QACbpnC,KAAKonC,MAAQg3D,EAAah3D,OAC1Bg3D,EAAavB,OACb78F,KAAK68F,KAAOuB,EAAavB,MAC7B78F,KAAKkD,KAAO,EACZlD,KAAKmhC,eAAiB,CAClB8lC,OAAO,EACPE,YAAa,EACbC,WAAY,EACZC,WAAY,EACZH,cAAe,GAGZ5lE,sBACP,OAAOG,EAAS08F,eAGpBnqC,QAAQ9wD,GAEJ,OADAlD,KAAKkD,KAAOA,EACLlD,KAGXynE,SAASR,GAEL,OADAjnE,KAAKmhC,eAAe8lC,MAAQA,EACrBjnE,KAGX2U,OACI,MAAMmE,EAAM9Y,KAAK0U,eACjB1U,KAAKgV,cACL,MAAMnN,EAAK7H,KAAKonC,OAASpnC,KAAKonC,MAAMrsB,aAAa00B,eAAezvC,KAAKkD,OAChElD,KAAK68F,MAAQ78F,KAAK68F,KAAK9hF,aAAa00B,eAAezvC,KAAKkD,OACzD,EAGE6rE,EAAW/uE,KAAKonC,OAASpnC,KAAKonC,MAAM6O,gBAAoBj2C,KAAK68F,MAAQ78F,KAAK68F,KAAK9hF,aAAamwC,gBAAmB,EAG/GmzC,EAAUr+F,KAAK68F,MAAQ78F,KAAK68F,KAAK5mD,eAAiBj2C,KAAK68F,KAAKtgF,WAAa,GAC1Evc,KAAKonC,OAASpnC,KAAKonC,MAAMrsB,aAAaowC,aAAe,IACtD,EACJnrD,KAAKmhC,eAAe+lC,cAAgBm3B,EAAStvB,EAtDrD,YAAc9rE,GACNk7F,GAAej9D,OACfn+B,EAAI,0BAA2BE,GAqD/B,CAAE,qCAAsC8rE,EAAS,UAAWsvB,EAAQ,KAAMx2F,GAC1Em/D,GAAQY,cAAc9uD,EAAKi2D,EAASlnE,EAAG7H,KAAKmhC,iBClBpD,SAAS,MAAKl+B,GACNq7F,GAAQp9D,OACRn+B,EAAI,mBAAoBE,GDoBhCk7F,GAAej9D,OAAQ,ECfhB,MAAMo9D,GAQTj9F,YAAY6W,EAAU,IAClB,GAAE,gBAAiBA,GACnBlY,KAAKkY,QAAU,CACXgC,MAAO,CACHy5B,MAAO,IAEXyvB,SAAU,CACNF,UAAW,GACXz5D,MAAO,IACPC,OAAQ,IACRy5D,WAAY,QAEhBn1D,KAAMswF,GAAQ5oF,WAElB1V,KAAKsY,WAAWJ,GAWpBzT,wBAAwBy+D,EAAWz5D,EAAQ,IAAKC,EAAS,KACrD,OAAO,IAAI40F,GAAQ,CAAEl7B,SAAU,CAAEF,UAAAA,EAAWz5D,MAAAA,EAAOC,OAAAA,KAEvD6O,QACIvY,KAAKu+F,QAAU,GACfv+F,KAAKw+F,QAAU,GACfx+F,KAAKy+F,OAAS,GACdz+F,KAAKklC,OAAS,GACdllC,KAAKka,WAAQpX,EAEjBwV,WAAWJ,GACPlY,KAAKkY,QAAU7X,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKkY,SAAUA,GAC9DlY,KAAK0+F,eACL1+F,KAAKuY,QAETmmF,eACI,MAAM,UAAEx7B,EAAS,MAAEz5D,EAAK,OAAEC,EAAM,WAAEy5D,GAAenjE,KAAKkY,QAAQkrD,SAC9D,GAAiB,MAAbF,EACA,OAEJ,GAAiB,IAAbA,EAEA,MADA,GAAEljE,MACI,IAAIqC,EAAa,gDAE3B,IAAIsgE,EAAU3iE,KAAKkY,QAAQkrD,SAAST,QACpC,QAAgB7/D,IAAZ6/D,EAAuB,CAOnBA,EADA1F,GALSnvD,SAAS8D,eAAesxD,IAMvBV,GAASK,SAASC,OAGlBN,GAASK,SAASE,IAGpC/iE,KAAK2T,QAAU6uD,GAASc,aAAaJ,EAAWP,EAASl5D,EAAOC,EAAQy5D,GAE5E/tD,aACI,OAAOpV,KAAK2T,QAEhB0B,WAAW1B,GAEP,OADA3T,KAAK2T,QAAUA,EACR3T,KAEX8d,WACI,OAAO9d,KAAKka,MAEhBykF,YACI,OAAO3+F,KAAKklC,OAGhB8qC,MAAMtzC,GACF,MAAM+3B,EAAaz0D,KAAKkY,QAAQgC,MAAMy5B,MAChCw5B,EAAI9sE,OAAO0V,OAAO,CAAElT,EAAG,EAAGgF,EAAG,EAAG4B,MAAOzJ,KAAKkY,QAAQkrD,SAAS35D,MAAqB,EAAbgrD,EAAkBv8C,QAAS,CAAEu4D,yBAAuC,EAAbhc,IAAsB/3B,GAClJxiB,EAAQ,IAAI81D,GAAM7C,EAAEtqE,EAAGsqE,EAAEtlE,EAAGslE,EAAE1jE,MAAO0jE,EAAEj1D,SAI7C,OAHAlY,KAAKy+F,OAAO5mF,KAAKqC,GACjBA,EAAM7E,WAAWrV,KAAK2T,SACtB3T,KAAKka,MAAQA,EACNA,EAEXuiF,SAAS//D,GACL,MAAM+3B,EAAaz0D,KAAKkY,QAAQgC,MAAMy5B,MAChCw5B,EAAI9sE,OAAO0V,OAAO,CAAElT,EAAG,EAAGgF,EAAG,EAAG4B,MAAOzJ,KAAKkY,QAAQkrD,SAAS35D,MAAqB,EAAbgrD,EAAkBv8C,QAAS,CAAEu4D,yBAAuC,IAAbhc,IAAsB/3B,GAClJxiB,EAAQ,IAAIuiF,GAAStvB,EAAEtqE,EAAGsqE,EAAEtlE,EAAGslE,EAAE1jE,MAAO0jE,EAAEj1D,SAIhD,OAHAlY,KAAKy+F,OAAO5mF,KAAKqC,GACjBA,EAAM7E,WAAWrV,KAAK2T,SACtB3T,KAAKka,MAAQA,EACNA,EAEXlY,UAAUk0C,GACN,MAAMx5B,EAAO,IAAI1a,GAAUk0C,GAK3B,OAJIl2C,KAAKka,OACLwC,EAAKzC,SAASja,KAAKka,OACvBwC,EAAKrH,WAAWrV,KAAK2T,SACrB3T,KAAKu+F,QAAQ1mF,KAAK6E,GACXA,EAEX00E,UAAU54E,EAAO09B,EAAYh+B,GACzB,MAAMwE,EAAO,IAAI00E,GAAU54E,EAAO09B,EAAYh+B,GAK9C,OAJIlY,KAAKka,OACLwC,EAAKzC,SAASja,KAAKka,OACvBwC,EAAKrH,WAAWrV,KAAK2T,SACrB3T,KAAKu+F,QAAQ1mF,KAAK6E,GACXA,EAEXm6E,WAAW5lF,EAAMilC,EAAYh+B,GACzB,MAAMwE,EAAO,IAAIm6E,GAAW5lF,EAAMilC,EAAYh+B,GAK9C,OAJIlY,KAAKka,OACLwC,EAAKzC,SAASja,KAAKka,OACvBwC,EAAKrH,WAAWrV,KAAK2T,SACrB3T,KAAKu+F,QAAQ1mF,KAAK6E,GACXA,EAEX+zE,UAAUv6C,GACN,MAAM0oD,EAAY,IAAInO,GAAUv6C,GAKhC,OAJIl2C,KAAKka,OACL0kF,EAAU3kF,SAASja,KAAKka,OAC5B0kF,EAAUvpF,WAAWrV,KAAK2T,SAC1B3T,KAAKu+F,QAAQ1mF,KAAK+mF,GACXA,EAEXnyB,SAASv2B,GACL,MAAM2oD,EAAW,IAAIpyB,GAASv2B,GAK9B,OAJIl2C,KAAKka,OACL2kF,EAAS5kF,SAASja,KAAKka,OAC3B2kF,EAASxpF,WAAWrV,KAAK2T,SACzB3T,KAAKu+F,QAAQ1mF,KAAKgnF,GACXA,EAEX9gD,QAAQrhB,EAAS,IACb,MAAMoiE,EAAU,IAAI/gD,GAAQrhB,EAAOzrB,MAKnC,OAJIjR,KAAKka,OACL4kF,EAAQ7kF,SAASja,KAAKka,OAC1B4kF,EAAQzpF,WAAWrV,KAAK2T,SACxB3T,KAAKu+F,QAAQ1mF,KAAKinF,GACXA,EAEXrW,SAAS/rD,GACL,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAE9E,KAAM,SAAUiH,QAAS,CAC3C5K,KAAM,UACN2/B,gBAAYnqC,IACX45B,GACHqiE,EAAW,IAAItW,GAAStb,EAAEl8D,KAAMk8D,EAAEj1D,QAAQ5K,KAAM6/D,EAAEj1D,QAAQ+0B,YAKhE,OAJIjtC,KAAKka,OACL6kF,EAAS9kF,SAASja,KAAKka,OAC3B6kF,EAAS1pF,WAAWrV,KAAK2T,SACzB3T,KAAKu+F,QAAQ1mF,KAAKknF,GACXA,EAEXd,YAAYvhE,GACR,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAEu1C,KAAM,OAAS5uB,GACnCsiE,EAAc,IAAIf,GAAY9wB,EAAE7hB,MAKtC,OAJItrD,KAAKka,OACL8kF,EAAY/kF,SAASja,KAAKka,OAC9B8kF,EAAY3pF,WAAWrV,KAAK2T,SAC5B3T,KAAKu+F,QAAQ1mF,KAAKmnF,GACXA,EAEXhM,WAAWt2D,GACP,MAAMuiE,EAAa,IAAIjM,GAAWt2D,EAAOv8B,IAAKu8B,EAAO4sC,UAAW5sC,EAAOutC,UAKvE,OAJIjqE,KAAKka,OACL+kF,EAAWhlF,SAASja,KAAKka,OAC7B+kF,EAAW5pF,WAAWrV,KAAK2T,SAC3B3T,KAAKu+F,QAAQ1mF,KAAKonF,GACXA,EAEX78F,QAAQ8zC,GACJ,MAAMx5B,EAAO,IAAIta,GAAQ8zC,GAKzB,OAJIl2C,KAAKka,OACLwC,EAAKzC,SAASja,KAAKka,OACvBwC,EAAKrH,WAAWrV,KAAK2T,SACrB3T,KAAKu+F,QAAQ1mF,KAAK6E,GACXA,EAEX9a,UAAUs0C,GACN,MAAMx5B,EAAO,IAAI9a,GAAUs0C,GAI3B,OAHIl2C,KAAKka,OACLwC,EAAKzC,SAASja,KAAKka,OACvBwC,EAAKrH,WAAWrV,KAAK2T,SACd+I,EAEXmqB,eAAenK,GACX,MAAMsyB,EAAQ,IAAInoB,GAAenK,EAAOmB,MAAOnB,EAAOixB,MAEtD,OADAqB,EAAM35C,WAAWrV,KAAK2T,SACfq7C,EAEX/tB,WAAWvE,GACP,MAAMu1B,EAAQ,IAAIhxB,EAAWvE,EAAOzrB,MAEpC,OADAghD,EAAM58C,WAAWrV,KAAK2T,SACfs+C,EAEXrlB,WAAWlQ,GACP,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAE9R,KAAM,IAAKi7F,SAAUxyD,GAA4B3wB,OAAQojF,SAAUxyD,GAA0BuB,QAAUxR,GAC3HuQ,EAAa,IAAIL,GAAWugC,EAAElpE,MAKpC,OAJAgpC,EAAWyB,iBAAiBy+B,EAAE+xB,UAC9BjyD,EAAWqB,yBAAyB6+B,EAAEgyB,UACtClyD,EAAW33B,QAAQ63D,EAAEn/D,MACrBi/B,EAAW53B,WAAWrV,KAAK2T,SACpBs5B,EAEXgT,YAAYvjB,GACR,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAEopF,SAAU,MAAOD,SAAU,SAAUE,SAAS,EAAM9+C,aAAa,GAAQ5jB,GAC7F0kB,EAAc,IAAInB,GAiBxB,OAhBAmB,EAAYsE,cAAcynB,EAAE+xB,UAC5B99C,EAAYoE,YAAY2nB,EAAEgyB,UAC1B/9C,EAAYgC,iBAAiB+pB,EAAEiyB,SAC/Bh+C,EAAYqC,eAAe0pB,EAAE7sB,aAGD,iBAAjB6sB,EAAEl/D,YAAiD,iBAAfk/D,EAAEtgE,SACjB,iBAAjBsgE,EAAEj/D,WACTkzC,EAAY9rC,QAAQ63D,EAAEl/D,WAAYk/D,EAAEtgE,SAAUsgE,EAAEj/D,YAEhDkzC,EAAY9rC,QAAQ63D,EAAEl/D,WAAYk/D,EAAEtgE,SAAU,IAEvB,iBAAfsgE,EAAEtgE,UACdu0C,EAAYjrC,YAAYg3D,EAAEtgE,UAE9Bu0C,EAAY/rC,WAAWrV,KAAK2T,SACrBytC,EAEXzQ,aAAajU,GACT,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAE9E,KAAM,KAAMwK,SAAU,SAAWihB,GACrDmU,EAAe,IAAIF,GAAaw8B,EAAEl8D,MAGxC,OAFA4/B,EAAaxzB,YAAY8vD,EAAE1xD,UAC3Bo1B,EAAax7B,WAAWrV,KAAK2T,SACtBk9B,EAEX6sD,aAAahhE,GACT,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAE9R,KAAM,IAAK85B,SAAU,IAAKoa,KAAM,EAAGj1C,KAAM,GAAKw5B,GAClEz4B,EAAO,IAAIy5F,GAAa,CAC1Bz5F,KAAMkpE,EAAElpE,KACRf,KAAMiqE,EAAEjqE,KACR66B,SAAUovC,EAAEpvC,SACZoa,KAAMg1B,EAAEh1B,OAMZ,OAJIn4C,KAAKka,OACLjW,EAAKgW,SAASja,KAAKka,OACvBjW,EAAKoR,WAAWrV,KAAK2T,SACrB3T,KAAKu+F,QAAQ1mF,KAAK5T,GACXA,EAEXqlD,UAAU5sB,GACN,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAEszC,OAAQ,IAAK5tC,SAAU,QAAUihB,GACrD6sB,EAAY,IAAIvB,GAAemlB,EAAE9jB,QAGvC,OAFAE,EAAUlsC,YAAY8vD,EAAE1xD,UACxB8tC,EAAUl0C,WAAWrV,KAAK2T,SACnB41C,EAEX8a,aAAa3nC,GACT,MAAM+nC,EAAe,IAAIJ,GAAa3nC,EAAO2sB,QAG7C,OAFAob,EAAapnD,YAAYqf,EAAOjhB,UAChCgpD,EAAapvD,WAAWrV,KAAK2T,SACtB8wD,EAEXxV,cACI,OAAO,IAAIA,GAEf8Y,kBACI,OAAO,IAAIA,GAEfmrB,iBAAiBx2D,GACb,MAAM2iE,EAAcz8F,EAAQ85B,EAAOy2D,mBAAoB,sBACjDmM,EAAmB,IAAIpM,GAAiBmM,EAAa3iE,GAG3D,OAFA4iE,EAAiBjqF,WAAWrV,KAAK2T,SACjC3T,KAAKu+F,QAAQ1mF,KAAKynF,GACXA,EAEXj0C,MAAM3uB,GACF,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAEu1C,KAAM,OAAS5uB,GACnC2I,EAAQ,IAAIgmB,GAAM8hB,EAAE7hB,KAAM6hB,EAAEj1D,SAElC,OADAlY,KAAKklC,OAAOrtB,KAAKwtB,GACVA,EAEXgvC,eAAe33C,GACX,MAAMg9D,EAAY,IAAIrlB,GAAe33C,EAAO+3C,UAAW/3C,EAAOg4C,cAG9D,OAFAglB,EAAUj9C,QAAQ/f,EAAOzrB,MAAMoE,WAAWrV,KAAK2T,SAC/C3T,KAAKu+F,QAAQ1mF,KAAK6hF,GACXA,EAEXtrC,UAAUl2C,GACN,OAAO,IAAIk2C,GAAUl2C,GAEzBqmE,OAAO7hD,GACH,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAE8nB,MAAO,GAAI3lB,QAAS,IAAMwkB,GAC9CgY,EAAS,IAAI6pC,GAAOpR,EAAEtvC,MAAOsvC,EAAEj1D,SAAS7C,WAAWrV,KAAK2T,SAE9D,OADA3T,KAAKu+F,QAAQ1mF,KAAK68B,GACXA,EAEX+Z,KAAK/xB,GACD,IAAI3vB,EAAIkF,EAAIyyC,EACZ,MAAMnL,EAAO,IAAIkV,GAAK/xB,EAAOmB,MAAiC,QAAzB9wB,EAAK2vB,EAAOxkB,eAA4B,IAAPnL,OAAgB,EAASA,EAAGgqD,UAAU1hD,WAAWrV,KAAK2T,SAG5H,OAFA4lC,EAAKurC,iBAA8G,QAA5FpgC,EAA+B,QAAzBzyC,EAAKyqB,EAAOxkB,eAA4B,IAAPjG,OAAgB,EAASA,EAAGstF,2BAAwC,IAAP76C,EAAgBA,EAAK,IAChJ1kD,KAAKu+F,QAAQ1mF,KAAK0hC,GACXA,EAEXmwC,MAAMhtD,GACF,MAAM8iE,EAAQ,IAAI9V,GAAMhtD,EAAOitD,KAAMjtD,EAAOktD,GAAIltD,EAAOxkB,SAAS7C,WAAWrV,KAAK2T,SAEhF,OADA3T,KAAKu+F,QAAQ1mF,KAAK2nF,GACXA,EAEX51C,SAASltB,GACL,IAAI3vB,EACJ,MAAM0yF,EAAM,IAAI71C,GAAS,CACrBQ,WAAY1tB,EAAOitD,KACnB/hC,UAAWlrB,EAAOktD,GAClBv/B,cAAe3tB,EAAO2tB,cACtBC,aAAc5tB,EAAO4tB,cACtB5tB,EAAOz4B,MAKV,OAJ8B,QAAzB8I,EAAK2vB,EAAOxkB,eAA4B,IAAPnL,OAAgB,EAASA,EAAGwX,YAC9Dk7E,EAAI72D,aAAalM,EAAOxkB,QAAQqM,WACpCk7E,EAAIpqF,WAAWrV,KAAK2T,SACpB3T,KAAKu+F,QAAQ1mF,KAAK4nF,GACXA,EAEX1I,UAAUr6D,GACN,IAAI3vB,EAAIkF,EACR,MAAM/O,EAAO,IAAI6zF,GAAU,CACvB3sC,WAAY1tB,EAAOitD,KACnB/hC,UAAWlrB,EAAOktD,GAClBv/B,cAAe3tB,EAAO2tB,cACtBC,aAAc5tB,EAAO4tB,eAQzB,OAN8B,QAAzBv9C,EAAK2vB,EAAOxkB,eAA4B,IAAPnL,OAAgB,EAASA,EAAG9I,OAC9Df,EAAK2qE,QAAQnxC,EAAOxkB,QAAQjU,OACF,QAAzBgO,EAAKyqB,EAAOxkB,eAA4B,IAAPjG,OAAgB,EAASA,EAAGjE,OAC9D9K,EAAKoS,QAAQonB,EAAOxkB,QAAQlK,MAChC9K,EAAKmS,WAAWrV,KAAK2T,SACrB3T,KAAKu+F,QAAQ1mF,KAAK3U,GACXA,EAEXi7F,eAAezhE,GACX,MAAMgjE,EAAiB,IAAIvB,GAAe,CACtC/2D,MAAO1K,EAAOitD,KACdkT,KAAMngE,EAAOktD,KAQjB,OANIltD,EAAOxkB,QAAQhV,MACfw8F,EAAe1rC,QAAQt3B,EAAOxkB,QAAQhV,MACtCw5B,EAAOxkB,QAAQ+uD,OACfy4B,EAAej4B,SAAS/qC,EAAOxkB,QAAQ+uD,OAC3Cy4B,EAAerqF,WAAWrV,KAAK2T,SAC/B3T,KAAKu+F,QAAQ1mF,KAAK6nF,GACXA,EAEX/C,YAAYjgE,GACR,MAAMijE,EAAc,IAAIhD,GAAY,CAChCv1D,MAAO1K,EAAOitD,KACdkT,KAAMngE,EAAOktD,GACb3lF,KAAMy4B,EAAOz4B,KACbyoE,YAAahwC,EAAOxkB,QAAQw0D,YAC5BjxD,SAAUihB,EAAOxkB,QAAQuD,WAQ7B,OANIihB,EAAOxkB,QAAQhV,MACfy8F,EAAY3rC,QAAQt3B,EAAOxkB,QAAQhV,MACnCw5B,EAAOxkB,QAAQlK,MACf2xF,EAAYrqF,QAAQonB,EAAOxkB,QAAQlK,MACvC2xF,EAAYtqF,WAAWrV,KAAK2T,SAC5B3T,KAAKu+F,QAAQ1mF,KAAK8nF,GACXA,EAEX3G,OAAOt8D,EAAS,IACZA,EAAOj9B,QAAUO,KACjB,MAAM4/F,EAAS,IAAI5G,GAAOt8D,GAAQrnB,WAAWrV,KAAK2T,SAElD,OADA3T,KAAKw+F,QAAQ3mF,KAAK+nF,GACXA,EAaX5S,UAAU90E,EAAU,IAEhB,OADAA,EAAQzY,QAAUO,KACX,IAAIgtF,GAAU90E,GAEzBs9E,aAAa94D,GACT,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAE8nB,MAAO,GAAI3lB,QAAS,CACtC1K,MAAO,UACNkvB,GACHo5D,EAAQ,IAAIN,GAAaroB,EAAEtvC,OAIjC,OAHAi4D,EAAMr5C,QAAQ+4C,GAAa94C,WAAWywB,EAAEj1D,QAAQ1K,QAChDsoF,EAAMzgF,WAAWrV,KAAK2T,SACtB3T,KAAKu+F,QAAQ1mF,KAAKi+E,GACXA,EAEXhnC,aAAapyB,GACT,MAAMywC,EAAI9sE,OAAO0V,OAAO,CAAE8nB,MAAO,IAAMnB,GACjCsyB,EAAQ,IAAIF,GAAaqe,EAAEtvC,OAEjC,OADAmxB,EAAM35C,WAAWrV,KAAK2T,SACfq7C,EAGXr6C,OACI,MAAMmE,EAAM9Y,KAAK2T,QACjB3T,KAAKw+F,QAAQtgF,SAAS7W,GAAMA,EAAEgO,WAAWyD,GAAKw1C,WAC9CtuD,KAAKy+F,OAAOvgF,SAAS7W,GAAMA,EAAEgO,WAAWyD,GAAKnE,SAC7C3U,KAAKklC,OAAOhnB,SAASmvC,GAAMA,EAAEh4C,WAAWyD,GAAKnE,SAC7C3U,KAAKu+F,QAAQrgF,SAASvd,IACbA,EAAEoU,cACHpU,EAAE0U,WAAWyD,GAAKnE,UAE1B3U,KAAKw+F,QAAQtgF,SAAS7W,GAAMA,EAAEgO,WAAWyD,GAAKnE,SAC9C3U,KAAKuY,SAIb+lF,GAAQp9D,OAAQ,EAEhBo9D,GAAQ5oF,UAAYrV,OAAO0V,OAAO,GAAIhD,EAAQ2C,WCxdvC,MAAMmqF,WAAqB9sF,EAa9B1R,YAAYw8B,EAAO5sB,GACfxO,QACAzC,KAAK6pD,SAAShsB,GACd79B,KAAK8/F,QAAU7uF,EACfjR,KAAKyb,SAAWF,EAASG,SAASS,MAClCnc,KAAKmhC,eAAiB,CAClBz3B,OAAQ,GACR2N,QAAS,EACT0oF,cAAe,EACfC,eAAgB,EAChBC,kBAAmB,EACnBC,iBAAkB,GAGf5+F,sBACP,OAAOG,EAASo+F,aAgBpBp7F,4BAA4BqU,EAAKyyB,EAAW1N,EAAO5sB,EAAMwK,EAAUvD,GAC/D,IAAInL,EAAIkF,EACR,MAAMkuF,EAAM50D,EAAU60D,cACtB,GAAW,MAAPD,EACA,MAAM,IAAI99F,EAAa,eAAgB,+DAE3C,MAAMg+F,EAAaF,GAA2C,QAAnCpzF,EAAKmL,EAAQgoF,wBAAqC,IAAPnzF,EAAgBA,EAAK,GACrFuzF,EAAaH,GAA4C,QAApCluF,EAAKiG,EAAQ+nF,yBAAsC,IAAPhuF,EAAgBA,EAAK,GACtFsuF,EAAkB,CACpB72F,OAAQwO,EAAQxO,OAChB2N,QAASa,EAAQb,QACjB0oF,cAAeM,EACfL,eAAgBM,EAChBL,kBAAmB,EACnBC,iBAAkB,GAEtB,IAAIL,GAAa,CACbz1C,WAAYvsB,EAAMusB,WAClBxC,UAAW/pB,EAAM+pB,WAClB32C,GACEoE,WAAWyD,GACX0nF,iBAAiBD,GACjBljF,YAAY5B,GACZ9G,OAET0I,YAAY5B,GAIR,OAHIA,IAAaF,EAASG,SAASO,OAASR,IAAaF,EAASG,SAASS,QACvEnc,KAAKyb,SAAWA,GAEbzb,KAEXwgG,iBAAiBtoF,GAOb,OANsB,MAAlBA,EAAQxO,QACW,MAAnBwO,EAAQb,SACiB,MAAzBa,EAAQ6nF,eACkB,MAA1B7nF,EAAQ8nF,iBACRhgG,KAAKmhC,eAAiBjpB,GAEnBlY,KAOX6pD,SAAShsB,GACL,IAAKA,EAAMusB,aAAevsB,EAAM+pB,UAC5B,MAAM,IAAIvlD,EAAa,eAAgB,6DAK3C,OAHArC,KAAK69B,MAAQA,EACb79B,KAAKoqD,WAAavsB,EAAMusB,WACxBpqD,KAAK4nD,UAAY/pB,EAAM+pB,UAChB5nD,KAEXwpF,cAAc9sD,GACV,MAAM5jB,EAAM9Y,KAAK0U,eACjB,IAAI+rF,EAAMzgG,KAAKmhC,eAAe9pB,QAAU,GACpCA,EAAUqlB,EAAO4tD,QACjBtqF,KAAKyb,WAAaF,EAASG,SAASO,QACpCwkF,EAAa,GAANA,EACPppF,EAAUqlB,EAAO4tD,QAAU5tD,EAAOgkE,cAEtC,MAAMC,EAAU3gG,KAAKmhC,eAAe4+D,cAC9Ba,EAAU5gG,KAAKmhC,eAAe6+D,eAEpC,OADAlnF,EAAIQ,YACItZ,KAAK8/F,SACT,KAAKD,GAAa5uF,KAAK4vF,MACnB/nF,EAAIS,OAAOmjB,EAAO6tD,OAASqW,EAASvpF,EAAUopF,GAC9C3nF,EAAIU,OAAOkjB,EAAO2tD,QAAUsW,EAAStpF,EAAUrX,KAAKmhC,eAAez3B,OAAS,EAAI+2F,GAChF3nF,EAAIU,OAAOkjB,EAAO6tD,OAASqW,EAASvpF,EAAUrX,KAAKmhC,eAAez3B,OAAS+2F,GAC3E,MACJ,KAAKZ,GAAa5uF,KAAK6vF,QACnBhoF,EAAIS,OAAOmjB,EAAO2tD,QAAUsW,EAAStpF,EAAUopF,GAC/C3nF,EAAIU,OAAOkjB,EAAO6tD,OAASqW,EAASvpF,EAAUrX,KAAKmhC,eAAez3B,OAAS,EAAI+2F,GAC/E3nF,EAAIU,OAAOkjB,EAAO2tD,QAAUsW,EAAStpF,EAAUrX,KAAKmhC,eAAez3B,OAAS+2F,GAMpF3nF,EAAIikB,SACJjkB,EAAIi/B,YAERpjC,OACI3U,KAAK0U,eACL1U,KAAKgV,cACL,MAAMkwE,EAAYllF,KAAKoqD,WACjBpB,EAAWhpD,KAAK4nD,UACtB,IAAKs9B,IAAcl8B,EACf,MAAM,IAAI3mD,EAAa,SAAU,0BACrC,MAAM+kC,EAAQ89C,EAAU79C,mBAAmBrnC,KAAKyb,SAAU,GACpDohC,EAAMmM,EAAS3hB,mBAAmBrnC,KAAKyb,SAAU,GACvDzb,KAAKwpF,cAAc,CACfa,QAASjjD,EAAMvkC,EACf0nF,OAAQ1tC,EAAIh6C,EACZynF,QAASpF,EAAUnqE,aAAa7S,OAASg9E,EAAUnqE,aAAakuB,YAChEuhD,OAAQxhC,EAASjuC,aAAa7S,OAAS8gD,EAASjuC,aAAakuB,YAC7Dy3D,aAAcxb,EAAUnqE,aAAakuB,eAIjD42D,GAAa5uF,KAAO,CAChB4vF,MAAO,EACPC,QAAS,GCrJN,MAAMC,WAAiB31C,GAgB1B/pD,YAAYw8B,EAAOtZ,GAGf,GAFA9hB,MAAMo7B,EAAO,QAERtZ,EAAW,CACZ,IAAIy8E,EAAanjE,EAAMusB,WAAW0b,eAAe,GAAGzoC,KAC1B,iBAAf2jE,IACPA,EAAaj9F,SAASi9F,EAAY,KAEtC,IAAIC,EAAYpjE,EAAM+pB,UAAUke,eAAe,GAAGzoC,KACzB,iBAAd4jE,IACPA,EAAYl9F,SAASk9F,EAAW,KAKhC18E,EADA5f,MAAMq8F,IAAer8F,MAAMs8F,GACfF,GAASG,SAGTF,EAAaC,EAAYF,GAASI,WAAaJ,GAASG,SAG5ElhG,KAAKukB,UAAYA,EACjBvkB,KAAKmhC,eAAe2oB,IAAM,GAC1B9pD,KAAKmhC,eAAe4oB,IAAM,GAC1B/pD,KAAKmhC,eAAe9pB,QAAU,GAC9BrX,KAAKkW,YAEE5U,sBACP,OAAOG,EAASs/F,SAETG,sBACP,OAAO,EAEAC,wBACP,OAAQ,EAEZ18F,qBAAqBo5B,GACjB,OAAO,IAAIkjE,GAASljE,EAAOkjE,GAASG,UAExCz8F,uBAAuBo5B,GACnB,OAAO,IAAIkjE,GAASljE,EAAOkjE,GAASI,YAExC32C,UAAU9tB,GACN,GAA+B,IAA3BA,EAAO+tB,SAAS3lD,QAA0C,IAA1B43B,EAAOguB,QAAQ5lD,OAC/C,MAAM,IAAIzC,EAAa,eAAgB,yBAE3C,MAAMyW,EAAM9Y,KAAK0U,eACXk2C,EAAaluB,EAAOkuB,WACpBH,EAAW/tB,EAAO+tB,SAClBE,EAAYjuB,EAAOiuB,UACnBpmC,EAAYmY,EAAOnY,UACzB,GAAIA,IAAcw8E,GAASG,UAAY38E,IAAcw8E,GAASI,WAC1D,MAAM,IAAI9+F,EAAa,WAAY,2BAGvC,MAAMgoD,EAAgBrqD,KAAK69B,MAAMwsB,cACjC,IAAK,IAAI3iD,EAAI,EAAGA,EAAI2iD,EAAcvlD,SAAU4C,EAAG,CAC3C,MAAM05F,EAAU32C,EAASJ,EAAc3iD,IAAM1H,KAAKmhC,eAAe9pB,QACjE,GAAI1S,MAAMy8F,GACN,MAAM,IAAI/+F,EAAa,eAAgB,oCAE3CyW,EAAIQ,YACJR,EAAIS,OAAOqxC,EAAYw2C,EAAU,EAAI78E,GACrCzL,EAAIU,OAAOmxC,EAAWy2C,EAAU,EAAI78E,GACpCzL,EAAIi/B,YACJj/B,EAAIikB,SAER/8B,KAAKgV,eAGb+rF,GAASrrF,UAAY,CACjBhI,OAAQhB,EAAK8D,MACblD,KAAM,GACNC,OAAQjC,EAAW2gC,KACnBz+B,MAAOjC,EAAUoD,QC9Fd,MAAM0yF,GAKThgG,YAAYigG,EAAe,mCACvBthG,KAAKuhG,aAAe,GAEpBvhG,KAAKwhG,UAAUF,GAERG,mBACP,MAAO,CACHC,SAAU,0BACVC,OAAQ,0BACRC,MAAO,0BACPp/E,GAAI,gCACJq/E,cAAe,uBAIvBC,cAAcp+E,GACV,OAAO6Y,EAAOo8B,cAAcj1C,GAAYsZ,UAM5CwkE,UAAUF,GACFD,GAAOI,MAAMH,KACbA,EAAeD,GAAOI,MAAMH,IAEhCthG,KAAKuhG,aAAe,GACpB,MAAMjvF,EAAOgvF,EAAa35F,MAAM,WAChC,GAAoB,IAAhB2K,EAAKxN,OACL,MAAM,IAAIzC,EAAa,eAAgB,0BAA0Bi/F,KAErE,IAAK,IAAI55F,EAAI,EAAGA,EAAI4K,EAAKxN,SAAU4C,EAC/B1H,KAAKuhG,aAAa75F,GAAK1H,KAAK8hG,cAAcxvF,EAAK5K,IAIvDq6F,kBAAkBC,GACd,MAAM36F,EAAI3C,OAAOs9F,GACjB,GAAI36F,EAAI,GAAKA,EAAIrH,KAAKuhG,aAAaz8F,OAC/B,MAAM,IAAIzC,EAAa,eAAgB,uCAAuCrC,KAAKuhG,aAAaz8F,UAAUk9F,KAE9G,OAAOhiG,KAAKuhG,aAAal6F,EAAI,GAGjC46F,gBAAgBC,EAASF,GACrB,MAAMG,EAAcniG,KAAK+hG,kBAAkBC,GACrCz6F,EAAI7C,OAAOw9F,GACjB,GAAI36F,EAAI,EACJ,MAAM,IAAIlF,EAAa,eAAgB,oCAAoC6/F,KAE/E,OAAOC,EAAc56F,EAGzB66F,eAAeF,EAASF,GACpB,MAAM79E,EAAYnkB,KAAKiiG,gBAAgBC,EAASF,GAC1CriF,EAASxb,KAAK0C,MAAMsd,EAAY,IAChCjf,EAAQif,EAAY,GAC1B,MAAO,GAAGoY,EAAO8lE,cAAcn9F,MAAUya,KCnEjD,IAAI,GAAwC,SAAUlU,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAU9G,GAAS,IAAM+G,EAAKL,EAAUM,KAAKhH,IAAW,MAAOvE,GAAKoL,EAAOpL,IACpF,SAASwL,EAASjH,GAAS,IAAM+G,EAAKL,EAAiB,MAAE1G,IAAW,MAAOvE,GAAKoL,EAAOpL,IACvF,SAASsL,EAAKG,GAJlB,IAAelH,EAIakH,EAAOC,KAAOP,EAAQM,EAAOlH,QAJ1CA,EAIyDkH,EAAOlH,MAJhDA,aAAiByG,EAAIzG,EAAQ,IAAIyG,GAAE,SAAUG,GAAWA,EAAQ5G,OAIToH,KAAKN,EAAWG,GAClGF,GAAML,EAAYA,EAAUW,MAAMd,EAASC,GAAc,KAAKQ,YAqF/D,MAAMo2F,GACEC,mBACP,MAAO,CAEHC,QC/FW,gBDiGXjvF,GChGM,2CDkGNkvF,KCjGQ,4BDoGLH,kBAKP,OAAOA,GA6BX79F,uBAAuBi+F,GAEnB,MAAMzzF,EAAQyzF,EAAUnwF,KAAK5F,GAAaD,EAAKsC,KAAKrC,KAIpD,OAHA4vB,EAAOjhB,iBAAmBrM,EAC1B6H,EAAMwE,iBAAmBrM,EAAM7L,QAC/B0T,EAAMsE,kBAAoBsnF,EAAUr/F,KAAK,KAClC4L,EAMXxK,sBAAsBkI,EAAUg2F,GAC5B,OAAO,GAAU3iG,UAAM,OAAQ,GAAQ,gBAK3CyE,sBAEI,OADc83B,EAAOjhB,iBACR/I,KAAKvE,GAASA,EAAK4B,YAEzB6uB,iCACP,OAAOlC,EAAOkC,oBAEPA,+BAAoBv5B,GAC3Bq3B,EAAOkC,oBAAsBv5B,EAEtBs4B,kCACP,OAAOjB,EAAOiB,qBAEPA,gCAAqBt4B,GAC5Bq3B,EAAOiB,qBAAuBt4B,EAEvB4gB,wBACP,OAAOyW,EAAOzW,WAEPA,sBAAW5gB,GAClBq3B,EAAOzW,WAAa5gB,EAEb25B,kCACP,OAAOtC,EAAOsC,qBAEPA,gCAAqB35B,GAC5Bq3B,EAAOsC,qBAAuB35B,EAEvB45B,iCACP,OAAOvC,EAAOuC,oBAEPA,+BAAoB55B,GAC3Bq3B,EAAOuC,oBAAsB55B,EAEtB05B,kCACP,OAAOrC,EAAOqC,qBAEPA,gCAAqB15B,GAC5Bq3B,EAAOqC,qBAAuB15B,EAEvBy5B,yBACP,OAAOpC,EAAOoC,YAEPA,uBAAYz5B,GACnBq3B,EAAOoC,YAAcz5B,EAEdw5B,wBACP,OAAOnC,EAAOmC,WAEPA,sBAAWx5B,GAClBq3B,EAAOmC,WAAax5B,EAEbi7B,qBACP,OAAO5D,EAAO4D,QAEPnB,2BACP,OAAOzC,EAAOyC,cAEPQ,qBACP,OAAOjD,EAAOiD,QAElB/6B,oBAAoBk5B,GAChB,OAAOpB,EAAOjX,aAAaqY,GAE/Bl5B,uBAAuBk5B,GACnB,OAAOpB,EAAOqmE,gBAAgBjlE,GAElCl5B,0BACI,OAAO83B,EAAOsmE,mBAElBp+F,sBAAsB+3B,GAClB,OAAOD,EAAOO,eAAeN,GAGjC/3B,qBAAqBtE,EAAKq8B,EAAME,GAC5B,OAAOH,EAAOo8B,cAAcx4D,EAAKq8B,EAAME,GAE3Cj4B,uBAAuBs5B,GACnB,OAAOxB,EAAO+b,gBAAgBva,IAGtCukE,GAAKrhE,WAAaA,EAClBqhE,GAAK11D,WAAaA,GAClB01D,GAAK3xD,aAAeA,GACpB2xD,GAAK5gG,QAAUA,GACf4gG,GAAKvkD,QAAUA,GACfukD,GAAK7zC,KAAOA,GACZ6zC,GAAKrkD,KAAOA,GACZqkD,GAAK16F,YAAcA,EACnB06F,GAAKr5F,uBAAyBA,EAC9Bq5F,GAAKjlC,cAAgBA,GACrBilC,GAAKriD,YAAcA,GACnBqiD,GAAKl6B,KAAOA,GACZk6B,GAAK7Z,SAAWA,GAChB6Z,GAAK1Z,UAAYA,GACjB0Z,GAAK5Y,MAAQA,GACb4Y,GAAKr7C,IAAMA,GACXq7C,GAAKtV,UAAYA,GACjBsV,GAAKvvF,QAAUA,EACfuvF,GAAKhE,QAAUA,GACfgE,GAAK51F,KAAOA,EACZ41F,GAAKl0C,UAAYA,GACjBk0C,GAAKj+F,SAAWA,EAChBi+F,GAAKt6C,eAAiBA,GACtBs6C,GAAK7R,UAAYA,GACjB6R,GAAKxrF,MAAQA,EACbwrF,GAAKlR,UAAYA,GACjBkR,GAAK1gG,UAAYA,GACjB0gG,GAAKz7D,eAAiBA,GACtBy7D,GAAKQ,aE3PE,cAA2B1gG,GACnBd,sBACP,OAAOG,EAASqhG,aAEpBzhG,YAAY60C,GACRzzC,MAAMyzC,GAAY,GAClBl2C,KAAKmhC,eAAiB9gC,OAAO0V,OAAO1V,OAAO0V,OAAO,GAAI/V,KAAKmhC,gBAAiB,CAExE9pB,QAAS,GAETF,MAAO,GAEPnJ,KAAM,SAAStB,EAAKiB,eACxB3N,KAAKy+C,gBF+Ob6jD,GAAKS,WGjQE,MACH1hG,YAAYlB,GACRH,KAAK2lC,MAAQ,IAAIrnB,EACjBte,KAAKgjG,OAAO7iG,GAEhB6iG,OAAO7iG,GAGH,OAFAH,KAAKG,IAAMA,EACXH,KAAKuY,QACEvY,KAEXijG,SACI,OAAOjjG,KAAKG,IAEhBoY,QACIvY,KAAKsQ,SAAWtQ,KAAK2lC,MAAM9hB,YAAY7jB,KAAKG,KAC5CH,KAAK8jB,UAAY9jB,KAAKsQ,SAAS9Q,KAC3BQ,KAAKsQ,SAASyO,aACd/e,KAAK8jB,WAAa9jB,KAAKsQ,SAASyO,YAEpC,IAD0BT,EAAMoD,WAAW1hB,KAAKsQ,SAASW,MAErD,MAAM,IAAI5O,EAAa,eAAgB,yBAAyBrC,KAAKG,OAEzEH,KAAKmX,MAAQnX,KAAK2lC,MAAM7gB,cAAc9kB,KAAK2lC,MAAM5hB,aAAa/jB,KAAK8jB,WAAYxF,EAAMoD,WAAW1hB,KAAKsQ,SAASW,OAC9GjR,KAAK2lB,SAAW,GAChB3lB,KAAKkjG,gBAAkB,GACvBljG,KAAKmjG,wBAA0B,GAC/B,MAAMz9E,EAAepH,EAAMK,aAAa3e,KAAKsQ,SAAS9Q,MACtD,IAAK,IAAIkI,EAAI,EAAGA,EAAI4W,EAAMG,MAAM3Z,SAAU4C,EAAG,CACzC,MAAM0J,GAASsU,EAAehe,GAAK4W,EAAMG,MAAM3Z,OACzC8gB,EAAWtH,EAAMG,MAAMrN,GACvByU,EAAW7lB,KAAK2lC,MAAMlhB,oBAAoBmB,EAAU5lB,KAAKmX,MAAMzP,IACrE1H,KAAK2lB,SAASC,GAAYC,EAC1B7lB,KAAKkjG,gBAAgBljG,KAAKmX,MAAMzP,IAAMme,EACtC7lB,KAAKmjG,wBAAwBnjG,KAAKmX,MAAMzP,IAAMme,EAElD,OAAO7lB,KAEXojG,cAAcjjG,GACV,MAAMX,EAAOQ,KAAK2lC,MAAM9hB,YAAY1jB,GAAKX,KACnCoY,EAAQ5X,KAAK2lC,MAAMliB,aAAazjB,KAAK2lB,SAASnmB,IACpD,MAAO,CACHkd,KAAM1c,KAAK2lB,SAASnmB,GACpBuf,WAAYnH,EAAMmH,YAG1BskF,WAAW3mF,GACPA,EAAOA,EAAKrP,cACZ,MAAMuK,EAAQ5X,KAAK2lC,MAAMliB,aAAa/G,GAEhC4mF,EAAYtjG,KAAK2lB,SAAS/N,EAAMpY,MAChC+jG,EAAWvjG,KAAK2lC,MAAMliB,aAAa6/E,GACzC,GAAIA,IAAc5mF,EACd,MAAO,CACHA,KAAM4mF,EACNvkF,WAAYnH,EAAMmH,WAClBykF,QAAQ,GAIhB,MAAMC,EAAYzjG,KAAKkjG,gBAAgBljG,KAAK2lC,MAAM5hB,aAAarH,IAC/D,GAAiB,MAAb+mF,EACA,MAAO,CACH/mF,KAAM+mF,EACN1kF,WAAY/e,KAAK2lC,MAAMliB,aAAaggF,GAAW1kF,WAC/CykF,QAAQ,GAIhB,MAAME,EAAoB1jG,KAAKmjG,wBAAwBnjG,KAAK2lC,MAAM5hB,aAAarH,IAC/E,OAAyB,MAArBgnF,GACA1jG,KAAK2lB,SAAS49E,EAAS/jG,MAAQkkG,SACxB1jG,KAAKkjG,gBAAgBljG,KAAK2lC,MAAM5hB,aAAau/E,IACpDtjG,KAAKkjG,gBAAgBljG,KAAK2lC,MAAM5hB,aAAarH,IAASgnF,EAC/C,CACHhnF,KAAMgnF,EACN3kF,WAAY/e,KAAK2lC,MAAMliB,aAAaigF,GAAmB3kF,WACvDykF,QAAQ,IAIZD,EAAS/jG,OAASkd,UACX1c,KAAKkjG,gBAAgBljG,KAAK2lC,MAAM5hB,aAAa/jB,KAAK2lB,SAAS/N,EAAMpY,QACxEQ,KAAKkjG,gBAAgBljG,KAAK2lC,MAAM5hB,aAAaw/E,EAAS/jG,OAAS+jG,EAAS/jG,KACxEQ,KAAK2lB,SAAS49E,EAAS/jG,MAAQ+jG,EAAS/jG,KACjC,CACHkd,KAAM6mF,EAAS/jG,KACfuf,gBAAYjc,EACZ0gG,QAAQ,YAITxjG,KAAKkjG,gBAAgBljG,KAAK2lC,MAAM5hB,aAAa/jB,KAAK2lB,SAAS/N,EAAMpY,QACxEQ,KAAKkjG,gBAAgBljG,KAAK2lC,MAAM5hB,aAAarH,IAASA,SAC/C1c,KAAK2lB,SAAS49E,EAAS/jG,MAC9BQ,KAAK2lB,SAAS49E,EAAS/jG,MAAQkd,EACxB,CACHA,KAAAA,EACAqC,WAAYnH,EAAMmH,WAClBykF,QAAQ,MHgKpBlB,GAAK55B,aAAeA,GACpB45B,GAAKtP,WAAaA,GAClBsP,GAAK/mF,SAAWA,EAChB+mF,GAAKv6B,gBAAkBA,GACvBu6B,GAAKpP,iBAAmBA,GACxBoP,GAAKhkF,MAAQA,EACbgkF,GAAKxgG,KAAOA,GACZwgG,GAAKhvC,SAAWA,GAChBgvC,GAAKxzC,aAAeA,GACpBwzC,GAAKtxC,SAAWA,GAChBsxC,GAAKtvC,YAAcA,GACnBsvC,GAAKzX,OAASA,GACdyX,GAAK9M,aAAeA,GACpB8M,GAAKnxF,SAAWA,EAChBmxF,GAAK1vD,cAAgBA,GACrB0vD,GAAK9/B,SAAWA,GAChB8/B,GAAKzL,WAAaA,GAClByL,GAAK/3B,WAAaA,GAClB+3B,GAAKtyB,MAAQA,GACbsyB,GAAKjuB,eAAiBA,GACtBiuB,GAAKzC,aAAeA,GACpByC,GAAKvL,UAAYA,GACjBuL,GAAKtnD,cAAgBA,GACrBsnD,GAAKtgG,UAAYA,GACjBsgG,GAAKl2B,WAAaA,GAClBk2B,GAAK30B,UAAYA,GACjB20B,GAAK14C,SAAWA,GAChB04C,GAAK96D,KAAOA,EACZ86D,GAAKj+B,aAAeA,GACpBi+B,GAAK78B,OAASA,GACd68B,GAAK5iC,WAAaA,GAClB4iC,GAAKtJ,OAASA,GACdsJ,GAAKlgG,QAAUA,GACfkgG,GAAKvB,SAAWA,GAChBuB,GAAK7F,SAAWA,GAChB6F,GAAKl3C,OAASA,GACdk3C,GAAK3F,YAAcA,GACnB2F,GAAK5E,aAAeA,GACpB4E,GAAKj4D,cAAgBA,GACrBi4D,GAAK71B,SAAWA,GAChB61B,GAAKrzC,YAAcA,GACnBqzC,GAAKpzB,cAAgBA,GACrBozB,GAAKrE,YAAcA,GACnBqE,GAAKqB,QI1SE,cAAsBpoF,EAIzBla,YAAY8kB,GACR1jB,QACAzC,KAAKmmB,IAAMA,EACXnmB,KAAKyb,SAAWF,EAASG,SAASK,OAClC/b,KAAKuC,KAAO,WAEZvC,KAAK4jG,gBAAkB,EACvB5jG,KAAK6jG,mBAAqB,EAEnBviG,sBACP,OAAOG,EAASkiG,QAGpBhvF,OACI,MAAMmE,EAAM9Y,KAAK0U,eACXgI,EAAO1c,KAAK2c,oBAClB3c,KAAKgV,cACL,MAAMq4B,EAAgB3wB,EAAK6wB,mBAE3B,IAAI1qC,EADU6Z,EAAK2qB,mBAAmBrnC,KAAKyb,SAAUzb,KAAKoR,OAC5CvO,EACd,MAAMggB,EAAKlhB,EAAY+a,GACjBvF,EAAQ0L,EAAKjhB,GAAU2vF,MAAQ,EAC/BrwF,EAAW,YAAW2hB,EAAK,QAAU,WACrC6e,EAAYnF,EAAOoF,mBACzB,IAAImiE,EAAYpiE,EAAUtxB,aAAa,GAAGlP,aAAsBmsC,EAEhEy2D,GAAa9jG,KAAK4jG,gBAClB,MAAMl6F,EAAS1J,KAAKmmB,IAAM29E,EAC1B,IAAIj8F,EAAI6U,EAAKmzB,iBAAiBlG,MAAQjgC,EAElC7B,GADAwlC,EAAgB,EACX3L,EAAUtxB,aAAa,GAAGlP,qBAA8BiW,EAGxDuqB,EAAUtxB,aAAa,GAAGlP,mBAA4BiW,EAE/D,MAAM4vB,EAAYrF,EAAUtxB,aAAa,GAAGlP,WAC5C2B,GAAK6+B,EAAUtxB,aAAa,GAAGlP,gBAAuBmsC,IAAkB7F,EAAKe,GAAK,KAAO,UACzF,IAAK,IAAI7gC,EAAI,EAAGA,EAAI1H,KAAKmmB,MAAOze,EAC5BoP,EAAMu8C,YAAYv6C,EAAKjW,EAAGgF,EAAGk/B,EAAW/mC,KAAKuC,KAAM,CAAErB,SAAAA,EAAUiW,MAAOnX,KAAK6jG,qBAC3Eh8F,GAAKi8F,IJgQjBxB,GAAKjB,OAASA,GACdiB,GAAK/jB,OAASA,GACd+jB,GAAKt7B,QAAUA,GACfs7B,GAAKnE,eAAiBA,GACtBmE,GAAKj3C,MAAQA,GACbi3C,GAAKv0B,MAAQA,GAEbu0B,GAAK5nD,YAAcA,GACnB4nD,GAAK5rF,iBAAmBA,EKxTjB,MAAM,GAUTjS,qBAAqBoyE,EAAKktB,EAAKC,GAC3B,GAAIntB,EAAI/xE,OAAS,EAAG,CAChB,MAAMm/F,EAAS,GACf,IAAIC,EACJrtB,EAAIj0C,KAAKmhE,GACT,IAAK,IAAIr8F,EAAI,EAAGA,EAAImvE,EAAI/xE,SAAU4C,EACpB,IAANA,GAAYs8F,EAAGntB,EAAInvE,GAAIw8F,IACvBD,EAAOpsF,KAAKg/D,EAAInvE,IAEpBw8F,EAAOrtB,EAAInvE,GAEf,OAAOu8F,EAGP,OAAOptB,EAKfpyE,gBAAgBoyE,EAAKj2E,GACjB,IAAI8G,EAAImvE,EAAI/xE,OACZ,KAAO4C,KACH,GAAImvE,EAAInvE,KAAO9G,EACX,OAAO,EAGf,OAAO,EAGX6D,wBAAwB0/F,GACpB,IAAKA,EACD,MAAM,IAAI9hG,EAAa,cAAe,4BAA8B8hG,GAExE,MAAM5mC,EAASzvD,SAAS8D,eAAeuyF,GACvC,IAAM5mC,IAAUA,EAAOnoD,WACnB,MAAM,IAAI/S,EAAa,0BAA2B,8CAEtD,OAAOk7D,EAAOnoD,WAAW,MAI7B3Q,iBAAiB4C,EAAGE,GAChB,MAAM68F,GAAa,IAAIC,MAAOC,UAC9B/8F,IAEAxE,EAAIsE,GADY,IAAIg9F,MAAOC,UAAYF,EACtB,MAGrB3/F,oBAEI,OADY,IAAInC,OACLmB,OAGnB,GAAI6+F,KAAOA,GCpEJ,MAAMiC,GAAqB,CAC9Bp1D,QAAS,GACTh/B,OAAQ,CACJ,IAAK,CACDuI,MAAO,EACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,EACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,EACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBm4D,EAAG,CACC/rF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,OAAQ,EACRC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,iBAAkB,EAClB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,GACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,GACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,OAAQ,GACRC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,iBAAkB,GAClB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,GACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,kBACP1+C,MAAO,IACPltC,GAAI,kBACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,GACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB9kB,EAAG,CACC9O,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB5kB,EAAG,CACChP,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBpmB,EAAG,CACCxN,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBhlB,EAAG,CACC5O,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB7kB,EAAG,CACC/O,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBjmB,EAAG,CACC3N,MAAO,GACPC,MAAO,IACP6rF,MAAO,GACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBllB,EAAG,CACC1O,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBtsB,EAAG,CACCtH,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBo4D,EAAG,CACChsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBq4D,EAAG,CACCjsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBs4D,EAAG,CACClsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBtL,EAAG,CACCtoB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB3qB,EAAG,CACCjJ,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBu4D,EAAG,CACCnsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBw4D,EAAG,CACCpsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB3gC,EAAG,CACC+M,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBy4D,EAAG,CACCrsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB3iB,EAAG,CACCjR,MAAO,GACPC,MAAO,IACP6rF,MAAO,GACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBvsB,EAAG,CACCrH,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBpsB,EAAG,CACCxH,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB04D,EAAG,CACCtsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB24D,EAAG,CACCvsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBnsB,EAAG,CACCzH,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBziB,EAAG,CACCnR,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB44D,EAAG,CACCxsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB64D,EAAG,CACCzsF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,KAAM,CACF5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,OAAQ,GACRC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,KACJsoC,iBAAkB,GAClB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB84D,EAAG,CACC1sF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,OAAQ,EACRltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB3oC,EAAG,CACC+U,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB1oC,EAAG,CACC8U,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBrhC,EAAG,CACCyN,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBjnC,EAAG,CACCqT,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB3rC,EAAG,CACC+X,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB/kC,EAAG,CACCmR,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB7rC,EAAG,CACCiY,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBvkC,EAAG,CACC2Q,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB5kC,EAAG,CACCgR,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB6V,EAAG,CACCzpC,OAAQ,IACRC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,iBAAkB,IAClB5U,aAAc,KAElB95B,EAAG,CACCkG,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB+4D,EAAG,CACC3sF,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB1qB,EAAG,CACClJ,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBxoC,EAAG,CACC4U,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBlsC,EAAG,CACCsY,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB6gC,EAAG,CACCz0D,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBhlC,EAAG,CACCoR,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBpM,EAAG,CACCxnB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBjlC,EAAG,CACCqR,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB1nC,EAAG,CACC8T,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBlnC,EAAG,CACCsT,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB+gB,EAAG,CACC30C,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBxkC,EAAG,CACC4Q,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBzpC,EAAG,CACC6V,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElBzkC,EAAG,CACC6Q,OAAQ,GACRC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,iBAAkB,GAClB5U,aAAc,KAElB8gC,EAAG,CACC10D,MAAO,GACPC,MAAO,IACP6rF,OAAQ,EACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,EACPC,MAAO,EACP6rF,MAAO,EACP1+C,MAAO,EACPltC,GAAI,EACJsoC,gBAAiB,EACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,EACPC,MAAO,EACP6rF,MAAO,EACP1+C,MAAO,EACPltC,GAAI,EACJsoC,gBAAiB,EACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,EACPC,MAAO,EACP6rF,MAAO,EACP1+C,MAAO,EACPltC,GAAI,EACJsoC,gBAAiB,EACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,EACPC,MAAO,EACP6rF,MAAO,EACP1+C,MAAO,EACPltC,GAAI,EACJsoC,gBAAiB,EACjB5U,aAAc,MAGtBr+B,WAAY,iBACZgC,WAAY,IACZq1F,YAAa,4BC71BJC,GAAiB,CAC1Bp2D,QAAS,GACTh/B,OAAQ,CACJ,IAAK,CACDuI,MAAO,EACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,EACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,IACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,EAAK,CACD5zB,MAAO,iBACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,kBACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,iBACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,IACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,iBAAkB,GAClB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,EAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,KACP1+C,MAAO,KACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBm4D,EAAG,CACC/rF,MAAO,kBACPC,MAAO,KACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,KACP1+C,MAAO,KACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,KACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,KACP6rF,MAAO,IACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,EACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,EACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,KACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,MAAO,GACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,kBACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,iBACPC,MAAO,mBACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB9kB,EAAG,CACC9O,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB5kB,EAAG,CACChP,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBpmB,EAAG,CACCxN,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBhlB,EAAG,CACC5O,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB7kB,EAAG,CACC/O,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBjmB,EAAG,CACC3N,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBllB,EAAG,CACC1O,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBtsB,EAAG,CACCtH,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBo4D,EAAG,CACChsF,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElBq4D,EAAG,CACCjsF,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBs4D,EAAG,CACClsF,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBtL,EAAG,CACCtoB,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB3qB,EAAG,CACCjJ,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBu4D,EAAG,CACCnsF,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBw4D,EAAG,CACCpsF,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB3gC,EAAG,CACC+M,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBy4D,EAAG,CACCrsF,MAAO,GACPC,MAAO,KACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB3iB,EAAG,CACCjR,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBvsB,EAAG,CACCrH,MAAO,IACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,MAElBpsB,EAAG,CACCxH,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB04D,EAAG,CACCtsF,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB24D,EAAG,CACCvsF,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBnsB,EAAG,CACCzH,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBziB,EAAG,CACCnR,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB44D,EAAG,CACCxsF,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB64D,EAAG,CACCzsF,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,KAAM,CACF5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,IACP1+C,MAAO,KACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB84D,EAAG,CACC1sF,MAAO,IACPC,MAAO,KACP6rF,OAAQ,IACR1+C,MAAO,EACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,MAAO,KACP1+C,MAAO,KACPltC,GAAI,IACJsoC,gBAAiB,GACjB5U,aAAc,KAElB3oC,EAAG,CACC+U,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB1oC,EAAG,CACC8U,OAAQ,GACRC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,iBAAkB,GAClB5U,aAAc,MAElBrhC,EAAG,CACCyN,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBjnC,EAAG,CACCqT,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB3rC,EAAG,CACC+X,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB/kC,EAAG,CACCmR,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB7rC,EAAG,CACCiY,MAAO,GACPC,MAAO,KACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBvkC,EAAG,CACC2Q,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB5kC,EAAG,CACCgR,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB6V,EAAG,CACCzpC,OAAQ,GACRC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,iBAAkB,GAClB5U,aAAc,KAElB95B,EAAG,CACCkG,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB+4D,EAAG,CACC3sF,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB1qB,EAAG,CACClJ,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBxoC,EAAG,CACC4U,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBlsC,EAAG,CACCsY,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB6gC,EAAG,CACCz0D,MAAO,GACPC,MAAO,KACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBhlC,EAAG,CACCoR,MAAO,GACPC,MAAO,KACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBpM,EAAG,CACCxnB,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElBjlC,EAAG,CACCqR,MAAO,IACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,MAElB1nC,EAAG,CACC8T,MAAO,GACPC,MAAO,IACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElBlnC,EAAG,CACCsT,MAAO,GACPC,MAAO,KACP6rF,OAAQ,GACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB+gB,EAAG,CACC30C,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBxkC,EAAG,CACC4Q,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBzpC,EAAG,CACC6V,MAAO,GACPC,MAAO,KACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElBzkC,EAAG,CACC6Q,MAAO,GACPC,MAAO,KACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB8gC,EAAG,CACC10D,MAAO,GACPC,MAAO,IACP6rF,MAAO,EACP1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,MAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,IACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,GACPC,MAAO,IACP6rF,OAAQ,IACR1+C,MAAO,KACPltC,GAAI,KACJsoC,gBAAiB,GACjB5U,aAAc,KAElB,IAAK,CACD5zB,MAAO,IACPC,MAAO,KACP6rF,MAAO,IACP1+C,MAAO,IACPltC,GAAI,IACJsoC,gBAAiB,IACjB5U,aAAc,OAGtBr+B,WAAY,cACZgC,WAAY,KACZq1F,YAAa,4BCn1BjB,IAAI,GAAwC,SAAU75F,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAU9G,GAAS,IAAM+G,EAAKL,EAAUM,KAAKhH,IAAW,MAAOvE,GAAKoL,EAAOpL,IACpF,SAASwL,EAASjH,GAAS,IAAM+G,EAAKL,EAAiB,MAAE1G,IAAW,MAAOvE,GAAKoL,EAAOpL,IACvF,SAASsL,EAAKG,GAJlB,IAAelH,EAIakH,EAAOC,KAAOP,EAAQM,EAAOlH,QAJ1CA,EAIyDkH,EAAOlH,MAJhDA,aAAiByG,EAAIzG,EAAQ,IAAIyG,GAAE,SAAUG,GAAWA,EAAQ5G,OAIToH,KAAKN,EAAWG,GAClGF,GAAML,EAAYA,EAAUW,MAAMd,EAASC,GAAc,KAAKQ,YAQtE,MAAMs5F,GAAc,CAChBC,QAAS,4BACTC,SAAU,6BACVC,SAAU,6BACVC,OAAQ,4BASZtD,GAAKuD,eAAiB,CAACl5F,EAAUg2F,IAAqB,QAAU,OAAQ,OAAQ,GAAQ,YACpF,MAAM30F,EAAOtB,EAAKsC,KAAKrC,GAEvB,GAAIqB,EAAK+B,UACL,OAEJ,IAAK4yF,EAAkB,CAEnB,KAAIh2F,KAAY64F,IAIZ,MAAM,IAAInjG,EAAa,cAAe,cAAcsK,qBAHpDg2F,EAAmB6C,GAAY74F,GAMvC,IAAIm5F,EACJ,GAAgC,iBAArBnD,EAA+B,CACtC,MAAMhjG,QAAeomG,OAAiCpD,GAEhDqD,EADItjG,IACyB,YAG/BojG,OAFuB,IAAhBE,QAAgE,IAA1BA,EAAYr5F,GAE5Cq5F,EAAYr5F,GAKZhN,EAAO+M,UAIxBo5F,EAAanD,EAEjB30F,EAAK0B,QAAQo2F,EAAWt2F,MACxBxB,EAAK2B,WAAWm2F,EAAWr2F,YCjExB,WAEH,CACI,MAAMw2F,EAAWV,IACX,WAAEt3F,EAAU,WAAEgC,EAAU,OAAEE,GAAW81F,EAC3Cv5F,EAAKsC,KAAKf,EAAYg4F,GAGtB,MAAMn7D,EAAe,IACrBT,GAAc67D,aAAa,CACvBx4F,OAAQO,EACRgC,WAAAA,EACAE,OAAAA,EACA26B,aAAAA,EACAL,YAAY,EACZE,MAAM,EACND,QAAQ,EACRE,kBAAmB,IACnBC,gBAAiB,IACjBL,QAAQ,EACR27D,YAAa,+DAIrB,CACI,MAAMF,EAAW1B,IACX,WAAEt2F,EAAU,WAAEgC,EAAU,OAAEE,GAAW81F,EAC3Cv5F,EAAKsC,KAAKf,EAAYg4F,GAGtB,MAAMn7D,EAAe,IACrBT,GAAc67D,aAAa,CACvBx4F,OAAQO,EACRgC,WAAAA,EACAE,OAAAA,EACA26B,aAAAA,EACAL,YAAY,EACZE,MAAM,EACND,QAAQ,EACRE,kBAAmB,IACnBC,gBAAiB,IACjBL,QAAQ,EACR27D,YAAa,qDD0BzBC,GAEA,Y,oBlGlEA","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/util.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/textformatter.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/parenthesis.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/web.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/version.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/vex.ts","webpack://Vex/./src/fonts/petalumascript_glyphs.ts","webpack://Vex/./src/fonts/robotoslab_glyphs.ts","webpack://Vex/./entry/vexflow-core.ts","webpack://Vex/./src/fonts/textfonts.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object's CATEGORY matches the provided category.\n * @param category a string representing a category of VexFlow objects.\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\n */\nexport function isCategory(obj, category, checkAncestors = true) {\n    // obj is undefined, a number, a primitive string, or null.\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n    let constructorFcn = obj.constructor;\n    // Check if the object's static .CATEGORY matches the provided category.\n    if (checkAncestors) {\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\nexport const isNote = (obj) => isCategory(obj, Category.Note);\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\nexport var Category;\n(function (Category) {\n    Category[\"Accidental\"] = \"Accidental\";\n    Category[\"Annotation\"] = \"Annotation\";\n    Category[\"Articulation\"] = \"Articulation\";\n    Category[\"Barline\"] = \"Barline\";\n    Category[\"BarNote\"] = \"BarNote\";\n    Category[\"Beam\"] = \"Beam\";\n    Category[\"Bend\"] = \"Bend\";\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\n    Category[\"Clef\"] = \"Clef\";\n    Category[\"ClefNote\"] = \"ClefNote\";\n    Category[\"Crescendo\"] = \"Crescendo\";\n    Category[\"Curve\"] = \"Curve\";\n    Category[\"Dot\"] = \"Dot\";\n    Category[\"Element\"] = \"Element\";\n    Category[\"Fraction\"] = \"Fraction\";\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\n    Category[\"GhostNote\"] = \"GhostNote\";\n    Category[\"Glyph\"] = \"Glyph\";\n    Category[\"GlyphNote\"] = \"GlyphNote\";\n    Category[\"GraceNote\"] = \"GraceNote\";\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\n    Category[\"KeySignature\"] = \"KeySignature\";\n    Category[\"KeySigNote\"] = \"KeySigNote\";\n    Category[\"Modifier\"] = \"Modifier\";\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\n    Category[\"Note\"] = \"Note\";\n    Category[\"NoteHead\"] = \"NoteHead\";\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\n    Category[\"Ornament\"] = \"Ornament\";\n    Category[\"Parenthesis\"] = \"Parenthesis\";\n    Category[\"PedalMarking\"] = \"PedalMarking\";\n    Category[\"RenderContext\"] = \"RenderContext\";\n    Category[\"RepeatNote\"] = \"RepeatNote\";\n    Category[\"Repetition\"] = \"Repetition\";\n    Category[\"Stave\"] = \"Stave\";\n    Category[\"StaveConnector\"] = \"StaveConnector\";\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\n    Category[\"StaveLine\"] = \"StaveLine\";\n    Category[\"StaveModifier\"] = \"StaveModifier\";\n    Category[\"StaveNote\"] = \"StaveNote\";\n    Category[\"StaveSection\"] = \"StaveSection\";\n    Category[\"StaveTempo\"] = \"StaveTempo\";\n    Category[\"StaveText\"] = \"StaveText\";\n    Category[\"StaveTie\"] = \"StaveTie\";\n    Category[\"Stem\"] = \"Stem\";\n    Category[\"StemmableNote\"] = \"StemmableNote\";\n    Category[\"StringNumber\"] = \"StringNumber\";\n    Category[\"Stroke\"] = \"Stroke\";\n    Category[\"System\"] = \"System\";\n    Category[\"TabNote\"] = \"TabNote\";\n    Category[\"TabSlide\"] = \"TabSlide\";\n    Category[\"TabStave\"] = \"TabStave\";\n    Category[\"TabTie\"] = \"TabTie\";\n    Category[\"TextBracket\"] = \"TextBracket\";\n    Category[\"TextDynamics\"] = \"TextDynamics\";\n    Category[\"TextNote\"] = \"TextNote\";\n    Category[\"Tickable\"] = \"Tickable\";\n    Category[\"TimeSignature\"] = \"TimeSignature\";\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\n    Category[\"Tremolo\"] = \"Tremolo\";\n    Category[\"Tuplet\"] = \"Tuplet\";\n    Category[\"Vibrato\"] = \"Vibrato\";\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\n    Category[\"Voice\"] = \"Voice\";\n    Category[\"Volta\"] = \"Volta\";\n})(Category || (Category = {}));\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\n// eslint-disable-next-line\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a, b) {\n    let mid_line = b + (a - b) / 2;\n    if (mid_line % 2 > 0) {\n        mid_line = roundN(mid_line * 10, 5) / 10;\n    }\n    return mid_line;\n}\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text) {\n    return `vf-${text}`;\n}\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// Author: Joshua Koo / @zz85\n// Author: @incompleteopus\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** Fraction represents a rational number. */\nexport class Fraction {\n    /** Set the numerator and denominator. */\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    static get CATEGORY() {\n        return Category.Fraction;\n    }\n    /**\n     * GCD: Greatest common divisor using the Euclidean algorithm.\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\n     */\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    /** LCM: Lowest common multiple. */\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    /** Lowest common multiple for more than two numbers. */\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            // args.shift() removes the first number.\n            // LCM the first number with the rest of the numbers.\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    /** Set the numerator and denominator. */\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    /** Return the value of the fraction. */\n    value() {\n        return this.numerator / this.denominator;\n    }\n    /** Simplify numerator and denominator using GCD. */\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    /** Add value of another fraction. */\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Substract value of another fraction. */\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Multiply by value of another fraction. */\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    /** Divide by value of another Fraction. */\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    /** Simplify both sides and check if they are equal. */\n    equals(compare) {\n        const a = Fraction.__staticFractionA.copy(compare).simplify();\n        const b = Fraction.__staticFractionB.copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    /** Greater than operator. */\n    greaterThan(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    /** Greater than or equals operator. */\n    greaterThanEquals(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    /** Less than operator. */\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    /** Less than or equals operator. */\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    /** Return a new copy with current values. */\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    /** Copy value of another fraction. */\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other, 1);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    /** Return the integer component (eg. 5/2 => 2). */\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    /** Return the remainder component (eg. 5/2 => 1). */\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    /** Calculate absolute value. */\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    /** Return a raw string representation (eg. \"5/2\"). */\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    /** Return a simplified string respresentation. */\n    toSimplifiedString() {\n        return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n    }\n    /** Return string representation in mixed form. */\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = Fraction.__staticFractionTmp.copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    /** Parse a fraction string. */\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\n// Cached objects for comparisons.\nFraction.__staticFractionA = new Fraction();\nFraction.__staticFractionB = new Fraction();\nFraction.__staticFractionTmp = new Fraction();\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        // Both params are numbers, so we return them as [numerator, denominator].\n        return [n, d];\n    }\n    else {\n        // First param is a Fraction object. We ignore the second param.\n        return [n.numerator, n.denominator];\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nexport class BoundingBox {\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    /**\n     * Create a new copy.\n     */\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    /** Get x position. */\n    getX() {\n        return this.x;\n    }\n    /** Get y position. */\n    getY() {\n        return this.y;\n    }\n    /** Get width. */\n    getW() {\n        return this.w;\n    }\n    /** Get height. */\n    getH() {\n        return this.h;\n    }\n    /** Set x position. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Set y position. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Set width. */\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    /** Set height. */\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    /** Move to position. */\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    /** Clone. */\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    /**\n     * Merge my box with given box. Creates a bigger bounding box unless\n     * the given box is contained in this one.\n     */\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const new_x = this.x < that.x ? this.x : that.x;\n        const new_y = this.y < that.y ? this.y : that.y;\n        const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n        const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n        this.x = new_x;\n        this.y = new_y;\n        this.w = new_w;\n        this.h = new_h;\n        return this;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n/**\n * BoundingBoxComputation computes metrics for a bounding box by continuously\n * taking canvas path commands.\n *\n * Warning: This class is merely a crutch to get bounding box information without\n * explicit metadata. This is likely to get deprecated following SMuFL support.\n *\n * based on: https://github.com/canvg/canvg/blob/master/src/BoundingBox.ts (MIT License)\n */\nexport class BoundingBoxComputation {\n    constructor() {\n        this.x1 = Number.NaN;\n        this.y1 = Number.NaN;\n        this.x2 = Number.NaN;\n        this.y2 = Number.NaN;\n    }\n    /** Get calculated X1. */\n    getX1() {\n        return this.x1;\n    }\n    /** Get calculated Y1. */\n    getY1() {\n        return this.y1;\n    }\n    /** Get calculated width. */\n    width() {\n        return this.x2 - this.x1;\n    }\n    /** Get calculated height. */\n    height() {\n        return this.y2 - this.y1;\n    }\n    /** Add point to BoundingBox. */\n    addPoint(x, y) {\n        if (isNaN(this.x1) || x < this.x1)\n            this.x1 = x;\n        if (isNaN(this.x2) || x > this.x2)\n            this.x2 = x;\n        if (isNaN(this.y1) || y < this.y1)\n            this.y1 = y;\n        if (isNaN(this.y2) || y > this.y2)\n            this.y2 = y;\n    }\n    /** Add X to BoundingBox. */\n    addX(x) {\n        this.addPoint(x, this.y1);\n    }\n    /** Add Y to BoundingBox. */\n    addY(y) {\n        this.addPoint(this.x1, y);\n    }\n    /** Add quadratic curve to BoundingBox. */\n    addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n        this.addPoint(p0x, p0y);\n        this.addPoint(p2x, p2y);\n        const p01x = p1x - p0x;\n        const p12x = p2x - p1x;\n        let denom = p01x - p12x;\n        if (denom != 0) {\n            const t = p01x / denom;\n            if (t > 0 && t < 1) {\n                const it = 1 - t;\n                this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\n            }\n        }\n        const p01y = p1y - p0y;\n        const p12y = p2y - p1y;\n        denom = p01y - p12y;\n        if (denom != 0) {\n            const t = p01y / denom;\n            if (t > 0 && t < 1) {\n                const it = 1 - t;\n                this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\n            }\n        }\n    }\n    /** Add bezier curve to BoundingBox. */\n    addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n        // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n        const p0 = [p0x, p0y];\n        const p1 = [p1x, p1y];\n        const p2 = [p2x, p2y];\n        const p3 = [p3x, p3y];\n        let i;\n        this.addPoint(p0[0], p0[1]);\n        this.addPoint(p3[0], p3[1]);\n        const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +\n            3 * Math.pow(1 - t, 2) * t * p1[i] +\n            3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n            Math.pow(t, 3) * p3[i];\n        for (i = 0; i <= 1; i++) {\n            const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            const c = 3 * p1[i] - 3 * p0[i];\n            if (a === 0) {\n                if (b === 0)\n                    continue;\n                const t = -c / b;\n                if (0 < t && t < 1) {\n                    if (i === 0)\n                        this.addX(f(t, i));\n                    if (i === 1)\n                        this.addY(f(t, i));\n                }\n                continue;\n            }\n            const b2ac = Math.pow(b, 2) - 4 * c * a;\n            if (b2ac < 0)\n                continue;\n            const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                if (i === 0)\n                    this.addX(f(t1, i));\n                if (i === 1)\n                    this.addY(f(t1, i));\n            }\n            const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                if (i === 0)\n                    this.addX(f(t2, i));\n                if (i === 1)\n                    this.addY(f(t2, i));\n            }\n        }\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defined } from './util';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\n// Internal <span></span> element for parsing CSS font shorthand strings.\nlet fontParser;\nconst Fonts = {};\nexport class Font {\n    /**\n     * Use `Font.load(fontName)` to get a Font object.\n     * Do not call this constructor directly.\n     */\n    constructor(fontName) {\n        this.name = fontName;\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of pixels that is equivalent to `fontSize`\n     */\n    static convertSizeToPixelValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of points that is equivalent to `fontSize`\n     */\n    static convertSizeToPointValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param f\n     * @param size\n     * @param weight\n     * @param style\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\n     */\n    static validate(f, size, weight, style) {\n        // If f is a string but all other arguments are undefined, we assume that\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            // f is a FontInfo object, so we extract its fields.\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            // f is a string representing the font family name or undefined.\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;\n        size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        // If size is a number, we assume the unit is `pt`.\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\n        return { family, size, weight, style };\n    }\n    /**\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\n     */\n    static fromCSSString(cssFontShorthand) {\n        // Let the browser parse this string for us.\n        // First, create a span element.\n        // Then, set its style.font and extract it back out.\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    /**\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\n     */\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = ''; // no space! Omit the style section.\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = ''; // no space! Omit the weight section.\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Font.SIZE + 'pt ';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            // size is already a string.\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;\n        return `${style}${weight}${size}${family}`;\n    }\n    /**\n     * @param fontSize a number representing a font size, or a string font size with units.\n     * @param scaleFactor multiply the size by this factor.\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\n     * If the fontSize argument was a number, the return value will be a number.\n     * If the fontSize argument was a string, the return value will be a string.\n     */\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    /**\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\n     * @returns true if the font weight indicates bold.\n     */\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            // a string can be 'bold' or '700'\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    /**\n     * @param style\n     * @returns true if the font style indicates 'italic'.\n     */\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    /**\n     * @param fontName\n     * @param woffURL The absolute or relative URL to the woff file.\n     * @param includeWoff2 If true, we assume that a woff2 file is in\n     * the same folder as the woff file, and will append a `2` to the url.\n     */\n    // Support distributions of the typescript compiler that do not yet include the FontFace API declarations.\n    // eslint-disable-next-line\n    // @ts-ignore\n    static loadWebFont(fontName, woffURL, includeWoff2 = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const woff2URL = includeWoff2 ? `url(${woffURL}2) format('woff2'), ` : '';\n            const woff1URL = `url(${woffURL}) format('woff')`;\n            const woffURLs = woff2URL + woff1URL;\n            // eslint-disable-next-line\n            // @ts-ignore\n            const fontFace = new FontFace(fontName, woffURLs);\n            yield fontFace.load();\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.fonts.add(fontFace);\n            return fontFace;\n        });\n    }\n    /**\n     * Load the web fonts that are used by ChordSymbol. For example, `flow.html` calls:\n     *   `await Vex.Flow.Font.loadWebFonts();`\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\n     * and a @font-face { font-family: ... } rule in your CSS.\n     * If you do not load either of these fonts, ChordSymbol will fall back to Times or Arial,\n     * depending on the current music engraving font.\n     *\n     * You can customize `Font.WEB_FONT_HOST` and `Font.WEB_FONT_FILES` to load different fonts\n     * for your app.\n     */\n    static loadWebFonts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const host = Font.WEB_FONT_HOST;\n            const files = Font.WEB_FONT_FILES;\n            for (const fontName in files) {\n                const fontPath = files[fontName];\n                Font.loadWebFont(fontName, host + fontPath);\n            }\n        });\n    }\n    static loadTextFonts() {\n        //\n    }\n    /**\n     * @param fontName\n     * @param data optionally set the Font object's `.data` property.\n     *   This is usually done when setting up a font for the first time.\n     * @param metrics optionally set the Font object's `.metrics` property.\n     *   This is usually done when setting up a font for the first time.\n     * @returns a Font object with the given `fontName`.\n     *   Reuse an existing Font object if a matching one is found.\n     */\n    static load(fontName, data, metrics) {\n        let font = Fonts[fontName];\n        if (!font) {\n            font = new Font(fontName);\n            Fonts[fontName] = font;\n        }\n        if (data) {\n            font.setData(data);\n        }\n        if (metrics) {\n            font.setMetrics(metrics);\n        }\n        return font;\n    }\n    getName() {\n        return this.name;\n    }\n    getData() {\n        return defined(this.data, 'FontError', 'Missing font data');\n    }\n    getMetrics() {\n        return defined(this.metrics, 'FontError', 'Missing metrics');\n    }\n    setData(data) {\n        this.data = data;\n    }\n    setMetrics(metrics) {\n        this.metrics = metrics;\n    }\n    hasData() {\n        return this.data !== undefined;\n    }\n    getResolution() {\n        return this.getData().resolution;\n    }\n    getGlyphs() {\n        return this.getData().glyphs;\n    }\n    /**\n     * Use the provided key to look up a value in this font's metrics file (e.g., bravura_metrics.ts, petaluma_metrics.ts).\n     * @param key is a string separated by periods (e.g., stave.endPaddingMax, clef.lineCount.'5'.shiftY).\n     * @param defaultValue is returned if the lookup fails.\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\n     */\n    // eslint-disable-next-line\n    lookupMetric(key, defaultValue) {\n        const keyParts = key.split('.');\n        // Start with the top level font metrics object, and keep looking deeper into the object (via each part of the period-delimited key).\n        let currObj = this.getMetrics();\n        for (let i = 0; i < keyParts.length; i++) {\n            const keyPart = keyParts[i];\n            const value = currObj[keyPart];\n            if (value === undefined) {\n                // If the key lookup fails, we fall back to the defaultValue.\n                return defaultValue;\n            }\n            // The most recent lookup succeeded, so we drill deeper into the object.\n            currObj = value;\n        }\n        // After checking every part of the key (i.e., the loop completed), return the most recently retrieved value.\n        return currObj;\n    }\n    /** For debugging. */\n    toString() {\n        return '[' + this.name + ' Font]';\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// STATIC MEMBERS\n/** Default sans-serif font family. */\nFont.SANS_SERIF = 'Arial, sans-serif';\n/** Default serif font family. */\nFont.SERIF = 'Times New Roman, serif';\n/** Default font size in `pt`. */\nFont.SIZE = 10;\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\n/**\n * Customize this field to specify a different CDN for delivering web fonts.\n * Alternative: https://cdn.jsdelivr.net/npm/vexflow-fonts@1.0.3/\n * Or you can use your own host.\n */\nFont.WEB_FONT_HOST = 'https://unpkg.com/vexflow-fonts@1.0.3/';\n/**\n * These font files will be loaded from the CDN specified by `Font.WEB_FONT_HOST` when\n * `await Font.loadWebFonts()` is called. Customize this field to specify a different\n * set of fonts to load. See: `Font.loadWebFonts()`.\n */\nFont.WEB_FONT_FILES = {\n    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff',\n    PetalumaScript: 'petaluma/PetalumaScript_1.10_FS.woff',\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\nimport { RuntimeError } from './util';\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    constructor() {\n        this.index = new Index();\n    }\n    static getDefaultRegistry() {\n        return Registry.defaultRegistry;\n    }\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\n    // the provided registry as soon as they're constructed.\n    static enableDefaultRegistry(registry) {\n        Registry.defaultRegistry = registry;\n    }\n    static disableDefaultRegistry() {\n        Registry.defaultRegistry = undefined;\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    // Updates the indexes for element 'id'. If an element's attribute changes\n    // from A -> B, make sure to remove the element from A.\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    /**\n     * Register element `elem` with this registry.\n     * This adds the element to its index and watches it for attribute changes.\n     * @param elem\n     * @param id\n     * @returns this\n     */\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        // Manually add id to index, then update other indexes.\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _a, _b;\n        return (_b = (_a = this.index.id) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b[id]; // return undefined if the id is not found.\n    }\n    getElementsByAttribute(attribute, value) {\n        const index_attr = this.index[attribute];\n        if (index_attr) {\n            const index_attr_val = index_attr[value];\n            if (index_attr_val) {\n                const keys = Object.keys(index_attr_val);\n                return keys.map((k) => index_attr_val[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    // This is called by the element when an attribute value changes. If an indexed\n    // attribute changes, then update the local index.\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Registry } from './registry';\nimport { Category } from './typeguard';\nimport { defined } from './util';\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n */\nexport class Element {\n    constructor() {\n        var _a;\n        this.attrs = {\n            id: Element.newID(),\n            el: undefined,\n            type: this.getCategory(),\n            classes: {},\n        };\n        this.rendered = false;\n        // If a default registry exist, then register with it right away.\n        (_a = Registry.getDefaultRegistry()) === null || _a === void 0 ? void 0 : _a.register(this);\n    }\n    static get CATEGORY() {\n        return Category.Element;\n    }\n    static newID() {\n        return `auto${Element.ID++}`;\n    }\n    /** Get element category string. */\n    getCategory() {\n        return this.constructor.CATEGORY;\n    }\n    /**\n     * Set the element style used to render.\n     *\n     * Example:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.draw();\n     * ```\n     * Note: If the element draws additional sub-elements (ie.: Modifiers in a Stave),\n     * the style can be applied to all of them by means of the context:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.getContext().setFillStyle('red');\n     * element.getContext().setStrokeStyle('red');\n     * element.draw();\n     * ```\n     * or using drawWithStyle:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     */\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    /** Get the element style used for rendering. */\n    getStyle() {\n        return this.style;\n    }\n    /** Apply the element style to `context`. */\n    applyStyle(context = this.context, style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.save();\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        return this;\n    }\n    /** Restore the style of `context`. */\n    restoreStyle(context = this.context, style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.restore();\n        return this;\n    }\n    /**\n     * Draw the element and all its sub-elements (ie.: Modifiers in a Stave)\n     * with the element style.\n     */\n    drawWithStyle() {\n        this.checkContext();\n        this.applyStyle();\n        this.draw();\n        this.restoreStyle();\n    }\n    /** Check if it has a class label (An element can have multiple class labels).  */\n    hasClass(className) {\n        return this.attrs.classes[className] === true;\n    }\n    /** Add a class label (An element can have multiple class labels).  */\n    addClass(className) {\n        var _a;\n        this.attrs.classes[className] = true;\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    /** Remove a class label (An element can have multiple class labels).  */\n    removeClass(className) {\n        var _a;\n        delete this.attrs.classes[className];\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    /** Call back from registry after the element is registered. */\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    /** Return the rendered status. */\n    isRendered() {\n        return this.rendered;\n    }\n    /** Set the rendered status. */\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    /** Return the element attributes. */\n    getAttributes() {\n        return this.attrs;\n    }\n    /** Return an attribute. */\n    // eslint-disable-next-line\n    getAttribute(name) {\n        return this.attrs[name];\n    }\n    /** Set an attribute. */\n    // eslint-disable-next-line\n    setAttribute(name, value) {\n        var _a;\n        const oldID = this.attrs.id;\n        const oldValue = this.attrs[name];\n        this.attrs[name] = value;\n        // Register with old id to support id changes.\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        return this.boundingBox;\n    }\n    /** Return the context. */\n    getContext() {\n        return this.context;\n    }\n    /** Set the context. */\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    /** Validate and return the context. */\n    checkContext() {\n        return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Font Handling\n    /**\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial').\n     */\n    set font(f) {\n        this.setFont(f);\n    }\n    /** Returns the CSS compatible font string. */\n    get font() {\n        return Font.toCSSString(this.textFont);\n    }\n    /**\n     * Set the element's font family, size, weight, style (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     * @param font is 1) a `FontInfo` object or\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     * If no arguments are provided, then the font is set to the default font.\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\n     */\n    setFont(font, size, weight, style) {\n        // Allow subclasses to override `TEXT_FONT`.\n        const defaultTextFont = this.constructor.TEXT_FONT;\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const fontIsUndefined = font === undefined;\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        if (fontIsObject) {\n            // `font` is case 1) a FontInfo object\n            this.textFont = Object.assign(Object.assign({}, defaultTextFont), font);\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            // `font` is case 2) CSS font shorthand.\n            this.textFont = Font.fromCSSString(font);\n        }\n        else if (fontIsUndefined && sizeWeightStyleAreUndefined) {\n            // All arguments are undefined. Do not check for `arguments.length === 0`,\n            // which fails on the edge case: `setFont(undefined)`.\n            // TODO: See if we can remove this case entirely without introducing a visual diff.\n            // The else case below seems like it should be equivalent to this case.\n            this.textFont = Object.assign({}, defaultTextFont);\n        }\n        else {\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\n            // The other parameters represent the size, weight, and style.\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\n            // Following CSS conventions, unspecified params are reset to the default.\n            this.textFont = Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);\n        }\n        return this;\n    }\n    getFont() {\n        if (!this.textFont) {\n            this.resetFont();\n        }\n        return Font.toCSSString(this.textFont);\n    }\n    /**\n     * Reset the text font to the style indicated by the static `TEXT_FONT` property.\n     * Subclasses can call this to initialize `textFont` for the first time.\n     */\n    resetFont() {\n        this.setFont();\n    }\n    /** Return a copy of the current FontInfo object. */\n    get fontInfo() {\n        if (!this.textFont) {\n            this.resetFont();\n        }\n        // We can cast to Required<FontInfo> here, because\n        // we just called resetFont() above to ensure this.textFont is set.\n        return Object.assign({}, this.textFont);\n    }\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    /** Change the font size, while keeping everything else the same. */\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\n     */\n    getFontSize() {\n        return this.fontSize;\n    }\n    /**\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\n     */\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     */\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    /**\n     * @returns the font size in `pt`.\n     */\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    /**\n     * @returns the font size in `px`.\n     */\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    /**\n     * @returns a CSS font-style string (e.g., 'italic').\n     */\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    /**\n     * @returns a CSS font-weight string (e.g., 'bold').\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\n     */\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n}\nElement.ID = 1000;\n/**\n * Default font for text. This is not related to music engraving. Instead, see `Flow.setMusicFont(...fontNames)`\n * to customize the font for musical symbols placed on the score.\n */\nElement.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var OutlineCode;\n(function (OutlineCode) {\n    OutlineCode[OutlineCode[\"MOVE\"] = 0] = \"MOVE\";\n    OutlineCode[OutlineCode[\"LINE\"] = 1] = \"LINE\";\n    OutlineCode[OutlineCode[\"QUADRATIC\"] = 2] = \"QUADRATIC\";\n    OutlineCode[OutlineCode[\"BEZIER\"] = 3] = \"BEZIER\";\n})(OutlineCode || (OutlineCode = {}));\nclass GlyphCacheEntry {\n    constructor(fontStack, code, category) {\n        this.point = -1;\n        this.metrics = Glyph.loadMetrics(fontStack, code, category);\n        this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.metrics.scale, this.metrics.x_shift, this.metrics.y_shift);\n        if (category) {\n            this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\n        }\n    }\n}\nclass GlyphCache {\n    constructor() {\n        this.cache = new Map();\n    }\n    lookup(code, category) {\n        let entries = this.cache.get(Glyph.CURRENT_CACHE_KEY);\n        if (entries === undefined) {\n            entries = {};\n            this.cache.set(Glyph.CURRENT_CACHE_KEY, entries);\n        }\n        const key = category ? `${code}%${category}` : code;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = new GlyphCacheEntry(Glyph.MUSIC_FONT_STACK, code, category);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n}\nclass GlyphOutline {\n    constructor(outline, originX, originY, scale) {\n        this.outline = outline;\n        this.originX = originX;\n        this.originY = originY;\n        this.scale = scale;\n        this.i = 0;\n        // Automatically assign private properties: this.outline, this.originX, this.originY, and this.scale.\n    }\n    done() {\n        return this.i >= this.outline.length;\n    }\n    next() {\n        return this.outline[this.i++];\n    }\n    nextX() {\n        return this.originX + this.outline[this.i++] * this.scale;\n    }\n    nextY() {\n        return this.originY - this.outline[this.i++] * this.scale;\n    }\n    static parse(str) {\n        const result = [];\n        const parts = str.split(' ');\n        let i = 0;\n        while (i < parts.length) {\n            switch (parts[i++]) {\n                case 'm':\n                    result.push(OutlineCode.MOVE, parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'l':\n                    result.push(OutlineCode.LINE, parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'q':\n                    result.push(OutlineCode.QUADRATIC, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'b':\n                    result.push(OutlineCode.BEZIER, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n            }\n        }\n        return result;\n    }\n}\nexport class Glyph extends Element {\n    /**\n     * @param code\n     * @param point\n     * @param options\n     */\n    constructor(code, point, options) {\n        super();\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.bbox = new BoundingBox(0, 0, 0, 0);\n        this.topGlyphs = [];\n        this.botGlyphs = [];\n        this.options = {};\n        this.scale = 1;\n        this.code = code;\n        this.point = point;\n        this.originShift = { x: 0, y: 0 };\n        this.x_shift = 0;\n        this.y_shift = 0;\n        if (options) {\n            this.setOptions(options);\n        }\n        else {\n            this.reset();\n        }\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Glyph;\n    }\n    /**\n     * Pass a key of the form `glyphs.{category}.{code}.{key}` to Font.lookupMetric(). If the initial lookup fails,\n     * try again with the path `glyphs.{category}.{key}`. If the second lookup fails, return the defaultValue.\n     *\n     * @param font\n     * @param category any metric path under 'glyphs', so 'stem.up' could resolve to glyphs.stem.up.shiftX, glyphs.stem.up.shiftY, etc.\n     * @param code\n     * @param key\n     * @param defaultValue\n     */\n    static lookupFontMetric(font, category, code, key, defaultValue) {\n        let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n        if (value === undefined) {\n            // The first lookup failed, so we omit .${code} and try again (with a defaultValue this time).\n            value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n        }\n        return value;\n    }\n    static lookupGlyph(fontStack, code) {\n        defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\n        let glyph;\n        let font;\n        for (let i = 0; i < fontStack.length; i++) {\n            font = fontStack[i];\n            glyph = font.getGlyphs()[code];\n            if (glyph)\n                return { glyph, font };\n        }\n        throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\n    }\n    static loadMetrics(fontStack, code, category) {\n        const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n        if (!glyph.o)\n            throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\n        let x_shift = 0;\n        let y_shift = 0;\n        let scale = 1;\n        if (category && font) {\n            x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\n            y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\n            scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\n        }\n        const x_min = glyph.x_min;\n        const x_max = glyph.x_max;\n        const ha = glyph.ha;\n        if (!glyph.cached_outline) {\n            glyph.cached_outline = GlyphOutline.parse(glyph.o);\n        }\n        return {\n            x_min,\n            x_max,\n            x_shift,\n            y_shift,\n            scale,\n            ha,\n            outline: glyph.cached_outline,\n            font,\n            width: x_max - x_min,\n            height: ha,\n        };\n    }\n    /**\n     * Renders glyphs from the default font stack.\n     *\n     * @param ctx Canvas or SVG context\n     * @param x_pos x coordinate\n     * @param y_pos y coordinate\n     * @param point the point size of the font\n     * @param code the glyph code in font.getGlyphs()\n     * @param options\n     * @returns\n     */\n    static renderGlyph(ctx, x_pos, y_pos, point, code, options) {\n        var _a;\n        const data = Glyph.cache.lookup(code, options === null || options === void 0 ? void 0 : options.category);\n        const metrics = data.metrics;\n        if (data.point != -1) {\n            point = data.point;\n        }\n        const customScale = (_a = options === null || options === void 0 ? void 0 : options.scale) !== null && _a !== void 0 ? _a : 1;\n        const scale = ((point * 72.0) / (metrics.font.getResolution() * 100.0)) * metrics.scale * customScale;\n        Glyph.renderOutline(ctx, metrics.outline, scale, x_pos + metrics.x_shift * customScale, y_pos + metrics.y_shift * customScale);\n        return metrics;\n    }\n    static renderOutline(ctx, outline, scale, x_pos, y_pos) {\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n        ctx.beginPath();\n        let x, y;\n        while (!go.done()) {\n            switch (go.next()) {\n                case OutlineCode.MOVE:\n                    ctx.moveTo(go.nextX(), go.nextY());\n                    break;\n                case OutlineCode.LINE:\n                    ctx.lineTo(go.nextX(), go.nextY());\n                    break;\n                case OutlineCode.QUADRATIC:\n                    x = go.nextX();\n                    y = go.nextY();\n                    ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\n                    break;\n                case OutlineCode.BEZIER:\n                    x = go.nextX();\n                    y = go.nextY();\n                    ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n                    break;\n            }\n        }\n        ctx.fill();\n    }\n    static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n        const bboxComp = new BoundingBoxComputation();\n        // (penX, penY) hold the pen position: the start of each stroke.\n        let penX = x_pos;\n        let penY = y_pos;\n        let x, y;\n        while (!go.done()) {\n            switch (go.next()) {\n                case OutlineCode.MOVE:\n                    // Note that we don't add any points to the bounding box until a srroke is actually drawn.\n                    penX = go.nextX();\n                    penY = go.nextY();\n                    break;\n                case OutlineCode.LINE:\n                    bboxComp.addPoint(penX, penY);\n                    penX = go.nextX();\n                    penY = go.nextY();\n                    bboxComp.addPoint(penX, penY);\n                    break;\n                case OutlineCode.QUADRATIC:\n                    x = go.nextX();\n                    y = go.nextY();\n                    bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\n                    penX = x;\n                    penY = y;\n                    break;\n                case OutlineCode.BEZIER:\n                    x = go.nextX();\n                    y = go.nextY();\n                    bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n                    penX = x;\n                    penY = y;\n                    break;\n            }\n        }\n        return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n    }\n    static getWidth(code, point, category) {\n        const data = Glyph.cache.lookup(code, category);\n        if (data.point != -1) {\n            point = data.point;\n        }\n        const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\n        return data.bbox.getW() * scale;\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n    getCode() {\n        return this.code;\n    }\n    // eslint-disable-next-line\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.reset();\n    }\n    setPoint(point) {\n        this.point = point;\n        return this;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    setXShift(x_shift) {\n        this.x_shift = x_shift;\n        return this;\n    }\n    setYShift(y_shift) {\n        this.y_shift = y_shift;\n        return this;\n    }\n    reset() {\n        const data = Glyph.cache.lookup(this.code, this.options.category);\n        this.metrics = data.metrics;\n        // Override point from metrics file\n        if (data.point != -1) {\n            this.point = data.point;\n        }\n        this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n        this.bbox = new BoundingBox(data.bbox.getX() * this.scale, data.bbox.getY() * this.scale, data.bbox.getW() * this.scale, data.bbox.getH() * this.scale);\n    }\n    checkMetrics() {\n        return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n    getMetrics() {\n        const metrics = this.checkMetrics();\n        const metricsScale = metrics.scale;\n        return {\n            x_min: metrics.x_min * this.scale * metricsScale,\n            x_max: metrics.x_max * this.scale * metricsScale,\n            width: this.bbox.getW(),\n            height: this.bbox.getH(),\n            scale: this.scale * metricsScale,\n            x_shift: metrics.x_shift,\n            y_shift: metrics.y_shift,\n            outline: metrics.outline,\n            font: metrics.font,\n            ha: metrics.ha,\n        };\n    }\n    setOriginX(x) {\n        const { bbox } = this;\n        const originX = Math.abs(bbox.getX() / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.originShift.x = -xShift;\n    }\n    setOriginY(y) {\n        const { bbox } = this;\n        const originY = Math.abs(bbox.getY() / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.originShift.y = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n    render(ctx, x, y) {\n        const metrics = this.checkMetrics();\n        const outline = metrics.outline;\n        const scale = this.scale * metrics.scale;\n        this.setRendered();\n        this.applyStyle(ctx);\n        const xPos = x + this.originShift.x + metrics.x_shift;\n        const yPos = y + this.originShift.y + metrics.y_shift;\n        Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\n        this.restoreStyle(ctx);\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    renderToStave(x) {\n        const context = this.checkContext();\n        const metrics = this.checkMetrics();\n        const stave = this.checkStave();\n        const outline = metrics.outline;\n        const scale = this.scale * metrics.scale;\n        this.setRendered();\n        this.applyStyle();\n        const xPos = x + this.x_shift + metrics.x_shift;\n        const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\n        Glyph.renderOutline(context, outline, scale, xPos, yPos);\n        this.restoreStyle();\n    }\n}\nGlyph.cache = new GlyphCache();\n// The current cache key for GlyphCache above.\n// Computed when Flow.setMusicFont(...) is called.\n// It is set to a comma separated list of font names.\nGlyph.CURRENT_CACHE_KEY = '';\n// Used by the GlyphCache above.\n// Set when Flow.setMusicFont(...) is called.\nGlyph.MUSIC_FONT_STACK = [];\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n    constructor() {\n        super();\n        this.width = 0;\n        // The `text_line` is reserved space above or below a stave.\n        this.text_line = 0;\n        this.position = Modifier.Position.LEFT;\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.spacingFromNextModifier = 0;\n    }\n    /**\n     * Modifiers category string. Every modifier has a different category.\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\n     */\n    static get CATEGORY() {\n        return Category.Modifier;\n    }\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    /** Called when position changes. */\n    reset() {\n        // DO NOTHING.\n    }\n    /** Get modifier widths. */\n    getWidth() {\n        return this.width;\n    }\n    /** Set modifier widths. */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    /**\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n     * Also verifies that the index is valid.\n     */\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    /**\n     * Set attached note.\n     * @param note (`StaveNote`, `TabNote`, etc.)\n     */\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    /** Get note index, which is a specific note in a chord. */\n    getIndex() {\n        return this.index;\n    }\n    /** Check and get note index, which is a specific note in a chord. */\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    /** Set note index, which is a specific note in a chord. */\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n    }\n    /** Every modifier must be part of a `ModifierContext`. */\n    setModifierContext(c) {\n        this.modifierContext = c;\n        return this;\n    }\n    /** Get position. */\n    getPosition() {\n        return this.position;\n    }\n    /**\n     * Set position.\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n     */\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    /** Set the `text_line` for the modifier. */\n    setTextLine(line) {\n        this.text_line = line;\n        return this;\n    }\n    /** Shift modifier down `y` pixels. Negative values shift up. */\n    setYShift(y) {\n        this.y_shift = y;\n        return this;\n    }\n    /** Set spacing from next modifier. */\n    setSpacingFromNextModifier(x) {\n        this.spacingFromNextModifier = x;\n    }\n    /** Get spacing from next modifier. */\n    getSpacingFromNextModifier() {\n        return this.spacingFromNextModifier;\n    }\n    /**\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\n     * shift reverse.\n     */\n    setXShift(x) {\n        this.x_shift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.x_shift -= x;\n        }\n        else {\n            this.x_shift += x;\n        }\n        return this;\n    }\n    /** Get shift modifier `x` */\n    getXShift() {\n        return this.x_shift;\n    }\n    /** Render the modifier onto the canvas. */\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n    alignSubNotesWithNote(subNotes, note) {\n        // Shift over the tick contexts of each note\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n        });\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { RuntimeError } from './util';\n/** Music implements some standard music theory routines. */\nexport class Music {\n    /** Number of an canonical notes (12). */\n    static get NUM_TONES() {\n        return this.canonical_notes.length;\n    }\n    /** Names of root notes ('c', 'd',...) */\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    /** Values of the root notes.*/\n    static get root_values() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    /** Indices of the root notes.*/\n    static get root_indices() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\n    static get canonical_notes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n    static get diatonic_intervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    /** NoteAccidental associated to diatonic intervals. */\n    static get diatonic_accidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    /** Semitones shift associated to intervals .*/\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    /** Semitones shifts associated with scales. */\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    /** Scales associated with m (minor) and M (major). */\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    /** Accidentals abbreviations. */\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    /** Note values. */\n    static get noteValues() {\n        return {\n            c: { root_index: 0, int_val: 0 },\n            cn: { root_index: 0, int_val: 0 },\n            'c#': { root_index: 0, int_val: 1 },\n            'c##': { root_index: 0, int_val: 2 },\n            cb: { root_index: 0, int_val: 11 },\n            cbb: { root_index: 0, int_val: 10 },\n            d: { root_index: 1, int_val: 2 },\n            dn: { root_index: 1, int_val: 2 },\n            'd#': { root_index: 1, int_val: 3 },\n            'd##': { root_index: 1, int_val: 4 },\n            db: { root_index: 1, int_val: 1 },\n            dbb: { root_index: 1, int_val: 0 },\n            e: { root_index: 2, int_val: 4 },\n            en: { root_index: 2, int_val: 4 },\n            'e#': { root_index: 2, int_val: 5 },\n            'e##': { root_index: 2, int_val: 6 },\n            eb: { root_index: 2, int_val: 3 },\n            ebb: { root_index: 2, int_val: 2 },\n            f: { root_index: 3, int_val: 5 },\n            fn: { root_index: 3, int_val: 5 },\n            'f#': { root_index: 3, int_val: 6 },\n            'f##': { root_index: 3, int_val: 7 },\n            fb: { root_index: 3, int_val: 4 },\n            fbb: { root_index: 3, int_val: 3 },\n            g: { root_index: 4, int_val: 7 },\n            gn: { root_index: 4, int_val: 7 },\n            'g#': { root_index: 4, int_val: 8 },\n            'g##': { root_index: 4, int_val: 9 },\n            gb: { root_index: 4, int_val: 6 },\n            gbb: { root_index: 4, int_val: 5 },\n            a: { root_index: 5, int_val: 9 },\n            an: { root_index: 5, int_val: 9 },\n            'a#': { root_index: 5, int_val: 10 },\n            'a##': { root_index: 5, int_val: 11 },\n            ab: { root_index: 5, int_val: 8 },\n            abb: { root_index: 5, int_val: 7 },\n            b: { root_index: 6, int_val: 11 },\n            bn: { root_index: 6, int_val: 11 },\n            'b#': { root_index: 6, int_val: 0 },\n            'b##': { root_index: 6, int_val: 1 },\n            bb: { root_index: 6, int_val: 10 },\n            bbb: { root_index: 6, int_val: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonical_notes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonic_intervals.length;\n    }\n    /** Return root and accidental associated to a note. */\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    /** Return root, accidental and type associated to a key. */\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            // Unspecified type implies major\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    /** Note value associated to a note name. */\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.int_val;\n    }\n    /** Interval value associated to an interval name. */\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    /** Canonical note name associated to a value. */\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonical_notes[noteValue];\n    }\n    /** Interval name associated to a value. */\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonic_intervals[intervalValue];\n    }\n    /**\n     * Given a note, interval, and interval direction, produce the relative note.\n     */\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    /**\n     * Given a root and note value, produce the relative note name.\n     */\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            // Possibly wrap around. (Add +1 for modulo operator)\n            const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverse_interval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverse_interval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    /**\n     * Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    /**\n     * Return the interval of a note, given a diatonic scale.\n     * e.g., given the scale C, and the note E, returns M3.\n     */\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    /**\n     * Create a scale map that represents the pitch state for a\n     * `keySignature`. For example, passing a `G` to `keySignature` would\n     * return a scale map with every note naturalized except for `F` which\n     * has an `F#` state.\n     */\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.root_indices[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { RuntimeError } from './util';\nconst RESOLUTION = 16384;\n/**\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\n */\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    // This is the default duration used to render bars (BarNote). Bars no longer\n    // consume ticks, so this should be a no-op.\n    // TODO(0xfe): This needs to be cleaned up.\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { acc: 'b', num: 1 },\n    Dm: { acc: 'b', num: 1 },\n    Bb: { acc: 'b', num: 2 },\n    Gm: { acc: 'b', num: 2 },\n    Eb: { acc: 'b', num: 3 },\n    Cm: { acc: 'b', num: 3 },\n    Ab: { acc: 'b', num: 4 },\n    Fm: { acc: 'b', num: 4 },\n    Db: { acc: 'b', num: 5 },\n    Bbm: { acc: 'b', num: 5 },\n    Gb: { acc: 'b', num: 6 },\n    Ebm: { acc: 'b', num: 6 },\n    Cb: { acc: 'b', num: 7 },\n    Abm: { acc: 'b', num: 7 },\n    G: { acc: '#', num: 1 },\n    Em: { acc: '#', num: 1 },\n    D: { acc: '#', num: 2 },\n    Bm: { acc: '#', num: 2 },\n    A: { acc: '#', num: 3 },\n    'F#m': { acc: '#', num: 3 },\n    E: { acc: '#', num: 4 },\n    'C#m': { acc: '#', num: 4 },\n    B: { acc: '#', num: 5 },\n    'G#m': { acc: '#', num: 5 },\n    'F#': { acc: '#', num: 6 },\n    'D#m': { acc: '#', num: 6 },\n    'C#': { acc: '#', num: 7 },\n    'A#m': { acc: '#', num: 7 },\n};\nconst clefs = {\n    treble: { line_shift: 0 },\n    bass: { line_shift: 6 },\n    tenor: { line_shift: 4 },\n    alto: { line_shift: 3 },\n    soprano: { line_shift: 1 },\n    percussion: { line_shift: 0 },\n    'mezzo-soprano': { line_shift: 2 },\n    'baritone-c': { line_shift: 5 },\n    'baritone-f': { line_shift: 5 },\n    subbass: { line_shift: 7 },\n    french: { line_shift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, int_val: 0 },\n    CN: { index: 0, int_val: 0, accidental: 'n' },\n    'C#': { index: 0, int_val: 1, accidental: '#' },\n    'C##': { index: 0, int_val: 2, accidental: '##' },\n    CB: { index: 0, int_val: 11, accidental: 'b' },\n    CBB: { index: 0, int_val: 10, accidental: 'bb' },\n    D: { index: 1, int_val: 2 },\n    DN: { index: 1, int_val: 2, accidental: 'n' },\n    'D#': { index: 1, int_val: 3, accidental: '#' },\n    'D##': { index: 1, int_val: 4, accidental: '##' },\n    DB: { index: 1, int_val: 1, accidental: 'b' },\n    DBB: { index: 1, int_val: 0, accidental: 'bb' },\n    E: { index: 2, int_val: 4 },\n    EN: { index: 2, int_val: 4, accidental: 'n' },\n    'E#': { index: 2, int_val: 5, accidental: '#' },\n    'E##': { index: 2, int_val: 6, accidental: '##' },\n    EB: { index: 2, int_val: 3, accidental: 'b' },\n    EBB: { index: 2, int_val: 2, accidental: 'bb' },\n    F: { index: 3, int_val: 5 },\n    FN: { index: 3, int_val: 5, accidental: 'n' },\n    'F#': { index: 3, int_val: 6, accidental: '#' },\n    'F##': { index: 3, int_val: 7, accidental: '##' },\n    FB: { index: 3, int_val: 4, accidental: 'b' },\n    FBB: { index: 3, int_val: 3, accidental: 'bb' },\n    G: { index: 4, int_val: 7 },\n    GN: { index: 4, int_val: 7, accidental: 'n' },\n    'G#': { index: 4, int_val: 8, accidental: '#' },\n    'G##': { index: 4, int_val: 9, accidental: '##' },\n    GB: { index: 4, int_val: 6, accidental: 'b' },\n    GBB: { index: 4, int_val: 5, accidental: 'bb' },\n    A: { index: 5, int_val: 9 },\n    AN: { index: 5, int_val: 9, accidental: 'n' },\n    'A#': { index: 5, int_val: 10, accidental: '#' },\n    'A##': { index: 5, int_val: 11, accidental: '##' },\n    AB: { index: 5, int_val: 8, accidental: 'b' },\n    ABB: { index: 5, int_val: 7, accidental: 'bb' },\n    B: { index: 6, int_val: 11 },\n    BN: { index: 6, int_val: 11, accidental: 'n' },\n    'B#': { index: 6, int_val: 12, accidental: '#' },\n    'B##': { index: 6, int_val: 13, accidental: '##' },\n    BB: { index: 6, int_val: 10, accidental: 'b' },\n    BBB: { index: 6, int_val: 9, accidental: 'bb' },\n    R: { index: 6, rest: true },\n    X: {\n        index: 6,\n        accidental: '',\n        octave: 4,\n        code: 'noteheadXBlack',\n        shift_right: 5.5,\n    },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n};\nconst customNoteHeads = {\n    /* Diamond */\n    D0: { code: 'noteheadDiamondWhole' },\n    D1: { code: 'noteheadDiamondHalf' },\n    D2: { code: 'noteheadDiamondBlack' },\n    D3: { code: 'noteheadDiamondBlack' },\n    /* Triangle */\n    T0: { code: 'noteheadTriangleUpWhole' },\n    T1: { code: 'noteheadTriangleUpHalf' },\n    T2: { code: 'noteheadTriangleUpBlack' },\n    T3: { code: 'noteheadTriangleUpBlack' },\n    /* Cross */\n    X0: { code: 'noteheadXWhole' },\n    X1: { code: 'noteheadXHalf' },\n    X2: { code: 'noteheadXBlack' },\n    X3: { code: 'noteheadCircleX' },\n    /* Square */\n    S1: { code: 'noteheadSquareWhite' },\n    S2: { code: 'noteheadSquareBlack' },\n    /* Rectangle */\n    R1: { code: 'vexNoteHeadRectWhite' },\n    R2: { code: 'vexNoteHeadRectBlack' }, // no smufl code\n};\nconst accidentals = {\n    '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n    '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n    b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n    bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n    n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n    '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n    '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n    db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n    d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n    '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n    '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n    '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n    bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n    bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n    o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n    k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n    bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n    '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n    ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n    afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n    accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n    accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n    accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n    accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n    accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n    accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n    accidentalNarrowReversedFlatAndFlat: {\n        code: 'accidentalNarrowReversedFlatAndFlat',\n        parenRightPaddingAdjustment: -1,\n    },\n    accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n    accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\n// Helps determine the layout of accidentals.\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        second_on_bottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spaced_out_tetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spaced_out_pentachord: [1, 2, 3, 2, 1],\n        very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n        very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: 'augmentationDot', between_lines: true },\n    av: {\n        aboveCode: 'articStaccatissimoAbove',\n        belowCode: 'articStaccatissimoBelow',\n        between_lines: true,\n    },\n    'a>': {\n        aboveCode: 'articAccentAbove',\n        belowCode: 'articAccentBelow',\n        between_lines: true,\n    },\n    'a-': {\n        aboveCode: 'articTenutoAbove',\n        belowCode: 'articTenutoBelow',\n        between_lines: true,\n    },\n    'a^': {\n        aboveCode: 'articMarcatoAbove',\n        belowCode: 'articMarcatoBelow',\n        between_lines: false,\n    },\n    'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false },\n    ao: {\n        aboveCode: 'pluckedSnapPizzicatoAbove',\n        belowCode: 'pluckedSnapPizzicatoBelow',\n        between_lines: false,\n    },\n    ah: { code: 'stringsHarmonic', between_lines: false },\n    'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false },\n    'a@a': { code: 'fermataAbove', between_lines: false },\n    'a@u': { code: 'fermataBelow', between_lines: false },\n    'a|': { code: 'stringsUpBow', between_lines: false },\n    am: { code: 'stringsDownBow', between_lines: false },\n    'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n};\nconst ornaments = {\n    mordent: { code: 'ornamentShortTrill' },\n    mordent_inverted: { code: 'ornamentMordent' },\n    turn: { code: 'ornamentTurn' },\n    turn_inverted: { code: 'ornamentTurnSlash' },\n    tr: { code: 'ornamentTrill' },\n    upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n    downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n    prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n    pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n    upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n    downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n    lineprall: { code: 'ornamentPrecompAppoggTrill' },\n    prallprall: { code: 'ornamentTremblement' },\n    scoop: { code: 'brassScoop' },\n    doit: { code: 'brassDoitMedium' },\n    fall: { code: 'brassFallLipShort' },\n    doitLong: { code: 'brassLiftMedium' },\n    fallLong: { code: 'brassFallRoughMedium' },\n    bend: { code: 'brassBend' },\n    plungerClosed: { code: 'brassMuteClosed' },\n    plungerOpen: { code: 'brassMuteOpen' },\n    flip: { code: 'brassFlip' },\n    jazzTurn: { code: 'brassJazzTurn' },\n    smear: { code: 'brassSmear' },\n};\nexport class Tables {\n    /**\n     * @returns the `Font` object at the head of the music font stack.\n     */\n    static currentMusicFont() {\n        if (Tables.MUSIC_FONT_STACK.length === 0) {\n            throw new RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');\n        }\n        else {\n            return Tables.MUSIC_FONT_STACK[0];\n        }\n    }\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    /**\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\n     * @param clef\n     * @param params a struct with one option, `octave_shift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n     * @returns properties for the specified note.\n     */\n    // eslint-disable-next-line\n    static keyProperties(keyOctaveGlyph, clef = 'treble', params) {\n        let options = { octave_shift: 0 };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        if (value.octave)\n            pieces[1] = value.octave.toString();\n        let octave = parseInt(pieces[1], 10);\n        // Octave_shift is the shift to compensate for clef 8va/8vb.\n        octave += -1 * options.octave_shift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).line_shift;\n        let stroke = 0;\n        if (line <= 0 && (line * 2) % 2 === 0)\n            stroke = 1; // stroke up\n        if (line >= 6 && (line * 2) % 2 === 0)\n            stroke = -1; // stroke down\n        // Integer value for note arithmetic.\n        const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\n        // If the user specified a glyph, overwrite the glyph code.\n        const code = value.code;\n        const shift_right = value.shift_right;\n        let customNoteHeadProps = {};\n        if (pieces.length > 2 && pieces[2]) {\n            const glyphName = pieces[2].toUpperCase();\n            customNoteHeadProps = customNoteHeads[glyphName] || {};\n        }\n        return Object.assign({ key,\n            octave,\n            line,\n            int_value, accidental: value.accidental, code,\n            stroke,\n            shift_right, displaced: false }, customNoteHeadProps);\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    static tabToGlyph(fret, scale = 1.0) {\n        let glyph = undefined;\n        let width = 0;\n        let shift_y = 0;\n        if (fret.toUpperCase() === 'X') {\n            const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.TABLATURE_FONT_SCALE).getMetrics();\n            glyph = 'accidentalDoubleSharp';\n            if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\n                throw new RuntimeError('InvalidMetrics', 'Width and height required');\n            width = glyphMetrics.width;\n            shift_y = -glyphMetrics.height / 2;\n        }\n        else {\n            width = Tables.textWidth(fret);\n        }\n        return {\n            text: fret,\n            code: glyph,\n            getWidth: () => width * scale,\n            shift_y,\n        };\n    }\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\n    // TODO: The actual width depends on the font family, size, weight, style.\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(acc) {\n        return accidentals[acc];\n    }\n    static ornamentCodes(acc) {\n        return ornaments[acc];\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.acc) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.acc];\n        const acc_list = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            acc_list.push({ type: keySpec.acc, line });\n        }\n        return acc_list;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    /**\n     * Convert duration aliases to the number based duration.\n     * If the input isn't an alias, simply return the input.\n     * @param duration\n     * @returns Example: 'q' -> '4', '8' -> '8'\n     */\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    /** Convert the `duration` to a fraction. */\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    /** Convert the `duration` to a number. */\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    /* Convert the `duration` to total ticks. */\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n    // The default type is a regular note ('n').\n    // eslint-disable-next-line\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        // Lookup duration for default glyph head code\n        const code = durationCodes[duration];\n        if (code === undefined) {\n            return undefined;\n        }\n        // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n        let glyphTypeProperties = code.type[type];\n        // If this isn't a standard type, then lookup the custom note head map.\n        if (glyphTypeProperties === undefined) {\n            // Try and get it from the custom list of note heads\n            const customGlyphTypeProperties = customNoteHeads[type.toUpperCase()];\n            // If not, then return with nothing.\n            if (customGlyphTypeProperties === undefined) {\n                return undefined;\n            }\n            // Otherwise set it as the code_head value\n            glyphTypeProperties = Object.assign({ code_head: customGlyphTypeProperties.code }, customGlyphTypeProperties);\n        }\n        const code_head = glyphTypeProperties.code_head;\n        // The default implementation of getWidth() calls Glyph.getWidth(code_head, scale).\n        // This can be overridden by an individual glyph type (see slash noteheads below: Tables.SLASH_NOTEHEAD_WIDTH).\n        const getWidth = (scale = Tables.NOTATION_FONT_SCALE) => Glyph.getWidth(code_head, scale);\n        // Merge duration props for 'duration' with the note head properties.\n        return Object.assign(Object.assign(Object.assign({}, code.common), { getWidth: getWidth }), glyphTypeProperties);\n    }\n}\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RESOLUTION = RESOLUTION;\n/**\n * Customize this by calling Flow.setMusicFont(...fontNames);\n */\nTables.MUSIC_FONT_STACK = [];\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\n// HACK:\n// Since text origins are positioned at the baseline, we must\n// compensate for the ascender of the text. Of course, 1 staff space is\n// a very poor approximation.\n//\n// This will be deprecated in the future. This is a temporary solution until\n// we have more robust text metrics.\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalMap = accidentals;\nTables.accidentalColumnsTable = accidentalColumns;\nTables.unicode = {\n    // ♯ accidental sharp\n    sharp: String.fromCharCode(0x266f),\n    // ♭ accidental flat\n    flat: String.fromCharCode(0x266d),\n    // ♮ accidental natural\n    natural: String.fromCharCode(0x266e),\n    // △ major seventh\n    triangle: String.fromCharCode(0x25b3),\n    // ø half-diminished\n    'o-with-slash': String.fromCharCode(0x00f8),\n    // ° diminished\n    degrees: String.fromCharCode(0x00b0),\n    // ○ diminished\n    circle: String.fromCharCode(0x25cb),\n};\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\nTables.validTypes = validNoteTypes;\n// Default time signature.\nTables.TIME4_4 = {\n    num_beats: 4,\n    beat_value: 4,\n    resolution: RESOLUTION,\n};\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\n// The sanitizeDuration() bit may need to be removed by 0xfe.\n// eslint-disable-next-line\nconst durationCodes = {\n    '1/2': {\n        common: {\n            stem: false,\n            stem_offset: 0,\n            flag: false,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Breve note\n                code_head: 'noteheadDoubleWhole',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDoubleWhole', scale);\n                // },\n            },\n            h: {\n                // Breve note harmonic\n                code_head: 'unpitchedPercussionClef1',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('unpitchedPercussionClef1', scale);\n                // },\n            },\n            m: {\n                // Breve note muted\n                code_head: 'vexNoteHeadMutedBreve',\n                stem_offset: 0,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('vexNoteHeadMutedBreve', scale);\n                // },\n            },\n            r: {\n                // Breve rest\n                code_head: 'restDoubleWhole',\n                rest: true,\n                position: 'B/5',\n                dot_shiftY: 0.5,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('restDoubleWhole', scale);\n                // },\n            },\n            s: {\n                // Breve note slash -\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadDoubleWhole',\n            },\n        },\n    },\n    1: {\n        common: {\n            stem: false,\n            stem_offset: 0,\n            flag: false,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Whole note\n                code_head: 'noteheadWhole',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadWhole', scale);\n                // },\n            },\n            h: {\n                // Whole note harmonic\n                code_head: 'noteheadDiamondWhole',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondWhole', scale);\n                // },\n            },\n            m: {\n                // Whole note muted\n                code_head: 'noteheadXWhole',\n                stem_offset: -3,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXWhole', scale);\n                // },\n            },\n            r: {\n                // Whole rest\n                code_head: 'restWhole',\n                rest: true,\n                position: 'D/5',\n                dot_shiftY: 0.5,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('restWhole', scale);\n                // },\n            },\n            s: {\n                // Whole note slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadWhole',\n            },\n        },\n    },\n    2: {\n        common: {\n            stem: true,\n            stem_offset: 0,\n            flag: false,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Half note\n                code_head: 'noteheadHalf',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadHalf', scale);\n                // },\n            },\n            h: {\n                // Half note harmonic\n                code_head: 'noteheadDiamondHalf',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondHalf', scale);\n                // },\n            },\n            m: {\n                // Half note muted\n                code_head: 'noteheadXHalf',\n                stem_offset: -3,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXHalf', scale);\n                // },\n            },\n            r: {\n                // Half rest\n                code_head: 'restHalf',\n                stem: false,\n                rest: true,\n                position: 'B/4',\n                dot_shiftY: -0.5,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('restHalf', scale);\n                // },\n            },\n            s: {\n                // Half note slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadHalf',\n            },\n        },\n    },\n    4: {\n        common: {\n            stem: true,\n            stem_offset: 0,\n            flag: false,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Quarter note\n                code_head: 'noteheadBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadBlack', scale);\n                // },\n            },\n            h: {\n                // Quarter harmonic\n                code_head: 'noteheadDiamondBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\n                // },\n            },\n            m: {\n                // Quarter muted\n                code_head: 'noteheadXBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXBlack', scale);\n                // },\n            },\n            r: {\n                // Quarter rest\n                code_head: 'restQuarter',\n                stem: false,\n                rest: true,\n                position: 'B/4',\n                dot_shiftY: -0.5,\n                line_above: 1.5,\n                line_below: 1.5,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('restQuarter', scale);\n                // },\n            },\n            s: {\n                // Quarter slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadBlack',\n            },\n        },\n    },\n    8: {\n        common: {\n            stem: true,\n            stem_offset: 0,\n            flag: true,\n            beam_count: 1,\n            stem_beam_extension: 0,\n            code_flag_upstem: 'flag8thUp',\n            code_flag_downstem: 'flag8thDown',\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Eighth note\n                code_head: 'noteheadBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadBlack', scale);\n                // },\n            },\n            h: {\n                // Eighth note harmonic\n                code_head: 'noteheadDiamondBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\n                // },\n            },\n            m: {\n                // Eighth note muted\n                code_head: 'noteheadXBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXBlack', scale);\n                // },\n            },\n            r: {\n                // Eighth rest\n                code_head: 'rest8th',\n                stem: false,\n                flag: false,\n                rest: true,\n                position: 'B/4',\n                dot_shiftY: -0.5,\n                line_above: 1.0,\n                line_below: 1.0,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('rest8th', scale);\n                // },\n            },\n            s: {\n                // Eighth slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadBlack',\n            },\n        },\n    },\n    16: {\n        common: {\n            beam_count: 2,\n            stem_beam_extension: 0,\n            stem: true,\n            stem_offset: 0,\n            flag: true,\n            code_flag_upstem: 'flag16thUp',\n            code_flag_downstem: 'flag16thDown',\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Sixteenth note\n                code_head: 'noteheadBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadBlack', scale);\n                // },\n            },\n            h: {\n                // Sixteenth note harmonic\n                code_head: 'noteheadDiamondBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\n                // },\n            },\n            m: {\n                // Sixteenth note muted\n                code_head: 'noteheadXBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXBlack', scale);\n                // },\n            },\n            r: {\n                // Sixteenth rest\n                code_head: 'rest16th',\n                stem: false,\n                flag: false,\n                rest: true,\n                position: 'B/4',\n                dot_shiftY: -0.5,\n                line_above: 1.0,\n                line_below: 2.0,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('rest16th', scale);\n                // },\n            },\n            s: {\n                // Sixteenth slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadBlack',\n            },\n        },\n    },\n    32: {\n        common: {\n            beam_count: 3,\n            stem_beam_extension: 7.5,\n            stem: true,\n            stem_offset: 0,\n            flag: true,\n            code_flag_upstem: 'flag32ndUp',\n            code_flag_downstem: 'flag32ndDown',\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Thirty-second note\n                code_head: 'noteheadBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadBlack', scale);\n                // },\n            },\n            h: {\n                // Thirty-second harmonic\n                code_head: 'noteheadDiamondBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\n                // },\n            },\n            m: {\n                // Thirty-second muted\n                code_head: 'noteheadXBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXBlack', scale);\n                // },\n            },\n            r: {\n                // Thirty-second rest\n                code_head: 'rest32nd',\n                stem: false,\n                flag: false,\n                rest: true,\n                position: 'B/4',\n                dot_shiftY: -1.5,\n                line_above: 2.0,\n                line_below: 2.0,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('rest32nd', scale);\n                // },\n            },\n            s: {\n                // Thirty-second slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadBlack',\n            },\n        },\n    },\n    64: {\n        common: {\n            beam_count: 4,\n            stem_beam_extension: 15,\n            stem: true,\n            stem_offset: 0,\n            flag: true,\n            code_flag_upstem: 'flag64thUp',\n            code_flag_downstem: 'flag64thDown',\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Sixty-fourth note\n                code_head: 'noteheadBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadBlack', scale);\n                // },\n            },\n            h: {\n                // Sixty-fourth harmonic\n                code_head: 'noteheadDiamondBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\n                // },\n            },\n            m: {\n                // Sixty-fourth muted\n                code_head: 'noteheadXBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXBlack', scale);\n                // },\n            },\n            r: {\n                // Sixty-fourth rest\n                code_head: 'rest64th',\n                stem: false,\n                flag: false,\n                rest: true,\n                position: 'B/4',\n                dot_shiftY: -1.5,\n                line_above: 2.0,\n                line_below: 3.0,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('rest64th', scale);\n                // },\n            },\n            s: {\n                // Sixty-fourth slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadBlack',\n            },\n        },\n    },\n    128: {\n        common: {\n            beam_count: 5,\n            stem_beam_extension: 22.5,\n            stem: true,\n            stem_offset: 0,\n            flag: true,\n            code_flag_upstem: 'flag128thUp',\n            code_flag_downstem: 'flag128thDown',\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        type: {\n            n: {\n                // Hundred-twenty-eight note\n                code_head: 'noteheadBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadBlack', scale);\n                // },\n            },\n            h: {\n                // Hundred-twenty-eight harmonic\n                code_head: 'noteheadDiamondBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadDiamondBlack', scale);\n                // },\n            },\n            m: {\n                // Hundred-twenty-eight muted\n                code_head: 'noteheadXBlack',\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('noteheadXBlack', scale);\n                // },\n            },\n            r: {\n                // Hundred-twenty-eight rest\n                code_head: 'rest128th',\n                stem: false,\n                flag: false,\n                rest: true,\n                position: 'B/4',\n                dot_shiftY: -2.5,\n                line_above: 3.0,\n                line_below: 3.0,\n                // getWidth(scale = Tables.NOTATION_FONT_SCALE): number | undefined {\n                //   return Glyph.getWidth('rest128th', scale);\n                // },\n            },\n            s: {\n                // Hundred-twenty-eight slash\n                // Drawn with canvas primitives\n                getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n                position: 'B/4',\n            },\n            g: {\n                // Ghostnote\n                code_head: 'noteheadBlack',\n            },\n        },\n    },\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Music } from './music';\nimport { Tables } from './tables';\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('Vex.Flow.Accidental', args);\n}\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\nexport class Accidental extends Modifier {\n    /**\n     * Create accidental.\n     * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n     * For example: `#`, `##`, `b`, `n`, etc.\n     */\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.render_options = {\n            // Font size for glyphs\n            font_scale: 38,\n            // Padding between accidental and parentheses on each side\n            parenLeftPadding: 2,\n            parenRightPadding: 2,\n        };\n        this.accidental = Tables.accidentalCodes(this.type);\n        defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\n        // Cautionary accidentals have parentheses around them\n        this.cautionary = false;\n        this.reset();\n    }\n    /** Accidentals category string. */\n    static get CATEGORY() {\n        return Category.Accidental;\n    }\n    /** Arrange accidentals inside a ModifierContext. */\n    static format(accidentals, state) {\n        // If there are no accidentals, no need to format their positions.\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const musicFont = Tables.currentMusicFont();\n        const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\n        const leftShift = state.left_shift + noteheadAccidentalPadding;\n        const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\n        const additionalPadding = musicFont.lookupMetric('accidental.leftPadding'); // padding to the left of all accidentals\n        const accList = [];\n        let prevNote = undefined;\n        let shiftL = 0;\n        // First determine the accidentals' Y positions from the note.keys\n        for (let i = 0; i < accidentals.length; ++i) {\n            const acc = accidentals[i];\n            const note = acc.getNote();\n            const stave = note.getStave();\n            const index = acc.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n            }\n            else {\n                accList.push({ line: props.line, shift: shiftL, acc });\n            }\n        }\n        // Sort accidentals by line number.\n        accList.sort((a, b) => b.line - a.line);\n        // FIXME: Confusing name. Each object in this array has a property called `line`.\n        // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n        const lineList = [];\n        // amount by which all accidentals must be shifted right or left for\n        // stem flipping, notehead shifting concerns.\n        let accShift = 0;\n        let previousLine = undefined;\n        // Create an array of unique line numbers (lineList) from accList\n        for (let i = 0; i < accList.length; i++) {\n            const acc = accList[i];\n            // if this is the first line, or a new line, add a lineList\n            if (previousLine === undefined || previousLine !== acc.line) {\n                lineList.push({\n                    line: acc.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                });\n            }\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\n            // clearance instead of 2.5 lines for b or bb.\n            // FIXME: Naming could use work. acc.acc is very awkward\n            if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n                lineList[lineList.length - 1].flatLine = false;\n            }\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n            if (acc.acc.type !== '##') {\n                lineList[lineList.length - 1].dblSharpLine = false;\n            }\n            // Track how many accidentals are on this line:\n            lineList[lineList.length - 1].numAcc++;\n            // Track the total x_offset needed for this line which will be needed\n            // for formatting lines w/ multiple accidentals:\n            // width = accidental width + universal spacing between accidentals\n            lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n            // if this accShift is larger, use it to keep first column accidentals in the same line\n            accShift = acc.shift > accShift ? acc.shift : accShift;\n            previousLine = acc.line;\n        }\n        // ### Place Accidentals in Columns\n        //\n        // Default to a classic triangular layout (middle accidental farthest left),\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\n        // Elaine Gould's _Behind Bars_.\n        //\n        // Additionally, this implements different vertical collision rules for\n        // flats (only need 2.5 lines clearance below) and double sharps (only\n        // need 2.5 lines of clearance above or below).\n        //\n        // Classic layouts and exception patterns are found in the 'tables.js'\n        // in 'Tables.accidentalColumnsTable'\n        //\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n        // using as few columns as possible for the verticle structure.\n        //\n        // TODO (?): Allow column to be specified for an accidental at run-time?\n        let totalColumns = 0;\n        // establish the boundaries for a group of notes with clashing accidentals:\n        for (let i = 0; i < lineList.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n                // if this note conflicts with the next:\n                if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n                    // include the next note in the group:\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            // Gets an a line from the `lineList`, relative to the current group\n            const getGroupLine = (index) => lineList[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n            // Set columns for the lines in this group:\n            const groupLength = groupEnd - groupStart + 1;\n            // Set the accidental column for each line of the group\n            let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'second_on_bottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spaced_out_tetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spaced_out_pentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'very_spaced_out_pentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spaced_out_hexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'very_spaced_out_hexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            // If the group contains seven members or more, use ascending parallel lines\n            // of accidentals, using as few columns as possible while avoiding collisions.\n            if (groupLength >= 7) {\n                // First, determine how many columns to use:\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < lineList.length; line++) {\n                        if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                // Then, assign a column to each line of accidentals\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    lineList[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                // If the group contains fewer than seven members, use the layouts from\n                // the Tables.accidentalColumnsTable (See: tables.ts).\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    lineList[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            // Increment i to the last note that was set, so that if a lower set of notes\n            // does not conflict at all with this group, it can have its own classic shape.\n            i = groupEnd;\n        }\n        // ### Convert Columns to x_offsets\n        //\n        // This keeps columns aligned, even if they have different accidentals within them\n        // which sometimes results in a larger x_offset than is an accidental might need\n        // to preserve the symmetry of the accidental shape.\n        //\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n        // music with complex chord clusters.\n        //\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n        // parallel columns.\n        // track each column's max width, which will be used as initial shift of later columns:\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = accShift + leftShift;\n        columnXOffsets[0] = accShift + leftShift;\n        // Fill columnWidths with widest needed x-space;\n        // this is what keeps the columns parallel.\n        lineList.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            // this column's offset = this column's width + previous column's offset\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        // Set the xShift for each accidental according to column offsets:\n        let accCount = 0;\n        lineList.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            // handle all of the accidentals on a given line:\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth;\n                accList[accCount].acc.setXShift(xShift);\n                // keep track of the width of accidentals we've added so far, so that when\n                // we loop, we add space for them.\n                lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        // update the overall layout with the full width of the accidental shapes:\n        state.left_shift += totalShift + additionalPadding;\n    }\n    /** Helper function to determine whether two lines of accidentals collide vertically */\n    static checkCollision(line1, line2) {\n        let clearance = line2.line - line1.line;\n        let clearanceRequired = 3;\n        // But less clearance is required for certain accidentals: b, bb and ##.\n        if (clearance > 0) {\n            // then line 2 is on top\n            clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n            if (line1.dblSharpLine)\n                clearance -= 0.5;\n        }\n        else {\n            // line 1 is on top\n            clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n            if (line2.dblSharpLine)\n                clearance -= 0.5;\n        }\n        const collision = Math.abs(clearance) < clearanceRequired;\n        L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n        return collision;\n    }\n    /**\n     * Use this method to automatically apply accidentals to a set of `voices`.\n     * The accidentals will be remembered between all the voices provided.\n     * Optionally, you can also provide an initial `keySignature`.\n     */\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        // Sort the tickables in each voice by their tick position in the voice.\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        // Default key signature is C major.\n        if (!keySignature)\n            keySignature = 'C';\n        // Get the scale map, which represents the current state of each pitch.\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            // Array to store all pitches that modified accidental states\n            // at this tick position\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                // Only StaveNote implements .addModifier(), which is used below.\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                // Go through each key and determine if an accidental should be applied.\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    // Force a natural for every key without an accidental\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    // Determine if the current pitch has the same accidental\n                    // as the scale state\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    // Determine if an identical pitch in the chord already\n                    // modified the accidental state\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    // Remove accidentals\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    // Add the accidental to the StaveNote\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        // Modify the scale map so that the root pitch has an\n                        // updated state\n                        scaleMap[key.root + octave] = pitch;\n                        // Create the accidental\n                        const accidental = new Accidental(accidentalString);\n                        // Attach the accidental to the StaveNote\n                        staveNote.addModifier(accidental, keyIndex);\n                        // Add the pitch to list of pitches that modified accidentals\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                // process grace notes\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    reset() {\n        const fontScale = this.render_options.font_scale;\n        this.glyph = new Glyph(this.accidental.code, fontScale);\n        this.glyph.setOriginX(1.0);\n        if (this.cautionary) {\n            this.parenLeft = new Glyph(Tables.accidentalCodes('{').code, fontScale);\n            this.parenRight = new Glyph(Tables.accidentalCodes('}').code, fontScale);\n            this.parenLeft.setOriginX(1.0);\n            this.parenRight.setOriginX(1.0);\n        }\n    }\n    /** Get width in pixels. */\n    getWidth() {\n        if (this.cautionary) {\n            const parenLeft = defined(this.parenLeft);\n            const parenRight = defined(this.parenRight);\n            const parenWidth = parenLeft.getMetrics().width +\n                parenRight.getMetrics().width +\n                this.render_options.parenLeftPadding +\n                this.render_options.parenRightPadding;\n            return this.glyph.getMetrics().width + parenWidth;\n        }\n        else {\n            return this.glyph.getMetrics().width;\n        }\n    }\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        // Accidentals attached to grace notes are rendered smaller.\n        if (isGraceNote(note)) {\n            this.render_options.font_scale = 25;\n            this.reset();\n        }\n        return this;\n    }\n    /** If called, draws parenthesis around accidental. */\n    setAsCautionary() {\n        this.cautionary = true;\n        this.render_options.font_scale = 28;\n        this.reset();\n        return this;\n    }\n    /** Render accidental onto canvas. */\n    draw() {\n        const { type, position, index, cautionary, x_shift, y_shift, glyph, render_options: { parenLeftPadding, parenRightPadding }, } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // Figure out the start `x` and `y` coordinates for note and index.\n        const start = note.getModifierStartXY(position, index);\n        let accX = start.x + x_shift;\n        const accY = start.y + y_shift;\n        L('Rendering: ', type, accX, accY);\n        if (!cautionary) {\n            glyph.render(ctx, accX, accY);\n        }\n        else {\n            const parenLeft = defined(this.parenLeft);\n            const parenRight = defined(this.parenRight);\n            // Render the accidental in parentheses.\n            parenRight.render(ctx, accX, accY);\n            accX -= parenRight.getMetrics().width;\n            accX -= parenRightPadding;\n            accX -= this.accidental.parenRightPaddingAdjustment;\n            glyph.render(ctx, accX, accY);\n            accX -= glyph.getMetrics().width;\n            accX -= parenLeftPadding;\n            parenLeft.render(ctx, accX, accY);\n        }\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\nAccidental.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('Vex.Flow.Stem', args);\n}\nexport class Stem extends Element {\n    constructor(options) {\n        super();\n        this.stem_up_y_offset = 0;\n        this.stem_down_y_offset = 0;\n        this.stem_up_y_base_offset = 0;\n        this.stem_down_y_base_offset = 0;\n        // Default notehead x bounds\n        this.x_begin = (options === null || options === void 0 ? void 0 : options.x_begin) || 0;\n        this.x_end = (options === null || options === void 0 ? void 0 : options.x_end) || 0;\n        // Y bounds for top/bottom most notehead\n        this.y_top = (options === null || options === void 0 ? void 0 : options.y_top) || 0;\n        this.y_bottom = (options === null || options === void 0 ? void 0 : options.y_bottom) || 0;\n        // Stem top extension\n        this.stem_extension = (options === null || options === void 0 ? void 0 : options.stem_extension) || 0;\n        // Direction of the stem\n        this.stem_direction = (options === null || options === void 0 ? void 0 : options.stem_direction) || 0;\n        // Flag to override all draw calls\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (options === null || options === void 0 ? void 0 : options.stemletHeight) || 0;\n        // Use to adjust the rendered height without affecting\n        // the results of `.getExtents()`\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    static get CATEGORY() {\n        return Category.Stem;\n    }\n    // Stem directions\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    // Theme\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    setOptions(options) {\n        // Changing where the stem meets the head\n        this.stem_up_y_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_offset) || 0;\n        this.stem_down_y_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_offset) || 0;\n        this.stem_up_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_base_offset) || 0;\n        this.stem_down_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_base_offset) || 0;\n    }\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds(x_begin, x_end) {\n        this.x_begin = x_begin;\n        this.x_end = x_end;\n        return this;\n    }\n    // Set the direction of the stem in relation to the noteheads\n    setDirection(direction) {\n        this.stem_direction = direction;\n    }\n    // Set the extension for the stem, generally for flags or beams\n    setExtension(ext) {\n        this.stem_extension = ext;\n    }\n    getExtension() {\n        return this.stem_extension;\n    }\n    // The the y bounds for the top and bottom noteheads\n    setYBounds(y_top, y_bottom) {\n        this.y_top = y_top;\n        this.y_bottom = y_bottom;\n    }\n    // Gets the entire height for the stem\n    getHeight() {\n        const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n        const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\n        return unsigned_height * this.stem_direction;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents() {\n        const isStemUp = this.stem_direction === Stem.UP;\n        const ys = [this.y_top, this.y_bottom];\n        const stemHeight = Stem.HEIGHT + this.stem_extension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Tables.currentMusicFont().lookupMetric('stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    // Render the stem onto the canvas\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stem_x;\n        let stem_y;\n        const stem_direction = this.stem_direction;\n        let y_base_offset = 0;\n        if (stem_direction === Stem.DOWN) {\n            // Down stems are rendered to the left of the head.\n            stem_x = this.x_begin;\n            stem_y = this.y_top + this.stem_down_y_offset;\n            y_base_offset = this.stem_down_y_base_offset;\n        }\n        else {\n            // Up stems are rendered to the right of the head.\n            stem_x = this.x_end;\n            stem_y = this.y_bottom - this.stem_up_y_offset;\n            y_base_offset = this.stem_up_y_base_offset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n        // The offset from the stem's base which is required fo satisfy the stemlet height\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n        // Draw the stem\n        ctx.save();\n        this.applyStyle(ctx);\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n        ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n        ctx.stroke();\n        this.restoreStyle(ctx);\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`. */\nStem.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font, FontStyle, FontWeight } from './font';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextFormatter.DEBUG)\n        log('Vex.Flow.TextFormatter', args);\n}\n/**\n * Text widths are stored in a cache, so we don't have to recompute widths\n * for the same font + string combination.\n *\n * The cache is first keyed by the font information. The key is of the form:\n *   `${family}-${size}-${weight}-${style}`\n * The second level key is the specific text to be measured.\n *\n * The stored value is the measured width in `em` units.\n *   textWidth == textWidthCache[cacheKey][textToMeasure]\n */\nconst textWidthCache = {};\n/**\n * Applications may register additional fonts via `TextFormatter.registerInfo(info)`.\n * The metrics for those fonts will be made available to the application.\n */\nconst registry = {};\nexport class TextFormatter {\n    /**\n     * Use `TextFormatter.create(...)` to build an instance from information previously\n     * registered via `TextFormatter.registerInfo(info)`.\n     */\n    constructor(formatterInfo) {\n        /** Font family. */\n        this.family = '';\n        /** Specified in `pt` units. */\n        this.size = 14;\n        /** Font metrics are extracted at 1000 upem (units per em). */\n        this.resolution = 1000;\n        /**\n         * For text formatting, we do not require glyph outlines, but instead rely on glyph\n         * bounding box metrics such as:\n         * ```\n         * {\n         *    x_min: 48,\n         *    x_max: 235,\n         *    y_min: -17,\n         *    y_max: 734,\n         *    ha: 751,\n         *    leftSideBearing: 48,\n         *    advanceWidth: 286,\n         *  }\n         * ```\n         */\n        this.glyphs = {};\n        this.serifs = false;\n        this.monospaced = false;\n        this.italic = false;\n        this.bold = false;\n        this.superscriptOffset = 0;\n        this.subscriptOffset = 0;\n        this.maxSizeGlyph = 'H';\n        // This is an internal key used to index the `textWidthCache`.\n        this.cacheKey = '';\n        this.updateParams(formatterInfo);\n    }\n    /**\n     * Return all registered font families.\n     */\n    static getFontFamilies() {\n        const registeredFonts = [];\n        for (const fontFamily in registry) {\n            const formatterInfo = registry[fontFamily];\n            registeredFonts.push(Object.assign({}, formatterInfo));\n        }\n        return registeredFonts;\n    }\n    /**\n     * Call `TextFormatter.registerInfo(info)` to register font information before using this method.\n     *\n     * This method creates a formatter for the font that most closely matches the requested font.\n     * We compare font family, bold, and italic attributes.\n     * This method will return a fallback formatter if there are no matches.\n     */\n    static create(requestedFont = {}) {\n        L('create: ', requestedFont);\n        if (!requestedFont.family) {\n            requestedFont.family = Font.SANS_SERIF;\n        }\n        // TODO: One potential (small) optimization is to cache the TextFormatter object\n        // returned for each font info. We would probably want to clear the cache if\n        // the registry is ever updated.\n        const candidates = [];\n        // The incoming font family is a string of comma-separated font family names.\n        // (e.g., `PetalumaScript, Arial, sans-serif`).\n        const requestedFamilies = requestedFont.family.split(/\\s*,\\s*/);\n        for (const requestedFamily of requestedFamilies) {\n            for (const fontFamily in registry) {\n                // Support cases where the registry contains 'Roboto Slab Medium',\n                // but the requestedFont.family is 'Roboto Slab'.\n                if (fontFamily.startsWith(requestedFamily)) {\n                    candidates.push(registry[fontFamily]);\n                }\n            }\n            if (candidates.length > 0) {\n                break;\n            }\n        }\n        let formatter;\n        if (candidates.length === 0) {\n            // No match, so return a fallback text formatter.\n            formatter = new TextFormatter(Object.values(registry)[0]);\n        }\n        else if (candidates.length === 1) {\n            formatter = new TextFormatter(candidates[0]);\n        }\n        else {\n            const bold = Font.isBold(requestedFont.weight);\n            const italic = Font.isItalic(requestedFont.style);\n            const perfectMatch = candidates.find((f) => f.bold === bold && f.italic === italic);\n            if (perfectMatch) {\n                formatter = new TextFormatter(perfectMatch);\n            }\n            else {\n                const partialMatch = candidates.find((f) => f.italic === italic || f.bold === bold);\n                if (partialMatch) {\n                    formatter = new TextFormatter(partialMatch);\n                }\n                else {\n                    formatter = new TextFormatter(candidates[0]);\n                }\n            }\n        }\n        const fontSize = requestedFont.size;\n        if (typeof fontSize !== 'undefined') {\n            const fontSizeInPt = Font.convertSizeToPointValue(fontSize);\n            formatter.setFontSize(fontSizeInPt);\n        }\n        return formatter;\n    }\n    /**\n     * @param fontFamily used as a key to the font registry.\n     * @returns the same info object that was passed in via `TextFormatter.registerInfo(info)`\n     */\n    static getInfo(fontFamily) {\n        return registry[fontFamily];\n    }\n    /**\n     * Apps may register their own fonts and metrics, and those metrics\n     * will be available to the app for formatting.\n     *\n     * Metrics can be generated from a font file using fontgen_text.js in the tools/fonts directory.\n     * @param info\n     * @param overwrite\n     */\n    static registerInfo(info, overwrite = false) {\n        L('registerInfo: ', info, overwrite);\n        const fontFamily = info.family;\n        const currFontInfo = registry[fontFamily];\n        if (currFontInfo === undefined || overwrite) {\n            registry[fontFamily] = info;\n        }\n    }\n    updateParams(params) {\n        if (params.family)\n            this.family = params.family;\n        if (params.resolution)\n            this.resolution = params.resolution;\n        if (params.glyphs)\n            this.glyphs = params.glyphs;\n        if (params.serifs)\n            this.serifs = params.serifs;\n        if (params.monospaced)\n            this.monospaced = params.monospaced;\n        if (params.italic)\n            this.italic = params.italic;\n        if (params.bold)\n            this.bold = params.bold;\n        if (params.maxSizeGlyph)\n            this.maxSizeGlyph = params.maxSizeGlyph;\n        if (params.superscriptOffset)\n            this.superscriptOffset = params.superscriptOffset;\n        if (params.subscriptOffset)\n            this.subscriptOffset = params.subscriptOffset;\n        this.updateCacheKey();\n    }\n    /** Create a hash with the current font data, so we can cache computed widths. */\n    updateCacheKey() {\n        const family = this.family.replace(/\\s+/g, '_');\n        const size = this.size;\n        const weight = this.bold ? FontWeight.BOLD : FontWeight.NORMAL;\n        const style = this.italic ? FontStyle.ITALIC : FontStyle.NORMAL;\n        // Use the same key format as SVGContext.\n        this.cacheKey = `${family}%${size}%${weight}%${style}`;\n    }\n    /**\n     * The glyphs table is indexed by the character (e.g., 'C', '@').\n     * See: robotoslab_glyphs.ts & petalumascript_glyphs.ts.\n     */\n    getGlyphMetrics(character) {\n        if (this.glyphs[character]) {\n            return this.glyphs[character];\n        }\n        else {\n            return this.glyphs[this.maxSizeGlyph];\n        }\n    }\n    get maxHeight() {\n        const metrics = this.getGlyphMetrics(this.maxSizeGlyph);\n        return (metrics.ha / this.resolution) * this.fontSizeInPixels;\n    }\n    /**\n     * Retrieve the character's advanceWidth as a fraction of an `em` unit.\n     * For the space character ' ' as defined in the:\n     *   petalumascript_glyphs.ts: 250 advanceWidth in the 1000 unitsPerEm font returns 0.25.\n     *   robotoslab_glyphs.ts:     509 advanceWidth in the 2048 unitsPerEm font returns 0.2485.\n     */\n    getWidthForCharacterInEm(c) {\n        var _a;\n        const metrics = this.getGlyphMetrics(c);\n        if (!metrics) {\n            // An arbitrary number, close to the `em` width of the '#' and '5' characters in PetalumaScript.\n            return 0.65;\n        }\n        else {\n            const advanceWidth = (_a = metrics.advanceWidth) !== null && _a !== void 0 ? _a : 0;\n            return advanceWidth / this.resolution;\n        }\n    }\n    /**\n     * Retrieve the total width of `text` in `em` units.\n     */\n    getWidthForTextInEm(text) {\n        const key = this.cacheKey;\n        // Get the cache for this specific font family, size, weight, style combination.\n        // The cache contains previously computed widths for different `text` strings.\n        let cachedWidths = textWidthCache[key];\n        if (cachedWidths === undefined) {\n            cachedWidths = {};\n            textWidthCache[key] = cachedWidths;\n        }\n        let width = cachedWidths[text];\n        if (width === undefined) {\n            width = 0;\n            for (let i = 0; i < text.length; ++i) {\n                width += this.getWidthForCharacterInEm(text[i]);\n            }\n            cachedWidths[text] = width;\n        }\n        return width;\n    }\n    /** The width of the text (in `em`) is scaled by the font size (in `px`). */\n    getWidthForTextInPx(text) {\n        return this.getWidthForTextInEm(text) * this.fontSizeInPixels;\n    }\n    /**\n     * @param size in pt.\n     */\n    setFontSize(size) {\n        this.size = size;\n        // The width cache key depends on the current font size.\n        this.updateCacheKey();\n        return this;\n    }\n    /** `this.size` is specified in points. Convert to pixels. */\n    get fontSizeInPixels() {\n        return this.size * Font.scaleToPxFrom.pt;\n    }\n    getResolution() {\n        return this.resolution;\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.TextFormatter.DEBUG` to `true`. */\nTextFormatter.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TextFormatter } from './textformatter';\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('Vex.Flow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n    /**\n     * Annotations inherit from `Modifier` and is positioned correctly when\n     * in a `ModifierContext`.\n     * Create a new `Annotation` with the string `text`.\n     */\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\n        // this is to support legacy application that may expect this.\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n        this.resetFont();\n        // The default width is calculated from the text.\n        this.setWidth(Tables.textWidth(text));\n    }\n    /** Annotations category string. */\n    static get CATEGORY() {\n        return Category.Annotation;\n    }\n    /** Arrange annotations within a `ModifierContext` */\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            const textFormatter = TextFormatter.create(annotation.textFont);\n            // Text height is expressed in fractional stave spaces.\n            const textLines = (5 + textFormatter.maxHeight) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.render_options.draw_stem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            // Get the text width from the font metrics.\n            const textWidth = textFormatter.getWidthForTextInPx(annotation.text);\n            width = Math.max(width, textWidth);\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.top_text_line + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.top_text_line = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.top_text_line);\n                    state.top_text_line += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.text_line + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.text_line = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.text_line);\n                    state.text_line += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.text_line);\n            }\n        }\n        state.left_shift += width / 2;\n        state.right_shift += width / 2;\n        return true;\n    }\n    /**\n     * Set vertical position of text (above or below stave).\n     * @param just value in `AnnotationVerticalJustify`.\n     */\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    /**\n     * Get horizontal justification.\n     */\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    /**\n     * Set horizontal justification.\n     * @param justification value in `Annotation.Justify`.\n     */\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    /** Render text beside the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const textFormatter = TextFormatter.create(this.textFont);\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        const classString = Object.keys(this.getAttribute('classes')).join(' ');\n        ctx.openGroup(classString, this.getAttribute('id'));\n        ctx.setFont(this.textFont);\n        const text_width = ctx.measureText(this.text).width;\n        const text_height = textFormatter.maxHeight + 2;\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - text_width;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - text_width / 2;\n        } /* CENTER_STEM */\n        else {\n            x = note.getStemX() - text_width / 2;\n        }\n        let stem_ext = {};\n        let spacing = 0;\n        const has_stem = note.hasStem();\n        const stave = note.checkStave();\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        if (has_stem) {\n            stem_ext = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            // Use the largest (lowest) Y value\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE + text_height;\n            if (has_stem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stem_ext.topY + text_height + spacing * this.text_line);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.text_line) - 1;\n            const yb = stave.getYForBottomText(this.text_line);\n            y = yt + (yb - yt) / 2 + text_height / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            y = note.getYs()[0] - (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (has_stem && stemDirection === Stem.UP) {\n                // If the stem is above the stave already, go with default line width vs. actual\n                // since the lines between don't really matter.\n                spacing = stem_ext.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stem_ext.topY - spacing * (this.text_line + 1));\n            }\n        } /* CENTER_STEM */\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        ctx.fillText(this.text, x, y);\n        ctx.closeGroup();\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\nAnnotation.DEBUG = false;\nAnnotation.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n/** Text annotations can be positioned and justified relative to the note. */\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n// MIT License\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('Vex.Flow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\n// This includes both staff and ledger lines\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    // Initially, snap to nearest staff line or space\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nfunction getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nfunction getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nfunction getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            // this amount is larger than the stem-tip offset because we start from\n            // the center of the notehead\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n    /**\n     * Create a new articulation.\n     * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts`\n     */\n    constructor(type) {\n        super();\n        this.type = type;\n        this.position = BELOW;\n        this.render_options = {\n            font_scale: 38,\n        };\n        this.reset();\n    }\n    /** Articulations category string. */\n    static get CATEGORY() {\n        return Category.Articulation;\n    }\n    /**\n     * FIXME:\n     * Most of the complex formatting logic (ie: snapping to space) is\n     * actually done in .render(). But that logic belongs in this method.\n     *\n     * Unfortunately, this isn't possible because, by this point, stem lengths\n     * have not yet been finalized. Finalized stem lengths are required to determine the\n     * initial position of any stem-side articulation.\n     *\n     * This indicates that all objects should have their stave set before being\n     * formatted. It can't be an optional if you want accurate vertical positioning.\n     * Consistently positioned articulations that play nice with other modifiers\n     * won't be possible until we stop relying on render-time formatting.\n     *\n     * Ideally, when this function has completed, the vertical articulation positions\n     * should be ready to render without further adjustment. But the current state\n     * is far from this ideal.\n     */\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), defined(articulation.glyph.getMetrics().height) / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            // Decide if we need to consider beam direction in placement.\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.top_text_line, ABOVE);\n                const curTop = noteLine + state.top_text_line + 0.5;\n                // If articulation must be above stave, add lines between note and stave top\n                if (!articulation.articulation.between_lines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.top_text_line);\n                state.top_text_line += increment;\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.text_line, BELOW);\n                const curBottom = noteLine + state.text_line + 0.5;\n                // if articulation must be below stave, add lines from note to stave bottom\n                if (!articulation.articulation.between_lines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.text_line);\n                state.text_line += increment;\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        state.left_shift += width / 2;\n        state.right_shift += width / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        const articulation = defined(this.articulation, 'ArgumentError', `Articulation not found: ${this.type}`);\n        const code = (this.position === ABOVE ? articulation.aboveCode : articulation.belowCode) || articulation.code;\n        this.glyph = new Glyph(code !== null && code !== void 0 ? code : '', this.render_options.font_scale);\n        this.setWidth(defined(this.glyph.getMetrics().width));\n    }\n    /** Render articulation in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, glyph, text_line: textLine } = this;\n        const canSitBetweenLines = this.articulation.between_lines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        // Articulations are centered over/under the note head.\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        const padding = Tables.currentMusicFont().lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n        let y = {\n            [ABOVE]: () => {\n                glyph.setOrigin(0.5, 1);\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                glyph.setOrigin(0.5, 0);\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                glyph.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        glyph.render(ctx, x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2021.\n// MIT License\nimport { Category } from './typeguard';\nexport class RenderContext {\n    static get CATEGORY() {\n        return Category.RenderContext;\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n    /**\n     * This is kept for backwards compatibility with 3.0.9.\n     * @deprecated use `setFont(...)` instead since it now supports CSS font shorthand.\n     */\n    setRawFont(f) {\n        this.setFont(f);\n        return this;\n    }\n}\n/**\n * Draw a tiny dot marker on the specified context. A great debugging aid.\n * @param ctx context\n * @param x dot x coordinate\n * @param y dot y coordinate\n * @param color\n */\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport class Tickable extends Element {\n    constructor() {\n        super();\n        this._preFormatted = false;\n        this._postFormatted = false;\n        // These properties represent the duration of\n        // this tickable element.\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\n        this.intrinsicTicks = 0; // Floating point value of ticks\n        this.tickMultiplier = new Fraction(1, 1);\n        // Formatter metrics\n        this.width = 0;\n        this.x_shift = 0; // Shift from tick context\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.align_center = false;\n        this.center_x_shift = 0; // Shift from tick context if center aligned\n        // This flag tells the formatter to ignore this tickable during\n        // formatting and justification. It is set by tickables such as BarNote.\n        this.ignore_ticks = false;\n        // This is a space for an external formatting class or function to maintain\n        // metrics.\n        this.formatterMetrics = {\n            // The freedom of a tickable is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n            // The simplified rational duration of this tick as a string. It can be\n            // used as an index to a map or hashtable.\n            duration: '',\n            // The number of formatting iterations undergone.\n            iterations: 0,\n            // The space in pixels allocated by this formatter, along with the mean space\n            // for tickables of this duration, and the deviation from the mean.\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    static get CATEGORY() {\n        return Category.Tickable;\n    }\n    /** Reset the Tickable, this function will be overloaded. */\n    reset() {\n        return this;\n    }\n    /** Return the ticks. */\n    getTicks() {\n        return this.ticks;\n    }\n    /** Check if it ignores the ticks. */\n    shouldIgnoreTicks() {\n        return this.ignore_ticks;\n    }\n    /** Ignore the ticks. */\n    setIgnoreTicks(flag) {\n        this.ignore_ticks = flag;\n        return this;\n    }\n    /** Set width of note. Used by the formatter for positioning. */\n    setWidth(width) {\n        this.width = width;\n    }\n    /** Get width of note. Used by the formatter for positioning. */\n    getWidth() {\n        if (!this._preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    /** Displace note by `x` pixels. Used by the formatter. */\n    setXShift(x) {\n        this.x_shift = x;\n        return this;\n    }\n    /** Get the `x` displaced pixels of the note. */\n    getXShift() {\n        return this.x_shift;\n    }\n    /** Get `x` position of this tick context. */\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.x_shift;\n    }\n    /** Return the formatterMetrics. */\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /** Return the center `x` shift. */\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.center_x_shift;\n        }\n        return 0;\n    }\n    /** Set the center `x` shift. */\n    setCenterXShift(centerXShift) {\n        this.center_x_shift = centerXShift;\n        return this;\n    }\n    // Check if tickable is center aligned. */\n    isCenterAligned() {\n        return this.align_center;\n    }\n    // Set/unset center alignment. */\n    setCenterAlignment(align_center) {\n        this.align_center = align_center;\n        return this;\n    }\n    /**\n     * Return the associated voice. Every tickable must be associated with a voice.\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\n     */\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    /** Set the associated voice. */\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    /** Get the tuplet. */\n    getTuplet() {\n        return this.tuplet;\n    }\n    /** Return the intrinsic ticks. */\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    /**\n     * Reset the specific Tuplet if this is not provided, all tuplets are reset.\n     * Remove any prior tuplets from the tick calculation and\n     * reset the intrinsic tick value.\n     */\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                // Revert old multiplier by inverting numerator & denom.:\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            // Revert old multiplier by inverting numerator & denom.:\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    /** Attach to new tuplet. */\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    /**\n     * Add self to the provided ModifierContext `mc`.\n     * If this tickable has modifiers, set modifierContext.\n     * @returns this\n     */\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        this._preFormatted = false;\n        return this;\n    }\n    /**\n     * Optional, if tickable has modifiers, associate a Modifier.\n     * @param mod the modifier\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        this._preFormatted = false;\n        return this;\n    }\n    /** Get the list of associated modifiers. */\n    getModifiers() {\n        return this.modifiers;\n    }\n    /** Set the Tick Context. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this._preFormatted = false;\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    /** Preformat the Tickable. */\n    preFormat() {\n        if (this._preFormatted)\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    /** Set preformatted status. */\n    set preFormatted(value) {\n        this._preFormatted = value;\n    }\n    get preFormatted() {\n        return this._preFormatted;\n    }\n    /** Postformat the Tickable. */\n    postFormat() {\n        if (this._postFormatted)\n            return this;\n        this._postFormatted = true;\n        return this;\n    }\n    /** Set postformatted status. */\n    set postFormatted(value) {\n        this._postFormatted = value;\n    }\n    get postFormatted() {\n        return this._postFormatted;\n    }\n    /** Return the intrinsic ticks. */\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    /** Set the intrinsic ticks. */\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Get the tick multiplier. */\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    /** Apply a tick multiplier. */\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Set the duration. */\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    /** Attach this note to a modifier context. */\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font } from './font';\nimport { drawDot } from './rendercontext';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport class Note extends Tickable {\n    /**\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n     * positioning and layout.\n     *\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\n     */\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        /** Parses `noteStruct` and get note properties. */\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        // Set note properties from parameters.\n        this.keys = noteStruct.keys || [];\n        // per-pitch properties\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.duration_override) {\n            // Custom duration\n            this.setDuration(noteStruct.duration_override);\n        }\n        else {\n            // Default duration\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        // Get the glyph code for this note from the font.\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Tables.getGlyphProps(this.duration, t));\n        // Note to play for audio players.\n        this.playNote = undefined;\n        // Positioning contexts used by the Formatter.\n        this.ignore_ticks = false;\n        // Positioning variables\n        this.width = 0; // Width in pixels calculated after preFormat\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n        this.x_shift = 0; // X shift from tick context X\n        this.ys = []; // list of y coordinates for each note\n        // we need to hold on to these for ties and beams.\n        if (noteStruct.align_center) {\n            this.setCenterAlignment(noteStruct.align_center);\n        }\n        // The render surface.\n        this.render_options = {\n            annotation_spacing: 5,\n            glyph_font_scale: 1,\n            stroke_px: 1,\n            scale: 1,\n            font: '',\n            y_shift: 0,\n        };\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Note;\n    }\n    /** Debug helper. Displays various note metrics for the given note. */\n    static plotMetrics(ctx, note, yPos) {\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        // Preserve backwards-compatibility\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        // If specified type is invalid, return undefined.\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        // If no type specified, check duration or custom types\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            // If we have keys, try and check if we've got a custom glyph\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    // We have a custom glyph specified after the note eg. /X2\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        // Calculate the tick duration of the note\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        // Are there any dots?\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        // Add ticks as necessary depending on the numbr of dots\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    /**\n     * Get the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    getPlayNote() {\n        return this.playNote;\n    }\n    /**\n     * Set the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    /**\n     * @returns true if this note is a type of rest.\n     *\n     * Rests don't have pitches, but take up space in the score.\n     * Subclasses should override this default implementation.\n     */\n    isRest() {\n        return false;\n    }\n    /** Add stroke. */\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the target stave. */\n    getStave() {\n        return this.stave;\n    }\n    /** Check and get the target stave. */\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /** Set the target stave. */\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    /** Get spacing to the left of the notes. */\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    /** Get spacing to the right of the notes. */\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    /** Set spacing to the left of the notes. */\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    /** Set spacing to the right of the notes. */\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n    shouldIgnoreTicks() {\n        return this.ignore_ticks;\n    }\n    /** Get the stave line number for the note. */\n    // eslint-disable-next-line\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    /** Get the stave line number for rest. */\n    getLineForRest() {\n        return 0;\n    }\n    /** Get the glyph associated with this note. */\n    // eslint-disable-next-line\n    getGlyph() {\n        return this.glyph;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        // TODO: FIXME (multiple potential values for this.glyph)\n        if (this.glyph) {\n            if (this.glyph.getMetrics) {\n                return this.glyph.getMetrics().width;\n            }\n            else if (this.glyph.getWidth) {\n                return this.glyph.getWidth(this.render_options.glyph_font_scale);\n            }\n        }\n        return 0;\n    }\n    /**\n     * Set Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    /**\n     * Get Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    /**\n     * Get the Y position of the space above the stave onto which text can\n     * be rendered.\n     */\n    getYForTopText(text_line) {\n        return this.checkStave().getYForTopText(text_line);\n    }\n    /** Return the voice that this note belongs in. */\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    /** Attach this note to `voice`. */\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the `TickContext` for this note. */\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    /** Set the `TickContext` for this note. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Accessor to duration. */\n    getDuration() {\n        return this.duration;\n    }\n    /** Accessor to isDotted. */\n    isDotted() {\n        return this.getModifiersByType('Dot').length > 0;\n    }\n    /** Accessor to hasStem. */\n    hasStem() {\n        return false;\n    }\n    /** Accessor to note type. */\n    getNoteType() {\n        return this.noteType;\n    }\n    /** Get the beam. */\n    getBeam() {\n        return this.beam;\n    }\n    /** Check and get the beam. */\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    /** Check it has a beam. */\n    hasBeam() {\n        return this.beam != undefined;\n    }\n    /** Set the beam. */\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    /**\n     * Attach a modifier to this note.\n     * @param modifier the Modifier to add.\n     * @param index of the key to modify.\n     * @returns this\n     */\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        // Backwards compatibility with 3.0.9.\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            // eslint-disable-next-line\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        // Some versions of VexFlow had the two parameters reversed.\n        // Check here and throw an error if the argument types are not correct.\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    // Get all modifiers of a specific type in the `ModifierContext`\n    getModifiersByType(type) {\n        return this.checkModifierContext().getMembers(type);\n    }\n    /** Get the coordinates for where modifiers begin. */\n    // eslint-disable-next-line\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() : 0;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        if (this.checkModifierContext().getMembers('Parenthesis').length !== 0)\n            px += Tables.currentMusicFont().lookupMetric('parenthesis.default.width');\n        return px;\n    }\n    /** Get the metrics for this note. */\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().left_shift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().right_shift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx - // subtract left modifiers\n            modRightPx - // subtract right modifiers\n            this.leftDisplacedHeadPx - // subtract left displaced head\n            this.rightDisplacedHeadPx; // subtract right displaced head\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            // Modifier spacing.\n            modLeftPx,\n            modRightPx,\n            // Displaced note head on left or right.\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    /**\n     * Get the absolute `X` position of this note's tick context. This\n     * excludes x_shift, so you'll need to factor it in if you're\n     * looking for the post-formatted x-position.\n     */\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        // Position note to left edge of tick context.\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Tables.currentMusicFont().lookupMetric('stave.padding');\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    /** Get the direction of the stem. */\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the top and bottom `y` values of the stem. */\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the `x` coordinate to the right of the note. */\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const note_glyph_width = this.glyph.getWidth();\n        tieStartX += note_glyph_width / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    /** Get the `x` coordinate to the left of the note. */\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const note_glyph_width = this.glyph.getWidth();\n        tieEndX += note_glyph_width / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    // Get the pitches in the note\n    getKeys() {\n        return this.keys;\n    }\n    // Get the properties for all the keys in the note\n    getKeyProps() {\n        return this.keyProps;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    constructor() {\n        super();\n        this.width = 0;\n        this.x = 0;\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    static get CATEGORY() {\n        return Category.StaveModifier;\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    placeGlyphOnLine(glyph, stave, line, customShift = 0) {\n        glyph.setYShift(stave.getYForLine(line !== null && line !== void 0 ? line : 0) - stave.getYForGlyphs() + customShift);\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    static get CATEGORY() {\n        return Category.Barline;\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    // Draw barlines\n    draw(stave) {\n        stave.checkContext();\n        this.setRendered();\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                // If the barline is shifted over (in front of clef/time/key)\n                // Draw vertical bar at the beginning.\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n    }\n    drawVerticalBar(stave, x, double_bar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (double_bar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let x_shift = 3;\n        if (!begin) {\n            x_shift = -5;\n        }\n        staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dot_radius = 2;\n        // Shift dots left or right\n        if (begin) {\n            x_shift += 4;\n        }\n        else {\n            x_shift -= 4;\n        }\n        const dot_x = x + x_shift + dot_radius / 2;\n        // calculate the y offset based on number of stave lines\n        let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dot_y = topY + y_offset + dot_radius / 2;\n        // draw the top repeat dot\n        staveCtx.beginPath();\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        // draw the bottom repeat dot\n        dot_y += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author: Aaron (@AaronDavidNewman)\n//\n// This implements chord symbols above/below a chord.\n// Chord symbols are modifiers that can be attached to notes.\n// They can contain multiple 'blocks' which represent text or\n// glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { TextFormatter } from './textformatter';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('Vex.Flow.ChordSymbol', args);\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolTypes;\n(function (SymbolTypes) {\n    SymbolTypes[SymbolTypes[\"GLYPH\"] = 1] = \"GLYPH\";\n    SymbolTypes[SymbolTypes[\"TEXT\"] = 2] = \"TEXT\";\n    SymbolTypes[SymbolTypes[\"LINE\"] = 3] = \"LINE\";\n})(SymbolTypes || (SymbolTypes = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.useKerning = true;\n        this.reportWidth = true;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.ChordSymbol;\n    }\n    static get superSubRatio() {\n        return ChordSymbol.metrics.global.superSubRatio;\n    }\n    /** Currently unused: Globally turn off text formatting, if the built-in formatting does not work for your font. */\n    static set NO_TEXT_FORMAT(val) {\n        ChordSymbol.noFormat = val;\n    }\n    static get NO_TEXT_FORMAT() {\n        return ChordSymbol.noFormat;\n    }\n    // eslint-disable-next-line\n    static getMetricForGlyph(glyphCode) {\n        if (ChordSymbol.metrics[glyphCode]) {\n            return ChordSymbol.metrics[glyphCode];\n        }\n        return undefined;\n    }\n    static get engravingFontResolution() {\n        return Tables.currentMusicFont().getResolution();\n    }\n    static get spacingBetweenBlocks() {\n        return ChordSymbol.metrics.global.spacing / ChordSymbol.engravingFontResolution;\n    }\n    static getWidthForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0.65; // probably should do something here.\n        }\n        return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n    }\n    static getYShiftForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0;\n        }\n        return metric.yOffset / ChordSymbol.engravingFontResolution;\n    }\n    static getXShiftForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0;\n        }\n        return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n    }\n    static get superscriptOffset() {\n        return ChordSymbol.metrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get subscriptOffset() {\n        return ChordSymbol.metrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get kerningOffset() {\n        return ChordSymbol.metrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n    }\n    // eslint-disable-next-line\n    static get metrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.chordSymbol;\n    }\n    static get lowerKerningText() {\n        // For example, see: `bravura_metrics.ts`\n        // BravuraMetrics.glyphs.chordSymbol.global.lowerKerningText, which returns an array of letters.\n        // ['D', 'F', 'P', 'T', 'V', 'Y']\n        return ChordSymbol.metrics.global.lowerKerningText;\n    }\n    static get upperKerningText() {\n        return ChordSymbol.metrics.global.upperKerningText;\n    }\n    static isSuperscript(block) {\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    static isSubscript(block) {\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n    /**\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n     * Estimate how many lines above/below the staff we need.\n     */\n    static format(symbols, state) {\n        var _a;\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let nonSuperWidth = 0;\n        const reportedWidths = [];\n        for (const symbol of symbols) {\n            const fontSize = Font.convertSizeToPointValue((_a = symbol.textFont) === null || _a === void 0 ? void 0 : _a.size);\n            const fontAdj = Font.scaleSize(fontSize, 0.05);\n            const glyphAdj = fontAdj * 2;\n            let lineSpaces = 1;\n            let vAlign = false;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = ChordSymbol.isSuperscript(block);\n                const sub = ChordSymbol.isSubscript(block);\n                const superSubScale = sup || sub ? ChordSymbol.superSubRatio : 1;\n                const adj = block.symbolType === SymbolTypes.GLYPH ? glyphAdj * superSubScale : fontAdj * superSubScale;\n                // If there are super/subscripts, they extend beyond the line so\n                // assume they take up 2 lines\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                // If there is a symbol-specific offset, add it but consider font\n                // size since font and glyphs will be interspersed.\n                const fontSize = symbol.textFormatter.fontSizeInPixels;\n                const superSubFontSize = fontSize * superSubScale;\n                if (block.symbolType === SymbolTypes.GLYPH && block.glyph !== undefined) {\n                    block.width = ChordSymbol.getWidthForGlyph(block.glyph) * superSubFontSize;\n                    block.yShift += ChordSymbol.getYShiftForGlyph(block.glyph) * superSubFontSize;\n                    block.xShift += ChordSymbol.getXShiftForGlyph(block.glyph) * superSubFontSize;\n                    block.glyph.scale = block.glyph.scale * adj;\n                }\n                else if (block.symbolType === SymbolTypes.TEXT) {\n                    block.width = block.width * superSubFontSize;\n                    block.yShift += symbol.getYOffsetForText(block.text) * adj;\n                }\n                if (block.symbolType === SymbolTypes.GLYPH &&\n                    block.glyph !== undefined &&\n                    block.glyph.code === ChordSymbol.glyphs.over.code) {\n                    lineSpaces = 2;\n                }\n                block.width += ChordSymbol.spacingBetweenBlocks * fontSize * superSubScale;\n                // If a subscript immediately  follows a superscript block, try to\n                // overlay them.\n                if (sup && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (!ChordSymbol.isSuperscript(prev)) {\n                        nonSuperWidth = width;\n                    }\n                }\n                if (sub && nonSuperWidth > 0) {\n                    vAlign = true;\n                    // slide the symbol over so it lines up with superscript\n                    block.xShift = block.xShift + (nonSuperWidth - width);\n                    width = nonSuperWidth;\n                    nonSuperWidth = 0;\n                    // If we have vertically lined up, turn kerning off.\n                    symbol.setEnableKerning(false);\n                }\n                if (!sup && !sub) {\n                    nonSuperWidth = 0;\n                }\n                block.vAlign = vAlign;\n                width += block.width;\n            }\n            // make kerning adjustments after computing super/subscripts\n            symbol.updateKerningAdjustments();\n            symbol.updateOverBarAdjustments();\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.top_text_line);\n                state.top_text_line += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.text_line + 1);\n                state.text_line += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth()) {\n                reportedWidths.push(width);\n            }\n            else {\n                reportedWidths.push(0);\n            }\n        }\n        width = reportedWidths.reduce((a, b) => a + b, 0);\n        state.left_shift += width / 2;\n        state.right_shift += width / 2;\n        return true;\n    }\n    /**\n     * Default text font.\n     * Choose a font family that works well with the current music engraving font.\n     * @override `Element.TEXT_FONT`.\n     */\n    static get TEXT_FONT() {\n        let family = 'Roboto Slab, Times, serif';\n        if (Tables.currentMusicFont().getName() === 'Petaluma') {\n            // Fixes Issue #1180\n            family = 'PetalumaScript, Arial, sans-serif';\n        }\n        return {\n            family,\n            size: 12,\n            weight: FontWeight.NORMAL,\n            style: FontStyle.NORMAL,\n        };\n    }\n    /**\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\n     */\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * this.textFormatter.fontSizeInPixels;\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * this.textFormatter.fontSizeInPixels;\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    updateOverBarAdjustments() {\n        const barIndex = this.symbolBlocks.findIndex(({ symbolType, glyph }) => symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash');\n        if (barIndex < 0) {\n            return;\n        }\n        const bar = this.symbolBlocks[barIndex];\n        const xoff = bar.width / 4;\n        const yoff = 0.25 * this.textFormatter.fontSizeInPixels;\n        let symIndex = 0;\n        for (symIndex === 0; symIndex < barIndex; ++symIndex) {\n            const symbol = this.symbolBlocks[symIndex];\n            symbol.xShift = symbol.xShift + xoff;\n            symbol.yShift = symbol.yShift - yoff;\n        }\n        for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {\n            const symbol = this.symbolBlocks[symIndex];\n            symbol.xShift = symbol.xShift - xoff;\n            symbol.yShift = symbol.yShift + yoff;\n        }\n    }\n    updateKerningAdjustments() {\n        let accum = 0;\n        for (let j = 0; j < this.symbolBlocks.length; ++j) {\n            const symbol = this.symbolBlocks[j];\n            accum += this.getKerningAdjustment(j);\n            symbol.xShift += accum;\n        }\n    }\n    /** Do some basic kerning so that letter chords like 'A' don't have the extensions hanging off to the right. */\n    getKerningAdjustment(j) {\n        if (!this.useKerning) {\n            return 0;\n        }\n        const currSymbol = this.symbolBlocks[j];\n        const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\n        let adjustment = 0;\n        // Move things into the '/' over bar\n        if (currSymbol.symbolType === SymbolTypes.GLYPH &&\n            currSymbol.glyph !== undefined &&\n            currSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\n            adjustment += currSymbol.glyph.metrics.x_shift;\n        }\n        if (prevSymbol !== undefined &&\n            prevSymbol.symbolType === SymbolTypes.GLYPH &&\n            prevSymbol.glyph !== undefined &&\n            prevSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\n            adjustment += prevSymbol.glyph.metrics.x_shift;\n        }\n        // For superscripts that follow a letter without much top part, move it to the left slightly\n        let preKernUpper = false;\n        let preKernLower = false;\n        if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {\n            preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n            preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n        }\n        const kerningOffsetPixels = ChordSymbol.kerningOffset * this.textFormatter.fontSizeInPixels;\n        // TODO: adjust kern for font size.\n        // Where should this constant live?\n        if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {\n            adjustment += kerningOffsetPixels;\n        }\n        if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {\n            if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {\n                adjustment += kerningOffsetPixels / 2;\n            }\n            if (ChordSymbol.upperKerningText.some((xx) => xx === (prevSymbol === null || prevSymbol === void 0 ? void 0 : prevSymbol.text[prevSymbol.text.length - 1]))) {\n                adjustment += kerningOffsetPixels / 2;\n            }\n        }\n        return adjustment;\n    }\n    /**\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n     * Each block can have its own vertical orientation.\n     */\n    // eslint-disable-next-line\n    getSymbolBlock(params = {}) {\n        var _a, _b, _c;\n        const symbolType = (_a = params.symbolType) !== null && _a !== void 0 ? _a : SymbolTypes.TEXT;\n        const symbolBlock = {\n            text: (_b = params.text) !== null && _b !== void 0 ? _b : '',\n            symbolType,\n            symbolModifier: (_c = params.symbolModifier) !== null && _c !== void 0 ? _c : SymbolModifiers.NONE,\n            xShift: 0,\n            yShift: 0,\n            vAlign: false,\n            width: 0,\n        };\n        // Note: symbol widths are resolution and font-independent.\n        // We convert to pixel values when we know what the font is.\n        if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {\n            const glyphArgs = ChordSymbol.glyphs[params.glyph];\n            const glyphPoints = 20;\n            symbolBlock.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n            // Beware: glyph.metrics is not the same as glyph.getMetrics() !\n            // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\n            // rv.width = rv.glyph.getMetrics().width;\n            // don't set yShift here, b/c we need to do it at formatting time after the font is set.\n        }\n        else if (symbolType === SymbolTypes.TEXT) {\n            symbolBlock.width = this.textFormatter.getWidthForTextInEm(symbolBlock.text);\n        }\n        else if (symbolType === SymbolTypes.LINE) {\n            symbolBlock.width = params.width;\n        }\n        return symbolBlock;\n    }\n    /** Add a symbol to this chord, could be text, glyph or line. */\n    // eslint-disable-next-line\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    // ### Convenience functions for creating different types of chord symbol parts.\n    /** Add a text block. */\n    // eslint-disable-next-line\n    addText(text, parameters = {}) {\n        const symbolType = SymbolTypes.TEXT;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text, symbolType }));\n    }\n    /** Add a text block with superscript modifier. */\n    addTextSuperscript(text) {\n        const symbolType = SymbolTypes.TEXT;\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\n    }\n    /** Add a text block with subscript modifier. */\n    addTextSubscript(text) {\n        const symbolType = SymbolTypes.TEXT;\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\n    }\n    /** Add a glyph block with superscript modifier. */\n    addGlyphSuperscript(glyph) {\n        const symbolType = SymbolTypes.GLYPH;\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n    }\n    /** Add a glyph block. */\n    // eslint-disable-next-line\n    addGlyph(glyph, params = {}) {\n        const symbolType = SymbolTypes.GLYPH;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { glyph, symbolType }));\n    }\n    /**\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n     */\n    // eslint-disable-next-line\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            if (ChordSymbol.glyphs[char]) {\n                if (str.length > 0) {\n                    this.addText(str, params);\n                    str = '';\n                }\n                this.addGlyph(char, params);\n            }\n            else {\n                // Collect consecutive characters with no glyphs.\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n    // eslint-disable-next-line\n    addLine(width, params = {}) {\n        const symbolType = SymbolTypes.LINE;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { symbolType, width }));\n    }\n    /**\n     * Set the chord symbol's font family, size, weight, style (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     *\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     *\n     * @override See: Element.\n     */\n    setFont(f, size, weight, style) {\n        super.setFont(f, size, weight, style);\n        this.textFormatter = TextFormatter.create(this.textFont);\n        return this;\n    }\n    setEnableKerning(val) {\n        this.useKerning = val;\n        return this;\n    }\n    /** Set vertical position of text (above or below stave). */\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    /** Set horizontal justification. */\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    getWidth() {\n        let width = 0;\n        this.symbolBlocks.forEach((symbol) => {\n            width += symbol.vAlign ? 0 : symbol.width;\n        });\n        return width;\n    }\n    getYOffsetForText(text) {\n        var _a;\n        let acc = 0;\n        let i = 0;\n        for (i = 0; i < text.length; ++i) {\n            const metrics = this.textFormatter.getGlyphMetrics(text[i]);\n            if (metrics) {\n                const yMax = (_a = metrics.y_max) !== null && _a !== void 0 ? _a : 0;\n                acc = yMax < acc ? yMax : acc;\n            }\n        }\n        const resolution = this.textFormatter.getResolution();\n        return i > 0 ? -1 * (acc / resolution) : 0;\n    }\n    /** Render text and glyphs above/below the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        const classString = Object.keys(this.getAttribute('classes')).join(' ');\n        ctx.openGroup(classString, this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.textFont);\n        let y;\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\n            y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stem_ext = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n                y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n            }\n        }\n        else {\n            // (this.vertical === VerticalJustify.TOP)\n            y = Math.min(stave.getYForTopText(this.text_line), note.getYs()[0] - 10);\n            if (hasStem) {\n                const stem_ext = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            // HorizontalJustify.CENTER_STEM\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', this.textFormatter, x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            const isSuper = ChordSymbol.isSuperscript(symbol);\n            const isSub = ChordSymbol.isSubscript(symbol);\n            let curY = y;\n            L('shift was ', symbol.xShift, symbol.yShift);\n            L('curY pre sub ', curY);\n            if (isSuper) {\n                curY += this.superscriptOffset;\n            }\n            if (isSub) {\n                curY += this.subscriptOffset;\n            }\n            L('curY sup/sub ', curY);\n            if (symbol.symbolType === SymbolTypes.TEXT) {\n                if (isSuper || isSub) {\n                    ctx.save();\n                    if (this.textFont) {\n                        const { family, size, weight, style } = this.textFont;\n                        const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n                        ctx.setFont(family, smallerFontSize, weight, style);\n                    }\n                }\n                // TODO???\n                // We estimate the text width, fill it in with the empirical value so the formatting is even.\n                // const textDim = ctx.measureText(symbol.text);\n                // symbol.width = textDim.width;\n                L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n                ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n                if (isSuper || isSub) {\n                    ctx.restore();\n                }\n            }\n            else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {\n                curY += symbol.yShift;\n                L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n                symbol.glyph.render(ctx, x + symbol.xShift, curY);\n            }\n            else if (symbol.symbolType === SymbolTypes.LINE) {\n                L('Rendering Line : ', symbol.width, x, curY);\n                ctx.beginPath();\n                ctx.setLineWidth(1); // ?\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + symbol.width, curY);\n                ctx.stroke();\n            }\n            x += symbol.width;\n            if (symbol.vAlign) {\n                x += symbol.xShift;\n            }\n        });\n        ctx.closeGroup();\n        ctx.restore();\n    }\n}\nChordSymbol.DEBUG = false;\n// Chord symbols can be positioned and justified relative to the note.\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\n// Glyph data\nChordSymbol.glyphs = {\n    diminished: {\n        code: 'csymDiminished',\n    },\n    dim: {\n        code: 'csymDiminished',\n    },\n    halfDiminished: {\n        code: 'csymHalfDiminished',\n    },\n    '+': {\n        code: 'csymAugmented',\n    },\n    augmented: {\n        code: 'csymAugmented',\n    },\n    majorSeventh: {\n        code: 'csymMajorSeventh',\n    },\n    minor: {\n        code: 'csymMinor',\n    },\n    '-': {\n        code: 'csymMinor',\n    },\n    '(': {\n        code: 'csymParensLeftTall',\n    },\n    leftParen: {\n        code: 'csymParensLeftTall',\n    },\n    ')': {\n        code: 'csymParensRightTall',\n    },\n    rightParen: {\n        code: 'csymParensRightTall',\n    },\n    leftBracket: {\n        code: 'csymBracketLeftTall',\n    },\n    rightBracket: {\n        code: 'csymBracketRightTall',\n    },\n    leftParenTall: {\n        code: 'csymParensLeftVeryTall',\n    },\n    rightParenTall: {\n        code: 'csymParensRightVeryTall',\n    },\n    '/': {\n        code: 'csymDiagonalArrangementSlash',\n    },\n    over: {\n        code: 'csymDiagonalArrangementSlash',\n    },\n    '#': {\n        code: 'accidentalSharp',\n    },\n    b: {\n        code: 'accidentalFlat',\n    },\n};\nChordSymbol.symbolTypes = SymbolTypes;\nChordSymbol.symbolModifiers = SymbolModifiers;\n/** Currently unused. */\nChordSymbol.noFormat = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n    constructor(time, options) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = Object.assign({ softmaxFactor: 100 }, options);\n        // Convert the `time` string into a VoiceTime object if necessary.\n        let voiceTime;\n        if (typeof time === 'string') {\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    num_beats: parseInt(match[1]),\n                    beat_value: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        // Default time signature is 4/4.\n        this.time = Object.assign({ num_beats: 4, beat_value: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        // Recalculate total ticks.\n        this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    static get CATEGORY() {\n        return Category.Voice;\n    }\n    /**\n     * Modes allow the addition of ticks in three different ways:\n     * - STRICT: This is the default. Ticks must fill the voice.\n     * - SOFT: Ticks can be added without restrictions.\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n     */\n    static get Mode() {\n        return VoiceMode;\n    }\n    /** Get the total ticks in the voice. */\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    /** Get the total ticks used in the voice by all the tickables. */\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    /** Get the largest width of all the tickables. */\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    /** Get the tick count for the shortest tickable */\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    /** Get the tickables in the voice. */\n    getTickables() {\n        return this.tickables;\n    }\n    /** Get the voice mode. */\n    getMode() {\n        return this.mode;\n    }\n    /**\n     * Set the voice mode.\n     * @param mode value from `VoiceMode`\n     */\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    /** Get the resolution multiplier for the voice. */\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    /** Get the actual tick resolution for the voice. */\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    /** Set the voice's stave. */\n    setStave(stave) {\n        this.stave = stave;\n        // Reset the bounding box so we can reformat.\n        this.boundingBox = undefined;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    /** Get the bounding box for the voice. */\n    getBoundingBox() {\n        if (!this.boundingBox) {\n            const stave = this.checkStave();\n            let boundingBox = undefined;\n            for (let i = 0; i < this.tickables.length; ++i) {\n                const tickable = this.tickables[i];\n                tickable.setStave(stave);\n                const bb = tickable.getBoundingBox();\n                if (bb) {\n                    boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n                }\n            }\n            this.boundingBox = boundingBox;\n        }\n        return this.boundingBox;\n    }\n    /** Set the voice mode to strict or soft. */\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    /** Determine if the voice is complete according to the voice mode. */\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * We use softmax to layout the tickables proportional to the exponent of\n     * their duration. The softmax factor is used to determine the 'linearness' of\n     * the layout.\n     *\n     * The softmax of all the tickables in this voice should sum to 1.\n     */\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        return this;\n    }\n    /**\n     * Calculate the sum of the exponents of all the ticks in this voice to use\n     * as the denominator of softmax.\n     */\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\n        return this.expTicksUsed;\n    }\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    /** Add a tickable to the voice. */\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            // Update the total ticks for this line.\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0; // reset\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            // Track the smallest tickable for formatting.\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            // Expand total ticks using denominator from ticks used.\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        // Add the tickable to the line.\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    /** Add an array of tickables to the voice. */\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    /** Preformat the voice by applying the voice's stave to each note. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /**\n     * Render the voice onto the canvas `context` and an optional `stave`.\n     * If `stave` is omitted, it is expected that the notes have staves\n     * already set.\n     *\n     * This method also calculates the voice's boundingBox while drawing\n     * the notes. Note the similarities with this.getBoundingBox().\n     */\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        let boundingBox = undefined;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            // Set the stave if provided.\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            const bb = tickable.getBoundingBox();\n            if (bb) {\n                boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n            }\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n        this.boundingBox = boundingBox;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('Vex.Flow.BarNote', args);\n}\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        // Tell the formatter that bar notes have no duration.\n        this.ignore_ticks = true;\n        this.setType(type);\n    }\n    static get CATEGORY() {\n        return Category.BarNote;\n    }\n    /** Get the type of bar note.*/\n    getType() {\n        return this.type;\n    }\n    /** Set the type of bar note. */\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        // Set width to width of relevant `Barline`.\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    /** Overridden to ignore. */\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render note to stave. */\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        if (this.style)\n            this.applyStyle(ctx);\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.draw(this.checkStave());\n        if (this.style)\n            this.restoreStyle(ctx);\n        this.setRendered();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\nBarNote.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { TextFormatter } from './textformatter';\nimport { Category, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n    /**\n     * Example of a phrase:\n     * ```\n     *    [{\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"half\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"1 1/2\"\n     *     width: 8;\n     *   }]\n     * ```\n     * @param text text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n     * @param release if true, render a release. (DEPRECATED)\n     * @param phrase if set, ignore \"text\" and \"release\", and use the more sophisticated phrase specified\n     */\n    constructor(text, release = false, phrase) {\n        super();\n        this.text = text;\n        this.x_shift = 0;\n        this.release = release;\n        this.tap = '';\n        this.resetFont();\n        this.render_options = {\n            line_width: 1.5,\n            line_style: '#777777',\n            bend_width: 8,\n            release_width: 8,\n        };\n        if (phrase) {\n            this.phrase = phrase;\n        }\n        else {\n            // Backward compatibility\n            this.phrase = [{ type: Bend.UP, text: this.text }];\n            if (this.release)\n                this.phrase.push({ type: Bend.DOWN, text: '' });\n        }\n        this.updateWidth();\n    }\n    static get CATEGORY() {\n        return Category.Bend;\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    // Arrange bends in `ModifierContext`\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let last_width = 0;\n        // Format Bends\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.top_text_line < stringPos) {\n                    state.top_text_line = stringPos;\n                }\n            }\n            bend.setXShift(last_width);\n            last_width = bend.getWidth();\n            bend.setTextLine(state.top_text_line);\n        }\n        state.right_shift += last_width;\n        state.top_text_line += 1;\n        return true;\n    }\n    /** Set horizontal shift in pixels. */\n    setXShift(value) {\n        this.x_shift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    /** Get text provided in the constructor. */\n    getText() {\n        return this.text;\n    }\n    getTextHeight() {\n        const textFormatter = TextFormatter.create(this.textFont);\n        return textFormatter.maxHeight;\n    }\n    /** Recalculate width. */\n    updateWidth() {\n        const textFormatter = TextFormatter.create(this.textFont);\n        const measureText = (text) => {\n            return textFormatter.getWidthForTextInPx(text);\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n                bend.width = Math.max(additional_width, measureText(bend.text)) + 3;\n                bend.draw_width = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.x_shift);\n        return this;\n    }\n    /** Draw the bend on the rendering context. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const x_shift = this.x_shift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        // this.text_line is relative to top string in the group.\n        const bend_height = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) + 3;\n        const annotation_y = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cp_x = x + width;\n            const cp_y = y;\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.render_options.line_width);\n            ctx.setStrokeStyle(this.render_options.line_style);\n            ctx.setFillStyle(this.render_options.line_style);\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderRelease = (x, y, width, height) => {\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.render_options.line_width);\n            ctx.setStrokeStyle(this.render_options.line_style);\n            ctx.setFillStyle(this.render_options.line_style);\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y); // tip of the arrow\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const render_x = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, render_x, annotation_y);\n            ctx.restore();\n        };\n        let last_bend = undefined;\n        let last_bend_draw_width = 0;\n        let last_drawn_width = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.draw_width)\n                bend.draw_width = 0;\n            if (i === 0)\n                bend.draw_width += x_shift;\n            last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n            if (bend.type === Bend.UP) {\n                if (last_bend && last_bend.type === Bend.UP) {\n                    renderArrowHead(start.x, bend_height, +1);\n                }\n                renderBend(start.x, start.y, last_drawn_width, bend_height);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (last_bend && last_bend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n                if (last_bend && last_bend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n                if (!last_bend) {\n                    last_drawn_width = bend.draw_width;\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n            }\n            renderText(start.x + last_drawn_width, bend.text);\n            last_bend = bend;\n            last_bend_draw_width = bend.draw_width;\n            last_bend.x = start.x;\n            start.x += last_drawn_width;\n        }\n        if (!last_bend || last_bend.x == undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        // Final arrowhead and text\n        if (last_bend.type === Bend.UP) {\n            renderArrowHead(last_bend.x + last_drawn_width, bend_height, +1);\n        }\n        else if (last_bend.type === Bend.DOWN) {\n            renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n        }\n    }\n}\n/** Default text font. */\nBend.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\nimport { Modifier } from './modifier';\nimport { Category, isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Dot extends Modifier {\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.radius = 2;\n        this.setWidth(5);\n        this.dot_shiftY = 0;\n    }\n    static get CATEGORY() {\n        return Category.Dot;\n    }\n    /** Returns the dots associated to a Note. */\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    /** Add a dot on the specified keys to the notes. */\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    dot.setDotShiftY(note.glyph.dot_shiftY);\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) != undefined) {\n                const dot = new Dot();\n                dot.setDotShiftY(note.glyph.dot_shiftY);\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                dot.setDotShiftY(note.glyph.dot_shiftY);\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    // Arrange dots inside a ModifierContext.\n    static format(dots, state) {\n        const right_shift = state.right_shift;\n        const dot_spacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dot_list = [];\n        const max_shift_map = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                // consider right displaced head with no previous modifier\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 }; // Shim key props for dot placement\n                shift = right_shift;\n            }\n            else {\n                // note object is not StaveNote or TabNote.\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const note_id = note.getAttribute('id');\n            dot_list.push({ line: props.line, note, note_id, dot });\n            max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n        }\n        // Sort dots by line number.\n        dot_list.sort((a, b) => b.line - a.line);\n        let dot_shift = right_shift;\n        let x_width = 0;\n        let last_line = null;\n        let last_note = null;\n        let prev_dotted_space = null;\n        let half_shiftY = 0;\n        for (let i = 0; i < dot_list.length; ++i) {\n            const { dot, note, note_id, line } = dot_list[i];\n            // Reset the position of the dot every line.\n            if (line !== last_line || note !== last_note) {\n                dot_shift = max_shift_map[note_id];\n            }\n            if (!note.isRest() && line !== last_line) {\n                if (Math.abs(line % 1) === 0.5) {\n                    // note is on a space, so no dot shift\n                    half_shiftY = 0;\n                }\n                else {\n                    // note is on a line, so shift dot to space above the line\n                    half_shiftY = 0.5;\n                    if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n                        // previous note on a space, so shift dot to space below the line\n                        half_shiftY = -0.5;\n                    }\n                    else if (line + half_shiftY === prev_dotted_space) {\n                        // previous space is dotted, so shift dot to space below the line\n                        half_shiftY = -0.5;\n                    }\n                }\n            }\n            // convert half_shiftY to a multiplier for dots.draw()\n            if (note.isRest()) {\n                dot.dot_shiftY += -half_shiftY;\n            }\n            else {\n                dot.dot_shiftY = -half_shiftY;\n            }\n            prev_dotted_space = line + half_shiftY;\n            dot.setXShift(dot_shift);\n            dot_shift += dot.getWidth() + dot_spacing; // spacing\n            x_width = dot_shift > x_width ? dot_shift : x_width;\n            last_line = line;\n            last_note = note;\n        }\n        // Update state.\n        state.right_shift += x_width;\n        return true;\n    }\n    setNote(note) {\n        this.note = note;\n        if (isGraceNote(note)) {\n            this.radius *= 0.5;\n            this.setWidth(3);\n        }\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dot_shiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        // Set the starting y coordinate to the base of the stem for TabNotes.\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        const x = start.x + this.x_shift + this.width - this.radius;\n        const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n        ctx.beginPath();\n        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n        ctx.fill();\n    }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { TextFormatter } from './textformatter';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class FretHandFinger extends Modifier {\n    constructor(finger) {\n        super();\n        this.finger = finger;\n        this.width = 7;\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.x_offset = 0; // Horizontal offset from default\n        this.y_offset = 0; // Vertical offset from default\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.FretHandFinger;\n    }\n    // Arrange fingerings inside a ModifierContext.\n    static format(nums, state) {\n        const { left_shift, right_shift } = state;\n        const num_spacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const nums_list = [];\n        let prev_note = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textFormatter = TextFormatter.create(num.textFont);\n            const textHeight = textFormatter.maxHeight;\n            if (num.position === ModifierPosition.ABOVE) {\n                state.top_text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prev_note) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (left_shift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (right_shift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prev_note = note;\n            }\n            nums_list.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort fingernumbers by line number.\n        nums_list.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < nums_list.length; ++i) {\n            let num_shift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = left_shift + shiftL;\n                numShiftR = right_shift + shiftR;\n            }\n            const numWidth = num.getWidth() + num_spacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(left_shift + numShiftL);\n                num_shift = left_shift + numWidth; // spacing\n                xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                num_shift = shiftRight + numWidth; // spacing\n                xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.left_shift += xWidthL;\n        state.right_shift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    setFretHandFinger(finger) {\n        this.finger = finger;\n        return this;\n    }\n    getFretHandFinger() {\n        return this.finger;\n    }\n    setOffsetX(x) {\n        this.x_offset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.y_offset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dot_x = start.x + this.x_shift + this.x_offset;\n        let dot_y = start.y + this.y_shift + this.y_offset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dot_x -= 4;\n                dot_y -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dot_x -= 2;\n                dot_y += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dot_x -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dot_x += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        ctx.save();\n        ctx.setFont(this.textFont);\n        ctx.fillText('' + this.finger, dot_x, dot_y);\n        ctx.restore();\n    }\n}\nFretHandFinger.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 9,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveTie extends Element {\n    /**\n     * @param notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.render_options = {\n            cp1: 8,\n            cp2: 12,\n            text_shift_x: 0,\n            first_x_shift: 0,\n            last_x_shift: 0,\n            y_shift: 7,\n            tie_spacing: 0,\n        };\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.StaveTie;\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n        }\n        if (!notes.first_indices) {\n            notes.first_indices = [0];\n        }\n        if (!notes.last_indices) {\n            notes.last_indices = [0];\n        }\n        if (notes.first_indices.length !== notes.last_indices.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.notes.first_note || !this.notes.last_note;\n    }\n    renderTie(params) {\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.render_options.cp1;\n        let cp2 = this.render_options.cp2;\n        if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n            cp1 = 2;\n            cp2 = 8;\n        }\n        const first_x_shift = this.render_options.first_x_shift;\n        const last_x_shift = this.render_options.last_x_shift;\n        const y_shift = this.render_options.y_shift * params.direction;\n        // setNotes(...) verified that first_indices and last_indices are not undefined.\n        // As a result, we use the ! non-null assertion operator here.\n        // eslint-disable-next-line\n        const first_indices = this.notes.first_indices;\n        // eslint-disable-next-line\n        const last_indices = this.notes.last_indices;\n        for (let i = 0; i < first_indices.length; ++i) {\n            const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n            const first_y_px = params.first_ys[first_indices[i]] + y_shift;\n            const last_y_px = params.last_ys[last_indices[i]] + y_shift;\n            if (isNaN(first_y_px) || isNaN(last_y_px)) {\n                throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\n            }\n            const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n            const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n            ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n            ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n            ctx.closePath();\n            ctx.fill();\n        }\n    }\n    renderText(first_x_px, last_x_px) {\n        var _a, _b, _c;\n        if (!this.text)\n            return;\n        const ctx = this.checkContext();\n        let center_x = (first_x_px + last_x_px) / 2;\n        center_x -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.first_note) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.last_note) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);\n            ctx.restore();\n        }\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const first_note = this.notes.first_note;\n        const last_note = this.notes.last_note;\n        // Provide some default values so the compiler doesn't complain.\n        let first_x_px = 0;\n        let last_x_px = 0;\n        let first_ys = [0];\n        let last_ys = [0];\n        let stem_direction = 0;\n        if (first_note) {\n            first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n            stem_direction = first_note.getStemDirection();\n            first_ys = first_note.getYs();\n        }\n        else if (last_note) {\n            const stave = last_note.checkStave();\n            first_x_px = stave.getTieStartX();\n            first_ys = last_note.getYs();\n            this.notes.first_indices = this.notes.last_indices;\n        }\n        if (last_note) {\n            last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n            stem_direction = last_note.getStemDirection();\n            last_ys = last_note.getYs();\n        }\n        else if (first_note) {\n            const stave = first_note.checkStave();\n            last_x_px = stave.getTieEndX();\n            last_ys = first_note.getYs();\n            this.notes.last_indices = this.notes.first_indices;\n        }\n        if (this.direction) {\n            stem_direction = this.direction;\n        }\n        this.renderTie({\n            first_x_px,\n            last_x_px,\n            first_ys,\n            last_ys,\n            direction: stem_direction,\n        });\n        this.renderText(first_x_px, last_x_px);\n        return true;\n    }\n}\n/** Default text font. */\nStaveTie.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n","// / [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nimport { Category } from './typeguard';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return Category.TabTie;\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    /**\n     * @param notes is a struct that has:\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super(notes, text);\n        this.render_options.cp1 = 9;\n        this.render_options.cp2 = 11;\n        this.render_options.y_shift = 3;\n        this.direction = -1; // Tab tie's are always face up.\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { StaveTie } from './stavetie';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { Category, isStaveNote } from './typeguard';\nimport { log } from './util';\nimport { Voice } from './voice';\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('Vex.Flow.GraceNoteGroup', args);\n}\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n    constructor(grace_notes, show_slur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.grace_notes = grace_notes;\n        this.width = 0;\n        this.show_slur = show_slur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            num_beats: 4,\n            beat_value: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.render_options = {\n            slur_y_shift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.grace_notes);\n        return this;\n    }\n    static get CATEGORY() {\n        return Category.GraceNoteGroup;\n    }\n    /** Arranges groups inside a `ModifierContext`. */\n    static format(gracenote_groups, state) {\n        const group_spacing_stave = 4;\n        const group_spacing_tab = 0;\n        if (!gracenote_groups || gracenote_groups.length === 0)\n            return false;\n        const group_list = [];\n        let prev_note = null;\n        let shiftL = 0;\n        for (let i = 0; i < gracenote_groups.length; ++i) {\n            const gracenote_group = gracenote_groups[i];\n            const note = gracenote_group.getNote();\n            const is_stavenote = isStaveNote(note);\n            const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n            if (is_stavenote && note !== prev_note) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prev_note = note;\n            }\n            group_list.push({ shift: shiftL, gracenote_group, spacing });\n        }\n        // If first note left shift in case it is displaced\n        let group_shift = group_list[0].shift;\n        let formatWidth;\n        for (let i = 0; i < group_list.length; ++i) {\n            const gracenote_group = group_list[i].gracenote_group;\n            gracenote_group.preFormat();\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n            group_shift = Math.max(formatWidth, group_shift);\n        }\n        for (let i = 0; i < group_list.length; ++i) {\n            const gracenote_group = group_list[i].gracenote_group;\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n            gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));\n        }\n        state.left_shift += group_shift;\n        return true;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(grace_notes) {\n        grace_notes = grace_notes || this.grace_notes;\n        if (grace_notes.length > 1) {\n            const beam = new Beam(grace_notes);\n            beam.render_options.beam_width = 3;\n            beam.render_options.partial_beam_length = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    getGraceNotes() {\n        return this.grace_notes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n        // Draw grace notes.\n        this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n        // Draw beams.\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\n        if (this.show_slur) {\n            // Create and draw slur.\n            const is_stavenote = isStaveNote(note);\n            const TieClass = is_stavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                last_note: this.grace_notes[0],\n                first_note: note,\n                first_indices: [0],\n                last_indices: [0],\n            });\n            this.slur.render_options.cp2 = 12;\n            this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n            this.slur.setContext(ctx).draw();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { Voice } from './voice';\nexport class NoteSubGroup extends Modifier {\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            num_beats: 4,\n            beat_value: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    static get CATEGORY() {\n        return Category.NoteSubGroup;\n    }\n    // Arrange groups inside a `ModifierContext`\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.left_shift += width;\n        return true;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\nimport { Fraction } from './fraction';\nimport { RuntimeError } from './util';\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n    constructor(options) {\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = options && options.tickID ? options.tickID : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined; // Biggest tickable\n        this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\n        this.minTickable = undefined;\n        this.padding = 1; // padding on each side (width += padding * 2)\n        this.x = 0;\n        this.xBase = 0; // base x position without xOffset\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n        this.tickables = []; // Notes, tabs, chords, lyrics.\n        this.tickablesByVoice = {}; // Tickables indexed by voice number\n        // Formatting metrics\n        this.notePx = 0; // width of widest note in this context\n        this.glyphPx = 0; // width of glyph (note head)\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n        this.modLeftPx = 0; // Left modifier pixels\n        this.modRightPx = 0; // Right modifier pixels\n        this.totalLeftPx = 0; // Total left pixels\n        this.totalRightPx = 0; // Total right pixels\n        this.tContexts = []; // Parent array of tick contexts\n        this.width = 0;\n        this.formatterMetrics = {\n            // The freedom of a tickcontext is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    } // use of xBase and xOffset is optional, avoids offset creep\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    /**\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n     */\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    /** Gets widths context, note and left/right modifiers for formatting. */\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width,\n            glyphPx,\n            notePx,\n            leftDisplacedHeadPx,\n            rightDisplacedHeadPx,\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks == null) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex || 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            // Maintain max displaced head pixels from all tickables in the context\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            // Maintain the widest note for all tickables in the context\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            // Maintain the widest note head\n            this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n            // Total modifier shift\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            // Total shift\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            // Recalculate the tick context total width\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n// MIT License\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { Category, isTabNote } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('Vex.Flow.Ornament', args);\n}\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n    /**\n     * Create a new ornament of type `type`, which is an entry in\n     * `Vex.Flow.ornamentCodes` in `tables.ts`.\n     */\n    constructor(type) {\n        super();\n        this.type = type;\n        this.delayed = false;\n        this.render_options = {\n            font_scale: 38,\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        this.ornament = Tables.ornamentCodes(this.type);\n        // new ornaments have their origin at the origin, and have more specific\n        // metrics.  Legacy ornaments do some\n        // x scaling, and have hard-coded metrics\n        const metrics = this.getMetrics();\n        // some jazz ornaments are above or below depending on stem direction.\n        this.adjustForStemDirection = false;\n        // some jazz ornaments like falls are supposed to overlap with future bars\n        // and so we report a different width than they actually take up.\n        this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n        this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        if (!this.ornament) {\n            throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\n        }\n        this.x_shift = metrics ? metrics.xOffset : 0;\n        this.y_shift = metrics ? metrics.yOffset : 0;\n        this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n            category: `ornament.${this.ornament.code}`,\n        });\n        // Is this a jazz ornament that goes between this note and the next note.\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\n        // happen if I don't set it.\n        if (!metrics) {\n            this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n        }\n    }\n    /** Ornaments category string. */\n    static get CATEGORY() {\n        return Category.Ornament;\n    }\n    /** Arrange ornaments inside `ModifierContext` */\n    static format(ornaments, state) {\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0; // width is used by ornaments, which are always centered on the note head\n        let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\n        let left_shift = state.left_shift;\n        let yOffset = 0;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n                ornament.x_shift += right_shift + 2;\n            }\n            if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n                ornament.x_shift -= left_shift + 2;\n            }\n            if (ornament.reportedWidth && ornament.x_shift < 0) {\n                left_shift += ornament.reportedWidth;\n            }\n            else if (ornament.reportedWidth && ornament.x_shift > 0) {\n                right_shift += ornament.reportedWidth;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n            }\n            // articulations above/below the line can be stacked.\n            if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n                // Unfortunately we don't know the stem direction.  So we base it\n                // on the line number, but also allow it to be overridden.\n                const ornamentNote = defined(ornament.note, 'NoAttachedNote');\n                if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n                    state.top_text_line += increment;\n                    ornament.y_shift += yOffset;\n                    yOffset -= ornament.glyph.bbox.getH();\n                }\n                else {\n                    state.text_line += increment;\n                    ornament.y_shift += yOffset;\n                    yOffset += ornament.glyph.bbox.getH();\n                }\n            }\n            else {\n                if (ornament.getPosition() === Modifier.Position.ABOVE) {\n                    ornament.setTextLine(state.top_text_line);\n                    state.top_text_line += increment;\n                }\n                else {\n                    ornament.setTextLine(state.text_line);\n                    state.text_line += increment;\n                }\n            }\n        }\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\n        // X position, but jazz ornaments sometimes need to.\n        state.left_shift = left_shift + width / 2;\n        state.right_shift = right_shift + width / 2;\n        return true;\n    }\n    /**\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n     * these are generally on the top of the staff.\n     */\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    /**\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\n     * any accidentals\n     */\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    /**\n     * The ornament is aligned based on the note head, but without regard to whether the\n     * stem goes up or down.\n     */\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n    }\n    /**\n     * An ornament that happens on the release of the note, generally placed after the\n     * note and overlapping the next beat/measure..\n     */\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    /** ornamentArticulation goes above/below the note based on space availablity */\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    /**\n     * Legacy ornaments have hard-coded metrics.  If additional ornament types are\n     * added, get their metrics here.\n     */\n    // eslint-disable-next-line\n    getMetrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.jazzOrnaments[this.ornament.code];\n    }\n    /** Set whether the ornament is to be delayed. */\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    /** Set the upper accidental for the ornament. */\n    setUpperAccidental(accid) {\n        const scale = this.render_options.font_scale / 1.3;\n        this.accidentalUpper = new Glyph(Tables.accidentalCodes(accid).code, scale);\n        this.accidentalUpper.setOrigin(0.5, 1.0);\n        return this;\n    }\n    /** Set the lower accidental for the ornament. */\n    setLowerAccidental(accid) {\n        const scale = this.render_options.font_scale / 1.3;\n        this.accidentalLower = new Glyph(Tables.accidentalCodes(accid).code, scale);\n        this.accidentalLower.setOrigin(0.5, 1.0);\n        return this;\n    }\n    /** Render ornament in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDir = note.getStemDirection();\n        const stave = note.checkStave();\n        const classString = Object.keys(this.getAttribute('classes')).join(' ');\n        ctx.openGroup(classString, this.getAttribute('id'));\n        // Get stem extents\n        const stemExtents = note.checkStem().getExtents();\n        let y = stemDir === Stem.DOWN ? stemExtents.baseY : stemExtents.topY;\n        // TabNotes don't have stems attached to them. Tab stems are rendered outside the stave.\n        if (isTabNote(note)) {\n            if (note.hasStem()) {\n                if (stemDir === Stem.DOWN) {\n                    y = stave.getYForTopText(this.text_line);\n                }\n            }\n            else {\n                // Without a stem\n                y = stave.getYForTopText(this.text_line);\n            }\n        }\n        const isPlacedOnNoteheadSide = stemDir === Stem.DOWN;\n        const spacing = stave.getSpacingBetweenLines();\n        let lineSpacing = 1;\n        // Beamed stems are longer than quarter note stems, adjust accordingly\n        if (!isPlacedOnNoteheadSide && note.hasBeam()) {\n            lineSpacing += 0.5;\n        }\n        const totalSpacing = spacing * (this.text_line + lineSpacing);\n        const glyphYBetweenLines = y - totalSpacing;\n        // Get initial coordinates for the modifier position\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        // If the ornament is aligned with the note head, don't consider the stave y\n        // but use the 'natural' modifier y\n        let glyphY = this.ornamentAlignWithNoteHead\n            ? start.y\n            : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n        glyphY += this.y_shift;\n        // Ajdust x position if ornament is delayed\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = glyphX - (stave.getX() - 10);\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                delayXShift += this.glyph.getMetrics().width / 2;\n                const nextContext = TickContext.getNextContext(note.getTickContext());\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.render(ctx, glyphX, glyphY);\n            glyphY -= this.accidentalLower.getMetrics().height;\n            glyphY -= this.render_options.accidentalLowerPadding;\n        }\n        if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\n            glyphY += this.stemUpYOffset;\n        }\n        if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            glyphY = note.checkStave().getBoundingBox().getY() + 40;\n        }\n        this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n        if (this.accidentalUpper) {\n            glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n            this.accidentalUpper.render(ctx, glyphX, glyphY);\n        }\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\nOrnament.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Rodrigo Vilar\n// MIT License\nimport { Glyph } from './glyph';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isGraceNote } from './typeguard';\n/** Parenthesis implements parenthesis modifiers for notes. */\nexport class Parenthesis extends Modifier {\n    /**\n     * Constructor\n     *\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\n     */\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\n    }\n    static get CATEGORY() {\n        return Category.Parenthesis;\n    }\n    /** Add parentheses to the notes. */\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    /** Arrange parentheses inside a ModifierContext. */\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let x_widthL = 0;\n        let x_widthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                x_widthR = x_widthR > shift + parenthesis.width ? x_widthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index);\n                x_widthL = x_widthL > shift + parenthesis.width ? x_widthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.left_shift += x_widthL;\n        state.right_shift += x_widthR;\n        return true;\n    }\n    /** Set the associated note. */\n    setNote(note) {\n        this.note = note;\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\n        if (isGraceNote(note)) {\n            this.point = Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.point');\n            this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.width'));\n        }\n        return this;\n    }\n    /** Render the parenthesis. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        const x = start.x + this.x_shift;\n        const y = start.y + this.y_shift;\n        if (this.position == Modifier.Position.RIGHT) {\n            Glyph.renderGlyph(ctx, x + 1, y, this.point, 'noteheadParenthesisRight', {\n                category: `noteHead.standard.noteheadParenthesisRight`,\n            });\n        }\n        else if (this.position == Modifier.Position.LEFT) {\n            Glyph.renderGlyph(ctx, x - 2, y, this.point, 'noteheadParenthesisLeft', {\n                category: `noteHead.standard.noteheadParenthesisLeft`,\n            });\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('Vex.Flow.NoteHead', args);\n}\n/**\n * Draw slashnote head manually. No glyph exists for this.\n * @param ctx the Canvas context\n * @param duration the duration of the note. ex: \"4\"\n * @param x the x coordinate to draw at\n * @param y the y coordinate to draw at\n * @param stem_direction the direction of the stem\n */\nfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {\n    const width = Tables.SLASH_NOTEHEAD_WIDTH;\n    ctx.save();\n    ctx.setLineWidth(Tables.STEM_WIDTH);\n    let fill = false;\n    if (Tables.durationToNumber(duration) > 2) {\n        fill = true;\n    }\n    if (!fill)\n        x -= (Tables.STEM_WIDTH / 2) * stem_direction;\n    ctx.beginPath();\n    ctx.moveTo(x, y + staveSpace);\n    ctx.lineTo(x, y + 1);\n    ctx.lineTo(x + width, y - staveSpace);\n    ctx.lineTo(x + width, y);\n    ctx.lineTo(x, y + staveSpace);\n    ctx.closePath();\n    if (fill) {\n        ctx.fill();\n    }\n    else {\n        ctx.stroke();\n    }\n    if (Tables.durationToFraction(duration).equals(0.5)) {\n        const breve_lines = [-3, -1, width + 1, width + 3];\n        for (let i = 0; i < breve_lines.length; i++) {\n            ctx.beginPath();\n            ctx.moveTo(x + breve_lines[i], y - 10);\n            ctx.lineTo(x + breve_lines[i], y + 11);\n            ctx.stroke();\n        }\n    }\n    ctx.restore();\n}\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.custom_glyph = false;\n        this.stem_up_x_offset = 0;\n        this.stem_down_x_offset = 0;\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.note_type)\n            this.noteType = noteStruct.note_type;\n        this.displaced = noteStruct.displaced || false;\n        this.stem_direction = noteStruct.stem_direction || Stem.UP;\n        this.line = noteStruct.line || 0;\n        // Get glyph code based on duration and note type. This could be\n        // regular notes, rests, or other custom codes.\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.glyph_code = this.glyph.code_head;\n        this.x_shift = noteStruct.x_shift || 0;\n        if (noteStruct.custom_glyph_code) {\n            this.custom_glyph = true;\n            this.glyph_code = noteStruct.custom_glyph_code;\n            this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;\n            this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;\n        }\n        this.style = noteStruct.style;\n        this.slashed = noteStruct.slashed || false;\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // font size for note heads\n            glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE });\n        this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));\n    }\n    static get CATEGORY() {\n        return Category.NoteHead;\n    }\n    /** Get the width of the notehead. */\n    getWidth() {\n        return this.width;\n    }\n    /** Determine if the notehead is displaced. */\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    /** Get the glyph data. */\n    getGlyph() {\n        return this.glyph;\n    }\n    /** Set the X coordinate. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Get the Y coordinate. */\n    getY() {\n        return this.y;\n    }\n    /** Set the Y coordinate. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Get the stave line the notehead is placed on. */\n    getLine() {\n        return this.line;\n    }\n    /** Set the stave line the notehead is placed on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Get the canvas `x` coordinate position of the notehead. */\n    getAbsoluteX() {\n        // If the note has not been preformatted, then get the static x value\n        // Otherwise, it's been formatted and we should use it's x value relative\n        // to its tick context\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        // For a more natural displaced notehead, we adjust the displacement amount\n        // by half the stem width in order to maintain a slight overlap with the stem\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        const musicFont = Tables.currentMusicFont();\n        const fontShift = musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n        const displacedFontShift = musicFont.lookupMetric('noteHead.displaced.shiftX', 0) * this.stem_direction;\n        return (x +\n            fontShift +\n            (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0));\n    }\n    /** Get the `BoundingBox` for the `NoteHead`. */\n    getBoundingBox() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n        }\n        const spacing = this.checkStave().getSpacingBetweenLines();\n        const half_spacing = spacing / 2;\n        const min_y = this.y - half_spacing;\n        return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n    }\n    /** Set notehead to a provided `stave`. */\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n        this.setWidth(width);\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the notehead. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let head_x = this.getAbsoluteX();\n        if (this.custom_glyph) {\n            // head_x += this.x_shift;\n            head_x += this.stem_direction === Stem.UP ? this.stem_up_x_offset : this.stem_down_x_offset;\n        }\n        const y = this.y;\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", head_x, y);\n        // Begin and end positions for head.\n        const stem_direction = this.stem_direction;\n        const glyph_font_scale = this.render_options.glyph_font_scale;\n        if (this.style) {\n            this.applyStyle(ctx);\n        }\n        const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n        if (this.noteType === 's') {\n            const staveSpace = this.checkStave().getSpacingBetweenLines();\n            drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n        }\n        else {\n            Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n                category: this.custom_glyph ? `noteHead.custom.${categorySuffix}` : `noteHead.standard.${categorySuffix}`,\n            });\n        }\n        if (this.style) {\n            this.restoreStyle(ctx);\n        }\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\nNoteHead.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StemmableNote extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n    }\n    static get CATEGORY() {\n        return Category.StemmableNote;\n    }\n    // Get and set the note's `Stem`\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        return this;\n    }\n    // Builds and sets a new stem\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag(category = 'flag') {\n        const { glyph } = this;\n        if (this.hasFlag()) {\n            const flagCode = this.getStemDirection() === Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;\n            this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n        }\n    }\n    // Get the custom glyph associated with the outer note head on the base of the stem.\n    getBaseCustomNoteHeadGlyph() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    // Get the full length of stem\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    // Get the number of beams for this duration\n    getBeamCount() {\n        const glyph = this.getGlyph();\n        if (glyph) {\n            return glyph.beam_count;\n        }\n        else {\n            return 0;\n        }\n    }\n    // Get the minimum length of stem\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        let length = frac.value() <= 1 ? 0 : 20;\n        // if note is flagged, cannot shorten beam\n        switch (this.duration) {\n            case '8':\n                if (this.beam == undefined)\n                    length = 35;\n                break;\n            case '16':\n                length = this.beam == undefined ? 35 : 25;\n                break;\n            case '32':\n                length = this.beam == undefined ? 45 : 35;\n                break;\n            case '64':\n                length = this.beam == undefined ? 50 : 40;\n                break;\n            case '128':\n                length = this.beam == undefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    // Get/set the direction of the stem\n    getStemDirection() {\n        if (!this.stem_direction)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem_direction;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stem_direction = direction;\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n            // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\n            // the stem appropriately. If there's no custom note head, lookup the standard notehead.\n            const glyph = this.getBaseCustomNoteHeadGlyph() || this.getGlyph();\n            // Get the font-specific customizations for the note heads.\n            const offsets = Tables.currentMusicFont().lookupMetric(`stem.noteHead.${glyph.code_head}`, {\n                offsetYBaseStemUp: 0,\n                offsetYTopStemUp: 0,\n                offsetYBaseStemDown: 0,\n                offsetYTopStemDown: 0,\n            });\n            // Configure the stem to use these offsets.\n            this.stem.setOptions({\n                stem_up_y_offset: offsets.offsetYTopStemUp,\n                stem_down_y_offset: offsets.offsetYTopStemDown,\n                stem_up_y_base_offset: offsets.offsetYBaseStemUp,\n                stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\n            });\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    // Get the `x` coordinate of the stem\n    getStemX() {\n        const x_begin = this.getAbsoluteX() + this.x_shift;\n        const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n        const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n        return stem_x;\n    }\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n    }\n    // Get the stem extension for the current duration\n    getStemExtension() {\n        const glyph = this.getGlyph();\n        if (this.stem_extension_override != undefined) {\n            return this.stem_extension_override;\n        }\n        // Use stem_beam_extension with beams\n        if (this.beam) {\n            return glyph.stem_beam_extension;\n        }\n        const flagCode = this.getStemDirection() === Stem.DOWN ? this.glyph.code_flag_downstem : this.glyph.code_flag_upstem;\n        return Math.abs(Tables.currentMusicFont().lookupMetric(`glyphs.flag.${flagCode}.shiftY`, 0));\n    }\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength(height) {\n        this.stem_extension_override = height - Stem.HEIGHT;\n        return this;\n    }\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return Tables.getGlyphProps(this.duration).flag && !this.beam;\n    }\n    /** Post formats the note. */\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    /** Renders the stem onto the canvas. */\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.\n//\n// See `tests/stavenote_tests.ts` for usage examples.\nimport { BoundingBox } from './boundingbox';\nimport { Modifier } from './modifier';\nimport { NoteHead } from './notehead';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, midLine, RuntimeError, warn } from './util';\nfunction showDeprecationWarningForNoteHeads() {\n    // eslint-disable-next-line\n    console.warn('StaveNote.note_heads is deprecated. Use StaveNote.noteHeads instead.', 'This accessor will be removed in VexFlow 5.0.');\n}\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('Vex.Flow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.minLine = 0;\n        this.maxLine = 0;\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octave_shift = (_b = noteStruct.octave_shift) !== null && _b !== void 0 ? _b : 0;\n        // Pull note rendering properties.\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // if true, displace note to right\n        this.displaced = false;\n        this.dot_shiftY = 0;\n        // for displaced ledger lines\n        this.use_default_head_x = false;\n        // Drawing\n        this._noteHeads = [];\n        this.modifiers = [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // font size for note heads and rests\n            glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE, \n            // number of stroke px to the left and right of head\n            stroke_px: noteStruct.stroke_px || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        // Set the stem direction\n        if (noteStruct.auto_stem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stem_direction) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    static get CATEGORY() {\n        return Category.StaveNote;\n    }\n    /**\n     * @deprecated Use Stem.UP.\n     */\n    static get STEM_UP() {\n        return Stem.UP;\n    }\n    /**\n     * @deprecated Use Stem.DOWN.\n     */\n    static get STEM_DOWN() {\n        return Stem.DOWN;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('glyphs.noteHead.minPadding');\n    }\n    /** Format notes inside a ModifierContext. */\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            const props = notes[i].getKeyProps();\n            const line = props[0].line;\n            let minL = props[props.length - 1].line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL = line + notes[i].glyph.line_above;\n                minL = line - notes[i].glyph.line_below;\n            }\n            else {\n                maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;\n                minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;\n            }\n            notesList.push({\n                line: props[0].line,\n                maxLine: maxL,\n                minLine: minL,\n                isrest: notes[i].isRest(),\n                stemDirection: stemDirection,\n                stemMax,\n                stemMin,\n                voice_shift: notes[i].getVoiceShiftWidth(),\n                is_displaced: notes[i].isDisplaced(),\n                note: notes[i],\n            });\n        }\n        const voices = notesList.length;\n        let noteU = notesList[0];\n        const noteM = voices > 2 ? notesList[1] : undefined;\n        let noteL = voices > 2 ? notesList[2] : notesList[1];\n        // for two voice backward compatibility, ensure upper voice is stems up\n        // for three voices, the voices must be in order (upper, middle, lower)\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n        let xShift = 0;\n        // Test for two voice note intersection\n        if (voices === 2) {\n            const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    // shift rest up\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    // shift rest down\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else if (noteU.stemDirection === noteL.stemDirection) {\n                    // upper voice is middle voice, so shift it right\n                    xShift = voiceXShift + 2;\n                    noteU.note.setXShift(xShift);\n                }\n                else {\n                    // shift lower voice right\n                    xShift = voiceXShift + 2;\n                    noteL.note.setXShift(xShift);\n                }\n            }\n            // format complete\n            state.right_shift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        // For three voices, test if rests can be repositioned\n        //\n        // Special case 1 :: middle voice rest between two notes\n        //\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    // center middle voice rest between the upper and lower voices\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2; // shift middle rest right\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                // format complete\n                state.right_shift += xShift;\n                return true;\n            }\n        }\n        // Special case 2 :: all voices are rests\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            // Shift upper voice rest up\n            shiftRestVertical(noteU, noteM, 1);\n            // Shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n            // format complete\n            state.right_shift += xShift;\n            return true;\n        }\n        // Test if any other rests can be repositioned\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            // Shift middle voice rest up\n            shiftRestVertical(noteM, noteL, 1);\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            // Shift middle voice rest down\n            shiftRestVertical(noteM, noteU, -1);\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            // shift upper voice rest up;\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            // shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        // If middle voice intersects upper or lower voice\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            // shift middle note right\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.right_shift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    reset() {\n        super.reset();\n        // Save prior noteHead styles & reapply them after making new noteheads.\n        const noteHeadStyles = this._noteHeads.map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        this._noteHeads.forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this._noteHeads.forEach((head) => head.setStave(stave));\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        // Update stem extension is a beam is assigned.\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    // Builds a `Stem` for the note\n    buildStem() {\n        this.setStem(new Stem({ hide: !!this.isRest() }));\n        return this;\n    }\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads() {\n        this._noteHeads = [];\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        // Draw notes from bottom to top.\n        // For down-stem notes, we draw from top to bottom.\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            const noteProps = this.keyProps[i];\n            const line = noteProps.line;\n            // Keep track of last line with a note head, so that consecutive heads\n            // are correctly displaced.\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.use_default_head_x = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                note_type: this.noteType,\n                displaced,\n                stem_direction: stemDirection,\n                custom_glyph_code: noteProps.code,\n                glyph_font_scale: this.render_options.glyph_font_scale,\n                x_shift: noteProps.shift_right,\n                stem_up_x_offset: noteProps.stem_up_x_offset,\n                stem_down_x_offset: noteProps.stem_down_x_offset,\n                line: noteProps.line,\n            });\n            this._noteHeads[i] = notehead;\n        }\n    }\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        // Figure out optimal stem direction based on given notes\n        this.minLine = this.keyProps[0].line;\n        this.maxLine = this.keyProps[this.keyProps.length - 1].line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps() {\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            // All rests use the same position on the line.\n            // if (this.glyph.rest) key = this.glyph.position;\n            if (this.glyph.rest)\n                this.glyph.position = key;\n            const options = { octave_shift: this.octave_shift || 0 };\n            const props = Tables.keyProperties(key, this.clef, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            // Override line placement for default rests\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            // Calculate displacement of this note\n            const line = props.line;\n            if (lastLine == undefined) {\n                lastLine = line;\n            }\n            else {\n                if (Math.abs(lastLine - line) === 0.5) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    // Have to mark the previous note as\n                    // displaced as well, for modifier placement\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        // Sort the notes from lowest line to highest line\n        lastLine = undefined;\n        this.keyProps.forEach((key) => {\n            if (lastLine && key.line < lastLine) {\n                warn('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');\n            }\n            lastLine = key.line;\n        });\n        this.keyProps.sort((a, b) => a.line - b.line);\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        var _a, _b;\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n        }\n        const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n        const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n        let minY = 0;\n        let maxY = 0;\n        const halfLineSpacing = ((_b = (_a = this.getStave()) === null || _a === void 0 ? void 0 : _a.getSpacingBetweenLines()) !== null && _b !== void 0 ? _b : 0) / 2;\n        const lineSpacing = halfLineSpacing * 2;\n        if (this.isRest()) {\n            const y = this.ys[0];\n            const frac = Tables.durationToFraction(this.duration);\n            if (frac.equals(1) || frac.equals(2)) {\n                minY = y - halfLineSpacing;\n                maxY = y + halfLineSpacing;\n            }\n            else {\n                minY = y - this.glyph.line_above * lineSpacing;\n                maxY = y + this.glyph.line_below * lineSpacing;\n            }\n        }\n        else if (this.glyph.stem) {\n            const ys = this.getStemExtents();\n            ys.baseY += halfLineSpacing * this.getStemDirection();\n            minY = Math.min(ys.topY, ys.baseY);\n            maxY = Math.max(ys.topY, ys.baseY);\n        }\n        else {\n            minY = 0;\n            maxY = 0;\n            for (let i = 0; i < this.ys.length; ++i) {\n                const yy = this.ys[i];\n                if (i === 0) {\n                    minY = yy;\n                    maxY = yy;\n                }\n                else {\n                    minY = Math.min(yy, minY);\n                    maxY = Math.max(yy, maxY);\n                }\n            }\n            minY -= halfLineSpacing;\n            maxY += halfLineSpacing;\n        }\n        return new BoundingBox(x, minY, w, maxY - minY);\n    }\n    // Gets the line number of the bottom note in the chord.\n    // If `isTopNote` is `true` then get the top note's line number instead\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        // No precondition assumed for sortedness of keyProps array\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return this.glyph.rest;\n    }\n    // Determine if the current note is a chord\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    // Determine if the `StaveNote` has a stem\n    hasStem() {\n        return this.glyph.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            // We adjust the origin of the stem because we want the stem left-aligned\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\n            return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n        }\n    }\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `text_line`\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n    }\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = this._noteHeads.map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(y_top, y_bottom);\n        }\n        return this;\n    }\n    // Check if note is shifted to the right\n    isDisplaced() {\n        return this.displaced;\n    }\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    // Get the stave line on which to place a rest\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY(position, index, options = {}) {\n        var _a, _b;\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            // FIXME: Left modifier padding, move to font file\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            // FIXME: Right modifier padding, move to font file\n            x = this.getGlyphWidth() + this.x_shift + 2;\n            if (this.stem_direction === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += (_b = (_a = this === null || this === void 0 ? void 0 : this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().width) !== null && _b !== void 0 ? _b : 0;\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle(style) {\n        var _a;\n        super.setStyle(style);\n        this._noteHeads.forEach((notehead) => notehead.setStyle(style));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setStyle(style);\n        return this;\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        stem === null || stem === void 0 ? void 0 : stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        this.flagStyle = style;\n    }\n    getFlagStyle() {\n        return this.flagStyle;\n    }\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle(index, style) {\n        this._noteHeads[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth() {\n        // TODO: may need to accomodate for dot here.\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n        // For upstems with flags, the extra space is unnecessary, since it's taken\n        // up by the flag.\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            // If there are no modifiers on this note, make sure there is adequate padding\n            // between the notes.\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        // For upward flagged notes, the width of the flag needs to be added\n        if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n            width += this.getGlyphWidth();\n            // TODO: Add flag width as a separate metric\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    /**\n     * @typedef {Object} noteHeadBounds\n     * @property {number} y_top the highest notehead bound\n     * @property {number} y_bottom the lowest notehead bound\n     * @property {number|Null} displaced_x the starting x for displaced noteheads\n     * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n     * @property {number} highest_line the highest notehead line in traditional music line\n     *  numbering (bottom line = 1, top line = 5)\n     * @property {number} lowest_line the lowest notehead line\n     * @property {number|false} highest_displaced_line the highest staff line number\n     *   for a displaced notehead\n     * @property {number|false} lowest_displaced_line\n     * @property {number} highest_non_displaced_line\n     * @property {number} lowest_non_displaced_line\n     */\n    /**\n     * Get the staff line and y value for the highest & lowest noteheads\n     * @returns {noteHeadBounds}\n     */\n    getNoteHeadBounds() {\n        // Top and bottom Y values for stem.\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        this._noteHeads.forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            y_top: yTop,\n            y_bottom: yBottom,\n            displaced_x: displacedX,\n            non_displaced_x: nonDisplacedX,\n            highest_line: highestLine,\n            lowest_line: lowestLine,\n            highest_displaced_line: highestDisplacedLine,\n            lowest_displaced_line: lowestDisplacedLine,\n            highest_non_displaced_line: highestNonDisplacedLine,\n            lowest_non_displaced_line: lowestNonDisplacedLine,\n        };\n    }\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.x_shift;\n    }\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return this._noteHeads.slice();\n    }\n    /** @deprecated use StaveNote.noteHeads instead. */\n    get note_heads() {\n        showDeprecationWarningForNoteHeads();\n        return this.noteHeads;\n    }\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { glyph, render_options: { stroke_px }, } = this;\n        const ctx = this.checkContext();\n        const width = glyph.getWidth() + stroke_px * 2;\n        const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highest_line, lowest_line, highest_displaced_line, highest_non_displaced_line, lowest_displaced_line, lowest_non_displaced_line, displaced_x, non_displaced_x, } = this.getNoteHeadBounds();\n        // Early out if there are no ledger lines to draw.\n        if (highest_line < 6 && lowest_line > 0)\n            return;\n        const min_x = Math.min(displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0, non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = min_x - stroke_px;\n            else if (normal)\n                x = (non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0) - stroke_px;\n            else\n                x = (displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0) - stroke_px;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        this.applyStyle(ctx, style);\n        // Draw ledger lines below the staff:\n        for (let line = 6; line <= highest_line; ++line) {\n            const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n            const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        // Draw ledger lines above the staff:\n        for (let line = 0; line >= lowest_line; --line) {\n            const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n            const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        this.restoreStyle(ctx, style);\n    }\n    // Draw all key modifiers\n    drawModifiers() {\n        const ctx = this.checkContext();\n        ctx.openGroup('modifiers');\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = this._noteHeads[index];\n            const noteheadStyle = notehead.getStyle();\n            notehead.applyStyle(ctx, noteheadStyle);\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n            notehead.restoreStyle(ctx, noteheadStyle);\n        }\n        ctx.closeGroup();\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyph.flag; // specified in tables.js\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam;\n    }\n    // Draw the flag for the note\n    drawFlag() {\n        var _a;\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\n            // eslint-disable-next-line\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX();\n            // FIXME: What's with the magic +/- 2\n            // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\n            // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\n            // Alternatively, we could shorten the stem.\n            const extension = this.flag !== undefined ? this.flag.checkMetrics().y_shift : 0;\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    y_top - noteStemHeight + 2 - extension\n                : // Up stems are above the note head and have flags on the right.\n                    y_bottom - noteStemHeight - 2 - extension;\n            // Draw the Flag\n            ctx.openGroup('flag', undefined, { pointerBBox: true });\n            this.applyStyle(ctx, this.getFlagStyle());\n            (_a = this.flag) === null || _a === void 0 ? void 0 : _a.render(ctx, flagX, flagY);\n            this.restoreStyle(ctx, this.getFlagStyle());\n            ctx.closeGroup();\n        }\n    }\n    // Draw the NoteHeads\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        this._noteHeads.forEach((notehead) => {\n            ctx.openGroup('notehead', undefined, { pointerBBox: true });\n            notehead.setContext(ctx).draw();\n            ctx.closeGroup();\n        });\n    }\n    drawStem(stemOptions) {\n        var _a;\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\n        // is called at all. Perhaps these should be removed?\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        // If we will render a flag, we shorten the stem so that the tip\n        // does not poke through the flag.\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        ctx.openGroup('stem', undefined, { pointerBBox: true });\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(ctx).draw();\n        ctx.closeGroup();\n    }\n    /**\n     * Override stemmablenote stem extension to adjust for distance from middle line.\n     */\n    getStemExtension() {\n        const super_stem_extension = super.getStemExtension();\n        if (!this.glyph.stem) {\n            return super_stem_extension;\n        }\n        const stem_direction = this.getStemDirection();\n        if (stem_direction !== this.calculateOptimalStemDirection()) {\n            return super_stem_extension; // no adjustment for manually set stem direction.\n        }\n        let mid_line_distance;\n        const MIDDLE_LINE = 3;\n        if (stem_direction === Stem.UP) {\n            // Note that the use of maxLine here instead of minLine might\n            // seem counterintuitive, but in the case of (say) treble clef\n            // chord(F2, E4) stem up, we do not want to extend the stem because\n            // of F2, when a normal octave-length stem above E4 is fine.\n            //\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\n            // will be known.\n            mid_line_distance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            mid_line_distance = this.minLine - MIDDLE_LINE;\n        }\n        // how many lines more than an octave is the relevant notehead?\n        const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n        if (lines_over_octave_from_mid_line <= 0) {\n            return super_stem_extension;\n        }\n        const stave = this.getStave();\n        let spacing_between_lines = 10;\n        if (stave != undefined) {\n            spacing_between_lines = stave.getSpacingBetweenLines();\n        }\n        return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n    }\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw() {\n        var _a;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        // Format note head x positions\n        this._noteHeads.forEach((notehead) => notehead.setX(xBegin));\n        // Format stem x positions\n        const stemX = this.getStemX();\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setNoteHeadXBounds(stemX, stemX);\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        // Apply the overall style -- may be contradicted by local settings:\n        this.applyStyle();\n        this.setAttribute('el', ctx.openGroup('stavenote', this.getAttribute('id')));\n        this.drawLedgerLines();\n        ctx.openGroup('note', undefined, { pointerBBox: true });\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        ctx.closeGroup();\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle();\n        this.setRendered();\n    }\n}\nStaveNote.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n//\n// Utilities for working with Web APIs.\n// See: https://developer.mozilla.org/en-US/docs/Web/API\nimport { globalObject } from './util';\n// eslint-disable-next-line\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLCanvasElement class,\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        // OR it's pretending to be a <canvas> element. Good enough!\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\n// eslint-disable-next-line\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLDivElement class.\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font } from './font';\nimport { RenderContext } from './rendercontext';\nimport { globalObject, warn } from './util';\nimport { isHTMLCanvas } from './web';\n/**\n * A rendering context for the Canvas backend. This class serves as a proxy for the\n * underlying CanvasRenderingContext2D object, part of the browser's API.\n */\nexport class CanvasContext extends RenderContext {\n    constructor(context) {\n        super();\n        /** Height of one line of text (in pixels). */\n        this.textHeight = 0;\n        this.context2D = context;\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n    }\n    /**\n     * Ensure that width and height do not exceed the browser limit.\n     * @returns array of [width, height] clamped to the browser limit.\n     */\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    /**\n     * Set all pixels to transparent black rgba(0,0,0,0).\n     */\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // eslint-disable-next-line\n    openGroup(cls, id, attrs) {\n        // Containers not implemented.\n    }\n    closeGroup() {\n        // Containers not implemented.\n    }\n    // eslint-disable-next-line\n    add(child) {\n        // Containers not implemented.\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\n    // eslint-disable-next-line\n    setBackgroundFillStyle(style) {\n        // DO NOTHING\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\n        // transform, so we have to do it manually. We assume uniform scaling\n        // (though allow for rotation) because the blur can only be scaled\n        // uniformly anyway.\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height) {\n        const canvas = this.context2D.canvas;\n        const devicePixelRatio = globalObject().devicePixelRatio || 1;\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);\n        // Divide back down by the pixel ratio and convert to integers.\n        width = (width / devicePixelRatio) | 0;\n        height = (height / devicePixelRatio) | 0;\n        canvas.width = width * devicePixelRatio;\n        canvas.height = height * devicePixelRatio;\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\n        // Only HTMLCanvasElement has a style attribute.\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(devicePixelRatio, devicePixelRatio);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    /**\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n     */\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        // Return x, y, width & height in the same manner as svg getBBox\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.context2D.font;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Gregory Ristow (2015)\nimport { Font, FontStyle, FontWeight } from './font';\nimport { RenderContext } from './rendercontext';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\nclass MeasureTextCache {\n    constructor() {\n        // The cache is keyed first by the text string, then by the font attributes\n        // joined together.\n        this.cache = {};\n    }\n    lookup(text, svg, attributes) {\n        let entries = this.cache[text];\n        if (entries === undefined) {\n            entries = {};\n            this.cache[text] = entries;\n        }\n        const family = attributes['font-family'];\n        const size = attributes['font-size'];\n        const weight = attributes['font-weight'];\n        const style = attributes['font-style'];\n        const key = `${family}%${size}%${weight}%${style}`;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = this.measureImpl(text, svg, attributes);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n    measureImpl(text, svg, attributes) {\n        let txt = this.txt;\n        if (!txt) {\n            // Create the SVG text element that will be used to measure text in the event\n            // of a cache miss.\n            txt = document.createElementNS(SVG_NS, 'text');\n            this.txt = txt;\n        }\n        txt.textContent = text;\n        txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n        txt.setAttributeNS(null, 'font-size', attributes['font-size']);\n        txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n        txt.setAttributeNS(null, 'font-weight', attributes['font-weight']);\n        svg.appendChild(txt);\n        const bbox = txt.getBBox();\n        svg.removeChild(txt);\n        return { x: bbox.x, y: bbox.y, width: bbox.width, height: bbox.height };\n    }\n}\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        this.width = 0;\n        this.height = 0;\n        this.backgroundFillStyle = 'white';\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\n        this.fontCSSString = '';\n        this.element = element;\n        // Create a SVG element and add it to the container element.\n        const svg = this.create('svg');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        this.lineWidth = 1.0;\n        const defaultFontAttributes = {\n            'font-family': Font.SANS_SERIF,\n            'font-size': Font.SIZE + 'pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scale: { x: 1, y: 1 } }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\n        this.shadow_attributes = {\n            width: 0,\n            color: 'black',\n        };\n        this.state_stack = [];\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    // Allow grouping elements in containers for interactivity.\n    openGroup(cls, id, attrs) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        if (attrs && attrs.pointerBBox) {\n            group.setAttribute('pointer-events', 'bounding-box');\n        }\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    /**\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\n     * cutting a \"hole\" into the SVG drawing.\n     */\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.shadow_attributes.color = color;\n        return this;\n    }\n    /**\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\n     *             represents no blur and larger numbers represent increasingly more blur.\n     * @returns this\n     */\n    setShadowBlur(blur) {\n        this.shadow_attributes.width = blur;\n        return this;\n    }\n    /**\n     * @param width\n     * @returns this\n     */\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        this.lineWidth = width;\n        return this;\n    }\n    /**\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n     * @returns this\n     *\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    /**\n     * @param capType\n     * @returns this\n     */\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    // ### Sizing & Scaling Methods:\n    // TODO (GCR): See note at scale() -- separate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scale.x, this.state.scale.y);\n        return this;\n    }\n    scale(x, y) {\n        // uses viewBox to scale\n        // TODO (GCR): we may at some point want to distinguish the\n        // style.width / style.height properties that are applied to\n        // the SVG object from our internal conception of the SVG\n        // width/height.  This would allow us to create automatically\n        // scaling SVG's that filled their containers, for instance.\n        //\n        // As this isn't implemented in Canvas contexts,\n        // I've left as is for now, but in using the viewBox to\n        // handle internal scaling, am trying to make it possible\n        // for us to eventually move in that direction.\n        this.state.scale = { x, y };\n        const visibleWidth = this.width / x;\n        const visibleHeight = this.height / y;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    /**\n     * 1 arg: string in the \"x y w h\" format\n     * 4 args: x:number, y:number, w:number, h:number\n     */\n    setViewBox(viewBox_or_minX, minY, width, height) {\n        if (typeof viewBox_or_minX === 'string') {\n            this.svg.setAttribute('viewBox', viewBox_or_minX);\n        }\n        else {\n            const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    // ### Drawing helper methods:\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    // ### Shape & Path Methods:\n    clear() {\n        // Clear the SVG by removing all inner children.\n        // (This approach is usually slightly more efficient\n        // than removing the old SVG & adding a new one to\n        // the container element, since it does not cause the\n        // container to resize twice.  Also, the resize\n        // triggered by removing the entire SVG can trigger\n        // a touchcancel event when the element resizes away\n        // from a touch point.)\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        // Replace the viewbox attribute we just removed.\n        this.scale(this.state.scale.x, this.state.scale.y);\n    }\n    // ## Rectangles:\n    rect(x, y, width, height, attributes) {\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        // Currently this fills a rect with the backgroundFillStyle, rather\n        // than \"cut a hole\" into the existing shapes.\n        //\n        // Since tabNote seems to be the only module that makes use of this\n        // it may be worth creating a separate tabStave that would\n        // draw lines around locations of tablature fingering.\n        this.rect(x, y, width, height, { 'stroke-width': 0, fill: this.backgroundFillStyle });\n        return this;\n    }\n    // ## Paths:\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        const x0 = x + radius * Math.cos(startAngle);\n        const y0 = y + radius * Math.sin(startAngle);\n        // Handle the edge case where arc length is greater than or equal to\n        // the circle's circumference:\n        //   https://html.spec.whatwg.org/multipage/canvas.html#ellipse-method-steps\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI)) {\n            const x1 = x + radius * Math.cos(startAngle + Math.PI);\n            const y1 = y + radius * Math.sin(startAngle + Math.PI);\n            // There's no way to specify a completely circular arc in SVG so we have to\n            // use two semi-circular arcs.\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            const x1 = x + radius * Math.cos(endAngle);\n            const y1 = y + radius * Math.sin(endAngle);\n            startAngle = normalizeAngle(startAngle);\n            endAngle = normalizeAngle(endAngle);\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    getShadowStyle() {\n        const sa = this.shadow_attributes;\n        // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n        // of the same radius, so we scale the drop-shadow radius here to make it\n        // look close to the canvas shadow.\n        return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    // ## Text Methods:\n    measureText(text) {\n        return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    // TODO: State should be deep-copied.\n    save() {\n        this.state_stack.push({\n            state: {\n                'font-family': this.state['font-family'],\n                'font-weight': this.state['font-weight'],\n                'font-style': this.state['font-style'],\n                'font-size': this.state['font-size'],\n                scale: this.state.scale,\n            },\n            attributes: {\n                'font-family': this.attributes['font-family'],\n                'font-weight': this.attributes['font-weight'],\n                'font-style': this.attributes['font-style'],\n                'font-size': this.attributes['font-size'],\n                fill: this.attributes.fill,\n                stroke: this.attributes.stroke,\n                'stroke-width': this.attributes['stroke-width'],\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\n            },\n            shadow_attributes: {\n                width: this.shadow_attributes.width,\n                color: this.shadow_attributes.color,\n            },\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    }\n    // TODO: State should be deep-restored.\n    restore() {\n        const savedState = this.state_stack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state['font-family'] = state.state['font-family'];\n            this.state['font-weight'] = state.state['font-weight'];\n            this.state['font-style'] = state.state['font-style'];\n            this.state['font-size'] = state.state['font-size'];\n            this.state.scale = state.state.scale;\n            this.attributes['font-family'] = state.attributes['font-family'];\n            this.attributes['font-weight'] = state.attributes['font-weight'];\n            this.attributes['font-style'] = state.attributes['font-style'];\n            this.attributes['font-size'] = state.attributes['font-size'];\n            this.attributes.fill = state.attributes.fill;\n            this.attributes.stroke = state.attributes.stroke;\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n            this.shadow_attributes.width = state.shadow_attributes.width;\n            this.shadow_attributes.color = state.shadow_attributes.color;\n            this.lineWidth = state.lineWidth;\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\n     *              font-style attribute (e.g., font-style=\"italic\")\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.fontCSSString;\n    }\n}\nSVGContext.measureTextCache = new MeasureTextCache();\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { isRenderContext } from './typeguard';\nimport { RuntimeError } from './util';\nimport { isHTMLCanvas, isHTMLDiv } from './web';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\n// End of line types\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            // The user has provided what looks like a RenderContext, let's just use it.\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                // The backend must be specified if the render context isn't directly provided.\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 == 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            // Verify backend and create context\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d');\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    // Draw a dashed line (horizontal, vertical or diagonal\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n    // setting the second number to 0 draws a solid line.\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\n// Used by vexflow_test_helpers.ts\n// Should this be private?\n// Can we do this in a cleaner way?\nRenderer.lastContext = undefined;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var Justification;\n(function (Justification) {\n    Justification[Justification[\"LEFT\"] = 1] = \"LEFT\";\n    Justification[Justification[\"CENTER\"] = 2] = \"CENTER\";\n    Justification[Justification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(Justification || (Justification = {}));\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.text = noteStruct.text || '';\n        this.superscript = noteStruct.superscript;\n        this.subscript = noteStruct.subscript;\n        this.setFont(noteStruct.font);\n        this.line = noteStruct.line || 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignore_ticks = noteStruct.ignore_ticks || false;\n        this.justification = Justification.LEFT;\n        // Determine and set initial note width. Note that the text width is\n        // an approximation and isn't very accurate. The only way to accurately\n        // measure the length of text is with `CanvasRenderingContext2D.measureText()`.\n        if (noteStruct.glyph) {\n            const struct = TextNote.GLYPHS[noteStruct.glyph];\n            if (!struct)\n                throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n            this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n            this.setWidth(this.glyph.getMetrics().width);\n        }\n        else {\n            this.glyph = undefined;\n        }\n    }\n    static get CATEGORY() {\n        return Category.TextNote;\n    }\n    static get Justification() {\n        return Justification;\n    }\n    /** Glyph data. */\n    static get GLYPHS() {\n        return {\n            segno: {\n                code: 'segno',\n            },\n            tr: {\n                code: 'ornamentTrill',\n            },\n            mordent: {\n                code: 'ornamentMordent',\n            },\n            mordent_upper: {\n                code: 'ornamentShortTrill',\n            },\n            mordent_lower: {\n                code: 'ornamentMordent',\n            },\n            f: {\n                code: 'dynamicForte',\n            },\n            p: {\n                code: 'dynamicPiano',\n            },\n            m: {\n                code: 'dynamicMezzo',\n            },\n            s: {\n                code: 'dynamicSforzando',\n            },\n            z: {\n                code: 'dynamicZ',\n            },\n            coda: {\n                code: 'coda',\n            },\n            pedal_open: {\n                code: 'keyboardPedalPed',\n            },\n            pedal_close: {\n                code: 'keyboardPedalUp',\n            },\n            caesura_straight: {\n                code: 'caesura',\n            },\n            caesura_curved: {\n                code: 'caesuraCurved',\n            },\n            breath: {\n                code: 'breathMarkComma',\n            },\n            tick: {\n                code: 'breathMarkTick',\n            },\n            turn: {\n                code: 'ornamentTurn',\n            },\n            turn_inverted: {\n                code: 'ornamentTurnSlash',\n            },\n        };\n    }\n    /** Set the horizontal justification of the TextNote. */\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.smooth) {\n            this.setWidth(0);\n        }\n        else {\n            if (this.glyph) {\n                // Width already set.\n            }\n            else {\n                const ctx = this.checkContext();\n                ctx.setFont(this.textFont);\n                this.setWidth(ctx.measureText(this.text).width);\n            }\n        }\n        if (this.justification === Justification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === Justification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        // We reposition to the center of the note head\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    /**\n     * Renders the TextNote.\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        // Reposition to center of note head\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        // Align based on tick-context width.\n        const width = this.getWidth();\n        if (this.justification === Justification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === Justification.RIGHT) {\n            x -= width;\n        }\n        let y;\n        if (this.glyph) {\n            y = stave.getYForLine(this.line + -3);\n            this.glyph.render(ctx, x, y);\n        }\n        else {\n            y = stave.getYForLine(this.line + -3);\n            this.applyStyle(ctx);\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, x, y);\n            const height = ctx.measureText(this.text).height;\n            // We called this.setFont(...) in the constructor, so we know this.textFont is available.\n            // eslint-disable-next-line\n            const { family, size, weight, style } = this.textFont;\n            // Scale the font size by 1/1.3.\n            const smallerFontSize = Font.scaleSize(size, 0.769231);\n            if (this.superscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n            }\n            if (this.subscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n            }\n            this.restoreStyle(ctx);\n        }\n    }\n}\nTextNote.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 12,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\nimport { Font, FontStyle, FontWeight } from './font';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    constructor(type, number, x, y_shift) {\n        super();\n        this.volta = type;\n        this.x = x;\n        this.y_shift = y_shift;\n        this.number = number;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.Volta;\n    }\n    static get type() {\n        return VoltaType;\n    }\n    setShiftY(y) {\n        this.y_shift = y;\n        return this;\n    }\n    draw(stave, x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x; // don't include x (offset) for width\n        const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        const vert_height = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.volta) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n                break;\n            default:\n                break;\n        }\n        // If the beginning of a volta, draw measure number\n        if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n            ctx.restore();\n        }\n        ctx.fillRect(this.x + x, top_y, width, 1);\n        return this;\n    }\n}\nVolta.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 9,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Renderer } from './renderer';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StringNumber extends Modifier {\n    constructor(number) {\n        super();\n        this.string_number = number;\n        this.setWidth(20); // ???\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.text_line = 0;\n        this.stem_offset = 0;\n        this.x_offset = 0; // Horizontal offset from default\n        this.y_offset = 0; // Vertical offset from default\n        this.dashed = true; // true - draw dashed extension  false - no extension\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n        this.radius = 8;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.StringNumber;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static get metrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.stringNumber;\n    }\n    // ## Static Methods\n    // Arrange string numbers inside a `ModifierContext`\n    static format(nums, state) {\n        const left_shift = state.left_shift;\n        const right_shift = state.right_shift;\n        const num_spacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const nums_list = [];\n        let prev_note = null;\n        let shift_left = 0;\n        let shift_right = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.text_line = mc.getState().top_text_line;\n                    state.top_text_line += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.text_line = mc.getState().text_line;\n                    state.text_line += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prev_note) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (left_shift === 0) {\n                        shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n                    }\n                    if (right_shift === 0) {\n                        shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n                    }\n                }\n                prev_note = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            nums_list.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: shift_left,\n                shiftR: shift_right,\n            });\n        }\n        // Sort string numbers by line number.\n        nums_list.sort((a, b) => b.line - a.line);\n        let num_shiftR = 0;\n        let x_widthL = 0;\n        let x_widthR = 0;\n        let last_line = null;\n        let last_note = null;\n        for (let i = 0; i < nums_list.length; ++i) {\n            let num_shift = 0;\n            const note = nums_list[i].note;\n            const pos = nums_list[i].pos;\n            const num = nums_list[i].num;\n            const line = nums_list[i].line;\n            const shiftR = nums_list[i].shiftR;\n            // Reset the position of the string number every line.\n            if (line !== last_line || note !== last_note) {\n                num_shiftR = right_shift + shiftR;\n            }\n            const num_width = num.getWidth() + num_spacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(left_shift);\n                num_shift = shift_left + num_width; // spacing\n                x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(num_shiftR);\n                num_shift += num_width; // spacing\n                x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n            }\n            last_line = line;\n            last_note = note;\n        }\n        state.left_shift += x_widthL;\n        state.right_shift += x_widthR;\n        return true;\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.string_number = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.x_offset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.y_offset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.last_note = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dot_x = start.x + this.x_shift + this.x_offset;\n        let stem_ext = {};\n        if (note.hasStem()) {\n            stem_ext = note.checkStem().getExtents();\n        }\n        let dot_y = start.y + this.y_shift + this.y_offset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dot_y = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection == Stem.UP) {\n                        dot_y = stem_ext.topY + StringNumber.metrics.stemPadding;\n                    }\n                    dot_y -= this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dot_y = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection == Stem.DOWN) {\n                        dot_y = stem_ext.topY - StringNumber.metrics.stemPadding;\n                    }\n                    dot_y += this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dot_x -= this.radius / 2 + StringNumber.metrics.leftPadding;\n                break;\n            case Modifier.Position.RIGHT:\n                dot_x += this.radius / 2 + StringNumber.metrics.rightPadding;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        ctx.save();\n        ctx.beginPath();\n        ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n        ctx.setLineWidth(1.5);\n        ctx.stroke();\n        ctx.setFont(this.textFont);\n        const x = dot_x - ctx.measureText(this.string_number).width / 2;\n        ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n        const lastNote = this.last_note;\n        if (isStemmableNote(lastNote)) {\n            // Only StemmableNote objects have getStemX().\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n        ctx.restore();\n    }\n}\nStringNumber.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Stroke extends Modifier {\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ all_voices: true }, options);\n        // multi voice - span stroke across all voices if true\n        this.all_voices = this.options.all_voices;\n        // multi voice - end note of stroke, set in draw()\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.render_options = {\n            font_scale: 38,\n        };\n        this.resetFont();\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    static get CATEGORY() {\n        return Category.Stroke;\n    }\n    // Arrange strokes inside `ModifierContext`\n    static format(strokes, state) {\n        const left_shift = state.left_shift;\n        const stroke_spacing = 0;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                // Only StaveNote objects have getKeyProps().\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                // Only TabNote objects have getPositions().\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = left_shift;\n        // There can only be one stroke .. if more than one, they overlay each other\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n        }, 0);\n        state.left_shift += xShift;\n        return true;\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.note_end = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let ys = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const line_space = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                // Only Note objects have getYs().\n                // note is an instance of either StaveNote or TabNote.\n                ys = note.getYs();\n                for (let n = 0; n < ys.length; n++) {\n                    if (this.note === notes[i] || this.all_voices) {\n                        topY = Math.min(topY, ys[n]);\n                        botY = Math.max(botY, ys[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrow_shift_x = 0;\n        let arrow_y = 0;\n        let text_shift_x = 0;\n        let text_y = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n                arrow = 'arrowheadBlackUp';\n                arrow_shift_x = -3;\n                arrow_y = topY - line_space / 2 + 10;\n                botY += line_space / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n                arrow = 'arrowheadBlackDown';\n                arrow_shift_x = 0.5;\n                arrow_y = botY + line_space / 2;\n                topY -= line_space / 2;\n                break;\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASQUEDO_DOWN:\n                arrow = 'arrowheadBlackUp';\n                arrow_shift_x = -3;\n                text_shift_x = this.x_shift + arrow_shift_x - 2;\n                if (isStaveNote(note)) {\n                    topY += 1.5 * line_space;\n                    if ((botY - topY) % 2 !== 0) {\n                        botY += 0.5 * line_space;\n                    }\n                    else {\n                        botY += line_space;\n                    }\n                    arrow_y = topY - line_space;\n                    text_y = botY + line_space + 2;\n                }\n                else {\n                    topY += 1.5 * line_space;\n                    botY += line_space;\n                    arrow_y = topY - 0.75 * line_space;\n                    text_y = botY + 0.25 * line_space;\n                }\n                break;\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASQUEDO_UP:\n                arrow = 'arrowheadBlackDown';\n                arrow_shift_x = -4;\n                text_shift_x = this.x_shift + arrow_shift_x - 1;\n                if (isStaveNote(note)) {\n                    arrow_y = line_space / 2;\n                    topY += 0.5 * line_space;\n                    if ((botY - topY) % 2 === 0) {\n                        botY += line_space / 2;\n                    }\n                    arrow_y = botY + 0.5 * line_space;\n                    text_y = topY - 1.25 * line_space;\n                }\n                else {\n                    topY += 0.25 * line_space;\n                    botY += 0.5 * line_space;\n                    arrow_y = botY + 0.25 * line_space;\n                    text_y = topY - line_space;\n                }\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY += 0.5 * line_space;\n                botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        let strokeLine = 'straight';\n        // Draw the stroke\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n        }\n        else {\n            strokeLine = 'wiggly';\n            if (isStaveNote(note)) {\n                for (let i = topY; i <= botY; i += line_space) {\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n                }\n            }\n            else {\n                let i;\n                for (i = topY; i <= botY; i += 10) {\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n                }\n                if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n                    text_y = i + 0.25 * line_space;\n                }\n            }\n        }\n        if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n            return; // skip drawing arrow heads or text\n        }\n        // Draw the arrow head\n        Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n            category: `stroke.${arrow}.${strokeLine}`,\n        });\n        // Draw the rasquedo \"R\"\n        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText('R', x + text_shift_x, text_y);\n            ctx.restore();\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3,\n    ROLL_UP: 4,\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n};\nStroke.TEXT_FONT = {\n    family: Font.SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.render_options = {\n            harsh: false,\n            vibrato_width: 20,\n            wave_height: 6,\n            wave_width: 4,\n            wave_girth: 2,\n        };\n        this.setVibratoWidth(this.render_options.vibrato_width);\n    }\n    static get CATEGORY() {\n        return Category.Vibrato;\n    }\n    /** Arrange vibratos inside a `ModifierContext`. */\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        // Vibratos are always on top.\n        let text_line = state.top_text_line;\n        let width = 0;\n        let shift = state.right_shift - 7;\n        // If there's a bend, drop the text line\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            text_line = text_line - (bendHeight + 1);\n        }\n        else {\n            state.top_text_line += 1;\n        }\n        // Format Vibratos\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(text_line);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.right_shift += width;\n        return true;\n    }\n    /** Set harsh vibrato. */\n    setHarsh(harsh) {\n        this.render_options.harsh = harsh;\n        return this;\n    }\n    /** Set vibrato width in pixels. */\n    setVibratoWidth(width) {\n        this.render_options.vibrato_width = width;\n        this.setWidth(width);\n        return this;\n    }\n    /** Draw the vibrato on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x + this.x_shift;\n        const vy = note.getYForTopText(this.text_line) + 2;\n        Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n    }\n    /**\n     * Static rendering method that can be called from\n     * other classes (e.g. VibratoBracket).\n     */\n    static renderVibrato(ctx, x, y, opts) {\n        const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n        const num_waves = vibrato_width / wave_width;\n        ctx.beginPath();\n        let i;\n        if (harsh) {\n            ctx.moveTo(x, y + wave_girth + 1);\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.lineTo(x + wave_width, y - wave_height / 2);\n                x += wave_width;\n                ctx.lineTo(x + wave_width, y + wave_height / 2);\n                x += wave_width;\n            }\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n                x -= wave_width;\n                ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n                x -= wave_width;\n            }\n            ctx.fill();\n        }\n        else {\n            ctx.moveTo(x, y + wave_girth);\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n                x += wave_width;\n                ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n                x += wave_width;\n            }\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n                x -= wave_width;\n                ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n                x -= wave_width;\n            }\n            ctx.fill();\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.)\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('Vex.Flow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        // Formatting data.\n        this.state = {\n            left_shift: 0,\n            right_shift: 0,\n            text_line: 0,\n            top_text_line: 0,\n        };\n        // Current members\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    /**\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n     * Here we add a new member to this.members, and create a new array if needed.\n     * @param member\n     * @returns this\n     */\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    /**\n     * @deprecated\n     */\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.left_shift;\n    }\n    getRightShift() {\n        return this.state.right_shift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.left_shift + this.state.right_shift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        // The ordering below determines when different members are formatted and rendered.\n        StaveNote.format(members[Category.StaveNote], state);\n        Parenthesis.format(members[Category.Parenthesis], state);\n        Dot.format(members[Category.Dot], state);\n        FretHandFinger.format(members[Category.FretHandFinger], state);\n        Accidental.format(members[Category.Accidental], state);\n        Stroke.format(members[Category.Stroke], state);\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\n        StringNumber.format(members[Category.StringNumber], state);\n        Articulation.format(members[Category.Articulation], state);\n        Ornament.format(members[Category.Ornament], state);\n        Annotation.format(members[Category.Annotation], state);\n        ChordSymbol.format(members[Category.ChordSymbol], state);\n        Bend.format(members[Category.Bend], state);\n        Vibrato.format(members[Category.Vibrato], state, this);\n        // Update width of this member context\n        this.width = state.left_shift + state.right_shift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        // If post-formatting is required for an element, add more lines below.\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\n    }\n}\nModifierContext.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n// MIT License\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('Vex.Flow.Clef', args);\n}\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n    /** Create a new clef. */\n    constructor(type, size, annotation) {\n        super();\n        /**\n         * The attribute `clef` must be a key from\n         * `Clef.types`\n         */\n        this.clef = Clef.types['treble'];\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        this.setWidth(Tables.currentMusicFont().lookupMetric(`clef.${this.size}.width`));\n        L('Creating clef:', type);\n    }\n    static get CATEGORY() {\n        return Category.Clef;\n    }\n    /**\n     * Every clef name is associated with a glyph code from the font file\n     * and a default stave line number.\n     */\n    static get types() {\n        return {\n            treble: {\n                code: 'gClef',\n                line: 3,\n                point: 0,\n            },\n            bass: {\n                code: 'fClef',\n                line: 1,\n                point: 0,\n            },\n            alto: {\n                code: 'cClef',\n                line: 2,\n                point: 0,\n            },\n            tenor: {\n                code: 'cClef',\n                line: 1,\n                point: 0,\n            },\n            percussion: {\n                code: 'restMaxima',\n                line: 2,\n                point: 0,\n            },\n            soprano: {\n                code: 'cClef',\n                line: 4,\n                point: 0,\n            },\n            'mezzo-soprano': {\n                code: 'cClef',\n                line: 3,\n                point: 0,\n            },\n            'baritone-c': {\n                code: 'cClef',\n                line: 0,\n                point: 0,\n            },\n            'baritone-f': {\n                code: 'fClef',\n                line: 2,\n                point: 0,\n            },\n            subbass: {\n                code: 'fClef',\n                line: 0,\n                point: 0,\n            },\n            french: {\n                code: 'gClef',\n                line: 4,\n                point: 0,\n            },\n            tab: {\n                code: '6stringTabClef',\n                point: 0,\n            },\n        };\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.type = type;\n        this.clef = Clef.types[type];\n        if (size === undefined) {\n            this.size = 'default';\n        }\n        else {\n            this.size = size;\n        }\n        const musicFont = Tables.currentMusicFont();\n        this.clef.point = musicFont.lookupMetric(`clef.${this.size}.point`, 0);\n        this.glyph = new Glyph(this.clef.code, this.clef.point, {\n            category: `clef.${this.clef.code}.${this.size}`,\n        });\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\n        if (annotation !== undefined) {\n            const code = musicFont.lookupMetric(`clef.annotations.${annotation}.smuflCode`);\n            const point = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.point`);\n            const line = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.line`);\n            const x_shift = musicFont.lookupMetric(`clef.annotations.${annotation}.${this.size}.${this.type}.shiftX`);\n            this.annotation = { code, point, line, x_shift };\n            this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n            this.attachment.metrics.x_max = 0;\n            this.attachment.setXShift(this.annotation.x_shift);\n        }\n        else {\n            this.annotation = undefined;\n        }\n        return this;\n    }\n    /** Get clef width. */\n    getWidth() {\n        if (this.type === 'tab') {\n            defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n        }\n        return this.width;\n    }\n    /** Set associated stave. */\n    setStave(stave) {\n        this.stave = stave;\n        if (this.type === 'tab') {\n            const glyph = defined(this.glyph, 'ClefError', \"Can't set stave without glyph.\");\n            const numLines = this.stave.getNumLines();\n            const musicFont = Tables.currentMusicFont();\n            const point = musicFont.lookupMetric(`clef.lineCount.${numLines}.point`);\n            const shiftY = musicFont.lookupMetric(`clef.lineCount.${numLines}.shiftY`);\n            glyph.setPoint(point);\n            glyph.setYShift(shiftY);\n        }\n        return this;\n    }\n    /** Render clef. */\n    draw() {\n        const glyph = defined(this.glyph, 'ClefError', \"Can't draw clef without glyph.\");\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.openGroup('clef', this.getAttribute('id'));\n        glyph.setStave(stave);\n        glyph.setContext(ctx);\n        if (this.clef.line !== undefined) {\n            this.placeGlyphOnLine(glyph, stave, this.clef.line);\n        }\n        glyph.renderToStave(this.x);\n        if (this.annotation !== undefined && this.attachment !== undefined) {\n            this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n            this.attachment.setStave(stave);\n            this.attachment.setContext(ctx);\n            this.attachment.renderToStave(this.x);\n        }\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\nClef.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport class KeySignature extends StaveModifier {\n    // Create a new Key Signature based on a `key_spec`\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n        this.glyphs = [];\n        this.xPositions = []; // relative to this.x\n        this.paddingForced = false;\n    }\n    static get CATEGORY() {\n        return Category.KeySignature;\n    }\n    // Add an accidental glyph to the `KeySignature` instance which represents\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n    // spacing will be included in the glyph's position\n    convertToGlyph(acc, nextAcc) {\n        const accGlyphData = Tables.accidentalCodes(acc.type);\n        const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n        // Determine spacing between current accidental and the next accidental\n        let extraWidth = 1;\n        if (acc.type === 'n' && nextAcc) {\n            const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n            if (spacing) {\n                const isAbove = nextAcc.line >= acc.line;\n                extraWidth = isAbove ? spacing.above : spacing.below;\n            }\n        }\n        // Place the glyph on the stave\n        this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\n        this.glyphs.push(glyph);\n        const xPosition = this.xPositions[this.xPositions.length - 1];\n        const glyphWidth = glyph.getMetrics().width + extraWidth;\n        // Store the next accidental's x position\n        this.xPositions.push(xPosition + glyphWidth);\n        // Expand size of key signature\n        this.width += glyphWidth;\n    }\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    convertToCancelAccList(spec) {\n        // Get the accidental list for the cancelled key signature\n        const cancel_accList = Tables.keySignature(spec);\n        // If the cancelled key has a different accidental type, ie: # vs b\n        const different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n        // Determine how many naturals needed to add\n        const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n        // Return if no naturals needed\n        if (naturals < 1)\n            return undefined;\n        // Get the line position for each natural\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!different_types) {\n                index = cancel_accList.length - naturals + i;\n            }\n            const acc = cancel_accList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        // Combine naturals with main accidental list for the key signature\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancel_accList[0].type,\n        };\n    }\n    // Deprecated\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0; // if clef === \"treble\"\n        let customLines; // when clef doesn't follow treble key sig shape\n        switch (clef) {\n            // Treble & Subbass both have offsets of 0, so are not included.\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        // If there's a special case, assign those lines/spaces:\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    getWidth() {\n        if (!this.formatted)\n            this.format();\n        return this.width;\n    }\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Alter the accidentals of a key spec one by one.\n    // Each alteration is a new accidental that replaces the\n    // original accidental (or the canceled one).\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    format() {\n        const stave = this.checkStave();\n        this.width = 0;\n        this.glyphs = [];\n        this.xPositions = [0]; // initialize with initial x position\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n            }\n        }\n        this.formatted = true;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.glyphs.length; i++) {\n            const glyph = this.glyphs[i];\n            const x = this.x + this.xPositions[i];\n            glyph.setStave(stave);\n            glyph.setContext(ctx);\n            glyph.renderToStave(x);\n        }\n        ctx.closeGroup();\n    }\n}\n// Space between natural and following accidental depending\n// on vertical position\nKeySignature.accidentalSpacing = {\n    '#': {\n        above: 6,\n        below: 4,\n    },\n    b: {\n        above: 4,\n        below: 7,\n    },\n    n: {\n        above: 4,\n        below: 1,\n    },\n    '##': {\n        above: 6,\n        below: 4,\n    },\n    bb: {\n        above: 4,\n        below: 7,\n    },\n    db: {\n        above: 4,\n        below: 7,\n    },\n    d: {\n        above: 4,\n        below: 7,\n    },\n    bbs: {\n        above: 4,\n        below: 7,\n    },\n    '++': {\n        above: 6,\n        below: 4,\n    },\n    '+': {\n        above: 6,\n        below: 4,\n    },\n    '+-': {\n        above: 6,\n        below: 4,\n    },\n    '++-': {\n        above: 6,\n        below: 4,\n    },\n    bs: {\n        above: 4,\n        below: 10,\n    },\n    bss: {\n        above: 4,\n        below: 10,\n    },\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { StaveModifier } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport class Repetition extends StaveModifier {\n    constructor(type, x, y_shift) {\n        super();\n        this.symbol_type = type;\n        this.x = x;\n        this.x_shift = 0;\n        this.y_shift = y_shift;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.Repetition;\n    }\n    setShiftX(x) {\n        this.x_shift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.y_shift = y;\n        return this;\n    }\n    draw(stave, x) {\n        this.setRendered();\n        switch (this.symbol_type) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSignoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSignoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.default.offsetY'), 40, 'coda', { category: 'coda' });\n        return this;\n    }\n    drawSignoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.default.offsetY'), 30, 'segno', { category: 'segno' });\n        return this;\n    }\n    drawSymbolText(stave, x, text, draw_coda) {\n        const ctx = stave.checkContext();\n        ctx.save();\n        ctx.setFont(this.textFont);\n        let text_x = 0;\n        let symbol_x = 0;\n        const modifierWidth = stave.getNoteStartX() - this.x;\n        switch (this.symbol_type) {\n            // To the left with symbol\n            case Repetition.type.CODA_LEFT:\n                // Offset Coda text to right of stave beginning\n                text_x = this.x + stave.getVerticalBarWidth();\n                symbol_x =\n                    text_x +\n                        ctx.measureText(text).width +\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.default.offsetSymbol');\n                break;\n            // To the right without symbol\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n                text_x =\n                    this.x +\n                        x +\n                        this.x_shift +\n                        stave.getWidth() -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.default.spacing') -\n                        modifierWidth -\n                        ctx.measureText(text).width;\n                break;\n            // To the right with symbol\n            default:\n                text_x =\n                    this.x +\n                        x +\n                        this.x_shift +\n                        stave.getWidth() -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.default.spacing') -\n                        modifierWidth -\n                        ctx.measureText(text).width -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.default.offsetSymbol');\n                symbol_x =\n                    text_x +\n                        ctx.measureText(text).width +\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.default.offsetSymbol');\n                break;\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) +\n            this.y_shift +\n            Tables.currentMusicFont().lookupMetric('staveRepetition.default.offsetY');\n        if (draw_coda) {\n            Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n        }\n        ctx.fillText(text, text_x, y + 5);\n        ctx.restore();\n        return this;\n    }\n}\nRepetition.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 12,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\nRepetition.type = {\n    NONE: 1,\n    CODA_LEFT: 2,\n    CODA_RIGHT: 3,\n    SEGNO_LEFT: 4,\n    SEGNO_RIGHT: 5,\n    DC: 6,\n    DC_AL_CODA: 7,\n    DC_AL_FINE: 8,\n    DS: 9,\n    DS_AL_CODA: 10,\n    DS_AL_FINE: 11,\n    FINE: 12,\n    TO_CODA: 13, // To Coda at end of stave\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\nimport { Font, FontStyle, FontWeight } from './font';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveSection extends StaveModifier {\n    constructor(section, x, shift_y) {\n        super();\n        this.setWidth(16);\n        this.section = section;\n        this.x = x;\n        this.shift_x = 0;\n        this.shift_y = shift_y;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.StaveSection;\n    }\n    setStaveSection(section) {\n        this.section = section;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    draw(stave, shift_x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        const paddingX = 2;\n        const paddingY = 2;\n        const rectWidth = 2;\n        const textMeasurements = ctx.measureText(this.section);\n        const textWidth = textMeasurements.width;\n        const textHeight = textMeasurements.height;\n        const width = textWidth + 2 * paddingX; // add left & right padding\n        const height = textHeight + 2 * paddingY; // add top & bottom padding\n        //  Seems to be a good default y\n        const y = stave.getYForTopText(2) + this.shift_y;\n        const x = this.x + shift_x;\n        ctx.beginPath();\n        ctx.setLineWidth(rectWidth);\n        ctx.rect(x, y + textMeasurements.y - paddingY, width, height);\n        ctx.stroke();\n        ctx.fillText(this.section, x + paddingX, y);\n        ctx.restore();\n        return this;\n    }\n}\nStaveSection.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 10,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport class StaveTempo extends StaveModifier {\n    constructor(tempo, x, shift_y) {\n        super();\n        /** Font size for note. */\n        this.render_options = { glyph_font_scale: 30 };\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.shift_x = 10;\n        this.shift_y = shift_y;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.StaveTempo;\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    draw(stave, shift_x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const options = this.render_options;\n        // FIXME: What does the '38' mean? Why 38? Is that supposed to\n        // be the default font size for standard notation?\n        const scale = options.glyph_font_scale / 38;\n        const name = this.tempo.name;\n        const duration = this.tempo.duration;\n        const dots = this.tempo.dots || 0;\n        const bpm = this.tempo.bpm;\n        let x = this.x + this.shift_x + shift_x;\n        const y = stave.getYForTopText(1) + this.shift_y;\n        ctx.save();\n        if (name) {\n            ctx.setFont(this.textFont);\n            ctx.fillText(name, x, y);\n            x += ctx.measureText(name).width;\n        }\n        if (duration && bpm) {\n            // Override the weight and style.\n            ctx.setFont(Object.assign(Object.assign({}, this.textFont), { weight: 'normal', style: 'normal' }));\n            if (name) {\n                x += ctx.measureText(' ').width;\n                ctx.fillText('(', x, y);\n                x += ctx.measureText('(').width;\n            }\n            const code = Tables.getGlyphProps(duration);\n            x += 3 * scale;\n            Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);\n            x += code.getWidth() * scale;\n            // Draw stem and flags\n            if (code.stem) {\n                let stem_height = 30;\n                if (code.beam_count)\n                    stem_height += 3 * (code.beam_count - 1);\n                stem_height *= scale;\n                const y_top = y - stem_height;\n                ctx.fillRect(x - scale, y_top, scale, stem_height);\n                if (code.flag) {\n                    Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem, {\n                        category: 'flag.staveTempo',\n                    });\n                    if (!dots)\n                        x += 6 * scale;\n                }\n            }\n            // Draw dot\n            for (let i = 0; i < dots; i++) {\n                x += 6 * scale;\n                ctx.beginPath();\n                ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n                ctx.fill();\n            }\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n        }\n        ctx.restore();\n        return this;\n    }\n}\nStaveTempo.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 14,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\nimport { Font, FontStyle, FontWeight } from './font';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Justification, TextNote } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveText extends StaveModifier {\n    constructor(text, position, options = {}) {\n        super();\n        this.setWidth(16);\n        this.text = text;\n        this.position = position;\n        this.options = Object.assign({ shift_x: 0, shift_y: 0, justification: TextNote.Justification.CENTER }, options);\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.StaveText;\n    }\n    setStaveText(text) {\n        this.text = text;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        const text_width = ctx.measureText('' + this.text).width;\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - text_width - 24 + this.options.shift_x;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX() + this.options.shift_x;\n                if (this.options.justification === Justification.CENTER) {\n                    x += stave.getWidth() / 2 - text_width / 2;\n                }\n                else if (this.options.justification === Justification.RIGHT) {\n                    x += stave.getWidth() - text_width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2) + this.options.shift_y;\n                }\n                else {\n                    y = stave.getYForBottomText(2) + this.options.shift_y;\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        ctx.fillText('' + this.text, x, y + 4);\n        ctx.restore();\n        return this;\n    }\n}\nStaveText.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 16,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Renders time signatures glyphs for staffs\n// This class is used by TimeSignature to render the associated glyphs\nimport { Glyph } from './glyph';\nimport { defined } from './util';\nexport class TimeSignatureGlyph extends Glyph {\n    constructor(timeSignature, topDigits, botDigits, code, point, options) {\n        var _a;\n        super(code, point, options);\n        this.timeSignature = timeSignature;\n        this.topGlyphs = [];\n        this.botGlyphs = [];\n        let topWidth = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            let timeSigType = topDigits[i];\n            switch (topDigits[i]) {\n                case '-':\n                    timeSigType = 'Minus';\n                    break;\n                case '+':\n                    timeSigType = botDigits.length > 0 ? 'PlusSmall' : 'Plus';\n                    break;\n                case '(':\n                    timeSigType = botDigits.length > 0 ? 'ParensLeftSmall' : 'ParensLeft';\n                    break;\n                case ')':\n                    timeSigType = botDigits.length > 0 ? 'ParensRightSmall' : 'ParensRight';\n                    break;\n            }\n            const topGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\n            this.topGlyphs.push(topGlyph);\n            topWidth += (_a = topGlyph.getMetrics().width) !== null && _a !== void 0 ? _a : 0;\n        }\n        let botWidth = 0;\n        for (let i = 0; i < botDigits.length; ++i) {\n            let timeSigType = botDigits[i];\n            switch (botDigits[i]) {\n                case '+':\n                    timeSigType = 'PlusSmall';\n                    break;\n                case '(':\n                    timeSigType = 'ParensLeftSmall';\n                    break;\n                case ')':\n                    timeSigType = 'ParensRightSmall';\n                    break;\n            }\n            const botGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\n            this.botGlyphs.push(botGlyph);\n            botWidth += defined(botGlyph.getMetrics().width);\n        }\n        this.width = Math.max(topWidth, botWidth);\n        this.xMin = this.getMetrics().x_min;\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n        this.reset();\n    }\n    getMetrics() {\n        return {\n            x_min: this.xMin,\n            x_max: this.xMin + this.width,\n            width: this.width,\n        };\n    }\n    renderToStave(x) {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        let start_x = x + this.topStartX;\n        let y = 0;\n        if (this.botGlyphs.length > 0)\n            y = stave.getYForLine(this.timeSignature.topLine);\n        else\n            y = (stave.getYForLine(this.timeSignature.topLine) + stave.getYForLine(this.timeSignature.bottomLine)) / 2;\n        for (let i = 0; i < this.topGlyphs.length; ++i) {\n            const glyph = this.topGlyphs[i];\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + this.x_shift, y);\n            start_x += defined(glyph.getMetrics().width);\n        }\n        start_x = x + this.botStartX;\n        y = stave.getYForLine(this.timeSignature.bottomLine);\n        for (let i = 0; i < this.botGlyphs.length; ++i) {\n            const glyph = this.botGlyphs[i];\n            this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + glyph.getMetrics().x_shift, y);\n            start_x += defined(glyph.getMetrics().width);\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { TimeSignatureGlyph } from './timesigglyph';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\n        throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\n    }\n    numbers.forEach((number) => {\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\n        if (/^[0-9+\\-()]+$/.test(number) == false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\nexport class TimeSignature extends StaveModifier {\n    constructor(timeSpec = '4/4', customPadding = 15, validate_args = true) {\n        super();\n        this.validate_args = validate_args;\n        const padding = customPadding;\n        const musicFont = Tables.currentMusicFont();\n        this.point = musicFont.lookupMetric('digits.point');\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.topLine = 2 + fontLineShift;\n        this.bottomLine = 4 + fontLineShift;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.info = this.parseTimeSpec(timeSpec);\n        this.setWidth(defined(this.info.glyph.getMetrics().width));\n        this.setPadding(padding);\n    }\n    static get CATEGORY() {\n        return Category.TimeSignature;\n    }\n    static get glyphs() {\n        return {\n            C: {\n                code: 'timeSigCommon',\n                point: 40,\n                line: 2,\n            },\n            'C|': {\n                code: 'timeSigCutCommon',\n                point: 40,\n                line: 2,\n            },\n        };\n    }\n    parseTimeSpec(timeSpec) {\n        var _a, _b;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const { line, code, point } = TimeSignature.glyphs[timeSpec];\n            return {\n                line,\n                num: false,\n                glyph: new Glyph(code, point),\n            };\n        }\n        if (this.validate_args) {\n            assertIsValidTimeSig(timeSpec);\n        }\n        const parts = timeSpec.split('/');\n        return {\n            num: true,\n            glyph: this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : ''),\n        };\n    }\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n    }\n    getInfo() {\n        return this.info;\n    }\n    setTimeSig(timeSpec) {\n        this.info = this.parseTimeSpec(timeSpec);\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        this.info.glyph.setStave(stave);\n        this.info.glyph.setContext(ctx);\n        this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\n        this.info.glyph.renderToStave(this.x);\n        ctx.closeGroup();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { KeySignature } from './keysignature';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { RuntimeError } from './util';\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    constructor(x, y, width, options) {\n        super();\n        // Initialized by the constructor via this.resetLines().\n        this.height = 0;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.start_x = x + 5;\n        this.end_x = x + width;\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.resetFont();\n        this.options = Object.assign({ vertical_bar_width: 10, num_lines: 5, fill_style: '#999999', left_bar: true, right_bar: true, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, space_above_staff_ln: 4, space_below_staff_ln: 4, top_text_position: 1, bottom_text_position: 4, line_config: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        // beg bar\n        this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n        // end bar\n        this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    static get CATEGORY() {\n        return Category.Stave;\n    }\n    // This is the sum of the padding that normally goes on left + right of a stave during\n    // drawing. Used to size staves correctly with content width.\n    static get defaultPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    // Right padding, used by system if startX is already determined.\n    static get rightPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    /** Set default style for ledger lines. */\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    /** Get default style for ledger lines. */\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacing_between_lines_px * spacing;\n    }\n    resetLines() {\n        this.options.line_config = [];\n        for (let i = 0; i < this.options.num_lines; i++) {\n            this.options.line_config.push({ visible: true });\n        }\n        this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n        this.options.bottom_text_position = this.options.num_lines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.start_x = x;\n        const begBarline = this.modifiers[0];\n        begBarline.setX(this.start_x - begBarline.getWidth());\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.start_x;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.end_x;\n    }\n    getTieStartX() {\n        return this.start_x;\n    }\n    getTieEndX() {\n        return this.end_x;\n    }\n    getX() {\n        return this.x;\n    }\n    getNumLines() {\n        return this.options.num_lines;\n    }\n    setNumLines(n) {\n        this.options.num_lines = n;\n        this.resetLines();\n        return this;\n    }\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    getY() {\n        return this.y;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.start_x += shift;\n        this.end_x += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.end_x = this.x + width;\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n        // this.modifiers[1].setX(this.end_x);\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fill_style, strokeStyle: this.options.fill_style, lineWidth: Tables.STAVE_LINE_THICKNESS }, this.style);\n    }\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let start_x = this.start_x - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n            start_x -= begBarline.getWidth();\n        }\n        return start_x;\n    }\n    /** Coda & Segno Symbol functions */\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    // Volta functions\n    setVoltaType(type, number_t, y) {\n        this.modifiers.push(new Volta(type, number_t, this.x, y));\n        return this;\n    }\n    // Section functions\n    setSection(section, y, xOffset = 0, fontSize) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y);\n        if (fontSize)\n            staveSection.setFontSize(fontSize);\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    // Tempo functions\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    // Text functions\n    setText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacing_between_lines_px;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n        return score_bottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.num_lines);\n    }\n    // This returns\n    /** @returns the y for the *center* of a staff line */\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        // Does the reverse of getYForLine - somewhat dumb and just calls\n        // getYForLine until the right value is reaches\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.top_text_position);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottom_text_position + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    // This method adds a stave modifier to the stave. Note that the first two\n    // modifiers (BarLines) are automatically added upon construction.\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    // Bar Line functions\n    setBegBarType(type) {\n        // Only valid bar types at beginning of stave is none, single or begin repeat\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        // Repeat end not valid at end of stave\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a key signature to the stave.\n     *\n     * Example:\n     * `stave.addKeySignature('Db');`\n     * @param keySpec new key specification `[A-G][b|#]?`\n     * @param cancelKeySpec\n     * @param position\n     * @returns\n     */\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    /**\n     * Add a clef to the stave.\n     *\n     * Example:\n     *\n     * stave.addClef('treble')\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\n     * @param size\n     * @param annotation\n     * @param position\n     * @returns\n     */\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a time signature to the stave\n     *\n     * Example:\n     *\n     * `stave.addTimeSignature('4/4');`\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n     * @param customPadding\n     * @param position\n     * @returns\n     */\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    // Deprecated\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    /**\n     * @param position\n     * @param category\n     * @returns array of StaveModifiers that match the provided position and category.\n     */\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            // A category was provided.\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            // A position was provided.\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            // Both position and category were provided!\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    /**\n     * Use the modifier's `getCategory()` as a key for the `order` array.\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n     */\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.start_x = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = layoutMetrics.xMax || 0;\n                    widths.paddingRight = layoutMetrics.paddingRight || 0;\n                }\n                widths.left = -layoutMetrics.xMin || 0;\n                widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const num_lines = this.options.num_lines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        // Render lines\n        for (let line = 0; line < num_lines; line++) {\n            y = this.getYForLine(line);\n            this.applyStyle();\n            if (this.options.line_config[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n            this.restoreStyle();\n        }\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            // Only draw modifier if it has a draw function\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        // Render measure numbers\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        ctx.closeGroup();\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.vertical_bar_width;\n    }\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines() {\n        return this.options.line_config;\n    }\n    /**\n     * Configure properties of the lines in the Stave\n     * @param line_number The index of the line to configure.\n     * @param line_config An configuration object for the specified line.\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine(line_number, line_config) {\n        if (line_number >= this.options.num_lines || line_number < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (line_config.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof line_config.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.line_config[line_number] = line_config;\n        return this;\n    }\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param lines_configuration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the num_lines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines(lines_configuration) {\n        if (lines_configuration.length !== this.options.num_lines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        // Make sure the defaults are present in case an incomplete set of\n        //  configuration options were supplied.\n        // eslint-disable-next-line\n        for (const line_config in lines_configuration) {\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\n            if (lines_configuration[line_config].visible == undefined) {\n                lines_configuration[line_config] = this.options.line_config[line_config];\n            }\n            this.options.line_config[line_config] = Object.assign(Object.assign({}, this.options.line_config[line_config]), lines_configuration[line_config]);\n        }\n        this.options.line_config = lines_configuration;\n        return this;\n    }\n}\nStave.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 8,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let x_shift = 3;\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    const thickLineOffset = 2; // For aesthetics\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        x_shift = -5; // Flips the side of the thin line\n        variableWidth = 3;\n    }\n    // Thin line\n    ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n    constructor(top_stave, bottom_stave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.width = 3;\n        this.top_stave = top_stave;\n        this.bottom_stave = bottom_stave;\n        this.type = StaveConnector.type.DOUBLE;\n        this.resetFont();\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n        // 2. Offset BRACE type not to overlap with another StaveConnector\n        this.x_shift = 0;\n        this.texts = [];\n    }\n    static get CATEGORY() {\n        return Category.StaveConnector;\n    }\n    /**\n     * Set type.\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n     */\n    setType(type) {\n        type = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {\n            this.type = type;\n        }\n        return this;\n    }\n    /** Set optional associated Text. */\n    setText(text, options = {}) {\n        this.texts.push({\n            content: text,\n            options: Object.assign({ shift_x: 0, shift_y: 0 }, options),\n        });\n        return this;\n    }\n    setXShift(x_shift) {\n        if (typeof x_shift !== 'number') {\n            throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n        }\n        this.x_shift = x_shift;\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    /** Render connector and associated text. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.top_stave.getYForLine(0);\n        let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n        let width = this.width;\n        let topX = this.top_stave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.top_stave.getX() + this.top_stave.getWidth();\n        }\n        let attachment_height = botY - topY;\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= this.width + 2;\n                topY -= this.thickness;\n                attachment_height += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                // May need additional code to draw brace\n                const x1 = this.top_stave.getX() - 2 + this.x_shift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachment_height / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachment_height;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachment_height;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachment_height;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachment_height;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachment_height;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachment_height;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachment_height = botY - topY;\n                Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n                Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n                topX -= this.width + 2;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachment_height -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachment_height);\n        }\n        // If the connector is a thin double barline, draw the paralell line\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachment_height);\n        }\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        // Add stave connector text\n        for (let i = 0; i < this.texts.length; i++) {\n            const text = this.texts[i];\n            const text_width = ctx.measureText('' + text.content).width;\n            const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n            const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n            ctx.fillText('' + text.content, x, y + 4);\n        }\n        ctx.restore();\n    }\n}\nStaveConnector.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 16,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n/**\n * SINGLE_LEFT and SINGLE are the same value for compatibility\n * with older versions of vexflow which didn't have right sided\n * stave connectors.\n */\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\n/**\n * Connector type:\n * * \"singleRight\"\n * * \"singleLeft\"\n * * \"single\"\n * * \"double\"\n * * \"brace\"\n * * \"bracket\"\n * * \"boldDoubleLeft\"\n * * \"boldDoubleRight\"\n * * \"thinDouble\"\n * * \"none\"\n */\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Beam } from './beam';\nimport { Font } from './font';\nimport { Fraction } from './fraction';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\nimport { Voice } from './voice';\n// Helper function\nconst sumArray = (arr) => arr.reduce((a, b) => a + b, 0);\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts(voices, makeContext, addToContext) {\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    // Initialize tick maps.\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    voices.forEach((voice, voiceIndex) => {\n        // Use resolution multiplier as denominator so that no additional expansion\n        // of fractional tick values is needed.\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            // If we have no tick context for this tick, create one.\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                // Maintain a list of unique integerTicks.\n                tickList.push(integerTicks);\n            }\n            // Add this tickable to the TickContext.\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('Vex.Flow.Formatter', args);\n}\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    // If no valid next note group, nextRestLine is same as current.\n    let nextRestLine = currRestLine;\n    // Start with the next note and keep going until we find a valid non-rest note group.\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    // Locate the mid point between two lines.\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: 100, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        // Minimum width required to render all the notes in the voices.\n        this.minTotalWidth = 0;\n        // This is set to `true` after `minTotalWidth` is calculated.\n        this.hasMinTotalWidth = false;\n        // Arrays of tick and modifier contexts.\n        this.tickContexts = undefined;\n        this.modifierContexts = undefined;\n        // Gaps between contexts, for free movement of notes post\n        // formatting.\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    /**\n     * Helper function to layout \"notes\" one after the other without\n     * regard for proportions. Useful for tests and debugging.\n     */\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    /** Helper function to plot formatter debug info. */\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        options = Object.assign({ stavePadding: Tables.currentMusicFont().lookupMetric('stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    /**\n     * Helper function to format and draw a single voice. Returns a bounding\n     * box for the notation.\n     * @param ctx  the rendering context\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n     * @param params one of below:\n     *    * Setting `autobeam` only `(context, stave, notes, true)` or\n     *      `(ctx, stave, notes, {autobeam: true})`\n     *    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n     *    * Setting both a struct is needed `(context, stave, notes, {\n     *      autobeam: true, align_rests: true})`\n     *    * `autobeam` automatically generates beams for the notes.\n     *    * `align_rests` aligns rests with nearby notes.\n     */\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            auto_beam: false,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.auto_beam = params;\n        }\n        // Start by creating a voice and adding all the notes to it.\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Then create beams, if requested.\n        const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n        // Instantiate a `Formatter` and format the notes.\n        new Formatter()\n            .joinVoices([voice]) // , { align_rests: options.align_rests })\n            .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n        // Render the voice and beams to the stave.\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Return the bounding box of the voice.\n        return voice.getBoundingBox();\n    }\n    /**\n     * Helper function to format and draw aligned tab and stave notes in two\n     * separate staves.\n     * @param ctx the rendering context\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n     * @param stave a `Stave` instance on which to render `Note`s.\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n     * @param autobeam automatically generate beams.\n     * @param params a configuration object:\n     *    * `autobeam` automatically generates beams for the notes.\n     *    * `align_rests` aligns rests with nearby notes.\n     */\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n        let opts = {\n            auto_beam: autobeam,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.auto_beam = params;\n        }\n        // Create a `4/4` voice for `notes`.\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Create a `4/4` voice for `tabnotes`.\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        // Then create beams, if requested.\n        const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n        // Instantiate a `Formatter` and align tab and stave notes.\n        new Formatter()\n            .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n        // Render voices and beams to staves.\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Draw a connector between tab and note staves.\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    /**\n     * Automatically set the vertical position of rests based on previous/next note positions.\n     * @param tickables an array of Tickables.\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n     * @param alignTuplets If `false`, ignores tuplets.\n     */\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                // If activated rests not on default can be rendered as specified.\n                const position = currTickable.getGlyph().position.toUpperCase();\n                if (position !== 'R/4' && position !== 'B/4') {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    // Align rests with previous/next notes.\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        // If previous tickable is a rest, use its line number.\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                // Get the rest line for next valid non-rest note group.\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    /**\n     * Find all the rests in each of the `voices` and align them to neighboring notes.\n     *\n     * @param voices\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n     */\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    /**\n     * Estimate the width required to render 'voices'.  This is done by:\n     * 1. Sum the widths of all the tick contexts\n     * 2. Estimate the padding.\n     * The latter is done by calculating the padding 3 different ways, and taking the\n     * greatest value:\n     * 1. the padding required for unaligned notes in different voices\n     * 2. the padding based on the stddev of the tickable widths\n     * 3. the padding based on the stddev of the tickable durations.\n     *\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\n     * room than the proportional formatting gives them.  A measure of all same duration\n     * and width will need no extra padding, and all these quantities will be\n     * zero in that case.\n     *\n     * @param voices the voices that contain the notes\n     * @returns the estimated width in pixels\n     */\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Tables.currentMusicFont().lookupMetric('stave.unalignedNotePadding');\n        // Calculate additional padding based on 3 methods:\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        // Cache results.\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        // Create tick contexts if not already created.\n        if (!this.tickContexts) {\n            if (!voices) {\n                throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n            }\n            this.createTickContexts(voices);\n        }\n        // eslint-disable-next-line\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        // Go through each tick context and calculate total width,\n        // and also accumulate values used in padding hints\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            // If this TC doesn't have all the voices on it, it's unaligned.\n            // so increment the unaligned padding accumulator\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            // Calculate the 'width entropy' over all the Tickables.\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        // Find max of 3 methods pad the width with that\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    /**\n     * Get minimum width required to render all voices. Either `format` or\n     * `preCalculateMinTotalWidth` must be called before this method.\n     */\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    /** Calculate the resolution multiplier for `voices`. */\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    /** Create a `ModifierContext` for each tick in `voices`. */\n    createModifierContexts(voices) {\n        const fn = (tickable, context) => tickable.addToModifierContext(context);\n        const contexts = createContexts(voices, () => new ModifierContext(), fn);\n        this.modifierContexts = contexts;\n        return contexts;\n    }\n    /**\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\n     * total number of ticks in voices.\n     */\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    /**\n     * This is the core formatter logic. Format voices and justify them\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n     * that can't retreive widths without a canvas. This method sets the `x` positions\n     * of all the tickables/notes in the formatter.\n     */\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        // Initialize context maps.\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        // Reset loss history for evaluator.\n        this.lossHistory = [];\n        // If voices and a stave were provided, set the Stave for each voice\n        // and preFormat to apply Y values to the notes;\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        // Now distribute the ticks to each tick context, and assign them their\n        // own X positions.\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        // Pass 1: Give each note maximum width requested by context.\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            // Make sure that all tickables in this context have calculated their\n            // space requirements.\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            // Calculate shift for the next tick.\n            shift = width - metrics.totalLeftPx;\n        });\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        // No justification needed. End formatting.\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\n        // justifies based on the context's X position, which is the left-most part of the note head.\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n        // the softmax of the ticks.\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    // Go through each tickable and search backwards for another tickable\n                    // in the same voice. If found, use that duration (ticks) to calculate\n                    // the expected distance.\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        // Look for matching voices between tick contexts.\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            // Found matching voices, get largest duration\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                // Calculate the limits of the shift based on modifiers, etc.\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                // Don't allow shifting if notes in the same voice can collide\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n                            // so that two different tick contexts don't align across staves.\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            // Calculate the expected distance of the current context from the last matching tickable. The\n                            // distance is scaled down by the softmax for the voice.\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            // Distribute ticks to the contexts based on the calculated distance error.\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                // Move center aligned tickables to middle\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const musicFont = Tables.currentMusicFont();\n        const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n        const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        // Calculate right justification by finding max of (configured value, min distance between tickables)\n        // so measures with lots of white space use it evenly, and crowded measures use at least the configured\n        // space.\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        // Just one context. Done formatting.\n        if (contextList.length === 1)\n            return 0;\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n        // existing visual regression tests.\n        const paddingMax = configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n        const paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\n        // without going over\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    /** Calculate the total cost of this formatting decision. */\n    evaluate() {\n        if (!this.tickContexts)\n            return 0;\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        // Calculate available slack per tick context. This works out how much freedom\n        // to move a context has in either direction, without affecting other notes.\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            // Calculate X position of right edge of previous note\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            // Calculate X position of left edge of current note\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            // Tell the tick contexts how much they can reposition themselves.\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        // Calculate mean distance in each voice for each duration type, then calculate\n        // how far each note is from the mean.\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        // Calculate how much each note deviates from the mean. Loss function is square\n        // root of the sum of squared deviations.\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    /**\n     * Run a single iteration of rejustification. At a high level, this method calculates\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n     * attempt to reduce the cost. You can call this method multiple times until it finds\n     * and oscillates around a global minimum.\n     * @param alpha the \"learning rate\" for the formatter. It determines how much of a shift\n     * the formatter should make based on its cost function.\n     */\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n        // on adjacent tickcontexts.\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    /**\n     * This is the top-level call for all formatting logic completed\n     * after `x` *and* `y` values have been computed for the notes\n     * in the voices.\n     */\n    postFormat() {\n        const postFormatContexts = (contexts) => contexts.list.forEach((tick) => contexts.map[tick].postFormat());\n        if (this.modifierContexts)\n            postFormatContexts(this.modifierContexts);\n        if (this.tickContexts)\n            postFormatContexts(this.tickContexts);\n        return this;\n    }\n    /**\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\n     * the formatters that the voices belong on a single stave.\n     */\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    /**\n     * Align rests in voices, justify the contexts, and position the notes\n     * so voices are aligned and ready to render onto the stave. This method\n     * mutates the `x` positions of all tickables in `voices`.\n     *\n     * Voices are full justified to fit in `justifyWidth` pixels.\n     *\n     * Set `options.context` to the rendering context. Set `options.align_rests`\n     * to true to enable rest alignment.\n     */\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ align_rests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.align_rests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        // Only postFormat if a stave was supplied for y value formatting\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        // eslint-disable-next-line\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nFormatter.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var TupletLocation;\n(function (TupletLocation) {\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\n})(TupletLocation || (TupletLocation = {}));\nexport class Tuplet extends Element {\n    constructor(notes, options = {}) {\n        super();\n        this.numerator_glyphs = [];\n        this.denom_glyphs = [];\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n        // We accept beats_occupied, but warn that it's deprecated:\n        // the preferred property name is now notes_occupied.\n        if (this.options.beats_occupied) {\n            this.beatsOccupiedDeprecationWarning();\n        }\n        this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n        if (this.options.bracketed != undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n        this.point = Tables.currentMusicFont().lookupMetric('digits.tupletPoint');\n        this.y_pos = 16;\n        this.x_pos = 100;\n        this.width = 200;\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    static get CATEGORY() {\n        return Category.Tuplet;\n    }\n    static get LOCATION_TOP() {\n        return TupletLocation.TOP;\n    }\n    static get LOCATION_BOTTOM() {\n        return TupletLocation.BOTTOM;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static get metrics() {\n        return Tables.currentMusicFont().getMetrics().glyphs.tuplet;\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    /**\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n     */\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            // eslint-disable-next-line\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.num_notes;\n    }\n    beatsOccupiedDeprecationWarning() {\n        // eslint-disable-next-line\n        console.warn('beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.', 'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.', 'The old methods will be removed in VexFlow 5.0.');\n    }\n    getBeatsOccupied() {\n        this.beatsOccupiedDeprecationWarning();\n        return this.getNotesOccupied();\n    }\n    setBeatsOccupied(beats) {\n        this.beatsOccupiedDeprecationWarning();\n        return this.setNotesOccupied(beats);\n    }\n    getNotesOccupied() {\n        return this.notes_occupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notes_occupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        this.numerator_glyphs = [];\n        let n = this.num_notes;\n        while (n >= 1) {\n            this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n        this.denom_glyphs = [];\n        n = this.notes_occupied;\n        while (n >= 1) {\n            this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n    }\n    // determine how many tuplets are nested within this tuplet\n    // on the same side (above/below), to calculate a y\n    // offset for this tuplet:\n    getNestedTupletCount() {\n        const location = this.location;\n        const first_note = this.notes[0];\n        let maxTupletCount = countTuplets(first_note, location);\n        let minTupletCount = countTuplets(first_note, location);\n        // Count the tuplets that are on the same side (above/below)\n        // as this tuplet:\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    // determine the y position of the tuplet:\n    getYPosition() {\n        // offset the tuplet for any nested tuplets between\n        // it and the notes:\n        const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        // offset the tuplet for any manual y_offset:\n        const y_offset = this.options.y_offset || 0;\n        // now iterate through the notes and find our highest\n        // or lowest locations, to form a base y_pos\n        const first_note = this.notes[0];\n        let y_pos;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            y_pos = first_note.checkStave().getYForLine(0) - Tuplet.metrics.topModifierOffset;\n            // check modifiers above note to see if they will collide with tuplet beam\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().top_text_line);\n                }\n                const modY = note.getYForTopText(modLines) - Tuplet.metrics.noteHeadOffset;\n                if (note.hasStem() || note.isRest()) {\n                    const top_y = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tuplet.metrics.stemOffset\n                        : note.getStemExtents().baseY - Tuplet.metrics.noteHeadOffset;\n                    y_pos = Math.min(top_y, y_pos);\n                    if (modLines > 0) {\n                        y_pos = Math.min(modY, y_pos);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = Tuplet.metrics.bottomLine; // tuplet default on line 4\n            // check modifiers below note to see if they will collide with tuplet beam\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().text_line + 1);\n                }\n            });\n            y_pos = first_note.checkStave().getYForLine(lineCheck) + Tuplet.metrics.noteHeadOffset;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottom_y = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + Tuplet.metrics.noteHeadOffset\n                        : this.notes[i].getStemExtents().topY + Tuplet.metrics.stemOffset;\n                    if (bottom_y > y_pos) {\n                        y_pos = bottom_y;\n                    }\n                }\n            }\n        }\n        return y_pos + nested_tuplet_y_offset + y_offset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        // determine x value of left bound of tuplet\n        const first_note = this.notes[0];\n        const last_note = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            this.x_pos = first_note.getStemX();\n            this.width = last_note.getStemX() - this.x_pos;\n        }\n        else {\n            this.x_pos = first_note.getTieLeftX() - 5;\n            this.width = last_note.getTieRightX() - this.x_pos + 5;\n        }\n        // determine y value for tuplet\n        this.y_pos = this.getYPosition();\n        const addGlyphWidth = (width, glyph) => width + defined(glyph.getMetrics().width);\n        // calculate total width of tuplet notation\n        let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n        if (this.ratioed) {\n            width = this.denom_glyphs.reduce(addGlyphWidth, width);\n            width += this.point * 0.32;\n        }\n        const notation_center_x = this.x_pos + this.width / 2;\n        const notation_start_x = notation_center_x - width / 2;\n        // draw bracket if the tuplet is not beamed\n        if (this.bracketed) {\n            const line_width = this.width / 2 - width / 2 - 5;\n            // only draw the bracket if it has positive length\n            if (line_width > 0) {\n                ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        // draw numerator glyphs\n        const shiftY = Tables.currentMusicFont().lookupMetric('digits.shiftY', 0);\n        let x_offset = 0;\n        this.numerator_glyphs.forEach((glyph) => {\n            glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n            x_offset += defined(glyph.getMetrics().width);\n        });\n        // display colon and denominator if the ratio is to be shown\n        if (this.ratioed) {\n            const colon_x = notation_start_x + x_offset + this.point * 0.16;\n            const colon_radius = this.point * 0.06;\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);\n            ctx.closePath();\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);\n            ctx.closePath();\n            ctx.fill();\n            x_offset += this.point * 0.32;\n            this.denom_glyphs.forEach((glyph) => {\n                glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n                x_offset += defined(glyph.getMetrics().width);\n            });\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TupletLocation } from './tuplet';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nconst BEAM_LEFT = 'L';\nconst BEAM_RIGHT = 'R';\nconst BEAM_BOTH = 'B';\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n    constructor(notes, auto_stem = false) {\n        super();\n        this.slope = 0;\n        this.y_shift = 0;\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        // Validate beam line, direction and ticks.\n        this.ticks = notes[0].getIntrinsicTicks();\n        if (this.ticks >= Tables.durationToTicks('4')) {\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i; // shared iterator\n        let note;\n        this.stem_direction = Stem.UP;\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (note.hasStem()) {\n                this.stem_direction = note.getStemDirection();\n                break;\n            }\n        }\n        let stem_direction = this.stem_direction;\n        // Figure out optimal stem direction based on given notes\n        if (auto_stem && isStaveNote(notes[0])) {\n            stem_direction = calculateStemDirection(notes);\n        }\n        else if (auto_stem && isTabNote(notes[0])) {\n            // Auto Stem TabNotes\n            const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        // Apply stem directions and attach beam to notes\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (auto_stem) {\n                note.setStemDirection(stem_direction);\n                this.stem_direction = stem_direction;\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        this.beam_count = this.getBeamCount();\n        this.break_on_indices = [];\n        this.render_options = {\n            beam_width: 5,\n            max_slope: 0.25,\n            min_slope: -0.25,\n            slope_iterations: 20,\n            slope_cost: 100,\n            show_stemlets: false,\n            stemlet_extension: 7,\n            partial_beam_length: 10,\n            flat_beams: false,\n            min_flat_beam_offset: 15,\n        };\n    }\n    static get CATEGORY() {\n        return Category.Beam;\n    }\n    /** Get the direction of the beam */\n    getStemDirection() {\n        return this.stem_direction;\n    }\n    /**\n     * Get the default beam groups for a provided time signature.\n     * Attempt to guess if the time signature is not found in table.\n     * Currently this is fairly naive.\n     */\n    static getDefaultBeamGroups(time_sig) {\n        if (!time_sig || time_sig === 'c') {\n            time_sig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[time_sig];\n        if (groups === undefined) {\n            // If no beam groups found, naively determine\n            // the beam groupings from the time signature\n            const beatTotal = parseInt(time_sig.split('/')[0], 10);\n            const beatValue = parseInt(time_sig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    /**\n     * A helper function to automatically build basic beams for a voice. For more\n     * complex auto-beaming use `Beam.generateBeams()`.\n     * @param voice the voice to generate the beams for\n     * @param stem_direction a stem direction to apply to the entire voice\n     * @param groups an array of `Fraction` representing beat groupings for the beam\n     */\n    static applyAndGetBeams(voice, stem_direction, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stem_direction });\n    }\n    /**\n     * A helper function to autimatically build beams for a voice with\n     * configuration options.\n     *\n     * Example configuration object:\n     *\n     * ```\n     * config = {\n     *   groups: [new Vex.Flow.Fraction(2, 8)],\n     *   stem_direction: -1,\n     *   beam_rests: true,\n     *   beam_middle_only: true,\n     *   show_stemlets: false\n     * };\n     * ```\n     * @param notes an array of notes to create the beams for\n     * @param config the configuration object\n     * @param config.stem_direction set to apply the same direction to all notes\n     * @param config.beam_rests set to `true` to include rests in the beams\n     * @param config.beam_middle_only set to `true` to only beam rests in the middle of the beat\n     * @param config.show_stemlets set to `true` to draw stemlets for rests\n     * @param config.maintain_stem_directions set to `true` to not apply new stem directions\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n     *\n     */\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        // Convert beam groups to tick amounts\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(vf_notes) {\n            return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            // number of ticks in current group\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return; // Ignore untickables (like bar notes)\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                // If the note that was just added overflows the group tick total\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    // If the overflow note can be beamed, start the next group\n                    // with it. Unbeamable notes leave the group overflowed.\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    // We have overflown, so we're going to next tick group. As we might have\n                    // overflown by more than 1 group, we need to go forward as many times as\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n                    // in current groups as we go forward.\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            // Adds any remainder notes beam\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        // Splits up groups by Rest\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beam_rests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    // Determine if the group should be broken at this note\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        // Add current group\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        // Start a new group. Include the current note if the group\n                        // was broken up by stem direction, as that note needs to start\n                        // the next group of notes\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        // Add note to group\n                        tempGroup.push(note);\n                    }\n                });\n                // If there is a remaining group, add it as well\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintain_stem_directions) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stem_direction) {\n                        stemDirection = config.stem_direction;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        // Get all of the tuplets in all of the note groups\n        function getTuplets() {\n            const uniqueTuplets = [];\n            // Go through all of the note groups and inspect for tuplets\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        // Using closures to store the variables throughout the various functions\n        // IMO Keeps it this process lot cleaner - but not super consistent with\n        // the rest of the API's style - Silverwolf90 (Cyril)\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        // Get the notes to be beamed\n        const beamedNoteGroups = getBeamGroups();\n        // Get the tuplets in order to format them accurately\n        const allTuplets = getTuplets();\n        // Create a Vex.Flow.Beam from each group of notes to be beamed\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.show_stemlets) {\n                beam.render_options.show_stemlets = true;\n            }\n            if (config.secondary_breaks) {\n                beam.render_options.secondary_break_ticks = Tables.durationToTicks(config.secondary_breaks);\n            }\n            if (config.flat_beams === true) {\n                beam.render_options.flat_beams = true;\n                beam.render_options.flat_beam_offset = config.flat_beam_offset;\n            }\n            beams.push(beam);\n        });\n        // Reformat tuplets\n        allTuplets.forEach((tuplet) => {\n            // Set the tuplet location based on the stem direction\n            const direction = tuplet.notes[0].stem_direction === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\n            tuplet.setTupletLocation(direction);\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    /** Get the notes in this beam. */\n    getNotes() {\n        return this.notes;\n    }\n    /** Get the max number of beams in the set of notes. */\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyph().beam_count);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    /** Set which note `indices` to break the secondary beam at. */\n    breakSecondaryAt(indices) {\n        this.break_on_indices = indices;\n        return this;\n    }\n    /** Return the y coordinate for linear function. */\n    getSlopeY(x, first_x_px, first_y_px, slope) {\n        return first_y_px + (x - first_x_px) * slope;\n    }\n    /** Calculate the best possible slope for the provided notes. */\n    calculateSlope() {\n        const { notes, stem_direction: stemDirection, render_options: { max_slope, min_slope, slope_iterations, slope_cost }, } = this;\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (max_slope - min_slope) / slope_iterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        // iterate through slope values to find best weighted fit\n        for (let slope = min_slope; slope <= max_slope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            // iterate through notes, calculating y shift and stem extension\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    // beam needs to be shifted up to accommodate note\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        // beam overshoots note, account for the difference\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            // most engraving books suggest aiming for a slope about half the angle of the\n            // difference between the first and last notes' stem length;\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            // This tries to align most beams to something closer to the idealSlope, but\n            // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n            const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n            // update state when a more ideal slope is found\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        this.y_shift = yShift;\n    }\n    /** Calculate a slope and y-shift for flat beams. */\n    calculateFlatSlope() {\n        const { notes, stem_direction, render_options: { beam_width, min_flat_beam_offset, flat_beam_offset }, } = this;\n        // If a flat beam offset has not yet been supplied or calculated,\n        // generate one based on the notes in this particular note group\n        let total = 0;\n        let extremeY = 0; // Store the highest or lowest note here\n        let extremeBeamCount = 0; // The beam count of the extreme note\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            // Total up all of the offsets so we can average them out later\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            // Store the highest (stems-up) or lowest (stems-down) note so the\n            //  offset can be adjusted in case the average isn't enough\n            if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        // Average the offsets to try and come up with a reasonable one that\n        //  works for all of the notes in the beam group.\n        let offset = total / notes.length;\n        // In case the average isn't long enough, add or subtract some more\n        //  based on the highest or lowest note (again, based on the stem\n        //  direction). This also takes into account the added height due to\n        //  the width of the beams.\n        const beamWidth = beam_width * 1.5;\n        const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n        const newOffset = extremeY + extremeTest * -stem_direction;\n        if (stem_direction === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stem_direction === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flat_beam_offset) {\n            // Set the offset for the group based on the calculations above.\n            this.render_options.flat_beam_offset = offset;\n        }\n        else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n            this.render_options.flat_beam_offset = offset;\n        }\n        else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n            this.render_options.flat_beam_offset = offset;\n        }\n        // for flat beams, the slope and y_shift are simply 0\n        this.slope = 0;\n        this.y_shift = 0;\n    }\n    /** Return the Beam y offset. */\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        // For flat beams, set the first and last Y to the offset, rather than\n        //  using the note's stem extents.\n        if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n            beamY = this.render_options.flat_beam_offset;\n        }\n        return beamY;\n    }\n    /**\n     * Create new stems for the notes in the beam, so that each stem\n     * extends into the beams.\n     */\n    applyStemExtensions() {\n        const { notes, slope, y_shift, stem_direction, beam_count, render_options: { show_stemlets, stemlet_extension, beam_width }, } = this;\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = stem_direction === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                stem.setExtension(preBeamExtension + beamExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && show_stemlets) {\n                    const beamWidth = beam_width;\n                    const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n                }\n            }\n        }\n    }\n    /** Return upper level beam direction. */\n    lookupBeamDirection(duration, prev_tick, tick, next_tick) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const lookup_duration = `${Tables.durationToNumber(duration) / 2}`;\n        const prev_note_gets_beam = prev_tick < Tables.durationToTicks(lookup_duration);\n        const next_note_gets_beam = next_tick < Tables.durationToTicks(lookup_duration);\n        const note_gets_beam = tick < Tables.durationToTicks(lookup_duration);\n        if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n            return BEAM_BOTH;\n        }\n        else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n            return BEAM_LEFT;\n        }\n        else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);\n    }\n    /** Get the x coordinates for the beam lines of specific `duration`. */\n    getBeamLines(duration) {\n        const tick_of_duration = Tables.durationToTicks(duration);\n        let beam_started = false;\n        const beam_lines = [];\n        let current_beam = undefined;\n        const partial_beam_length = this.render_options.partial_beam_length;\n        let previous_should_break = false;\n        let tick_tally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            // See if we need to break secondary beams on this note.\n            const ticks = note.getTicks().value();\n            tick_tally += ticks;\n            let should_break = false;\n            // 8th note beams are always drawn.\n            if (parseInt(duration, 10) >= 8) {\n                // First, check to see if any indices were set up through breakSecondaryAt()\n                should_break = this.break_on_indices.indexOf(i) !== -1;\n                // If the secondary breaks were auto-configured in the render options,\n                //  handle that as well.\n                if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n                    tick_tally = 0;\n                    should_break = true;\n                }\n            }\n            const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n            const stem_x = note.getStemX() - Stem.WIDTH / 2;\n            // Check to see if the next note in the group will get a beam at this\n            //  level. This will help to inform the partial beam logic below.\n            const prev_note = this.notes[i - 1];\n            const next_note = this.notes[i + 1];\n            const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n            const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n            const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n            // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n            if (note_gets_beam) {\n                // This note gets a beam at the current level\n                if (beam_started) {\n                    // We're currently in the middle of a beam. Just continue it on to\n                    //  the stem X of the current note.\n                    current_beam = beam_lines[beam_lines.length - 1];\n                    current_beam.end = stem_x;\n                    // If a secondary beam break is set up, end the beam right now.\n                    if (should_break) {\n                        beam_started = false;\n                        if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\n                            // This note gets a beam,.but the next one does not. This means\n                            //  we need a partial pointing right.\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                    }\n                }\n                else {\n                    // No beam started yet. Start a new one.\n                    current_beam = { start: stem_x, end: undefined };\n                    beam_started = true;\n                    if (beam_alone) {\n                        // previous and next beam exists and does not get a beam but current gets it.\n                        const prev_tick = prev_note.getIntrinsicTicks();\n                        const next_tick = next_note.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                        else {\n                            current_beam.end = current_beam.start + partial_beam_length;\n                        }\n                    }\n                    else if (!next_note_gets_beam) {\n                        // The next note doesn't get a beam. Draw a partial.\n                        if ((previous_should_break || i === 0) && next_note) {\n                            // This is the first note (but not the last one), or it is\n                            //  following a secondary break. Draw a partial to the right.\n                            current_beam.end = current_beam.start + partial_beam_length;\n                        }\n                        else {\n                            // By default, draw a partial to the left.\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                    }\n                    else if (should_break) {\n                        // This note should have a secondary break after it. Even though\n                        //  we just started a beam, it needs to end immediately.\n                        current_beam.end = current_beam.start - partial_beam_length;\n                        beam_started = false;\n                    }\n                    beam_lines.push(current_beam);\n                }\n            }\n            else {\n                // The current note does not get a beam.\n                beam_started = false;\n            }\n            // Store the secondary break flag to inform the partial beam logic in\n            //  the next iteration of the loop.\n            previous_should_break = should_break;\n        }\n        // Add a partial beam pointing left if this is the last note in the group\n        const last_beam = beam_lines[beam_lines.length - 1];\n        if (last_beam && last_beam.end === undefined) {\n            last_beam.end = last_beam.start - partial_beam_length;\n        }\n        return beam_lines;\n    }\n    /** Render the stems for each note. */\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                stem.setContext(ctx).draw();\n            }\n        }, this);\n    }\n    // Render the beam lines\n    drawBeamLines(ctx) {\n        const valid_beam_durations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.render_options.beam_width * this.stem_direction;\n        // Draw the beams.\n        for (let i = 0; i < valid_beam_durations.length; ++i) {\n            const duration = valid_beam_durations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beam_line = beamLines[j];\n                const startBeamX = beam_line.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beam_line.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    /** Pre-format the beam. */\n    preFormat() {\n        return this;\n    }\n    /**\n     * Post-format the beam. This can only be called after\n     * the notes in the beam have both `x` and `y` values. ie: they've\n     * been formatted and have staves.\n     */\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        // Calculate a smart slope if we're not forcing the beams to be flat.\n        if (isTabNote(this.notes[0]) || this.render_options.flat_beams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    /** Render the beam to the canvas context */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (this.unbeamable)\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        this.drawStems(ctx);\n        this.applyStyle();\n        this.drawBeamLines(ctx);\n        this.restoreStyle();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n// MIT License\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Category } from './typeguard';\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n    constructor(type, size, annotation) {\n        super({ duration: 'b' });\n        this.type = type;\n        this.clef_obj = new Clef(type, size, annotation);\n        this.clef = this.clef_obj.clef;\n        this.glyph = new Glyph(this.clef.code, this.clef.point);\n        this.setWidth(this.glyph.getMetrics().width);\n        // Note properties\n        this.ignore_ticks = true;\n    }\n    static get CATEGORY() {\n        return Category.ClefNote;\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.type = type;\n        this.clef_obj = new Clef(type, size, annotation);\n        this.clef = this.clef_obj.clef;\n        this.glyph = new Glyph(this.clef.code, this.clef.point);\n        this.setWidth(this.glyph.getMetrics().width);\n        return this;\n    }\n    /** Get associated clef. */\n    getClef() {\n        return this.clef;\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.glyph.setContext(this.getContext());\n        return this;\n    }\n    /** Get bounding box. */\n    getBoundingBox() {\n        return super.getBoundingBox();\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render clef note. */\n    draw() {\n        var _a;\n        const stave = this.checkStave();\n        if (!this.glyph.getContext()) {\n            this.glyph.setContext(this.getContext());\n        }\n        this.setRendered();\n        const abs_x = this.getAbsoluteX();\n        this.glyph.setStave(stave);\n        this.glyph.setYShift(stave.getYForLine((_a = this.clef.line) !== null && _a !== void 0 ? _a : 0) - stave.getYForGlyphs());\n        this.glyph.renderToStave(abs_x);\n        // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n        if (this.clef_obj.annotation !== undefined) {\n            const attachment = new Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);\n            if (!attachment.getContext()) {\n                attachment.setContext(this.getContext());\n            }\n            attachment.setStave(stave);\n            attachment.setYShift(stave.getYForLine(this.clef_obj.annotation.line) - stave.getYForGlyphs());\n            attachment.setXShift(this.clef_obj.annotation.x_shift);\n            attachment.renderToStave(abs_x);\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('Vex.Flow.Crescendo', args);\n}\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx, params) {\n    const begin_x = params.begin_x;\n    const end_x = params.end_x;\n    const y = params.y;\n    const half_height = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(begin_x, y - half_height);\n        ctx.lineTo(end_x, y);\n        ctx.lineTo(begin_x, y + half_height);\n    }\n    else {\n        ctx.moveTo(end_x, y - half_height);\n        ctx.lineTo(begin_x, y);\n        ctx.lineTo(end_x, y + half_height);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    // Initialize the crescendo's properties\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.options = {\n            // Extensions to the length of the crescendo on either side\n            extend_left: 0,\n            extend_right: 0,\n            // Vertical shift\n            y_shift: 0,\n        };\n        // Whether the object is a decrescendo\n        this.decrescendo = false;\n        // The staff line to be placed on\n        this.line = noteStruct.line || 0;\n        // The height at the open end of the cresc/decresc\n        this.height = 15;\n    }\n    /** Crescendo category string. */\n    static get CATEGORY() {\n        return Category.Crescendo;\n    }\n    // Set the line to center the element on\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Set the full height at the open end\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    // Preformat the note\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    // Render the Crescendo object onto the canvas\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tick_context = this.getTickContext();\n        const next_context = TickContext.getNextContext(tick_context);\n        const begin_x = this.getAbsoluteX();\n        const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n        renderHairpin(ctx, {\n            begin_x: begin_x - this.options.extend_left,\n            end_x: end_x + this.options.extend_right,\n            y: y + this.options.y_shift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    // from: Start note\n    // to: End note\n    // options:\n    //    cps: List of control points\n    //    x_shift: pixels to shift\n    //    y_shift: pixels to shift\n    constructor(from, to, options) {\n        super();\n        this.render_options = Object.assign({ thickness: 2, x_shift: 0, y_shift: 10, position: CurvePosition.NEAR_HEAD, position_end: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ] }, options);\n        this.from = from;\n        this.to = to;\n    }\n    static get CATEGORY() {\n        return Category.Curve;\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        const ctx = this.checkContext();\n        const x_shift = this.render_options.x_shift;\n        const y_shift = this.render_options.y_shift * params.direction;\n        const first_x = params.first_x + x_shift;\n        const first_y = params.first_y + y_shift;\n        const last_x = params.last_x - x_shift;\n        const last_y = params.last_y + y_shift;\n        const thickness = this.render_options.thickness;\n        const cps = this.render_options.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const cp_spacing = (last_x - first_x) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(first_x, first_y);\n        ctx.bezierCurveTo(first_x + cp_spacing + cp0x, first_y + cp0y * params.direction, last_x - cp_spacing + cp1x, last_y + cp1y * params.direction, last_x, last_y);\n        ctx.bezierCurveTo(last_x - cp_spacing + cp1x, last_y + (cp1y + thickness) * params.direction, first_x + cp_spacing + cp0x, first_y + (cp0y + thickness) * params.direction, first_x, first_y);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.fill();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const first_note = this.from;\n        const last_note = this.to;\n        let first_x;\n        let last_x;\n        let first_y;\n        let last_y;\n        let stem_direction = 0;\n        let metric = 'baseY';\n        let end_metric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.render_options.position);\n        const position_end = getPosition(this.render_options.position_end);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            end_metric = 'topY';\n        }\n        if (position_end === CurvePosition.NEAR_HEAD) {\n            end_metric = 'baseY';\n        }\n        else if (position_end === CurvePosition.NEAR_TOP) {\n            end_metric = 'topY';\n        }\n        if (first_note) {\n            first_x = first_note.getTieRightX();\n            stem_direction = first_note.getStemDirection();\n            first_y = first_note.getStemExtents()[metric];\n        }\n        else {\n            const stave = last_note.checkStave();\n            first_x = stave.getTieStartX();\n            first_y = last_note.getStemExtents()[metric];\n        }\n        if (last_note) {\n            last_x = last_note.getTieLeftX();\n            stem_direction = last_note.getStemDirection();\n            last_y = last_note.getStemExtents()[end_metric];\n        }\n        else {\n            const stave = first_note.checkStave();\n            last_x = stave.getTieEndX();\n            last_y = first_note.getStemExtents()[end_metric];\n        }\n        this.renderCurve({\n            first_x,\n            last_x,\n            first_y,\n            last_y,\n            direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('Vex.Flow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString; // string\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches); // nested array\n}\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n    // the EasyScore grammar in easyscore.ts.\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Parse `line` using current grammar. Returns `{success: true}` if the\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n    // where `errorPos` is the location of the error in the string.\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Look for `token` in this.line[this.pos], and return success\n    // if one is found. `token` is specified as a regular expression.\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n    // set, then return success even if the token is not found, but reset\n    // the position before exiting.\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        // Execute all sub rules in sequence.\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                // If `rule.or` is set, then return success if any one\n                // of the subrules match, else all subrules must match.\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n    // then a failed match is also a success (but the position is reset).\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    // Execute the rule produced by the provided `rules` function. This\n    // offloads to one of the above matchers and consolidates the results. It is also\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        // Get rule from Grammar class.\n        // expect(...) handles both lexing & parsing:\n        // - lexer rules produce tokens.\n        // - parser rules produce expressions which may trigger code via the\n        //   { run: () => ... } trigger functions in easyscore.ts.\n        //   These functions build the VexFlow objects that are displayed on screen.\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            // A lexer rule has a `token` property.\n            // Base case: parse the regex and throw an error if the\n            // line doesn't match.\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                // Token match! Update position and throw away parsed portion\n                // of string.\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            // A parser rule has an `expect` property.\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        // If there's a trigger attached to this rule, then run it.\n        // Make the matches accessible through `state.matches` in the\n        // `run: (state) => ...` trigger.\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Articulation } from './articulation';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Parser } from './parser';\nimport { Stem } from './stem';\nimport { defined, log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                // eslint-disable-next-line\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    // notes is an array with 3 entries\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n); // n => [string, string | null, string]\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n        // e.g., auto | up | down\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        // e.g., treble | bass\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const auto_stem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n        // Build a GhostNote or StaveNote using the information we gathered.\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) == 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n        if (!auto_stem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        // Attach accidentals.\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        // Attach dots.\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Set the score defaults.\n     * clef must be set appropriately to avoid errors when adding Staves.\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n     * @param defaults.stem default stem arrangement (auto | up | down)\n     * @returns this\n     */\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    /**\n     * @param options.factory is required.\n     * @returns this\n     */\n    setOptions(options) {\n        var _a, _b;\n        // eslint-disable-next-line\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isAnnotation } from './typeguard';\nimport { RuntimeError } from './util';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.GhostNote;\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            // Preserve backwards-compatibility\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        // Note properties\n        this.setWidth(0);\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        // Draw Annotations\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class GlyphNote extends Note {\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        // Note properties\n        this.ignore_ticks = this.options.ignoreTicks;\n        if (glyph) {\n            this.setGlyph(glyph);\n        }\n    }\n    static get CATEGORY() {\n        return Category.GlyphNote;\n    }\n    setGlyph(glyph) {\n        this.glyph = glyph;\n        this.setWidth(this.glyph.getMetrics().width);\n        return this;\n    }\n    getBoundingBox() {\n        return this.glyph.getBoundingBox();\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        ctx.openGroup('modifiers');\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n        ctx.closeGroup();\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        // Context is set when setStave is called on Note\n        const glyph = this.glyph;\n        if (!glyph.getContext()) {\n            glyph.setContext(ctx);\n        }\n        glyph.setStave(stave);\n        glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        glyph.renderToStave(x);\n        this.drawModifiers();\n        ctx.closeGroup();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class GraceNote extends StaveNote {\n    constructor(noteStruct) {\n        super(Object.assign({ glyph_font_scale: Tables.NOTATION_FONT_SCALE * GraceNote.SCALE, stroke_px: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    static get CATEGORY() {\n        return Category.GraceNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    static get SCALE() {\n        return 0.66;\n    }\n    getStemExtension() {\n        if (this.stem_extension_override) {\n            return this.stem_extension_override;\n        }\n        const glyph = this.getGlyph();\n        if (glyph) {\n            let ret = super.getStemExtension();\n            if (glyph.stem) {\n                const staveNoteScale = this.getStaveNoteScale();\n                ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n            }\n            return ret;\n        }\n        return 0;\n    }\n    // FIXME: move this to more basic class.\n    getStaveNoteScale() {\n        return this.render_options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const staveNoteScale = this.getStaveNoteScale();\n            // some magic numbers are based on the staveNoteScale 0.66.\n            const offsetScale = staveNoteScale / 0.66;\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                // FIXME: should render slash after beam?\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n                    stem: 6 * offsetScale,\n                    beam: 5 * offsetScale,\n                });\n            }\n            else {\n                const stem_direction = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteStemHeight = stem.getHeight();\n                let x = this.getAbsoluteX();\n                let y = stem_direction === Stem.DOWN\n                    ? noteHeadBounds.y_top - noteStemHeight\n                    : noteHeadBounds.y_bottom - noteStemHeight;\n                let defaultOffsetY = Tables.STEM_HEIGHT;\n                defaultOffsetY -= defaultOffsetY / 2.8;\n                y += defaultOffsetY * staveNoteScale * stem_direction;\n                const offsets = stem_direction === Stem.UP\n                    ? {\n                        x1: 1,\n                        y1: 0,\n                        x2: 13,\n                        y2: -9,\n                    }\n                    : {\n                        x1: -4,\n                        y1: 1,\n                        x2: 13,\n                        y2: 9,\n                    };\n                x += offsets.x1 * offsetScale;\n                y += offsets.y1 * offsetScale;\n                slashBBox = {\n                    x1: x,\n                    y1: y,\n                    x2: x + offsets.x2 * offsetScale,\n                    y2: y + offsets.y2 * offsetScale,\n                };\n            }\n            // FIXME: avoid staff lines, ledger lines or others.\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beam_slope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beam_angle = Math.atan(beam_slope * scaleX);\n        // slash line intersecting point on beam.\n        const iPointOnBeam = {\n            dx: Math.cos(beam_angle) * slashBeamOffset,\n            dy: Math.sin(beam_angle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n        const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n        const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n        const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n        const ret = {\n            x1: stemX - protrusion_stem_dx,\n            y1: stemY + slashStemOffset - protrusion_stem_dy,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n            y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n        };\n        return ret;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\nimport { KeySignature } from './keysignature';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class KeySigNote extends Note {\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        // Note properties\n        this.ignore_ticks = true;\n    }\n    static get CATEGORY() {\n        return Category.KeySigNote;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.draw();\n    }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests.\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { defined } from './util';\nlet semibreve_rest;\nfunction get_semibreve_rest() {\n    if (!semibreve_rest) {\n        const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\n        semibreve_rest = {\n            glyph_font_scale: noteHead.render_options.glyph_font_scale,\n            glyph_code: noteHead.glyph_code,\n            width: noteHead.getWidth(),\n        };\n    }\n    return semibreve_rest;\n}\nexport class MultiMeasureRest extends Element {\n    /**\n     *\n     * @param number_of_measures Number of measures.\n     * @param options The options object.\n     */\n    constructor(number_of_measures, options) {\n        super();\n        this.xs = { left: NaN, right: NaN };\n        this.hasPaddingLeft = false;\n        this.hasPaddingRight = false;\n        this.hasLineThickness = false;\n        this.hasSymbolSpacing = false;\n        this.number_of_measures = number_of_measures;\n        // Keep track of whether these four options were provided.\n        this.hasPaddingLeft = typeof options.padding_left === 'number';\n        this.hasPaddingRight = typeof options.padding_right === 'number';\n        this.hasLineThickness = typeof options.line_thickness === 'number';\n        this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n        const musicFont = Tables.currentMusicFont();\n        this.render_options = Object.assign({ use_symbols: false, show_number: true, number_line: -0.5, number_glyph_point: musicFont.lookupMetric('digits.point'), line: 2, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, serif_thickness: 2, semibreve_rest_glyph_scale: Tables.NOTATION_FONT_SCALE, padding_left: 0, padding_right: 0, line_thickness: 5, symbol_spacing: 0 }, options);\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.render_options.number_line += fontLineShift;\n    }\n    static get CATEGORY() {\n        return Category.MultiMeasureRest;\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right, spacingBetweenLines) {\n        const options = this.render_options;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let lineThicknessHalf;\n        if (this.hasLineThickness) {\n            lineThicknessHalf = options.line_thickness * 0.5;\n        }\n        else {\n            lineThicknessHalf = spacingBetweenLines * 0.25;\n        }\n        const serifThickness = options.serif_thickness;\n        const top = y - spacingBetweenLines;\n        const bot = y + spacingBetweenLines;\n        const leftIndented = left + serifThickness;\n        const rightIndented = right - serifThickness;\n        const lineTop = y - lineThicknessHalf;\n        const lineBottom = y + lineThicknessHalf;\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(left, top);\n        ctx.lineTo(leftIndented, top);\n        ctx.lineTo(leftIndented, lineTop);\n        ctx.lineTo(rightIndented, lineTop);\n        ctx.lineTo(rightIndented, top);\n        ctx.lineTo(right, top);\n        ctx.lineTo(right, bot);\n        ctx.lineTo(rightIndented, bot);\n        ctx.lineTo(rightIndented, lineBottom);\n        ctx.lineTo(leftIndented, lineBottom);\n        ctx.lineTo(leftIndented, bot);\n        ctx.lineTo(left, bot);\n        ctx.closePath();\n        ctx.fill();\n    }\n    drawSymbols(stave, ctx, left, right, spacingBetweenLines) {\n        const n4 = Math.floor(this.number_of_measures / 4);\n        const n = this.number_of_measures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.render_options;\n        // FIXME: TODO: invalidate semibreve_rest at the appropriate time\n        // (e.g., if the system font settings are changed).\n        semibreve_rest = undefined;\n        const rest = get_semibreve_rest();\n        const rest_scale = options.semibreve_rest_glyph_scale;\n        const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n        const glyphs = {\n            2: {\n                width: rest_width * 0.5,\n                height: spacingBetweenLines,\n            },\n            1: {\n                width: rest_width,\n            },\n        };\n        /* 10: normal spacingBetweenLines */\n        const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\n        const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        const yBottom = stave.getYForLine(line + 1);\n        ctx.save();\n        ctx.setStrokeStyle('none');\n        ctx.setLineWidth(0);\n        for (let i = 0; i < n4; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n2; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n1; ++i) {\n            Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n            x += glyphs[1].width + spacing;\n        }\n        ctx.restore();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        // FIXME: getNoteStartX() returns x + 5(barline width)\n        //        getNoteEndX() returns x + width(no barline width)\n        // See Stave constructor. How do we fix this?\n        // Here, we subtract the barline width.\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.render_options;\n        if (this.hasPaddingLeft) {\n            left = stave.getX() + options.padding_left;\n        }\n        if (this.hasPaddingRight) {\n            right = stave.getX() + stave.getWidth() - options.padding_right;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        const spacingBetweenLines = options.spacing_between_lines_px;\n        if (options.use_symbols) {\n            this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n        }\n        if (options.show_number) {\n            const timeSpec = '/' + this.number_of_measures;\n            const timeSig = new TimeSignature(timeSpec, 0, false);\n            timeSig.point = options.number_glyph_point;\n            timeSig.setTimeSig(timeSpec);\n            timeSig.setStave(stave);\n            timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n            timeSig.bottomLine = options.number_line;\n            timeSig.setContext(ctx).draw();\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('Vex.Flow.PedalMarking', args);\n}\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name, context, x, y, point) {\n    const glyph_data = PedalMarking.GLYPHS[name];\n    const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n    glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        // Custom text for the release/depress markings\n        this.custom_depress_text = '';\n        this.custom_release_text = '';\n        this.resetFont();\n        this.render_options = {\n            bracket_height: 10,\n            text_margin_right: 6,\n            bracket_line_width: 1,\n            color: 'black',\n        };\n    }\n    static get CATEGORY() {\n        return Category.PedalMarking;\n    }\n    /**\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\n     */\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    /** Create a sostenuto pedal marking */\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    /** Create an una corda pedal marking */\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    /** Set pedal type. */\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    /**\n     * Set custom text for the `depress`/`release` pedal markings. No text is\n     * set if the parameter is falsy.\n     */\n    setCustomText(depress, release) {\n        this.custom_depress_text = depress || '';\n        this.custom_release_text = release || '';\n        return this;\n    }\n    /** Set the staff line to render the markings on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Draw the bracket based pedal markings. */\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let is_pedal_depressed = false;\n        let prev_x;\n        let prev_y;\n        // Iterate through each note\n        this.notes.forEach((note, index, notes) => {\n            // Each note triggers the opposite pedal action\n            is_pedal_depressed = !is_pedal_depressed;\n            // Get the initial coordinates for the note\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            // Throw if current note is positioned before the previous note\n            if (x < prev_x) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            // Determine if the previous or next note are the same\n            // as the current note. We need to keep track of this for\n            // when adjustments are made for the release+depress action\n            const next_is_same = notes[index + 1] === note;\n            const prev_is_same = notes[index - 1] === note;\n            let x_shift = 0;\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n            if (is_pedal_depressed) {\n                // Adjustment for release+depress\n                x_shift = prev_is_same ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n                    // For MIXED style, start with text instead of bracket\n                    if (this.custom_depress_text) {\n                        // If we have custom text, use instead of the default \"Ped\" glyph\n                        const text_width = ctx.measureText(this.custom_depress_text).width;\n                        ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n                        x_shift = text_width / 2 + this.render_options.text_margin_right;\n                    }\n                    else {\n                        // Render the Ped glyph in position\n                        drawPedalGlyph('pedal_depress', ctx, x, y, point);\n                        x_shift = 20 + this.render_options.text_margin_right;\n                    }\n                }\n                else {\n                    // Draw start bracket\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.render_options.bracket_height);\n                    ctx.lineTo(x + x_shift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                // Adjustment for release+depress\n                x_shift = next_is_same ? -5 : 0;\n                // Draw end bracket\n                ctx.beginPath();\n                ctx.moveTo(prev_x, prev_y);\n                ctx.lineTo(x + x_shift, y);\n                ctx.lineTo(x, y - this.render_options.bracket_height);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Store previous coordinates\n            prev_x = x + x_shift;\n            prev_y = y;\n        });\n    }\n    /**\n     * Draw the text based pedal markings. This defaults to the traditional\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n     */\n    drawText() {\n        const ctx = this.checkContext();\n        let is_pedal_depressed = false;\n        // Iterate through each note, placing glyphs or custom text accordingly\n        this.notes.forEach((note) => {\n            is_pedal_depressed = !is_pedal_depressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n            let text_width = 0;\n            if (is_pedal_depressed) {\n                if (this.custom_depress_text) {\n                    text_width = ctx.measureText(this.custom_depress_text).width;\n                    ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedal_depress', ctx, x, y, point);\n                }\n            }\n            else {\n                if (this.custom_release_text) {\n                    text_width = ctx.measureText(this.custom_release_text).width;\n                    ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedal_release', ctx, x, y, point);\n                }\n            }\n        });\n    }\n    /** Render the pedal marking in position on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setStrokeStyle(this.render_options.color);\n        ctx.setFillStyle(this.render_options.color);\n        ctx.setFont(this.textFont);\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.render_options.bracket_line_width);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\nPedalMarking.DEBUG = false;\nPedalMarking.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 12,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n/** Glyph data */\nPedalMarking.GLYPHS = {\n    pedal_depress: {\n        code: 'keyboardPedalPed',\n        x_shift: -10,\n        y_shift: 0,\n    },\n    pedal_release: {\n        code: 'keyboardPedalUp',\n        x_shift: -2,\n        y_shift: 3,\n    },\n};\n/** Pedal type as number. */\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\n/** Pedal type as string. */\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n// Map `type` to SMuFL glyph code.\nconst CODES = {\n    '1': 'repeat1Bar',\n    '2': 'repeat2Bars',\n    '4': 'repeat4Bars',\n    slash: 'repeatBarSlash',\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return Category.RepeatNote;\n    }\n    constructor(type, noteStruct, options) {\n        super(undefined, Object.assign({ duration: 'q', align_center: type !== 'slash' }, noteStruct), options);\n        const glyphCode = CODES[type] || 'repeat1Bar';\n        const glyph = new Glyph(glyphCode, Tables.currentMusicFont().lookupMetric('repeatNote.point', 40), {\n            category: 'repeatNote',\n        });\n        this.setGlyph(glyph);\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    first_note: Note,\n    //    last_note: Note,\n    //    first_indices: [n1, n2, n3],\n    //    last_indices: [n1, n2, n3]\n    //  }\n    //  ```\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.resetFont();\n        this.render_options = {\n            // Space to add to the left or the right\n            padding_left: 4,\n            padding_right: 3,\n            // The width of the line in pixels\n            line_width: 1,\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n            line_dash: undefined,\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n            rounded_end: true,\n            // The color of the line and arrowheads\n            color: undefined,\n            // Flags to draw arrows on each end of the line\n            draw_start_arrow: false,\n            draw_end_arrow: false,\n            // The length of the arrowhead sides\n            arrowhead_length: 10,\n            // The angle of the arrowhead\n            arrowhead_angle: Math.PI / 8,\n            // The position of the text\n            text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n            text_justification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    static get CATEGORY() {\n        return Category.StaveLine;\n    }\n    // The the annotation for the `StaveLine`\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    // Set the notes for the `StaveLine`\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n        }\n        if (!notes.first_indices)\n            notes.first_indices = [0];\n        if (!notes.last_indices)\n            notes.last_indices = [0];\n        if (notes.first_indices.length !== notes.last_indices.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n        }\n        this.notes = notes;\n        this.first_note = notes.first_note;\n        this.first_indices = notes.first_indices;\n        this.last_note = notes.last_note;\n        this.last_indices = notes.last_indices;\n        return this;\n    }\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const render_options = this.render_options;\n        if (render_options.line_dash) {\n            ctx.setLineDash(render_options.line_dash);\n        }\n        if (render_options.line_width) {\n            ctx.setLineWidth(render_options.line_width);\n        }\n        if (render_options.rounded_end) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    // Apply the text styling to the context\n    applyFontStyle() {\n        const ctx = this.checkContext();\n        ctx.setFont(this.textFont);\n        const render_options = this.render_options;\n        const color = render_options.color;\n        if (color) {\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n        }\n    }\n    // Helper function to draw a line with arrow heads\n    drawArrowLine(ctx, pt1, pt2) {\n        const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        // For ends with arrow we actually want to stop before we get to the arrow\n        // so that wide lines won't put a flat end on the arrow.\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\n        let end_x;\n        let end_y;\n        let start_x;\n        let start_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            end_x = Math.round(x1 + (x2 - x1) * ratio);\n            end_y = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            end_x = x2;\n            end_y = y2;\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            start_x = x1 + (x2 - x1) * (1 - ratio);\n            start_y = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            start_x = x1;\n            start_y = y1;\n        }\n        if (this.render_options.color) {\n            ctx.setStrokeStyle(this.render_options.color);\n            ctx.setFillStyle(this.render_options.color);\n        }\n        // Draw the shaft of the arrow\n        ctx.beginPath();\n        ctx.moveTo(start_x, start_y);\n        ctx.lineTo(end_x, end_y);\n        ctx.stroke();\n        ctx.closePath();\n        // calculate the angle of the line\n        const line_angle = Math.atan2(y2 - y1, x2 - x1);\n        // h is the line length of a side of the arrow head\n        const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\n        let angle1;\n        let angle2;\n        let top_x;\n        let top_y;\n        let bottom_x;\n        let bottom_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\n            top_x = x2 + Math.cos(angle1) * h;\n            top_y = y2 + Math.sin(angle1) * h;\n            angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\n            bottom_x = x2 + Math.cos(angle2) * h;\n            bottom_y = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            angle1 = line_angle + this.render_options.arrowhead_angle;\n            top_x = x1 + Math.cos(angle1) * h;\n            top_y = y1 + Math.sin(angle1) * h;\n            angle2 = line_angle - this.render_options.arrowhead_angle;\n            bottom_x = x1 + Math.cos(angle2) * h;\n            bottom_y = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n        }\n    }\n    // Renders the `StaveLine` on the context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const first_note = this.first_note;\n        const last_note = this.last_note;\n        const render_options = this.render_options;\n        ctx.save();\n        this.applyLineStyle();\n        // Cycle through each set of indices and draw lines\n        let start_position = { x: 0, y: 0 };\n        let end_position = { x: 0, y: 0 };\n        this.first_indices.forEach((first_index, i) => {\n            const last_index = this.last_indices[i];\n            // Get initial coordinates for the start/end of the line\n            start_position = first_note.getModifierStartXY(2, first_index);\n            end_position = last_note.getModifierStartXY(1, last_index);\n            const upwards_slope = start_position.y > end_position.y;\n            // Adjust `x` coordinates for modifiers\n            start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n            end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n            // Adjust first `x` coordinates for displacements\n            const notehead_width = first_note.getGlyph().getWidth();\n            const first_displaced = first_note.getKeyProps()[first_index].displaced;\n            if (first_displaced && first_note.getStemDirection() === 1) {\n                start_position.x += notehead_width + render_options.padding_left;\n            }\n            // Adjust last `x` coordinates for displacements\n            const last_displaced = last_note.getKeyProps()[last_index].displaced;\n            if (last_displaced && last_note.getStemDirection() === -1) {\n                end_position.x -= notehead_width + render_options.padding_right;\n            }\n            // Adjust y position better if it's not coming from the center of the note\n            start_position.y += upwards_slope ? -3 : 1;\n            end_position.y += upwards_slope ? 2 : 0;\n            this.drawArrowLine(ctx, start_position, end_position);\n        });\n        ctx.restore();\n        // Determine the x coordinate where to start the text\n        const text_width = ctx.measureText(this.text).width;\n        const justification = render_options.text_justification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = start_position.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const delta_x = end_position.x - start_position.x;\n            const center_x = delta_x / 2 + start_position.x;\n            x = center_x - text_width / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = end_position.x - text_width;\n        }\n        // Determine the y value to start the text\n        let y = 0;\n        const vertical_position = render_options.text_position_vertical;\n        if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n            y = first_note.checkStave().getYForTopText();\n        }\n        else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        // Draw the text\n        ctx.save();\n        this.applyFontStyle();\n        ctx.fillText(this.text, x, y);\n        ctx.restore();\n        return this;\n    }\n}\n/** Default text font. */\nStaveLine.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n// Text Positioning\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = {\n    LEFT: 1,\n    CENTER: 2,\n    RIGHT: 3,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.parts = [];\n    }\n    static get CATEGORY() {\n        return Category.System;\n    }\n    /** Set formatting options. */\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    /**\n     * Add connector between staves.\n     * @param type see {@link StaveConnector.typeString}\n     */\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            top_stave: this.parts[0].stave,\n            bottom_stave: this.parts[this.parts.length - 1].stave,\n            type,\n        });\n        return this.connector;\n    }\n    /**\n     * Add a stave to the system.\n     *\n     * Example (one voice):\n     *\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n     *\n     * Example (two voices):\n     *\n     * `system.addStave({voices: [`\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\n     * `]});`\n     */\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ left_bar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ stave, \n            /* voices: [], */\n            spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => voice\n            .setContext(ctx)\n            .setStave(stave)\n            .getTickables()\n            .forEach((tickable) => tickable.setStave(stave)));\n        this.parts.push(p);\n        return stave;\n    }\n    /** Format the system. */\n    format() {\n        const options_details = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(options_details);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        let allVoices = [];\n        const debugNoteMetricsYs = [];\n        // Join the voices for each stave.\n        this.parts.forEach((part) => {\n            y = y + part.stave.space(part.spaceAbove);\n            part.stave.setY(y);\n            if (this.options.autoWidth) {\n                part.voices.forEach((voice) => {\n                    formatter.joinVoices([voice]);\n                });\n            }\n            else {\n                formatter.joinVoices(part.voices);\n            }\n            y = y + part.stave.space(part.spaceBelow);\n            y = y + part.stave.space(this.options.spaceBetweenStaves);\n            if (part.debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, voice: part.voices[0] });\n                y += 15;\n            }\n            allVoices = allVoices.concat(part.voices);\n            startX = Math.max(startX, part.stave.getNoteStartX());\n        });\n        // Update the start position of all staves.\n        this.parts.forEach((part) => part.stave.setNoteStartX(startX));\n        if (this.options.autoWidth) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(allVoices);\n            this.parts.forEach((part) => {\n                part.stave.setWidth(justifyWidth + Stave.rightPadding + (startX - this.options.x));\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - this.options.x\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        formatter.format(allVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(options_details);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n    }\n    /** Render the system. */\n    draw() {\n        // Render debugging information, if requested.\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            d.voice.getTickables().forEach((tickable) => Note.plotMetrics(ctx, tickable, d.y));\n        });\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\nimport { Font } from './font';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category, isDot } from './typeguard';\nimport { defined, RuntimeError } from './util';\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines, strings_used) {\n    const stem_through = [];\n    let group = [];\n    for (let string = 1; string <= num_lines; string++) {\n        const is_used = strings_used.indexOf(string) > -1;\n        if (!is_used) {\n            group.push(string);\n        }\n        else {\n            stem_through.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stem_through.push(group);\n    return stem_through;\n}\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {\n    const up_stem = stem_direction !== 1;\n    const down_stem = stem_direction !== -1;\n    const line_spacing = stave.getSpacingBetweenLines();\n    const total_lines = stave.getNumLines();\n    const stem_lines = [];\n    unused_strings.forEach((strings) => {\n        const containsLastString = strings.indexOf(total_lines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n            return;\n        }\n        // If there's only one string in the group, push a duplicate value.\n        // We do this because we need 2 strings to convert into upper/lower y\n        // values.\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const line_ys = [];\n        // Iterate through each group string and store it's y position\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === total_lines;\n            // Get the y value for the appropriate staff line,\n            // we adjust for a 0 index array, since string numbers are index 1\n            let y = stave.getYForLine(string - 1);\n            // Unless the string is the first or last, add padding to each side\n            // of the line\n            if (index === 0 && !isTopBound) {\n                y -= line_spacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += line_spacing / 2 - 1;\n            }\n            // Store the y value\n            line_ys.push(y);\n            // Store a subsequent y value connecting this group to the main\n            // stem above/below the stave if it's the top/bottom string\n            if (stem_direction === 1 && isTopBound) {\n                line_ys.push(stem_y - 2);\n            }\n            else if (stem_direction === -1 && isBottomBound) {\n                line_ys.push(stem_y + 2);\n            }\n        });\n        // Add the sorted y values to the\n        stem_lines.push(line_ys.sort((a, b) => a - b));\n    });\n    return stem_lines;\n}\nexport class TabNote extends StemmableNote {\n    // Initialize the TabNote with a `noteStruct` full of properties\n    // and whether to `draw_stem` when rendering the note\n    constructor(noteStruct, draw_stem = false) {\n        super(noteStruct);\n        this.glyphs = [];\n        // Return the number of the greatest string, which is the string lowest on the display\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        // Return the number of the least string, which is the string highest on the display\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false; // Renders parenthesis around notes\n        // Note properties\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\n        this.positions = noteStruct.positions || [];\n        // Render Options\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // font size for note heads and rests\n            glyph_font_scale: Tables.TABLATURE_FONT_SCALE, \n            // Flag to draw a stem\n            draw_stem, \n            // Flag to draw dot modifiers\n            draw_dots: draw_stem, \n            // Flag to extend the main stem through the stave and fret positions\n            draw_stem_through_stave: false, \n            // vertical shift from stave line\n            y_shift: 0, \n            // normal glyph scale\n            scale: 1.0, \n            // default tablature font\n            font: `${Font.SIZE}pt ${Font.SANS_SERIF}` });\n        this.glyph = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyph, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stem_direction) {\n            this.setStemDirection(noteStruct.stem_direction);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        // Renders parenthesis around notes\n        this.ghost = false;\n        this.updateWidth();\n    }\n    static get CATEGORY() {\n        return Category.TabNote;\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    // Determine if the note has a stem\n    hasStem() {\n        if (this.render_options.draw_stem)\n            return true;\n        return false;\n    }\n    // Get the default stem extension for the note\n    getStemExtension() {\n        if (this.stem_extension_override != null) {\n            return this.stem_extension_override;\n        }\n        if (this.flag) {\n            return this.getStemDirection() === 1 ? -this.flag.checkMetrics().y_shift : this.flag.checkMetrics().y_shift;\n        }\n        return 0;\n    }\n    // Calculate and store the width of the note\n    updateWidth() {\n        this.glyphs = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const glyph = Tables.tabToGlyph(fret.toString(), this.render_options.scale);\n            this.glyphs.push(glyph);\n            this.width = Math.max(glyph.getWidth(), this.width);\n        }\n        // For some reason we associate a notehead glyph with a TabNote, and this\n        // glyph is used for certain width calculations. Of course, this is totally\n        // incorrect since a notehead is a poor approximation for the dimensions of\n        // a fret number which can have multiple digits. As a result, we must\n        // overwrite getWidth() to return the correct width\n        this.glyph.getWidth = () => this.width;\n    }\n    // Set the `stave` to the note\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        // Calculate the fret number width based on font used\n        if (ctx) {\n            this.width = 0;\n            for (let i = 0; i < this.glyphs.length; ++i) {\n                const glyph = this.glyphs[i];\n                const text = '' + glyph.text;\n                if (text.toUpperCase() !== 'X') {\n                    ctx.save();\n                    ctx.setFont(this.render_options.font);\n                    glyph.width = ctx.measureText(text).width;\n                    ctx.restore();\n                    glyph.getWidth = () => glyph.width;\n                }\n                this.width = Math.max(glyph.getWidth(), this.width);\n            }\n            this.glyph.getWidth = () => this.width;\n        }\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\n        // while the position.str is a 1-based index\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    // Get the fret positions for the note\n    getPositions() {\n        return this.positions;\n    }\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const note_glyph_width = this.glyph.getWidth();\n            x = note_glyph_width / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Get the default line for rest\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        // width is already set during init()\n        this.preFormatted = true;\n    }\n    // Get the x position for the stem\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    // Get the y position for the stem\n    getStemY() {\n        const num_lines = this.checkStave().getNumLines();\n        // The decimal staff line amounts provide optimal spacing between the\n        // fret number and the stem\n        const stemUpLine = -0.5;\n        const stemDownLine = num_lines - 0.5;\n        const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    // Get the stem extents for the tabnote\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    // Draw the fal onto the context\n    drawFlag() {\n        const { beam, glyph, stem_direction, render_options: { draw_stem, glyph_font_scale }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam == undefined && draw_stem;\n        // Now it's the flag's turn.\n        if (glyph.flag && shouldDrawFlag) {\n            const flag_x = this.getStemX() + 1;\n            const flag_y = this.getStemY() - this.checkStem().getHeight();\n            const flag_code = stem_direction === Stem.DOWN\n                ? glyph.code_flag_downstem // Down stems have flags on the left.\n                : glyph.code_flag_upstem;\n            // Draw the Flag\n            Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\n        }\n    }\n    // Render the modifiers onto the context.\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            // Only draw the dots if enabled.\n            if (isDot(modifier) && !this.render_options.draw_dots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    // Render the stem extension through the fret positions\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.render_options.draw_stem;\n        const stemThrough = this.render_options.draw_stem_through_stave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.save();\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            ctx.restore();\n        }\n    }\n    // Render the fret positions onto the context\n    drawPositions() {\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.render_options.y_shift;\n            const glyph = this.glyphs[i];\n            // Center the fret text beneath the notation note head\n            const note_glyph_width = this.glyph.getWidth();\n            const tab_x = x + note_glyph_width / 2 - glyph.getWidth() / 2;\n            // FIXME: Magic numbers.\n            ctx.clearRect(tab_x - 2, y - 3, glyph.getWidth() + 4, 6);\n            if (glyph.code) {\n                Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyph.code);\n            }\n            else {\n                ctx.save();\n                ctx.setFont(this.render_options.font);\n                const text = glyph.text.toString();\n                ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n                ctx.restore();\n            }\n        }\n    }\n    // The main rendering function for the entire note.\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const render_stem = this.beam == undefined && this.render_options.draw_stem;\n        ctx.openGroup('tabnote', undefined, { pointerBBox: true });\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && render_stem) {\n            const stem_x = this.getStemX();\n            this.stem.setNoteHeadXBounds(stem_x, stem_x);\n            ctx.openGroup('stem', undefined, { pointerBBox: true });\n            this.stem.setContext(ctx).draw();\n            ctx.closeGroup();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return Category.TabStave;\n    }\n    constructor(x, y, width, options) {\n        const tab_options = Object.assign({ spacing_between_lines_px: 13, num_lines: 6, top_text_position: 1 }, options);\n        super(x, y, width, tab_options);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    // Deprecated\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// This file implements `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('Vex.Flow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.text = text;\n        this.superscript = superscript;\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.resetFont();\n        this.render_options = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            line_width: 1,\n            show_bracket: true,\n            bracket_height: 8,\n            // In the BOTTOM position, the bracket line can extend\n            // under the superscript.\n            underline_superscript: true,\n        };\n    }\n    static get CATEGORY() {\n        return Category.TextBracket;\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    /**\n     * @deprecated Use `TextBracket.Position` instead.\n     */\n    static get Positions() {\n        L('Positions is deprecated, use TextBracketPosition instead.');\n        return TextBracketPosition;\n    }\n    /**\n     * @deprecated Use `TextBracket.PositionString` instead.\n     */\n    static get PositionsString() {\n        L('PositionsString is deprecated, use PositionString instead.');\n        return TextBracket.PositionString;\n    }\n    /**\n     * Apply the text backet styling to the provided context.\n     * @param ctx\n     * @returns this\n     */\n    applyStyle(ctx) {\n        ctx.setFont(this.font);\n        const options = this.render_options;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.line_width);\n        return this;\n    }\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed(dashed, dash) {\n        this.render_options.dashed = dashed;\n        if (dash)\n            this.render_options.dash = dash;\n        return this;\n    }\n    // Set the rendering `context` for the octave bracket\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Draw the octave bracket on the rendering context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        // Get the preliminary start and stop coordintates for the bracket\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracket_height = this.render_options.bracket_height * this.position;\n        ctx.save();\n        this.applyStyle(ctx);\n        // Draw text\n        ctx.fillText(this.text, start.x, start.y);\n        // Get the width and height for the octave number\n        const main_measure = ctx.measureText(this.text);\n        const main_width = main_measure.width;\n        const main_height = main_measure.height;\n        // Calculate the y position for the super script\n        const super_y = start.y - main_height / 2.5;\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\n        // eslint-disable-next-line\n        const { family, size, weight, style } = this.textFont;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        ctx.setFont(family, smallerFontSize, weight, style);\n        ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n        // Determine width and height of the superscript\n        const super_measure = ctx.measureText(this.superscript);\n        const super_width = super_measure.width;\n        const super_height = super_measure.height;\n        // Setup initial coordinates for the bracket line\n        let start_x = start.x;\n        let line_y = super_y;\n        const end_x = stop.x + this.stop.getGlyph().getWidth();\n        // Adjust x and y coordinates based on position\n        if (this.position === TextBracketPosition.TOP) {\n            start_x += main_width + super_width + 5;\n            line_y -= super_height / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            line_y += super_height / 2.7;\n            start_x += main_width + 2;\n            if (!this.render_options.underline_superscript) {\n                start_x += super_width;\n            }\n        }\n        if (this.render_options.dashed) {\n            // Main line\n            Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n            // Ending Bracket\n            if (this.render_options.show_bracket) {\n                Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(start_x, line_y);\n            // Main line\n            ctx.lineTo(end_x, line_y);\n            if (this.render_options.show_bracket) {\n                // Ending bracket\n                ctx.lineTo(end_x, line_y + bracket_height);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n}\nTextBracket.DEBUG = false;\nTextBracket.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 15,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.ITALIC,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('Vex.Flow.TextDynamics', args);\n}\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n    /**\n     * Create the dynamics marking.\n     *\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\n     * within a `Voice`.\n     *\n     * @param noteStruct an object that contains a `duration` property and a\n     * `sequence` of letters that represents the letters to render.\n     */\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.sequence = (noteStruct.text || '').toLowerCase();\n        this.line = noteStruct.line || 0;\n        this.glyphs = [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_size: 40 });\n        L('New Dynamics Text: ', this.sequence);\n    }\n    static get CATEGORY() {\n        return Category.TextDynamics;\n    }\n    /** The glyph data for each dynamics letter. */\n    static get GLYPHS() {\n        return {\n            f: {\n                code: 'dynamicForte',\n                width: 12,\n            },\n            p: {\n                code: 'dynamicPiano',\n                width: 14,\n            },\n            m: {\n                code: 'dynamicMezzo',\n                width: 17,\n            },\n            s: {\n                code: 'dynamicSforzando',\n                width: 10,\n            },\n            z: {\n                code: 'dynamicZ',\n                width: 12,\n            },\n            r: {\n                code: 'dynamicRinforzando',\n                width: 12,\n            },\n        };\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Preformat the dynamics text. */\n    preFormat() {\n        let total_width = 0;\n        // length of this.glyphs must be <=\n        // length of this.sequence, so if we're formatted before\n        // create new glyphs.\n        this.glyphs = [];\n        // Iterate through each letter\n        this.sequence.split('').forEach((letter) => {\n            // Get the glyph data for the letter\n            const glyph_data = TextDynamics.GLYPHS[letter];\n            if (!glyph_data)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            const size = defined(this.render_options.glyph_font_size);\n            const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n            // Add the glyph\n            this.glyphs.push(glyph);\n            total_width += glyph_data.width;\n        });\n        // Store the width of the text\n        this.setWidth(total_width);\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the dynamics text on the rendering context. */\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        let letter_x = x;\n        this.glyphs.forEach((glyph, index) => {\n            const current_letter = this.sequence[index];\n            glyph.render(this.checkContext(), letter_x, y);\n            letter_x += TextDynamics.GLYPHS[current_letter].width;\n        });\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\nTextDynamics.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\nimport { Category } from './typeguard';\nexport class TimeSigNote extends Note {\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        const timeSignature = new TimeSignature(timeSpec, customPadding);\n        this.timeSigInfo = timeSignature.getInfo();\n        this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\n        // Note properties\n        this.ignore_ticks = true;\n    }\n    static get CATEGORY() {\n        return Category.TimeSigNote;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (!this.timeSigInfo.glyph.getContext()) {\n            this.timeSigInfo.glyph.setContext(ctx);\n        }\n        this.timeSigInfo.glyph.setStave(stave);\n        this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n        this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('Vex.Flow.VibratoBracket', args);\n}\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n    /**\n     * Either the stop or start note must be set, or both of them.\n     * An undefined value for the start or stop note indicates that the vibrato\n     * is drawn from the beginning or until the end of the stave accordingly.\n     */\n    constructor(bracket_data) {\n        super();\n        if (bracket_data.start)\n            this.start = bracket_data.start;\n        if (bracket_data.stop)\n            this.stop = bracket_data.stop;\n        this.line = 1;\n        this.render_options = {\n            harsh: false,\n            wave_height: 6,\n            wave_width: 4,\n            wave_girth: 2,\n            vibrato_width: 0,\n        };\n    }\n    static get CATEGORY() {\n        return Category.VibratoBracket;\n    }\n    /** Set line position of the vibrato bracket. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Set harsh vibrato bracket. */\n    setHarsh(harsh) {\n        this.render_options.harsh = harsh;\n        return this;\n    }\n    /** Draw the vibrato bracket on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        // If start note is not set then vibrato will be drawn\n        // from the beginning of the stave\n        const start_x = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        // If stop note is not set then vibrato will be drawn\n        // until the end of the stave\n        const stop_x = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.render_options.vibrato_width = stop_x - start_x;\n        L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n        Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\nVibratoBracket.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve } from './curve';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { NoteSubGroup } from './notesubgroup';\nimport { PedalMarking } from './pedalmarking';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StringNumber } from './stringnumber';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { isHTMLCanvas } from './web';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('Vex.Flow.Factory', args);\n}\n/**\n * Factory implements a high level API around VexFlow.\n */\nexport class Factory {\n    /**\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n     */\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n            font: Factory.TEXT_FONT,\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Static simplified function to access constructor without providing FactoryOptions\n     *\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n     */\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined; // current stave\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId == null) {\n            return;\n        }\n        if (elementId == '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            // We use a custom type check here, because node-canvas mimics canvas,\n            // but is not an instance of window.HTMLCanvasElement.\n            // In fact, `window` might be undefined here.\n            // See: https://www.npmjs.com/package/canvas\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    /** Return pixels from current stave spacing. */\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center', kerning: true, reportWidth: true }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        chordSymbol.setEnableKerning(p.kerning);\n        chordSymbol.setReportWidth(p.reportWidth);\n        // There is a default font based on the engraving font.  Only set then\n        // font if it is specific, else use the default\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        const p = Object.assign({ type: 'a.', position: 'above' }, params);\n        const articulation = new Articulation(p.type);\n        articulation.setPosition(p.position);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.number_of_measures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time, p.options);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            first_note: params.from,\n            last_note: params.to,\n            first_indices: params.first_indices,\n            last_indices: params.last_indices,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            first_note: params.from,\n            last_note: params.to,\n            first_indices: params.first_indices,\n            last_indices: params.last_indices,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.harsh)\n            vibratoBracket.setHarsh(params.options.harsh);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    /**\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n     * ```\n     * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n     * const score: EasyScore = vf.EasyScore();\n     * ```\n     * @param options.factory optional instance of Factory\n     * @param options.builder instance of Builder\n     * @param options.commitHooks function to call after a note element is created\n     * @param options.throwOnError throw error in case of parsing error\n     */\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    /** Render the score. */\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).draw());\n        this.voices.forEach((v) => v.setContext(ctx).draw());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).draw();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).draw());\n        this.reset();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\nFactory.DEBUG = false;\n/** Default text font. */\nFactory.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Author: Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveHairpin extends Element {\n    /**\n     * Create a new hairpin from the specified notes.\n     *\n     * @param {!Object} notes The notes to tie up.\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *  }\n     * @param {!Object} type The type of hairpin\n     */\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.render_options = {\n            height: 10,\n            y_shift: 0,\n            left_shift_px: 0,\n            right_shift_px: 0,\n            right_shift_ticks: 0,\n            left_shift_ticks: 0,\n        };\n    }\n    static get CATEGORY() {\n        return Category.StaveHairpin;\n    }\n    /* Helper function to convert ticks into pixels.\n     * Requires a Formatter with voices joined and formatted (to\n     * get pixels per tick)\n     *\n     * options is struct that has:\n     *\n     *  {\n     *   height: px,\n     *   y_shift: px,         // vertical offset\n     *   left_shift_ticks: 0, // left horizontal offset expressed in ticks\n     *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n     *  }\n     *\n     **/\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt == null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const l_shift_px = ppt * ((_a = options.left_shift_ticks) !== null && _a !== void 0 ? _a : 0);\n        const r_shift_px = ppt * ((_b = options.right_shift_ticks) !== null && _b !== void 0 ? _b : 0);\n        const hairpin_options = {\n            height: options.height,\n            y_shift: options.y_shift,\n            left_shift_px: l_shift_px,\n            right_shift_px: r_shift_px,\n            right_shift_ticks: 0,\n            left_shift_ticks: 0,\n        };\n        new StaveHairpin({\n            first_note: notes.first_note,\n            last_note: notes.last_note,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpin_options)\n            .setPosition(position)\n            .draw();\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        if (options.height != null &&\n            options.y_shift != null &&\n            options.left_shift_px != null &&\n            options.right_shift_px != null) {\n            this.render_options = options;\n        }\n        return this;\n    }\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n        }\n        this.notes = notes;\n        this.first_note = notes.first_note;\n        this.last_note = notes.last_note;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.render_options.y_shift + 20;\n        let y_shift = params.first_y;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            y_shift = params.first_y - params.staff_height;\n        }\n        const l_shift = this.render_options.left_shift_px;\n        const r_shift = this.render_options.right_shift_px;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.first_note;\n        const lastNote = this.last_note;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            first_x: start.x,\n            last_x: end.x,\n            first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staff_height: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { TabTie } from './tabtie';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class TabSlide extends TabTie {\n    /**\n     * @param notes is a struct of the form:\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     * @param notes.first_note the starting note of the slide\n     * @param notes.last_note the ending note of the slide\n     * @param notes.first_indices specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n     * @param notes.last_indices currently unused. we assume it's the same as first_indices.\n     *\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n     */\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        // Determine the direction automatically if it is not provided.\n        if (!direction) {\n            let first_fret = notes.first_note.getPositions()[0].fret;\n            if (typeof first_fret === 'string') {\n                first_fret = parseInt(first_fret, 10);\n            }\n            let last_fret = notes.last_note.getPositions()[0].fret;\n            if (typeof last_fret === 'string') {\n                last_fret = parseInt(last_fret, 10);\n            }\n            // If either of the frets are 'X', parseInt() above will return NaN.\n            // Choose TabSlide.SLIDE_UP by default.\n            if (isNaN(first_fret) || isNaN(last_fret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.render_options.cp1 = 11;\n        this.render_options.cp2 = 14;\n        this.render_options.y_shift = 0.5;\n        this.resetFont();\n    }\n    static get CATEGORY() {\n        return Category.TabSlide;\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    renderTie(params) {\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const first_x_px = params.first_x_px;\n        const first_ys = params.first_ys;\n        const last_x_px = params.last_x_px;\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        // eslint-disable-next-line\n        const first_indices = this.notes.first_indices;\n        for (let i = 0; i < first_indices.length; ++i) {\n            const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\n            if (isNaN(slide_y)) {\n                throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(first_x_px, slide_y + 3 * direction);\n            ctx.lineTo(last_x_px, slide_y - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\nTabSlide.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 10,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n    /**\n     * Constructor.\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        // Default to standard tuning.\n        this.setTuning(tuningString);\n    }\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    /** Return the note number associated to the note string. */\n    noteToInteger(noteString) {\n        return Tables.keyProperties(noteString).int_value;\n    }\n    /**\n     * Set tuning identified by tuning name (eg. 'dagdad')\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    /** Return the note number associated with a tablature string. */\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    /** Return the note number associated with a tablature string and fret. */\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    /** Return the note string associated with tablature string and fret. */\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { CanvasContext } from './canvascontext';\nimport { ChordSymbol } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { SVGContext } from './svgcontext';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFormatter } from './textformatter';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { DATE, ID, VERSION } from './version';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nexport class Flow {\n    static get BUILD() {\n        return {\n            /** version number. */\n            VERSION: VERSION,\n            /** git commit ID that this library was built from. */\n            ID: ID,\n            /** The date when this library was compiled. */\n            DATE: DATE,\n        };\n    }\n    static get Flow() {\n        // This (circular reference) provides a handy shortcut for importing VexFlow via `require()`.\n        // For example:\n        // const Vex = require('vexflow');\n        // const { Flow, Stave, StaveNote, Formatter, Renderer } = Vex.Flow;\n        return Flow;\n    }\n    // ... more to come ...\n    /**\n     * Examples:\n     * ```\n     * Vex.Flow.setMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Bravura', 'Gonville');\n     * ```\n     *\n     * **CASE 1**: You are using `vexflow.js`, which includes all music fonts (Bravura, Gonville, Petaluma, Custom).\n     * In this case, calling this method is optional, since VexFlow already defaults to a music font stack of:\n     * 'Bravura', 'Gonville', 'Custom'.\n     *\n     * **CASE 2**: You are using `vexflow-bravura.js` or `vexflow-petaluma.js` or `vexflow-gonville.js`,\n     * which includes a single music font. Calling this method is unnecessary.\n     *\n     * **CASE 3**: You are using the light weight `vexflow-core.js` to take advantage of lazy loading for fonts.\n     * In this case, the default music font stack is empty.\n     * Example:\n     * ```\n     * await Vex.Flow.fetchMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Petaluma');\n     * ... (do VexFlow stuff) ...\n     * ```\n     * See `demos/fonts/` for more examples.\n     *\n     * @returns an array of Font objects corresponding to the provided `fontNames`.\n     */\n    static setMusicFont(...fontNames) {\n        // Convert the array of font names into an array of Font objects.\n        const fonts = fontNames.map((fontName) => Font.load(fontName));\n        Tables.MUSIC_FONT_STACK = fonts;\n        Glyph.MUSIC_FONT_STACK = fonts.slice();\n        Glyph.CURRENT_CACHE_KEY = fontNames.join(',');\n        return fonts;\n    }\n    /**\n     * Used with vexflow-core which supports dynamic font loading.\n     */\n    // eslint-disable-next-line\n    static fetchMusicFont(fontName, fontModuleOrPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The default implementation does nothing.\n            // See vexflow-core.ts for the implementation that vexflow-core.js uses.\n        });\n    }\n    static getMusicFont() {\n        const fonts = Tables.MUSIC_FONT_STACK;\n        return fonts.map((font) => font.getName());\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return Tables.STAVE_LINE_THICKNESS;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        Tables.STAVE_LINE_THICKNESS = value;\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get accidentalMap() {\n        return Tables.accidentalMap;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    // eslint-disable-next-line\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\nFlow.Accidental = Accidental;\nFlow.Annotation = Annotation;\nFlow.Articulation = Articulation;\nFlow.Barline = Barline;\nFlow.BarNote = BarNote;\nFlow.Beam = Beam;\nFlow.Bend = Bend;\nFlow.BoundingBox = BoundingBox;\nFlow.BoundingBoxComputation = BoundingBoxComputation;\nFlow.CanvasContext = CanvasContext;\nFlow.ChordSymbol = ChordSymbol;\nFlow.Clef = Clef;\nFlow.ClefNote = ClefNote;\nFlow.Crescendo = Crescendo;\nFlow.Curve = Curve;\nFlow.Dot = Dot;\nFlow.EasyScore = EasyScore;\nFlow.Element = Element;\nFlow.Factory = Factory;\nFlow.Font = Font;\nFlow.Formatter = Formatter;\nFlow.Fraction = Fraction;\nFlow.FretHandFinger = FretHandFinger;\nFlow.GhostNote = GhostNote;\nFlow.Glyph = Glyph;\nFlow.GlyphNote = GlyphNote;\nFlow.GraceNote = GraceNote;\nFlow.GraceNoteGroup = GraceNoteGroup;\nFlow.GraceTabNote = GraceTabNote;\nFlow.KeyManager = KeyManager;\nFlow.KeySignature = KeySignature;\nFlow.KeySigNote = KeySigNote;\nFlow.Modifier = Modifier;\nFlow.ModifierContext = ModifierContext;\nFlow.MultiMeasureRest = MultiMeasureRest;\nFlow.Music = Music;\nFlow.Note = Note;\nFlow.NoteHead = NoteHead;\nFlow.NoteSubGroup = NoteSubGroup;\nFlow.Ornament = Ornament;\nFlow.Parenthesis = Parenthesis;\nFlow.Parser = Parser;\nFlow.PedalMarking = PedalMarking;\nFlow.Registry = Registry;\nFlow.RenderContext = RenderContext;\nFlow.Renderer = Renderer;\nFlow.RepeatNote = RepeatNote;\nFlow.Repetition = Repetition;\nFlow.Stave = Stave;\nFlow.StaveConnector = StaveConnector;\nFlow.StaveHairpin = StaveHairpin;\nFlow.StaveLine = StaveLine;\nFlow.StaveModifier = StaveModifier;\nFlow.StaveNote = StaveNote;\nFlow.StaveTempo = StaveTempo;\nFlow.StaveText = StaveText;\nFlow.StaveTie = StaveTie;\nFlow.Stem = Stem;\nFlow.StringNumber = StringNumber;\nFlow.Stroke = Stroke;\nFlow.SVGContext = SVGContext;\nFlow.System = System;\nFlow.TabNote = TabNote;\nFlow.TabSlide = TabSlide;\nFlow.TabStave = TabStave;\nFlow.TabTie = TabTie;\nFlow.TextBracket = TextBracket;\nFlow.TextDynamics = TextDynamics;\nFlow.TextFormatter = TextFormatter;\nFlow.TextNote = TextNote;\nFlow.TickContext = TickContext;\nFlow.TimeSignature = TimeSignature;\nFlow.TimeSigNote = TimeSigNote;\nFlow.Tremolo = Tremolo;\nFlow.Tuning = Tuning;\nFlow.Tuplet = Tuplet;\nFlow.Vibrato = Vibrato;\nFlow.VibratoBracket = VibratoBracket;\nFlow.Voice = Voice;\nFlow.Volta = Volta;\n// enums need to be exported too!\nFlow.BarlineType = BarlineType;\nFlow.ModifierPosition = ModifierPosition;\n","export const VERSION = '4.0.1-alpha.2';\nexport const ID = '0df10df6d1fab3a99f5aa306341a31c6e686d659';\nexport const DATE = '2022-02-02T09:30:30.784Z';\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\nimport { Font } from './font';\nimport { TabNote } from './tabnote';\nimport { Category } from './typeguard';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return Category.GraceTabNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // vertical shift from stave line\n            y_shift: 0.3, \n            // grace glyph scale\n            scale: 0.6, \n            // grace tablature font\n            font: `7.5pt ${Font.SANS_SERIF}` });\n        this.updateWidth();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\nimport { Music } from './music';\nimport { RuntimeError } from './util';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const is_supported_type = Music.scaleTypes[this.keyParts.type];\n        if (!is_supported_type) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.root_indices[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        // First look for matching note in our altered scale\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in our altered scale\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote != null) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in the original scale\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote != null) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        // Then try to unmodify a currently modified note.\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        // Last resort -- shitshoot\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n// MIT License\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote } from './typeguard';\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n    /**\n     * @param num number of bars\n     */\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.code = 'tremolo1';\n        // big strokes scales initialised to 1 (no scale)\n        this.y_spacing_scale = 1;\n        this.extra_stroke_scale = 1;\n    }\n    static get CATEGORY() {\n        return Category.Tremolo;\n    }\n    /** Draw the tremolo on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let x = start.x;\n        const gn = isGraceNote(note);\n        const scale = gn ? GraceNote.SCALE : 1;\n        const category = `tremolo.${gn ? 'grace' : 'default'}`;\n        const musicFont = Tables.currentMusicFont();\n        let y_spacing = musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n        // add y_spacing_scale for big strokes (#1258)\n        y_spacing *= this.y_spacing_scale;\n        const height = this.num * y_spacing;\n        let y = note.getStemExtents().baseY - height;\n        if (stemDirection < 0) {\n            y += musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n        }\n        else {\n            y += musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n        }\n        const fontScale = musicFont.lookupMetric(`${category}.point`);\n        x += musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n        for (let i = 0; i < this.num; ++i) {\n            Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category, scale: this.extra_stroke_scale });\n            y += y_spacing;\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Utility methods used by the rest of the VexFlow codebase.\nimport { Flow } from './flow';\nimport { log, RuntimeError } from './util';\nexport class Vex {\n    // Users of `Vex.forEach(a, fn)` should use `Array.prototype.forEach()` instead.\n    // static forEach<T>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => void) {\n    //   arr.forEach(callbackFn);\n    // }\n    /**\n     * Take `arr` and return a new list consisting of the sorted, unique,\n     * contents of arr. Does not modify `arr`.\n     */\n    // eslint-disable-next-line\n    static sortAndUnique(arr, cmp, eq) {\n        if (arr.length > 1) {\n            const newArr = [];\n            let last;\n            arr.sort(cmp);\n            for (let i = 0; i < arr.length; ++i) {\n                if (i === 0 || !eq(arr[i], last)) {\n                    newArr.push(arr[i]);\n                }\n                last = arr[i];\n            }\n            return newArr;\n        }\n        else {\n            return arr;\n        }\n    }\n    /** Check if array `arr` contains `obj`. */\n    // eslint-disable-next-line\n    static contains(arr, obj) {\n        let i = arr.length;\n        while (i--) {\n            if (arr[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Get the 2D Canvas context from DOM element `canvas_sel`.\n    static getCanvasContext(canvasSelector) {\n        if (!canvasSelector) {\n            throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasSelector);\n        }\n        const canvas = document.getElementById(canvasSelector);\n        if (!(canvas && canvas.getContext)) {\n            throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n        }\n        return canvas.getContext('2d');\n    }\n    /** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\n    // eslint-disable-next-line\n    static benchmark(s, f) {\n        const start_time = new Date().getTime();\n        f();\n        const elapsed = new Date().getTime() - start_time;\n        log(s, elapsed + 'ms');\n    }\n    // Get stack trace.\n    static stackTrace() {\n        const err = new Error();\n        return err.stack;\n    }\n}\nVex.Flow = Flow;\n","export const PetalumaScriptFont = {\n    spacing: 50,\n    glyphs: {\n        ' ': {\n            x_min: 0,\n            x_max: 250,\n            y_min: 0,\n            y_max: 500,\n            ha: 500,\n            leftSideBearing: 0,\n            advanceWidth: 250,\n        },\n        '0': {\n            x_min: 33,\n            x_max: 534,\n            y_min: -13,\n            y_max: 751,\n            ha: 764,\n            leftSideBearing: 33,\n            advanceWidth: 570,\n        },\n        '1': {\n            x_min: 48,\n            x_max: 235,\n            y_min: -17,\n            y_max: 734,\n            ha: 751,\n            leftSideBearing: 48,\n            advanceWidth: 286,\n        },\n        '2': {\n            x_min: 56,\n            x_max: 571,\n            y_min: -19,\n            y_max: 741,\n            ha: 760,\n            leftSideBearing: 56,\n            advanceWidth: 626,\n        },\n        '3': {\n            x_min: 50,\n            x_max: 528,\n            y_min: -7,\n            y_max: 731,\n            ha: 738,\n            leftSideBearing: 50,\n            advanceWidth: 589,\n        },\n        '4': {\n            x_min: 38,\n            x_max: 564,\n            y_min: -13,\n            y_max: 743,\n            ha: 756,\n            leftSideBearing: 38,\n            advanceWidth: 614,\n        },\n        '5': {\n            x_min: 42,\n            x_max: 601,\n            y_min: -34,\n            y_max: 743,\n            ha: 777,\n            leftSideBearing: 42,\n            advanceWidth: 648,\n        },\n        '6': {\n            x_min: 47,\n            x_max: 606,\n            y_min: -16,\n            y_max: 743,\n            ha: 759,\n            leftSideBearing: 47,\n            advanceWidth: 667,\n        },\n        '7': {\n            x_min: 47,\n            x_max: 567,\n            y_min: 5,\n            y_max: 739,\n            ha: 734,\n            leftSideBearing: 0,\n            advanceWidth: 615,\n        },\n        '8': {\n            x_min: 40,\n            x_max: 541,\n            y_min: -15,\n            y_max: 752,\n            ha: 767,\n            leftSideBearing: 40,\n            advanceWidth: 585,\n        },\n        '9': {\n            x_min: 40,\n            x_max: 537,\n            y_min: -52,\n            y_max: 736,\n            ha: 788,\n            leftSideBearing: 40,\n            advanceWidth: 592,\n        },\n        '!': {\n            x_min: 49,\n            x_max: 180,\n            y_min: -7,\n            y_max: 761,\n            ha: 768,\n            leftSideBearing: 49,\n            advanceWidth: 230,\n        },\n        '\"': {\n            x_min: 39,\n            x_max: 304,\n            y_min: 596,\n            y_max: 804,\n            ha: 208,\n            leftSideBearing: 39,\n            advanceWidth: 353,\n        },\n        '#': {\n            x_min: 33,\n            x_max: 599,\n            y_min: -8,\n            y_max: 765,\n            ha: 773,\n            leftSideBearing: 33,\n            advanceWidth: 648,\n        },\n        $: {\n            x_min: 53,\n            x_max: 495,\n            y_min: -111,\n            y_max: 823,\n            ha: 934,\n            leftSideBearing: 53,\n            advanceWidth: 560,\n        },\n        '%': {\n            x_min: 35,\n            x_max: 656,\n            y_min: -128,\n            y_max: 808,\n            ha: 936,\n            leftSideBearing: 35,\n            advanceWidth: 711,\n        },\n        '&': {\n            x_min: 53,\n            x_max: 441,\n            y_min: -3,\n            y_max: 753,\n            ha: 756,\n            leftSideBearing: 53,\n            advanceWidth: 500,\n        },\n        \"'\": {\n            x_min: 43,\n            x_max: 161,\n            y_min: 590,\n            y_max: 811,\n            ha: 221,\n            leftSideBearing: 43,\n            advanceWidth: 217,\n        },\n        '(': {\n            x_min: 41,\n            x_max: 311,\n            y_min: -36,\n            y_max: 845,\n            ha: 881,\n            leftSideBearing: 41,\n            advanceWidth: 308,\n        },\n        ')': {\n            x_min: -8,\n            x_max: 257,\n            y_min: -21,\n            y_max: 852,\n            ha: 873,\n            leftSideBearing: -8,\n            advanceWidth: 280,\n        },\n        '*': {\n            x_min: 59,\n            x_max: 539,\n            y_min: 175,\n            y_max: 589,\n            ha: 414,\n            leftSideBearing: 59,\n            advanceWidth: 601,\n        },\n        '+': {\n            x_min: 33,\n            x_max: 361,\n            y_min: 180,\n            y_max: 587,\n            ha: 407,\n            leftSideBearing: 33,\n            advanceWidth: 400,\n        },\n        ',': {\n            x_min: 15,\n            x_max: 176,\n            y_min: -129,\n            y_max: 92,\n            ha: 221,\n            leftSideBearing: 15,\n            advanceWidth: 205,\n        },\n        '-': {\n            x_min: 40,\n            x_max: 380,\n            y_min: 317,\n            y_max: 452,\n            ha: 135,\n            leftSideBearing: 40,\n            advanceWidth: 422,\n        },\n        '.': {\n            x_min: 48,\n            x_max: 185,\n            y_min: -56,\n            y_max: 84,\n            ha: 140,\n            leftSideBearing: 48,\n            advanceWidth: 227,\n        },\n        '/': {\n            x_min: -58,\n            x_max: 654,\n            y_min: -122,\n            y_max: 844,\n            ha: 966,\n            leftSideBearing: -58,\n            advanceWidth: 626,\n        },\n        ':': {\n            x_min: 65,\n            x_max: 225,\n            y_min: 97,\n            y_max: 536,\n            ha: 439,\n            leftSideBearing: 65,\n            advanceWidth: 302,\n        },\n        ';': {\n            x_min: 13,\n            x_max: 295,\n            y_min: -139,\n            y_max: 536,\n            ha: 675,\n            leftSideBearing: 13,\n            advanceWidth: 334,\n        },\n        '<': {\n            x_min: 28,\n            x_max: 438,\n            y_min: -1,\n            y_max: 607,\n            ha: 608,\n            leftSideBearing: 28,\n            advanceWidth: 475,\n        },\n        '=': {\n            x_min: 40,\n            x_max: 383,\n            y_min: 199.9598640852289,\n            y_max: 541,\n            ha: 341.0401359147711,\n            leftSideBearing: 40,\n            advanceWidth: 422,\n        },\n        '>': {\n            x_min: 35,\n            x_max: 421,\n            y_min: 28,\n            y_max: 632,\n            ha: 604,\n            leftSideBearing: 35,\n            advanceWidth: 466,\n        },\n        '?': {\n            x_min: 45,\n            x_max: 548,\n            y_min: -17,\n            y_max: 767,\n            ha: 784,\n            leftSideBearing: 45,\n            advanceWidth: 592,\n        },\n        '@': {\n            x_min: 51,\n            x_max: 730,\n            y_min: -78,\n            y_max: 753,\n            ha: 831,\n            leftSideBearing: 51,\n            advanceWidth: 781,\n        },\n        A: {\n            x_min: 37,\n            x_max: 554,\n            y_min: -4,\n            y_max: 746,\n            ha: 750,\n            leftSideBearing: 37,\n            advanceWidth: 617,\n        },\n        B: {\n            x_min: 37,\n            x_max: 532,\n            y_min: 3,\n            y_max: 783,\n            ha: 780,\n            leftSideBearing: 37,\n            advanceWidth: 579,\n        },\n        C: {\n            x_min: 37,\n            x_max: 583,\n            y_min: -3,\n            y_max: 775,\n            ha: 778,\n            leftSideBearing: 37,\n            advanceWidth: 623,\n        },\n        D: {\n            x_min: 50,\n            x_max: 530,\n            y_min: -15,\n            y_max: 749,\n            ha: 764,\n            leftSideBearing: 50,\n            advanceWidth: 579,\n        },\n        E: {\n            x_min: 45,\n            x_max: 531,\n            y_min: -1,\n            y_max: 743,\n            ha: 744,\n            leftSideBearing: 45,\n            advanceWidth: 585,\n        },\n        F: {\n            x_min: 45,\n            x_max: 459,\n            y_min: 23,\n            y_max: 727,\n            ha: 704,\n            leftSideBearing: 45,\n            advanceWidth: 510,\n        },\n        G: {\n            x_min: 31,\n            x_max: 577,\n            y_min: -8,\n            y_max: 733,\n            ha: 741,\n            leftSideBearing: 31,\n            advanceWidth: 611,\n        },\n        H: {\n            x_min: 37,\n            x_max: 493,\n            y_min: -22,\n            y_max: 758,\n            ha: 780,\n            leftSideBearing: 37,\n            advanceWidth: 535,\n        },\n        I: {\n            x_min: 47,\n            x_max: 501,\n            y_min: -3,\n            y_max: 731,\n            ha: 734,\n            leftSideBearing: 47,\n            advanceWidth: 541,\n        },\n        J: {\n            x_min: 33,\n            x_max: 531,\n            y_min: -23,\n            y_max: 725,\n            ha: 748,\n            leftSideBearing: 33,\n            advanceWidth: 573,\n        },\n        K: {\n            x_min: 43,\n            x_max: 505,\n            y_min: -10,\n            y_max: 740,\n            ha: 750,\n            leftSideBearing: 43,\n            advanceWidth: 560,\n        },\n        L: {\n            x_min: 49,\n            x_max: 457,\n            y_min: -2,\n            y_max: 746,\n            ha: 748,\n            leftSideBearing: 49,\n            advanceWidth: 510,\n        },\n        M: {\n            x_min: 35,\n            x_max: 699,\n            y_min: 1,\n            y_max: 744,\n            ha: 743,\n            leftSideBearing: 35,\n            advanceWidth: 743,\n        },\n        N: {\n            x_min: 34,\n            x_max: 533,\n            y_min: -17,\n            y_max: 761,\n            ha: 778,\n            leftSideBearing: 34,\n            advanceWidth: 579,\n        },\n        O: {\n            x_min: 41,\n            x_max: 608,\n            y_min: -5,\n            y_max: 735,\n            ha: 740,\n            leftSideBearing: 41,\n            advanceWidth: 667,\n        },\n        P: {\n            x_min: 53,\n            x_max: 451,\n            y_min: -18,\n            y_max: 735,\n            ha: 753,\n            leftSideBearing: 53,\n            advanceWidth: 497,\n        },\n        Q: {\n            x_min: 40,\n            x_max: 599,\n            y_min: -67,\n            y_max: 744,\n            ha: 811,\n            leftSideBearing: 40,\n            advanceWidth: 648,\n        },\n        R: {\n            x_min: 39,\n            x_max: 487,\n            y_min: 16,\n            y_max: 735,\n            ha: 719,\n            leftSideBearing: 39,\n            advanceWidth: 535,\n        },\n        S: {\n            x_min: 35,\n            x_max: 552,\n            y_min: -47,\n            y_max: 708,\n            ha: 755,\n            leftSideBearing: 35,\n            advanceWidth: 604,\n        },\n        T: {\n            x_min: 26,\n            x_max: 656,\n            y_min: -13,\n            y_max: 718,\n            ha: 731,\n            leftSideBearing: 26,\n            advanceWidth: 705,\n        },\n        U: {\n            x_min: 41,\n            x_max: 518,\n            y_min: -20,\n            y_max: 748,\n            ha: 768,\n            leftSideBearing: 41,\n            advanceWidth: 567,\n        },\n        V: {\n            x_min: 47,\n            x_max: 509,\n            y_min: -26,\n            y_max: 744,\n            ha: 770,\n            leftSideBearing: 47,\n            advanceWidth: 567,\n        },\n        W: {\n            x_min: 44,\n            x_max: 789,\n            y_min: -35,\n            y_max: 720,\n            ha: 755,\n            leftSideBearing: 44,\n            advanceWidth: 833,\n        },\n        X: {\n            x_min: 63,\n            x_max: 635,\n            y_min: -10,\n            y_max: 745,\n            ha: 755,\n            leftSideBearing: 63,\n            advanceWidth: 680,\n        },\n        Y: {\n            x_min: 43,\n            x_max: 503,\n            y_min: -21,\n            y_max: 734,\n            ha: 755,\n            leftSideBearing: 43,\n            advanceWidth: 541,\n        },\n        Z: {\n            x_min: 42,\n            x_max: 584,\n            y_min: -10,\n            y_max: 739,\n            ha: 749,\n            leftSideBearing: 42,\n            advanceWidth: 629,\n        },\n        '[': {\n            x_min: 46,\n            x_max: 346,\n            y_min: -150,\n            y_max: 884,\n            ha: 1034,\n            leftSideBearing: 46,\n            advanceWidth: 291,\n        },\n        '\\\\': {\n            x_min: 20,\n            x_max: 616,\n            y_min: -100,\n            y_max: 797,\n            ha: 897,\n            leftSideBearing: 20,\n            advanceWidth: 645,\n        },\n        ']': {\n            x_min: -76,\n            x_max: 226,\n            y_min: -150,\n            y_max: 881,\n            ha: 1031,\n            leftSideBearing: -76,\n            advanceWidth: 297,\n        },\n        '^': {\n            x_min: 43,\n            x_max: 437,\n            y_min: 517,\n            y_max: 812,\n            ha: 295,\n            leftSideBearing: 43,\n            advanceWidth: 478,\n        },\n        _: {\n            x_min: 29,\n            x_max: 563,\n            y_min: -110,\n            y_max: -1,\n            ha: 109,\n            leftSideBearing: 29,\n            advanceWidth: 598,\n        },\n        '`': {\n            x_min: 54,\n            x_max: 321,\n            y_min: 540,\n            y_max: 747,\n            ha: 207,\n            leftSideBearing: 54,\n            advanceWidth: 368,\n        },\n        a: {\n            x_min: 20,\n            x_max: 447,\n            y_min: -17,\n            y_max: 495,\n            ha: 512,\n            leftSideBearing: 20,\n            advanceWidth: 494,\n        },\n        b: {\n            x_min: 37,\n            x_max: 466,\n            y_min: -27,\n            y_max: 770,\n            ha: 797,\n            leftSideBearing: 37,\n            advanceWidth: 510,\n        },\n        c: {\n            x_min: 35,\n            x_max: 456,\n            y_min: -9,\n            y_max: 507,\n            ha: 516,\n            leftSideBearing: 35,\n            advanceWidth: 460,\n        },\n        d: {\n            x_min: 45,\n            x_max: 520,\n            y_min: -15,\n            y_max: 764,\n            ha: 779,\n            leftSideBearing: 45,\n            advanceWidth: 560,\n        },\n        e: {\n            x_min: 33,\n            x_max: 370,\n            y_min: -5,\n            y_max: 501,\n            ha: 506,\n            leftSideBearing: 33,\n            advanceWidth: 397,\n        },\n        f: {\n            x_min: 35,\n            x_max: 411,\n            y_min: -13,\n            y_max: 695,\n            ha: 708,\n            leftSideBearing: 35,\n            advanceWidth: 453,\n        },\n        g: {\n            x_min: 33,\n            x_max: 551,\n            y_min: -257,\n            y_max: 505,\n            ha: 762,\n            leftSideBearing: 33,\n            advanceWidth: 611,\n        },\n        h: {\n            x_min: 32,\n            x_max: 458,\n            y_min: -29,\n            y_max: 743,\n            ha: 772,\n            leftSideBearing: 32,\n            advanceWidth: 491,\n        },\n        i: {\n            x_min: 45,\n            x_max: 167,\n            y_min: -13,\n            y_max: 631,\n            ha: 644,\n            leftSideBearing: 45,\n            advanceWidth: 220,\n        },\n        j: {\n            x_min: -127,\n            x_max: 261,\n            y_min: -231,\n            y_max: 601,\n            ha: 832,\n            leftSideBearing: -127,\n            advanceWidth: 308,\n        },\n        k: {\n            x_min: 39,\n            x_max: 443,\n            y_min: -3,\n            y_max: 700,\n            ha: 703,\n            leftSideBearing: 39,\n            advanceWidth: 497,\n        },\n        l: {\n            x_min: 58,\n            x_max: 168,\n            y_min: -8,\n            y_max: 686,\n            ha: 694,\n            leftSideBearing: 58,\n            advanceWidth: 227,\n        },\n        m: {\n            x_min: 39,\n            x_max: 688,\n            y_min: -14,\n            y_max: 501,\n            ha: 515,\n            leftSideBearing: 39,\n            advanceWidth: 718,\n        },\n        n: {\n            x_min: 45,\n            x_max: 491,\n            y_min: -32,\n            y_max: 512,\n            ha: 544,\n            leftSideBearing: 45,\n            advanceWidth: 541,\n        },\n        o: {\n            x_min: 41,\n            x_max: 424,\n            y_min: -12,\n            y_max: 493,\n            ha: 505,\n            leftSideBearing: 41,\n            advanceWidth: 447,\n        },\n        p: {\n            x_min: 25,\n            x_max: 529,\n            y_min: -260,\n            y_max: 500,\n            ha: 760,\n            leftSideBearing: 25,\n            advanceWidth: 573,\n        },\n        q: {\n            x_min: 53,\n            x_max: 603,\n            y_min: -235,\n            y_max: 514,\n            ha: 749,\n            leftSideBearing: 53,\n            advanceWidth: 623,\n        },\n        r: {\n            x_min: 32,\n            x_max: 407,\n            y_min: -7,\n            y_max: 492,\n            ha: 499,\n            leftSideBearing: 32,\n            advanceWidth: 460,\n        },\n        s: {\n            x_min: 49,\n            x_max: 416,\n            y_min: -12,\n            y_max: 519,\n            ha: 531,\n            leftSideBearing: 49,\n            advanceWidth: 460,\n        },\n        t: {\n            x_min: 32,\n            x_max: 442,\n            y_min: -5,\n            y_max: 684,\n            ha: 689,\n            leftSideBearing: 32,\n            advanceWidth: 469,\n        },\n        u: {\n            x_min: 41,\n            x_max: 487,\n            y_min: -5,\n            y_max: 507,\n            ha: 512,\n            leftSideBearing: 41,\n            advanceWidth: 510,\n        },\n        v: {\n            x_min: 16,\n            x_max: 441,\n            y_min: -20,\n            y_max: 542,\n            ha: 562,\n            leftSideBearing: 16,\n            advanceWidth: 456,\n        },\n        w: {\n            x_min: 39,\n            x_max: 639,\n            y_min: -22,\n            y_max: 505,\n            ha: 527,\n            leftSideBearing: 39,\n            advanceWidth: 661,\n        },\n        x: {\n            x_min: 15,\n            x_max: 505,\n            y_min: -39,\n            y_max: 539,\n            ha: 578,\n            leftSideBearing: 15,\n            advanceWidth: 541,\n        },\n        y: {\n            x_min: -98,\n            x_max: 501,\n            y_min: -242,\n            y_max: 511,\n            ha: 753,\n            leftSideBearing: -98,\n            advanceWidth: 548,\n        },\n        z: {\n            x_min: 27,\n            x_max: 479,\n            y_min: -3,\n            y_max: 494,\n            ha: 497,\n            leftSideBearing: 27,\n            advanceWidth: 494,\n        },\n        '{': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '|': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '}': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '~': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n    },\n    fontFamily: 'PetalumaScript',\n    resolution: 1000,\n    generatedOn: '2020-06-14T18:33:25.407Z',\n};\n","export const RobotoSlabFont = {\n    spacing: 50,\n    glyphs: {\n        ' ': {\n            x_min: 0,\n            x_max: 509,\n            y_min: 0,\n            y_max: 2000,\n            ha: 2000,\n            leftSideBearing: 0,\n            advanceWidth: 509,\n        },\n        '0': {\n            x_min: 121,\n            x_max: 1048,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 121,\n            advanceWidth: 1168,\n        },\n        '1': {\n            x_min: 117,\n            x_max: 767,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 117,\n            advanceWidth: 844,\n        },\n        '2': {\n            x_min: 75.8474576645637,\n            x_max: 1040,\n            y_min: 0,\n            y_max: 1477,\n            ha: 1477,\n            leftSideBearing: 75,\n            advanceWidth: 1131,\n        },\n        '3': {\n            x_min: 74.85365853658536,\n            x_max: 994,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 74,\n            advanceWidth: 1106,\n        },\n        '4': {\n            x_min: 63,\n            x_max: 1114,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 63,\n            advanceWidth: 1187,\n        },\n        '5': {\n            x_min: 96.8448275474953,\n            x_max: 982,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 96,\n            advanceWidth: 1081,\n        },\n        '6': {\n            x_min: 121,\n            x_max: 1067,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 121,\n            advanceWidth: 1144,\n        },\n        '7': {\n            x_min: 76,\n            x_max: 1060,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: -30,\n            advanceWidth: 1128,\n        },\n        '8': {\n            x_min: 92,\n            x_max: 1039,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 92,\n            advanceWidth: 1131,\n        },\n        '9': {\n            x_min: 84,\n            x_max: 1026,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 84,\n            advanceWidth: 1154,\n        },\n        '!': {\n            x_min: 143,\n            x_max: 340,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 143,\n            advanceWidth: 483,\n        },\n        '\"': {\n            x_min: 166,\n            x_max: 634,\n            y_min: 1055,\n            y_max: 1560,\n            ha: 505,\n            leftSideBearing: 166,\n            advanceWidth: 770,\n        },\n        '#': {\n            x_min: 63,\n            x_max: 1179,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 63,\n            advanceWidth: 1246,\n        },\n        $: {\n            x_min: 81.92156915727656,\n            x_max: 1012,\n            y_min: -208,\n            y_max: 1693,\n            ha: 1901,\n            leftSideBearing: 81,\n            advanceWidth: 1110,\n        },\n        '%': {\n            x_min: 77,\n            x_max: 1384,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 77,\n            advanceWidth: 1460,\n        },\n        '&': {\n            x_min: 74,\n            x_max: 1242,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 74,\n            advanceWidth: 1289,\n        },\n        \"'\": {\n            x_min: 166,\n            x_max: 324,\n            y_min: 1055,\n            y_max: 1560,\n            ha: 505,\n            leftSideBearing: 166,\n            advanceWidth: 460,\n        },\n        '(': {\n            x_min: 114,\n            x_max: 650,\n            y_min: -463,\n            y_max: 1636,\n            ha: 2099,\n            leftSideBearing: 114,\n            advanceWidth: 662,\n        },\n        ')': {\n            x_min: 11,\n            x_max: 547,\n            y_min: -463,\n            y_max: 1636,\n            ha: 2099,\n            leftSideBearing: 11,\n            advanceWidth: 654,\n        },\n        '*': {\n            x_min: 66,\n            x_max: 893,\n            y_min: 607,\n            y_max: 1456,\n            ha: 849,\n            leftSideBearing: 66,\n            advanceWidth: 958,\n        },\n        '+': {\n            x_min: 73,\n            x_max: 1071,\n            y_min: 146,\n            y_max: 1206,\n            ha: 1060,\n            leftSideBearing: 73,\n            advanceWidth: 1145,\n        },\n        ',': {\n            x_min: 23,\n            x_max: 315,\n            y_min: -311,\n            y_max: 221,\n            ha: 532,\n            leftSideBearing: 23,\n            advanceWidth: 404,\n        },\n        '-': {\n            x_min: 154,\n            x_max: 643,\n            y_min: 538,\n            y_max: 692,\n            ha: 154,\n            leftSideBearing: 154,\n            advanceWidth: 797,\n        },\n        '.': {\n            x_min: 145,\n            x_max: 342,\n            y_min: 0,\n            y_max: 202,\n            ha: 202,\n            leftSideBearing: 145,\n            advanceWidth: 493,\n        },\n        '/': {\n            x_min: 0,\n            x_max: 774,\n            y_min: -125,\n            y_max: 1456,\n            ha: 1581,\n            leftSideBearing: 0,\n            advanceWidth: 824,\n        },\n        ':': {\n            x_min: 145,\n            x_max: 342,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 145,\n            advanceWidth: 419,\n        },\n        ';': {\n            x_min: 53,\n            x_max: 345,\n            y_min: -311,\n            y_max: 1082,\n            ha: 1393,\n            leftSideBearing: 53,\n            advanceWidth: 424,\n        },\n        '<': {\n            x_min: 76,\n            x_max: 892,\n            y_min: 107,\n            y_max: 1013,\n            ha: 906,\n            leftSideBearing: 76,\n            advanceWidth: 1017,\n        },\n        '=': {\n            x_min: 147,\n            x_max: 981,\n            y_min: 407,\n            y_max: 987,\n            ha: 580,\n            leftSideBearing: 147,\n            advanceWidth: 1127,\n        },\n        '>': {\n            x_min: 125,\n            x_max: 980,\n            y_min: 87,\n            y_max: 993,\n            ha: 906,\n            leftSideBearing: 125,\n            advanceWidth: 1060,\n        },\n        '?': {\n            x_min: 65.92660602419838,\n            x_max: 890,\n            y_min: 0,\n            y_max: 1477,\n            ha: 1477,\n            leftSideBearing: 65,\n            advanceWidth: 953,\n        },\n        '@': {\n            x_min: 84.3592218305664,\n            x_max: 1705.2346925277395,\n            y_min: -453,\n            y_max: 1431,\n            ha: 1884,\n            leftSideBearing: 84,\n            advanceWidth: 1821,\n        },\n        A: {\n            x_min: 70,\n            x_max: 1463,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 70,\n            advanceWidth: 1533,\n        },\n        B: {\n            x_min: 81,\n            x_max: 1253,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1322,\n        },\n        C: {\n            x_min: 80,\n            x_max: 1174,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 80,\n            advanceWidth: 1290,\n        },\n        D: {\n            x_min: 81,\n            x_max: 1291,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1356,\n        },\n        E: {\n            x_min: 81,\n            x_max: 1190,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1306,\n        },\n        F: {\n            x_min: 81,\n            x_max: 1176,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1256,\n        },\n        G: {\n            x_min: 80,\n            x_max: 1226,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 80,\n            advanceWidth: 1346,\n        },\n        H: {\n            x_min: 81,\n            x_max: 1497,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1578,\n        },\n        I: {\n            x_min: 81,\n            x_max: 604,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 685,\n        },\n        J: {\n            x_min: 60,\n            x_max: 1100,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 60,\n            advanceWidth: 1169,\n        },\n        K: {\n            x_min: 81,\n            x_max: 1427,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1501,\n        },\n        L: {\n            x_min: 81,\n            x_max: 1130,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1210,\n        },\n        M: {\n            x_min: 94,\n            x_max: 1888,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 94,\n            advanceWidth: 1982,\n        },\n        N: {\n            x_min: 83,\n            x_max: 1509,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 83,\n            advanceWidth: 1592,\n        },\n        O: {\n            x_min: 70,\n            x_max: 1281,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 70,\n            advanceWidth: 1351,\n        },\n        P: {\n            x_min: 81,\n            x_max: 1242,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1297,\n        },\n        Q: {\n            x_min: 70,\n            x_max: 1348,\n            y_min: -245,\n            y_max: 1477,\n            ha: 1722,\n            leftSideBearing: 70,\n            advanceWidth: 1376,\n        },\n        R: {\n            x_min: 81,\n            x_max: 1285,\n            y_min: 0,\n            y_max: 1455,\n            ha: 1455,\n            leftSideBearing: 81,\n            advanceWidth: 1385,\n        },\n        S: {\n            x_min: 115,\n            x_max: 1116,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 115,\n            advanceWidth: 1206,\n        },\n        T: {\n            x_min: 96,\n            x_max: 1306,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 96,\n            advanceWidth: 1406,\n        },\n        U: {\n            x_min: 70,\n            x_max: 1452,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 70,\n            advanceWidth: 1522,\n        },\n        V: {\n            x_min: 65,\n            x_max: 1443,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 65,\n            advanceWidth: 1508,\n        },\n        W: {\n            x_min: 72,\n            x_max: 2057,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 72,\n            advanceWidth: 2129,\n        },\n        X: {\n            x_min: 80,\n            x_max: 1449,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 80,\n            advanceWidth: 1529,\n        },\n        Y: {\n            x_min: 65,\n            x_max: 1396,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 65,\n            advanceWidth: 1461,\n        },\n        Z: {\n            x_min: 90,\n            x_max: 1107,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 90,\n            advanceWidth: 1197,\n        },\n        '[': {\n            x_min: 157,\n            x_max: 541,\n            y_min: -312,\n            y_max: 1664,\n            ha: 1976,\n            leftSideBearing: 157,\n            advanceWidth: 573,\n        },\n        '\\\\': {\n            x_min: 36,\n            x_max: 830,\n            y_min: -125,\n            y_max: 1456,\n            ha: 1581,\n            leftSideBearing: 36,\n            advanceWidth: 841,\n        },\n        ']': {\n            x_min: 23,\n            x_max: 408,\n            y_min: -312,\n            y_max: 1664,\n            ha: 1976,\n            leftSideBearing: 23,\n            advanceWidth: 552,\n        },\n        '^': {\n            x_min: 71,\n            x_max: 802,\n            y_min: 729,\n            y_max: 1456,\n            ha: 727,\n            leftSideBearing: 71,\n            advanceWidth: 864,\n        },\n        _: {\n            x_min: 119,\n            x_max: 1041,\n            y_min: -154,\n            y_max: 0,\n            ha: 154,\n            leftSideBearing: 119,\n            advanceWidth: 1168,\n        },\n        '`': {\n            x_min: 40,\n            x_max: 456,\n            y_min: 1288,\n            y_max: 1560,\n            ha: 272,\n            leftSideBearing: 40,\n            advanceWidth: 496,\n        },\n        a: {\n            x_min: 79,\n            x_max: 1053,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 79,\n            advanceWidth: 1132,\n        },\n        b: {\n            x_min: -16,\n            x_max: 1071,\n            y_min: -21,\n            y_max: 1560,\n            ha: 1581,\n            leftSideBearing: -16,\n            advanceWidth: 1145,\n        },\n        c: {\n            x_min: 78,\n            x_max: 988,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 78,\n            advanceWidth: 1067,\n        },\n        d: {\n            x_min: 78,\n            x_max: 1156,\n            y_min: -21,\n            y_max: 1560,\n            ha: 1581,\n            leftSideBearing: 78,\n            advanceWidth: 1218,\n        },\n        e: {\n            x_min: 74,\n            x_max: 980,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 74,\n            advanceWidth: 1059,\n        },\n        f: {\n            x_min: 64,\n            x_max: 731,\n            y_min: 0,\n            y_max: 1581,\n            ha: 1581,\n            leftSideBearing: 64,\n            advanceWidth: 725,\n        },\n        g: {\n            x_min: 78,\n            x_max: 1133,\n            y_min: -437,\n            y_max: 1102,\n            ha: 1539,\n            leftSideBearing: 78,\n            advanceWidth: 1157,\n        },\n        h: {\n            x_min: 49,\n            x_max: 1255,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 49,\n            advanceWidth: 1315,\n        },\n        i: {\n            x_min: 67,\n            x_max: 590,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 67,\n            advanceWidth: 652,\n        },\n        j: {\n            x_min: -56,\n            x_max: 381,\n            y_min: -437,\n            y_max: 1560,\n            ha: 1997,\n            leftSideBearing: -56,\n            advanceWidth: 525,\n        },\n        k: {\n            x_min: 64,\n            x_max: 1248,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 64,\n            advanceWidth: 1287,\n        },\n        l: {\n            x_min: 64,\n            x_max: 587,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 64,\n            advanceWidth: 653,\n        },\n        m: {\n            x_min: 74,\n            x_max: 1905,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 74,\n            advanceWidth: 1977,\n        },\n        n: {\n            x_min: 74,\n            x_max: 1278,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 74,\n            advanceWidth: 1343,\n        },\n        o: {\n            x_min: 78,\n            x_max: 1046,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 78,\n            advanceWidth: 1124,\n        },\n        p: {\n            x_min: 34,\n            x_max: 1119,\n            y_min: -416,\n            y_max: 1102,\n            ha: 1518,\n            leftSideBearing: 34,\n            advanceWidth: 1197,\n        },\n        q: {\n            x_min: 78,\n            x_max: 1135,\n            y_min: -416,\n            y_max: 1102,\n            ha: 1518,\n            leftSideBearing: 78,\n            advanceWidth: 1139,\n        },\n        r: {\n            x_min: 72,\n            x_max: 808,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 72,\n            advanceWidth: 854,\n        },\n        s: {\n            x_min: 104,\n            x_max: 933,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 104,\n            advanceWidth: 1022,\n        },\n        t: {\n            x_min: 24,\n            x_max: 678,\n            y_min: -17,\n            y_max: 1343,\n            ha: 1360,\n            leftSideBearing: 24,\n            advanceWidth: 730,\n        },\n        u: {\n            x_min: 52,\n            x_max: 1181,\n            y_min: -21,\n            y_max: 1082,\n            ha: 1103,\n            leftSideBearing: 52,\n            advanceWidth: 1245,\n        },\n        v: {\n            x_min: 26,\n            x_max: 1176,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 26,\n            advanceWidth: 1206,\n        },\n        w: {\n            x_min: 52,\n            x_max: 1777,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 52,\n            advanceWidth: 1823,\n        },\n        x: {\n            x_min: 42,\n            x_max: 1163,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 42,\n            advanceWidth: 1203,\n        },\n        y: {\n            x_min: 24,\n            x_max: 1172,\n            y_min: -437,\n            y_max: 1082,\n            ha: 1519,\n            leftSideBearing: 24,\n            advanceWidth: 1192,\n        },\n        z: {\n            x_min: 88,\n            x_max: 960,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 88,\n            advanceWidth: 1032,\n        },\n        '{': {\n            x_min: 63,\n            x_max: 671,\n            y_min: -364,\n            y_max: 1597,\n            ha: 1961,\n            leftSideBearing: 63,\n            advanceWidth: 701,\n        },\n        '|': {\n            x_min: 150,\n            x_max: 307,\n            y_min: -270,\n            y_max: 1456,\n            ha: 1726,\n            leftSideBearing: 150,\n            advanceWidth: 451,\n        },\n        '}': {\n            x_min: 27,\n            x_max: 635,\n            y_min: -364,\n            y_max: 1597,\n            ha: 1961,\n            leftSideBearing: 27,\n            advanceWidth: 701,\n        },\n        '~': {\n            x_min: 121,\n            x_max: 1257,\n            y_min: 401,\n            y_max: 803,\n            ha: 402,\n            leftSideBearing: 121,\n            advanceWidth: 1386,\n        },\n    },\n    fontFamily: 'Roboto Slab',\n    resolution: 2048,\n    generatedOn: '2020-06-15T19:12:58.120Z',\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Ron B. Yeh\n//\n// A smaller initial bundle that supports dynamic importing of music engraving fonts.\n//\n// vexflow-core.ts is the entry point for output file vexflow-core.js.\n// It does not preload / bundle any music fonts by default.\n// All music fonts will be loaded dynamically via: `Flow.fetchMusicFont(fontName)`\n// Remember to call `Flow.setMusicFont(fontName)` after fetching the font module.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Vex } from '../src/vex';\nimport { Flow } from '../src/flow';\nimport { Font } from '../src/font';\nimport { loadTextFonts } from '../src/fonts/textfonts';\nimport { globalObject, RuntimeError } from '../src/util';\nconst fontModules = {\n    Bravura: './vexflow-font-bravura.js',\n    Gonville: './vexflow-font-gonville.js',\n    Petaluma: './vexflow-font-petaluma.js',\n    Custom: './vexflow-font-custom.js',\n};\n/**\n * @param fontName the name of the music font to load.\n * @param fontModuleOrPath Either a font module object (containing a .data and .metrics properties) or a path to a font module.\n * The font module is assumed to be in the same directory as the vexflow-core.js entry point.\n *\n * This replaces the default empty implementation in flow.ts.\n */\nFlow.fetchMusicFont = (fontName, fontModuleOrPath) => __awaiter(void 0, void 0, void 0, function* () {\n    const font = Font.load(fontName);\n    // If the font has already been loaded before we do nothing.\n    if (font.hasData()) {\n        return;\n    }\n    if (!fontModuleOrPath) {\n        // Determine the font module path.\n        if (fontName in fontModules) {\n            fontModuleOrPath = fontModules[fontName];\n        }\n        else {\n            throw new RuntimeError('UnknownFont', `Music font ${fontName} does not exist.`);\n        }\n    }\n    let fontModule;\n    if (typeof fontModuleOrPath === 'string') {\n        const module = yield import(/* webpackIgnore: true */ fontModuleOrPath);\n        const g = globalObject();\n        const VexFlowFont = g['VexFlowFont'];\n        if (typeof VexFlowFont !== 'undefined' && typeof VexFlowFont[fontName] !== 'undefined') {\n            // CJS font modules will set a global variable named: VexFlowFont.Bravura | VexFlowFont.Gonville | VexFlowFont.Petaluma | etc.\n            fontModule = VexFlowFont[fontName];\n        }\n        else {\n            // ESM font modules will export an object named \"Font\" with properties named \"data\" and \"metrics\".\n            // See vexflow-font-bravura.ts for an example.\n            fontModule = module.Font;\n        }\n    }\n    else {\n        fontModule = fontModuleOrPath;\n    }\n    font.setData(fontModule.data);\n    font.setMetrics(fontModule.metrics);\n});\n// Load the two text fonts that ChordSymbol & Annotation use.\nloadTextFonts();\nexport * from '../src/index';\nexport default Vex;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font } from '../font';\nimport { TextFormatter } from '../textformatter';\nimport { PetalumaScriptFont } from './petalumascript_glyphs';\nimport { RobotoSlabFont } from './robotoslab_glyphs';\nexport function loadTextFonts() {\n    // Roboto Slab\n    {\n        const fontData = RobotoSlabFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        // Previously we used 'H', but it isn't actually the tallest or the widest.\n        // Interestingly, the lowercase 'b' is the tallest glyph.\n        const maxSizeGlyph = 'b';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: true,\n            description: 'Text font to pair with the Bravura / Gonville music fonts.',\n        });\n    }\n    // PetalumaScript\n    {\n        const fontData = PetalumaScriptFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        // M is wider, but H is taller. :-)\n        // Lowercase b is also taller in this font.\n        const maxSizeGlyph = 'b';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: false,\n            description: 'Text font to pair with the Petaluma music font.',\n        });\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","Function","e","obj","prop","prototype","hasOwnProperty","call","isCategory","category","checkAncestors","constructorFcn","constructor","CATEGORY","getPrototypeOf","isBarline","Category","Barline","isGraceNote","GraceNote","isNote","Note","isStaveNote","StaveNote","isStemmableNote","StemmableNote","isTabNote","TabNote","RuntimeError","Error","code","message","super","globalObject","self","defined","x","undefined","log","block","args","line","Array","slice","join","console","warn","err","stack","midLine","a","b","mid_line","n","parseInt","prefix","text","normalizeAngle","Math","PI","Fraction","numerator","denominator","set","static","Number","isNaN","t","GCD","length","LCM","shift","LCMM","value","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","__staticFractionA","copy","__staticFractionB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","floor","remainder","makeAbs","abs","toString","toSimplifiedString","__staticFractionTmp","toMixedString","s","q","f","parse","str","i","split","BoundingBox","y","w","h","that","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","boundingBox","new_x","new_y","new_w","max","new_h","BoundingBoxComputation","x1","NaN","y1","x2","y2","getX1","getY1","width","height","addPoint","addX","addY","addQuadraticCurve","p0x","p0y","p1x","p1y","p2x","p2y","p01x","denom","it","p01y","addBezierCurve","p3x","p3y","p0","p1","p2","p3","pow","c","b2ac","t1","sqrt","t2","FontWeight","FontStyle","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","fontParser","Fonts","Font","fontName","name","fontSize","SIZE","_a","scaleToPxFrom","pt","parseFloat","unit","replace","toLowerCase","size","weight","style","fromCSSString","family","SANS_SERIF","NORMAL","cssFontShorthand","document","createElement","font","fontFamily","fontWeight","fontStyle","fontInfo","st","trim","wt","sz","scaleFactor","parsedWeight","ITALIC","woffURL","includeWoff2","fontFace","FontFace","load","fonts","host","WEB_FONT_HOST","files","WEB_FONT_FILES","fontPath","loadWebFont","data","metrics","setData","setMetrics","getName","getData","getMetrics","hasData","getResolution","resolution","getGlyphs","glyphs","lookupMetric","defaultValue","keyParts","currObj","SERIF","px","em","in","mm","cm","PetalumaScript","Index","id","type","class","Registry","index","defaultRegistry","registry","clear","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","_b","getElementsByAttribute","attribute","index_attr","index_attr_val","keys","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","Element","attrs","newID","el","getCategory","classes","rendered","getDefaultRegistry","ID","setStyle","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","addClass","removeClass","isRendered","setRendered","getAttributes","oldID","getBoundingBox","getContext","setContext","setFont","toCSSString","textFont","defaultTextFont","TEXT_FONT","fontIsObject","fontIsString","fontIsUndefined","sizeWeightStyleAreUndefined","assign","validate","getFont","resetFont","setFontSize","getFontSize","fontSizeInPoints","convertSizeToPointValue","fontSizeInPixels","convertSizeToPixelValue","OutlineCode","ModifierPosition","GlyphCacheEntry","fontStack","point","Glyph","loadMetrics","bbox","getOutlineBoundingBox","outline","scale","x_shift","y_shift","lookupFontMetric","GlyphOutline","originX","originY","nextX","nextY","parts","push","MOVE","LINE","QUADRATIC","BEZIER","options","topGlyphs","botGlyphs","originShift","setOptions","reset","glyph","lookupGlyph","x_min","x_max","ha","cached_outline","ctx","x_pos","y_pos","cache","lookup","customScale","renderOutline","go","beginPath","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","fill","bboxComp","penX","penY","getCode","setPoint","setStave","stave","setXShift","setYShift","checkMetrics","metricsScale","setOriginX","xShift","setOriginY","yShift","setOrigin","render","xPos","yPos","checkStave","renderToStave","getYForGlyphs","Map","entries","CURRENT_CACHE_KEY","entry","MUSIC_FONT_STACK","Modifier","text_line","position","Position","LEFT","spacingFromNextModifier","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","right","RIGHT","getWidth","setWidth","getNote","note","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","modifierContext","checkModifierContext","setModifierContext","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","getXShift","alignSubNotesWithNote","subNotes","tickContext","getTickContext","getStave","subNoteXOffset","modLeftPx","modRightPx","forEach","subNote","subTickContext","setXOffset","Music","NUM_TONES","canonical_notes","roots","root_values","root_indices","diatonic_intervals","diatonic_accidentals","unison","accidental","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","octave","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","m","accidentals","noteValues","root_index","int_val","cn","cb","cbb","dn","db","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bb","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","noteValue","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","rootValue","multiplier","reverse_interval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySignature","keySigParts","scaleName","keySigString","noteLocation","scaleMap","rootName","noteName","RESOLUTION","durations","durationAliases","keySignatures","C","num","Am","F","acc","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","G","Em","D","Bm","A","E","B","clefs","treble","line_shift","bass","tenor","alto","soprano","percussion","subbass","french","notesInfo","CN","CB","CBB","DN","DB","DBB","EN","EB","EBB","FN","FB","FBB","GN","GB","GBB","AN","AB","ABB","BN","BB","BBB","R","rest","X","shift_right","customNoteHeads","D0","D1","D2","D3","T0","T1","T2","T3","X0","X1","X2","X3","S1","S2","R1","R2","parenRightPaddingAdjustment","bs","bss","bbs","ashs","afhf","accSagittal5v7KleismaUp","accSagittal5v7KleismaDown","accSagittal5CommaUp","accSagittal5CommaDown","accSagittal7CommaUp","accSagittal7CommaDown","accSagittal25SmallDiesisUp","accSagittal25SmallDiesisDown","accSagittal35MediumDiesisUp","accSagittal35MediumDiesisDown","accSagittal11MediumDiesisUp","accSagittal11MediumDiesisDown","accSagittal11LargeDiesisUp","accSagittal11LargeDiesisDown","accSagittal35LargeDiesisUp","accSagittal35LargeDiesisDown","accSagittalSharp25SDown","accSagittalFlat25SUp","accSagittalSharp7CDown","accSagittalFlat7CUp","accSagittalSharp5CDown","accSagittalFlat5CUp","accSagittalSharp5v7kDown","accSagittalFlat5v7kUp","accSagittalSharp","accSagittalFlat","accSagittalSharp5v7kUp","accSagittalFlat5v7kDown","accSagittalSharp5CUp","accSagittalFlat5CDown","accSagittalSharp7CUp","accSagittalFlat7CDown","accSagittalSharp25SUp","accSagittalFlat25SDown","accSagittalSharp35MUp","accSagittalFlat35MDown","accSagittalSharp11MUp","accSagittalFlat11MDown","accSagittalSharp11LUp","accSagittalFlat11LDown","accSagittalSharp35LUp","accSagittalFlat35LDown","accSagittalDoubleSharp25SDown","accSagittalDoubleFlat25SUp","accSagittalDoubleSharp7CDown","accSagittalDoubleFlat7CUp","accSagittalDoubleSharp5CDown","accSagittalDoubleFlat5CUp","accSagittalDoubleSharp5v7kDown","accSagittalDoubleFlat5v7kUp","accSagittalDoubleSharp","accSagittalDoubleFlat","accSagittal7v11KleismaUp","accSagittal7v11KleismaDown","accSagittal17CommaUp","accSagittal17CommaDown","accSagittal55CommaUp","accSagittal55CommaDown","accSagittal7v11CommaUp","accSagittal7v11CommaDown","accSagittal5v11SmallDiesisUp","accSagittal5v11SmallDiesisDown","accSagittalSharp5v11SDown","accSagittalFlat5v11SUp","accSagittalSharp7v11CDown","accSagittalFlat7v11CUp","accSagittalSharp55CDown","accSagittalFlat55CUp","accSagittalSharp17CDown","accSagittalFlat17CUp","accSagittalSharp7v11kDown","accSagittalFlat7v11kUp","accSagittalSharp7v11kUp","accSagittalFlat7v11kDown","accSagittalSharp17CUp","accSagittalFlat17CDown","accSagittalSharp55CUp","accSagittalFlat55CDown","accSagittalSharp7v11CUp","accSagittalFlat7v11CDown","accSagittalSharp5v11SUp","accSagittalFlat5v11SDown","accSagittalDoubleSharp5v11SDown","accSagittalDoubleFlat5v11SUp","accSagittalDoubleSharp7v11CDown","accSagittalDoubleFlat7v11CUp","accSagittalDoubleSharp55CDown","accSagittalDoubleFlat55CUp","accSagittalDoubleSharp17CDown","accSagittalDoubleFlat17CUp","accSagittalDoubleSharp7v11kDown","accSagittalDoubleFlat7v11kUp","accSagittal23CommaUp","accSagittal23CommaDown","accSagittal5v19CommaUp","accSagittal5v19CommaDown","accSagittal5v23SmallDiesisUp","accSagittal5v23SmallDiesisDown","accSagittalSharp5v23SDown","accSagittalFlat5v23SUp","accSagittalSharp5v19CDown","accSagittalFlat5v19CUp","accSagittalSharp23CDown","accSagittalFlat23CUp","accSagittalSharp23CUp","accSagittalFlat23CDown","accSagittalSharp5v19CUp","accSagittalFlat5v19CDown","accSagittalSharp5v23SUp","accSagittalFlat5v23SDown","accSagittalDoubleSharp5v23SDown","accSagittalDoubleFlat5v23SUp","accSagittalDoubleSharp5v19CDown","accSagittalDoubleFlat5v19CUp","accSagittalDoubleSharp23CDown","accSagittalDoubleFlat23CUp","accSagittal19SchismaUp","accSagittal19SchismaDown","accSagittal17KleismaUp","accSagittal17KleismaDown","accSagittal143CommaUp","accSagittal143CommaDown","accSagittal11v49CommaUp","accSagittal11v49CommaDown","accSagittal19CommaUp","accSagittal19CommaDown","accSagittal7v19CommaUp","accSagittal7v19CommaDown","accSagittal49SmallDiesisUp","accSagittal49SmallDiesisDown","accSagittal23SmallDiesisUp","accSagittal23SmallDiesisDown","accSagittal5v13MediumDiesisUp","accSagittal5v13MediumDiesisDown","accSagittal11v19MediumDiesisUp","accSagittal11v19MediumDiesisDown","accSagittal49MediumDiesisUp","accSagittal49MediumDiesisDown","accSagittal5v49MediumDiesisUp","accSagittal5v49MediumDiesisDown","accSagittal49LargeDiesisUp","accSagittal49LargeDiesisDown","accSagittal11v19LargeDiesisUp","accSagittal11v19LargeDiesisDown","accSagittal5v13LargeDiesisUp","accSagittal5v13LargeDiesisDown","accSagittalSharp23SDown","accSagittalFlat23SUp","accSagittalSharp49SDown","accSagittalFlat49SUp","accSagittalSharp7v19CDown","accSagittalFlat7v19CUp","accSagittalSharp19CDown","accSagittalFlat19CUp","accSagittalSharp11v49CDown","accSagittalFlat11v49CUp","accSagittalSharp143CDown","accSagittalFlat143CUp","accSagittalSharp17kDown","accSagittalFlat17kUp","accSagittalSharp19sDown","accSagittalFlat19sUp","accSagittalSharp19sUp","accSagittalFlat19sDown","accSagittalSharp17kUp","accSagittalFlat17kDown","accSagittalSharp143CUp","accSagittalFlat143CDown","accSagittalSharp11v49CUp","accSagittalFlat11v49CDown","accSagittalSharp19CUp","accSagittalFlat19CDown","accSagittalSharp7v19CUp","accSagittalFlat7v19CDown","accSagittalSharp49SUp","accSagittalFlat49SDown","accSagittalSharp23SUp","accSagittalFlat23SDown","accSagittalSharp5v13MUp","accSagittalFlat5v13MDown","accSagittalSharp11v19MUp","accSagittalFlat11v19MDown","accSagittalSharp49MUp","accSagittalFlat49MDown","accSagittalSharp5v49MUp","accSagittalFlat5v49MDown","accSagittalSharp49LUp","accSagittalFlat49LDown","accSagittalSharp11v19LUp","accSagittalFlat11v19LDown","accSagittalSharp5v13LUp","accSagittalFlat5v13LDown","accSagittalDoubleSharp23SDown","accSagittalDoubleFlat23SUp","accSagittalDoubleSharp49SDown","accSagittalDoubleFlat49SUp","accSagittalDoubleSharp7v19CDown","accSagittalDoubleFlat7v19CUp","accSagittalDoubleSharp19CDown","accSagittalDoubleFlat19CUp","accSagittalDoubleSharp11v49CDown","accSagittalDoubleFlat11v49CUp","accSagittalDoubleSharp143CDown","accSagittalDoubleFlat143CUp","accSagittalDoubleSharp17kDown","accSagittalDoubleFlat17kUp","accSagittalDoubleSharp19sDown","accSagittalDoubleFlat19sUp","accSagittalShaftUp","accSagittalShaftDown","accSagittalAcute","accSagittalGrave","accSagittal1MinaUp","accSagittal1MinaDown","accSagittal2MinasUp","accSagittal2MinasDown","accSagittal1TinaUp","accSagittal1TinaDown","accSagittal2TinasUp","accSagittal2TinasDown","accSagittal3TinasUp","accSagittal3TinasDown","accSagittal4TinasUp","accSagittal4TinasDown","accSagittal5TinasUp","accSagittal5TinasDown","accSagittal6TinasUp","accSagittal6TinasDown","accSagittal7TinasUp","accSagittal7TinasDown","accSagittal8TinasUp","accSagittal8TinasDown","accSagittal9TinasUp","accSagittal9TinasDown","accSagittalFractionalTinaUp","accSagittalFractionalTinaDown","accidentalNarrowReversedFlat","accidentalNarrowReversedFlatAndFlat","accidentalWilsonPlus","accidentalWilsonMinus","articulations","between_lines","av","aboveCode","belowCode","ao","ah","am","ornaments","mordent","mordent_inverted","turn","turn_inverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","Tables","clef","keyOctaveGlyph","params","octave_shift","pieces","toUpperCase","clefProperties","stroke","int_value","customNoteHeadProps","glyphName","displaced","integer","fret","shift_y","glyphMetrics","TABLATURE_FONT_SCALE","textWidth","artic","spec","keySpec","notes","acc_list","duration","durationNumber","sanitizeDuration","durationToFraction","ticks","durationCodes","glyphTypeProperties","customGlyphTypeProperties","code_head","common","NOTATION_FONT_SCALE","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","accidentalMap","accidentalColumnsTable","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","unicode","sharp","String","fromCharCode","flat","natural","triangle","degrees","circle","validTypes","r","TIME4_4","num_beats","beat_value","stem","stem_offset","flag","dot_shiftY","line_above","line_below","beam_count","stem_beam_extension","code_flag_upstem","code_flag_downstem","L","Accidental","DEBUG","render_options","font_scale","parenLeftPadding","parenRightPadding","accidentalCodes","cautionary","state","musicFont","currentMusicFont","noteheadAccidentalPadding","leftShift","left_shift","accidentalSpacing","additionalPadding","accList","prevNote","shiftL","props","getKeyProps","getLeftDisplacedHeadPx","lineSpace","getSpacingBetweenLines","getYForLine","accLine","round","sort","lineList","previousLine","accShift","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","totalShift","accCount","lastAccOnLine","clearance","clearanceRequired","collision","voices","tickPositions","tickNoteMap","voice","tickPosition","getTickables","shouldIgnoreTicks","notesAtPosition","getTicks","music","scaleMapKey","tickPos","tickables","modifiedPitches","processNote","isRest","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","indexOf","getModifiers","modifier","splice","addModifier","GraceNoteGroup","getGraceNotes","fontScale","parenLeft","parenRight","parenWidth","setAsCautionary","start","getModifierStartXY","accX","accY","Stem","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","hide","isStemlet","stemletHeight","renderHeightAdjustment","UP","DOWN","WIDTH","HEIGHT","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","getHeight","y_offset","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","baseY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stem_x","stem_y","y_base_offset","stemletYOffset","TextFormatter","textWidthCache","formatterInfo","serifs","monospaced","italic","bold","superscriptOffset","subscriptOffset","maxSizeGlyph","cacheKey","updateParams","registeredFonts","requestedFont","candidates","requestedFamilies","requestedFamily","startsWith","formatter","values","isBold","isItalic","perfectMatch","find","partialMatch","fontSizeInPt","overwrite","updateCacheKey","BOLD","getGlyphMetrics","character","maxHeight","getWidthForCharacterInEm","advanceWidth","getWidthForTextInEm","cachedWidths","getWidthForTextInPx","AnnotationHorizontalJustify","AnnotationVerticalJustify","Annotation","horizontalJustification","verticalJustification","TOP","annotations","annotation","textFormatter","create","verticalSpaceNeeded","stemDirection","hasStem","getStemDirection","lines","draw_stem","getStem","getNoteType","getNumLines","VerticalJustify","noteLine","getLineNumber","leastString","top_text_line","BOTTOM","greatestString","curBottom","right_shift","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","HorizontalJustifyString","classString","openGroup","text_width","measureText","text_height","getStemX","stem_ext","spacing","has_stem","checkStem","getYs","reduce","yt","getYForTopText","getYForBottomText","getTopLineTopY","extents","getStemExtents","fillText","closeGroup","HorizontalJustify","centerStem","CENTER_STEM","top","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","Articulation","getIncrement","articulation","increment","curTop","maxWidth","articWidth","builder","articNameToCode","staccato","tenuto","accent","articString","getFactory","articulationCodes","textLine","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","isOnStemTip","getInitialOffset","padding","stemTipY","stemBaseY","getTopY","INITIAL_OFFSET","getBottomY","offsetDirection","articLine","snappedLine","snapLineToStaff","RenderContext","setRawFont","Tickable","_preFormatted","_postFormatted","intrinsicTicks","tickMultiplier","modifiers","tupletStack","align_center","center_x_shift","ignore_ticks","formatterMetrics","freedom","iterations","space","used","mean","deviation","setIgnoreTicks","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","centerXShift","setCenterAlignment","getVoice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","getNoteCount","getNotesOccupied","applyTickMultiplier","pop","setTuplet","addToModifierContext","mc","addMember","setTickContext","tc","preFormat","preFormatted","postFormat","postFormatted","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","noteStruct","parsedNoteStruct","parseNoteStruct","JSON","stringify","keyProps","noteType","customTypes","duration_override","getGlyphProps","customGlyphs","playNote","leftDisplacedHeadPx","rightDisplacedHeadPx","annotation_spacing","glyph_font_scale","stroke_px","xStart","xPre1","xAbs","xPost1","notePx","xPost2","xEnd","xFreedomRight","xWidth","color","yy","arc","closePath","drawDot","spaceDeviation","durationString","dots","durationProps","parseDuration","durationToTicks","currentTicks","getPlayNote","setPlayNote","addStroke","setYs","getRightDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","isTopNote","getLineForRest","getGlyph","getGlyphWidth","getDuration","isDotted","getModifiersByType","getBeam","beam","checkBeam","hasBeam","setBeam","signature","getMembers","getRightParenthesisPx","getLeftParenthesisPx","getFirstDotPx","getState","glyphWidth","glyphPx","getNoteStartX","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","StaveModifierPosition","BarlineType","ChordSymbolHorizontalJustify","ChordSymbolVerticalJustify","SymbolTypes","SymbolModifiers","VoiceMode","StaveModifier","placeGlyphOnLine","customShift","getPadding","setPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","thickness","TYPE","widths","SINGLE","DOUBLE","END","REPEAT_BEGIN","REPEAT_END","REPEAT_BOTH","NONE","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","BEGIN","setType","typeString","single","double","end","repeatBegin","repeatEnd","repeatBoth","none","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","double_bar","staveCtx","botY","getBottomLineBottomY","fillRect","begin","dot_x","dot_radius","dot_y","BarNote","barline","Bend","release","phrase","tap","line_width","line_style","bend_width","release_width","updateWidth","bends","last_width","stringPos","setTap","getText","getTextHeight","totalWidth","additional_width","draw_width","lowestY","bend_height","annotation_y","renderBend","cp_x","cp_y","renderRelease","renderArrowHead","yBase","renderText","render_x","last_bend","last_bend_draw_width","last_drawn_width","ChordSymbol","symbolBlocks","horizontal","vertical","useKerning","reportWidth","superSubRatio","global","NO_TEXT_FORMAT","val","noFormat","glyphCode","engravingFontResolution","spacingBetweenBlocks","metric","getMetricForGlyph","yOffset","leftSideBearing","kerningOffset","chordSymbol","lowerKerningText","upperKerningText","symbolModifier","SUPERSCRIPT","SUBSCRIPT","symbols","nonSuperWidth","reportedWidths","symbol","fontAdj","scaleSize","glyphAdj","lineSpaces","vAlign","j","sup","isSuperscript","sub","isSubscript","superSubScale","adj","symbolType","GLYPH","superSubFontSize","getWidthForGlyph","getYShiftForGlyph","getXShiftForGlyph","TEXT","getYOffsetForText","over","prev","setEnableKerning","updateKerningAdjustments","updateOverBarAdjustments","getVertical","getReportWidth","setReportWidth","barIndex","findIndex","xoff","yoff","symIndex","accum","getKerningAdjustment","currSymbol","prevSymbol","adjustment","preKernUpper","preKernLower","some","xx","kerningOffsetPixels","getSymbolBlock","_c","symbolBlock","glyphArgs","glyphPoints","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","addGlyphSuperscript","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","setHorizontal","hj","getHorizontal","yMax","y_max","stem_base","isSuper","isSub","curY","smallerFontSize","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","symbolTypes","symbolModifiers","Dot","radius","all","dot","setDotShiftY","dot_list","max_shift_map","note_id","dot_shift","x_width","last_line","last_note","prev_dotted_space","half_shiftY","forceFlagRight","FretHandFinger","finger","x_offset","nums","nums_list","prev_note","shiftLeft","shiftRight","pos","textHeight","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","lastLine","lastNote","num_shift","numWidth","fingerings","fingeringString","number","Fingering","fingering","setFretHandFinger","getFretHandFinger","setOffsetX","setOffsetY","StaveTie","setNotes","cp1","cp2","text_shift_x","first_x_shift","last_x_shift","tie_spacing","first_note","first_indices","last_indices","isPartial","renderTie","first_ys","last_ys","last_x_px","first_x_px","first_y_px","last_y_px","top_cp_y","bottom_cp_y","center_x","getTieStartX","getTieEndX","TabTie","Voice","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","softmaxFactor","totalTicks","smallestTickCount","Mode","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","reCalculateExpTicksUsed","expTicksUsed","softmax","tickValue","v","exp","addTickable","addTickables","grace_notes","show_slur","slur","slur_y_shift","beams","gracenote_groups","group_list","gracenote_group","is_stavenote","formatWidth","group_shift","Formatter","joinVoices","format","getMinTotalWidth","beamNotes","Beam","beam_width","partial_beam_length","graceNote","TieClass","NoteSubGroup","groups","group","TickContext","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","xOffset","tickablesByVoice","totalLeftPx","totalRightPx","tContexts","tContext","contexts","getTickID","getXBase","setXBase","getXOffset","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","filter","getCurrentTick","setCurrentTick","tick","Ornament","delayed","accidentalLowerPadding","accidentalUpperPadding","ornament","ornamentCodes","adjustForStemDirection","reportedWidth","stemUpYOffset","ornamentAlignWithNoteHead","ornamentNoteTransition","ornamentRelease","ornamentAttack","ornamentArticulation","jazzOrnaments","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","stemDir","stemExtents","isPlacedOnNoteheadSide","lineSpacing","glyphYBetweenLines","glyphX","glyphY","delayXShift","startX","nextContext","getNextContext","Parenthesis","parentheses","x_widthL","x_widthR","parenthesis","renderGlyph","NoteHead","custom_glyph","stem_up_x_offset","stem_down_x_offset","note_type","glyph_code","custom_glyph_code","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","fontShift","displacedFontShift","half_spacing","min_y","getYForNote","head_x","categorySuffix","staveSpace","durationToNumber","breve_lines","drawSlashNoteHead","setStem","buildStem","buildFlag","hasFlag","flagCode","getBaseCustomNoteHeadGlyph","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","setStemDirection","offsets","offsetYBaseStemUp","offsetYTopStemUp","offsetYBaseStemDown","offsetYTopStemDown","getCenterGlyphX","stem_extension_override","setStemLength","drawStem","stemOptions","shiftRestVertical","dir","delta","maxLine","minLine","setKeyLine","getKeyLine","ledgerLineStyle","use_default_head_x","_noteHeads","LEDGER_LINE_OFFSET","calculateKeyProps","auto_stem","autoStem","STEM_UP","STEM_DOWN","minNoteheadPadding","notesList","minL","stemMax","stemMin","maxL","isrest","voice_shift","getVoiceShiftWidth","is_displaced","noteU","noteM","noteL","voiceXShift","centerRest","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","head","calcNoteDisplacements","lineDiff","noteProps","notehead","calculateOptimalStemDirection","keyProperties","minY","maxY","halfLineSpacing","frac","resultLine","thisLine","isChord","getNoteHeadBounds","setNoteDisplaced","getRightShift","restLine","isInnerNoteIndex","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","flagStyle","getFlagStyle","setKeyStyle","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","yTop","Infinity","yBottom","highestLine","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","displaced_x","non_displaced_x","highest_line","lowest_line","highest_displaced_line","lowest_displaced_line","highest_non_displaced_line","lowest_non_displaced_line","getNoteHeadBeginX","getNoteHeadEndX","noteHeads","note_heads","drawLedgerLines","doubleWidth","min_x","drawLedgerLine","normal","ledgerWidth","getDefaultLedgerLineStyle","drawModifiers","noteheadStyle","hasNoBeam","drawFlag","noteStemHeight","flagX","extension","flagY","pointerBBox","drawNoteHeads","super_stem_extension","mid_line_distance","lines_over_octave_from_mid_line","spacing_between_lines","xBegin","shouldRenderStem","stemX","isHTMLCanvas","element","HTMLCanvasElement","toDataURL","CanvasContext","context2D","canvas","CANVAS_BROWSER_SIZE_LIMIT","limit","clearRect","cls","child","setBackgroundFillStyle","blur","getTransform","setLineCap","capType","lineCap","setLineDash","dash","resize","devicePixelRatio","sanitizeCanvasDims","rect","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","counterclockwise","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","ATTRIBUTES_TO_IGNORE","path","SVG_NS","TWO_PI","SVGContext","backgroundFillStyle","fontCSSString","svg","appendChild","parent","pen","defaultFontAttributes","attributes","shadow_attributes","state_stack","svgElementType","createElementNS","lineDash","applyAttributes","visibleWidth","visibleHeight","setViewBox","viewBox_or_minX","viewBoxString","attrNamesToIgnore","nodeName","attrName","setAttributeNS","lastChild","removeChild","rectangle","x0","cos","y0","sin","large","sweep","getShadowStyle","sa","measureTextCache","txt","textContent","savedState","fontAttributes","RendererBackends","RendererLineEndType","Justification","VoltaType","measureImpl","getBBox","Renderer","arg0","arg1","backend","maybeElement","Backends","CANVAS","SVG","HTMLDivElement","isHTMLDiv","elementId","background","renderer","lastContext","buildContext","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","LineEndType","StringNumber","string_number","dashed","leg","stringNumber","shift_left","glyphLine","num_shiftR","num_width","setLineEndType","setStringNumber","setLastNote","setDashed","stemPadding","verticalPadding","leftPadding","rightPadding","len","pattern","drawDashedLine","Stroke","all_voices","strokes","strokeList","string","getPositions","strokeShift","addEndNote","note_end","line_space","arrow","arrow_shift_x","arrow_y","text_y","Type","BRUSH_DOWN","BRUSH_UP","ROLL_DOWN","RASQUEDO_DOWN","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","strokeLine","Vibrato","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","vibratos","vibrato","setHarsh","vx","vy","renderVibrato","opts","num_waves","ModifierContext","members","formatted","member","getLeftShift","Clef","types","tab","attachment","numLines","shiftY","KeySignature","cancelKeySpec","alterKeySpec","setKeySig","glyphFontScale","xPositions","paddingForced","convertToGlyph","nextAcc","accGlyphData","extraWidth","xPosition","cancelKey","convertToCancelAccList","cancel_accList","different_types","naturals","cancelled","concat","addToStave","convertAccLines","customLines","offset","alterKey","convertToAlterAccList","firstAccidentalType","cancelAccList","getEndClef","getClef","Repetition","symbol_type","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSignoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","TO_CODA","draw_coda","text_x","symbol_x","modifierWidth","getVerticalBarWidth","StaveSection","section","shift_x","setStaveSection","textMeasurements","StaveTempo","tempo","setTempo","bpm","stem_height","TextNote","superscript","subscript","smooth","justification","struct","GLYPHS","segno","mordent_upper","mordent_lower","p","z","coda","pedal_open","pedal_close","caesura_straight","caesura_curved","breath","StaveText","setStaveText","setText","getBottomLineY","Volta","volta","top_y","vert_height","BEGIN_END","TimeSignatureGlyph","timeSignature","topDigits","botDigits","topWidth","timeSigType","topGlyph","botWidth","botGlyph","topStartX","botStartX","start_x","topLine","bottomLine","TimeSignature","timeSpec","customPadding","validate_args","fontLineShift","parseTimeSpec","numbers","test","assertIsValidTimeSig","makeTimeSignatureGlyph","getInfo","setTimeSig","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","Stave","end_x","measure","endClef","vertical_bar_width","num_lines","fill_style","left_bar","right_bar","spacing_between_lines_px","space_above_staff_ln","space_below_staff_ln","top_text_position","bottom_text_position","line_config","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","defaultPadding","setDefaultLedgerLineStyle","visible","setNoteStartX","begBarline","getNoteEndX","setNumLines","mod","setMeasure","getModifierXShift","setRepetitionType","setVoltaType","number_t","setSection","staveSection","headroom","getLineForY","setBegBarType","setEndBarType","setClef","clefSpec","addClef","setEndClef","setKeySignature","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","items","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","getConfigForLines","setConfigForLine","line_number","setConfigForLines","lines_configuration","drawBoldDoubleLine","topX","StaveConnector","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","top_stave","bottom_stave","texts","SINGLE_RIGHT","content","THIN_DOUBLE","attachment_height","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","sumArray","arr","createContexts","makeContext","addToContext","tickToContextMap","tickList","integerTicks","newContext","array","list","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","formatterOptions","globalSoftmax","maxIterations","justifyWidth","totalCost","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","modifierContexts","contextGaps","total","gaps","lossHistory","paddingBetween","accumulator","stavePadding","gap","toFixed","auto_beam","align_rests","applyAndGetBeams","formatToStave","tabstave","tabnotes","autobeam","notevoice","tabvoice","alignAllNotes","alignTuplets","currTickable","prevTickable","alignRests","AlignRestsToNotes","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","contextArray","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","centerX","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMax","maxX","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","cost","postFormatContexts","optionsParam","TupletLocation","Tuplet","numerator_glyphs","denom_glyphs","num_notes","beats_occupied","beatsOccupiedDeprecationWarning","notes_occupied","bracketed","ratioed","setTupletLocation","location","LOCATION_TOP","resolveGlyphs","attach","LOCATION_BOTTOM","NESTING_OFFSET","detach","setBracketed","setRatioed","getNotes","getBeatsOccupied","setBeatsOccupied","beats","setNotesOccupied","unshift","getNestedTupletCount","maxTupletCount","countTuplets","minTupletCount","tupletCount","getYPosition","nested_tuplet_y_offset","topModifierOffset","modLines","modY","noteHeadOffset","stemOffset","lineCheck","nn","bottom_y","addGlyphWidth","notation_start_x","colon_x","colon_radius","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","slope","stem_weight","memo","break_on_indices","max_slope","min_slope","slope_iterations","slope_cost","show_stemlets","stemlet_extension","flat_beams","min_flat_beam_offset","time_sig","beatTotal","beatValue","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","vf_notes","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","breaksOnEachRest","beam_rests","breaksOnFirstOrLastRest","beam_middle_only","breakOnStemChange","maintain_stem_directions","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","secondary_breaks","secondary_break_ticks","flat_beam_offset","beamCount","breakSecondaryAt","indices","getSlopeY","calculateSlope","firstNote","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","diff","idealSlope","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","getBeamYToDraw","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","totalBeamWidth","lookupBeamDirection","prev_tick","next_tick","lookup_duration","prev_note_gets_beam","next_note_gets_beam","note_gets_beam","getBeamLines","tick_of_duration","beam_started","beam_lines","current_beam","previous_should_break","tick_tally","should_break","next_note","beam_alone","beam_direction","last_beam","drawStems","drawBeamLines","valid_beam_durations","beamThickness","beamLines","beam_line","startBeamX","startBeamY","lastBeamX","lastBeamY","ClefNote","clef_obj","abs_x","Crescendo","extend_left","extend_right","decrescendo","setHeight","setDecrescendo","decresc","tick_context","next_context","begin_x","half_height","reverse","renderHairpin","CurvePosition","Curve","from","to","NEAR_HEAD","position_end","invert","cps","nearHead","nearTop","NEAR_TOP","renderCurve","first_x","first_y","last_x","last_y","cp0x","cp0y","cp_spacing","end_metric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","GhostNote","buildAndAttach","setId","commaSeparatedRegex","setClass","defaults","easyScoreHook","throwOnError","parser","ERROR_MSG","parameter","GlyphNote","ignoreTicks","setGlyph","SCALE","slash","ret","staveNoteScale","getStaveNoteScale","offsetScale","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beam_slope","scaleX","beam_angle","atan","iPointOnBeam","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stem0X","stemY","KeySigNote","semibreve_rest","MultiMeasureRest","number_of_measures","xs","hasPaddingLeft","hasPaddingRight","hasLineThickness","hasSymbolSpacing","padding_left","padding_right","line_thickness","symbol_spacing","use_symbols","show_number","number_line","number_glyph_point","serif_thickness","semibreve_rest_glyph_scale","getXs","drawLine","spacingBetweenLines","lineThicknessHalf","serifThickness","bot","leftIndented","rightIndented","lineTop","lineBottom","drawSymbols","n4","n2","n1","get_semibreve_rest","rest_scale","rest_width","yMiddle","timeSig","drawPedalGlyph","glyph_data","PedalMarking","custom_depress_text","custom_release_text","bracket_height","text_margin_right","bracket_line_width","pedal","MIXED","setCustomText","depress","drawBracketed","prev_x","prev_y","is_pedal_depressed","next_is_same","prev_is_same","drawText","pedal_depress","pedal_release","mixed","CODES","RepeatNote","drawArrowHead","StaveLine","line_dash","rounded_end","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","text_position_vertical","TextVerticalPosition","text_justification","TextJustification","applyLineStyle","applyFontStyle","drawArrowLine","pt1","pt2","both_arrows","distance","ratio","end_y","start_y","line_angle","angle1","angle2","top_x","bottom_x","start_position","end_position","first_index","last_index","upwards_slope","notehead_width","vertical_position","System","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","options_details","allVoices","debugNoteMetricsYs","part","lastY","plotDebugging","plotMetrics","positions","ghost","draw_dots","draw_stem_through_stave","setGhost","tabToGlyph","getStemY","stemDownLine","stemStartLine","flag_x","flag_y","flag_code","drawStemThrough","stemThrough","stemLines","unused_strings","up_stem","down_stem","line_spacing","total_lines","stem_lines","strings","containsLastString","containsFirstString","line_ys","isTopBound","isBottomBound","getPartialStemLines","strings_used","stem_through","getUnusedStringGroups","drawPositions","tab_x","render_stem","TabStave","addTabGlyph","TextBracket","TextBracketPosition","stop","show_bracket","underline_superscript","Positions","PositionsString","main_measure","main_width","main_height","super_y","super_measure","super_width","super_height","line_y","TextDynamics","sequence","glyph_font_size","total_width","letter","letter_x","current_letter","TimeSigNote","timeSigInfo","VibratoBracket","bracket_data","stop_x","Factory","renderQ","systems","staves","initRenderer","getVoices","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","hJustify","vJustify","kerning","numMeasures","multiMeasureRest","secondaryBeamBreaks","curve","tie","vibratoBracket","textBracket","system","StaveHairpin","hairpin","left_shift_px","right_shift_px","right_shift_ticks","left_shift_ticks","ppt","pixelsPerTick","l_shift_px","r_shift_px","hairpin_options","setRenderOptions","dis","staff_height","l_shift","r_shift","CRESC","DECRESC","TabSlide","first_fret","last_fret","SLIDE_UP","SLIDE_DOWN","slide_y","Tuning","tuningString","tuningValues","setTuning","names","standard","dagdad","dropd","standardBanjo","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","integerToNote","Flow","BUILD","VERSION","DATE","fontNames","fontModuleOrPath","hasKeySignature","getKeySignatures","GraceTabNote","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","Tremolo","y_spacing_scale","extra_stroke_scale","y_spacing","cmp","eq","newArr","last","canvasSelector","start_time","Date","getTime","PetalumaScriptFont","y_min","$","I","J","K","N","O","Q","U","V","Y","Z","_","l","generatedOn","RobotoSlabFont","fontModules","Bravura","Gonville","Petaluma","Custom","fetchMusicFont","fontModule","import","VexFlowFont","fontData","registerInfo","description","loadTextFonts"],"sourceRoot":""}