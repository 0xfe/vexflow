{"version":3,"file":"vexflow-core.js","mappings":"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","sources":["webpack://Vex/webpack/universalModuleDefinition","webpack://Vex/webpack/bootstrap","webpack://Vex/webpack/runtime/define property getters","webpack://Vex/webpack/runtime/global","webpack://Vex/webpack/runtime/hasOwnProperty shorthand","webpack://Vex/webpack/runtime/make namespace object","webpack://Vex/./src/typeguard.ts","webpack://Vex/./src/util.ts","webpack://Vex/./src/fraction.ts","webpack://Vex/./src/boundingbox.ts","webpack://Vex/./src/boundingboxcomputation.ts","webpack://Vex/./src/font.ts","webpack://Vex/./src/registry.ts","webpack://Vex/./src/element.ts","webpack://Vex/./src/tables.ts","webpack://Vex/./src/glyph.ts","webpack://Vex/./src/modifier.ts","webpack://Vex/./src/music.ts","webpack://Vex/./src/accidental.ts","webpack://Vex/./src/stem.ts","webpack://Vex/./src/textformatter.ts","webpack://Vex/./src/annotation.ts","webpack://Vex/./src/articulation.ts","webpack://Vex/./src/rendercontext.ts","webpack://Vex/./src/tickable.ts","webpack://Vex/./src/note.ts","webpack://Vex/./src/stavemodifier.ts","webpack://Vex/./src/stavebarline.ts","webpack://Vex/./src/chordsymbol.ts","webpack://Vex/./src/barnote.ts","webpack://Vex/./src/bend.ts","webpack://Vex/./src/dot.ts","webpack://Vex/./src/frethandfinger.ts","webpack://Vex/./src/notehead.ts","webpack://Vex/./src/stemmablenote.ts","webpack://Vex/./src/stavenote.ts","webpack://Vex/./src/stavetie.ts","webpack://Vex/./src/tabtie.ts","webpack://Vex/./src/voice.ts","webpack://Vex/./src/gracenotegroup.ts","webpack://Vex/./src/notesubgroup.ts","webpack://Vex/./src/tickcontext.ts","webpack://Vex/./src/ornament.ts","webpack://Vex/./src/parenthesis.ts","webpack://Vex/./src/web.ts","webpack://Vex/./src/canvascontext.ts","webpack://Vex/./src/svgcontext.ts","webpack://Vex/./src/renderer.ts","webpack://Vex/./src/textnote.ts","webpack://Vex/./src/stavevolta.ts","webpack://Vex/./src/stringnumber.ts","webpack://Vex/./src/strokes.ts","webpack://Vex/./src/vibrato.ts","webpack://Vex/./src/modifiercontext.ts","webpack://Vex/./src/clef.ts","webpack://Vex/./src/keysignature.ts","webpack://Vex/./src/staverepetition.ts","webpack://Vex/./src/stavesection.ts","webpack://Vex/./src/stavetempo.ts","webpack://Vex/./src/stavetext.ts","webpack://Vex/./src/timesigglyph.ts","webpack://Vex/./src/timesignature.ts","webpack://Vex/./src/stave.ts","webpack://Vex/./src/staveconnector.ts","webpack://Vex/./src/formatter.ts","webpack://Vex/./src/tuplet.ts","webpack://Vex/./src/beam.ts","webpack://Vex/./src/clefnote.ts","webpack://Vex/./src/crescendo.ts","webpack://Vex/./src/curve.ts","webpack://Vex/./src/parser.ts","webpack://Vex/./src/easyscore.ts","webpack://Vex/./src/ghostnote.ts","webpack://Vex/./src/glyphnote.ts","webpack://Vex/./src/gracenote.ts","webpack://Vex/./src/keysignote.ts","webpack://Vex/./src/multimeasurerest.ts","webpack://Vex/./src/pedalmarking.ts","webpack://Vex/./src/repeatnote.ts","webpack://Vex/./src/staveline.ts","webpack://Vex/./src/system.ts","webpack://Vex/./src/tabnote.ts","webpack://Vex/./src/tabstave.ts","webpack://Vex/./src/textbracket.ts","webpack://Vex/./src/textdynamics.ts","webpack://Vex/./src/timesignote.ts","webpack://Vex/./src/vibratobracket.ts","webpack://Vex/./src/factory.ts","webpack://Vex/./src/gracetabnote.ts","webpack://Vex/./src/keymanager.ts","webpack://Vex/./src/stavehairpin.ts","webpack://Vex/./src/tabslide.ts","webpack://Vex/./src/tremolo.ts","webpack://Vex/./src/tuning.ts","webpack://Vex/./src/flow.ts","webpack://Vex/./src/version.ts","webpack://Vex/./src/fonts/petalumascript_glyphs.ts","webpack://Vex/./src/fonts/robotoslab_glyphs.ts","webpack://Vex/./src/fonts/sans_bold_text_metrics.ts","webpack://Vex/./src/fonts/sans_text_metrics.ts","webpack://Vex/./src/fonts/serif_text_metrics.ts","webpack://Vex/./src/vex.ts","webpack://Vex/./entry/vexflow-core.ts","webpack://Vex/./src/fonts/textfonts.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Vex\"] = factory();\n\telse\n\t\troot[\"Vex\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object's CATEGORY matches the provided category.\n * @param category a string representing a category of VexFlow objects.\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\n */\nexport function isCategory(obj, category, checkAncestors = true) {\n    // obj is undefined, a number, a primitive string, or null.\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n    let constructorFcn = obj.constructor;\n    // Check if the object's static .CATEGORY matches the provided category.\n    if (checkAncestors) {\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\nexport const isNote = (obj) => isCategory(obj, Category.Note);\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\nexport var Category;\n(function (Category) {\n    Category[\"Accidental\"] = \"Accidental\";\n    Category[\"Annotation\"] = \"Annotation\";\n    Category[\"Articulation\"] = \"Articulation\";\n    Category[\"Barline\"] = \"Barline\";\n    Category[\"BarNote\"] = \"BarNote\";\n    Category[\"Beam\"] = \"Beam\";\n    Category[\"Bend\"] = \"Bend\";\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\n    Category[\"Clef\"] = \"Clef\";\n    Category[\"ClefNote\"] = \"ClefNote\";\n    Category[\"Crescendo\"] = \"Crescendo\";\n    Category[\"Curve\"] = \"Curve\";\n    Category[\"Dot\"] = \"Dot\";\n    Category[\"Element\"] = \"Element\";\n    Category[\"Fraction\"] = \"Fraction\";\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\n    Category[\"GhostNote\"] = \"GhostNote\";\n    Category[\"Glyph\"] = \"Glyph\";\n    Category[\"GlyphNote\"] = \"GlyphNote\";\n    Category[\"GraceNote\"] = \"GraceNote\";\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\n    Category[\"KeySignature\"] = \"KeySignature\";\n    Category[\"KeySigNote\"] = \"KeySigNote\";\n    Category[\"Modifier\"] = \"Modifier\";\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\n    Category[\"Note\"] = \"Note\";\n    Category[\"NoteHead\"] = \"NoteHead\";\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\n    Category[\"Ornament\"] = \"Ornament\";\n    Category[\"Parenthesis\"] = \"Parenthesis\";\n    Category[\"PedalMarking\"] = \"PedalMarking\";\n    Category[\"RenderContext\"] = \"RenderContext\";\n    Category[\"RepeatNote\"] = \"RepeatNote\";\n    Category[\"Repetition\"] = \"Repetition\";\n    Category[\"Stave\"] = \"Stave\";\n    Category[\"StaveConnector\"] = \"StaveConnector\";\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\n    Category[\"StaveLine\"] = \"StaveLine\";\n    Category[\"StaveModifier\"] = \"StaveModifier\";\n    Category[\"StaveNote\"] = \"StaveNote\";\n    Category[\"StaveSection\"] = \"StaveSection\";\n    Category[\"StaveTempo\"] = \"StaveTempo\";\n    Category[\"StaveText\"] = \"StaveText\";\n    Category[\"StaveTie\"] = \"StaveTie\";\n    Category[\"Stem\"] = \"Stem\";\n    Category[\"StemmableNote\"] = \"StemmableNote\";\n    Category[\"StringNumber\"] = \"StringNumber\";\n    Category[\"Stroke\"] = \"Stroke\";\n    Category[\"System\"] = \"System\";\n    Category[\"TabNote\"] = \"TabNote\";\n    Category[\"TabSlide\"] = \"TabSlide\";\n    Category[\"TabStave\"] = \"TabStave\";\n    Category[\"TabTie\"] = \"TabTie\";\n    Category[\"TextBracket\"] = \"TextBracket\";\n    Category[\"TextDynamics\"] = \"TextDynamics\";\n    Category[\"TextNote\"] = \"TextNote\";\n    Category[\"Tickable\"] = \"Tickable\";\n    Category[\"TimeSignature\"] = \"TimeSignature\";\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\n    Category[\"Tremolo\"] = \"Tremolo\";\n    Category[\"Tuplet\"] = \"Tuplet\";\n    Category[\"Vibrato\"] = \"Vibrato\";\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\n    Category[\"Voice\"] = \"Voice\";\n    Category[\"Volta\"] = \"Volta\";\n})(Category || (Category = {}));\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\n// eslint-disable-next-line\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a, b) {\n    let mid_line = b + (a - b) / 2;\n    if (mid_line % 2 > 0) {\n        mid_line = roundN(mid_line * 10, 5) / 10;\n    }\n    return mid_line;\n}\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text) {\n    return `vf-${text}`;\n}\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// Author: Joshua Koo / @zz85\n// Author: @incompleteopus\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** Fraction represents a rational number. */\nexport class Fraction {\n    static get CATEGORY() {\n        return Category.Fraction;\n    }\n    /**\n     * GCD: Greatest common divisor using the Euclidean algorithm.\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\n     */\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    /** LCM: Lowest common multiple. */\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    /** Lowest common multiple for more than two numbers. */\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            // args.shift() removes the first number.\n            // LCM the first number with the rest of the numbers.\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    /** Set the numerator and denominator. */\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    /** Set the numerator and denominator. */\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    /** Return the value of the fraction. */\n    value() {\n        return this.numerator / this.denominator;\n    }\n    /** Simplify numerator and denominator using GCD. */\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    /** Add value of another fraction. */\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Substract value of another fraction. */\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Multiply by value of another fraction. */\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    /** Divide by value of another Fraction. */\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    /** Simplify both sides and check if they are equal. */\n    equals(compare) {\n        const a = Fraction.__staticFractionA.copy(compare).simplify();\n        const b = Fraction.__staticFractionB.copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    /** Greater than operator. */\n    greaterThan(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    /** Greater than or equals operator. */\n    greaterThanEquals(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    /** Less than operator. */\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    /** Less than or equals operator. */\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    /** Return a new copy with current values. */\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    /** Copy value of another fraction. */\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other, 1);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    /** Return the integer component (eg. 5/2 => 2). */\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    /** Return the remainder component (eg. 5/2 => 1). */\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    /** Calculate absolute value. */\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    /** Return a raw string representation (eg. \"5/2\"). */\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    /** Return a simplified string respresentation. */\n    toSimplifiedString() {\n        return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n    }\n    /** Return string representation in mixed form. */\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = Fraction.__staticFractionTmp.copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    /** Parse a fraction string. */\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\n// Cached objects for comparisons.\nFraction.__staticFractionA = new Fraction();\nFraction.__staticFractionB = new Fraction();\nFraction.__staticFractionTmp = new Fraction();\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        // Both params are numbers, so we return them as [numerator, denominator].\n        return [n, d];\n    }\n    else {\n        // First param is a Fraction object. We ignore the second param.\n        return [n.numerator, n.denominator];\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nexport class BoundingBox {\n    /**\n     * Create a new copy.\n     */\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    /** Get x position. */\n    getX() {\n        return this.x;\n    }\n    /** Get y position. */\n    getY() {\n        return this.y;\n    }\n    /** Get width. */\n    getW() {\n        return this.w;\n    }\n    /** Get height. */\n    getH() {\n        return this.h;\n    }\n    /** Set x position. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Set y position. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Set width. */\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    /** Set height. */\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    /** Move to position. */\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    /** Clone. */\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    /**\n     * Merge my box with given box. Creates a bigger bounding box unless\n     * the given box is contained in this one.\n     */\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const new_x = this.x < that.x ? this.x : that.x;\n        const new_y = this.y < that.y ? this.y : that.y;\n        const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;\n        const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;\n        this.x = new_x;\n        this.y = new_y;\n        this.w = new_w;\n        this.h = new_h;\n        return this;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n/**\n * BoundingBoxComputation computes metrics for a bounding box by continuously\n * taking canvas path commands.\n *\n * Warning: This class is merely a crutch to get bounding box information without\n * explicit metadata. This is likely to get deprecated following SMuFL support.\n *\n * based on: https://github.com/canvg/canvg/blob/master/src/BoundingBox.ts (MIT License)\n */\nexport class BoundingBoxComputation {\n    constructor() {\n        this.x1 = Number.NaN;\n        this.y1 = Number.NaN;\n        this.x2 = Number.NaN;\n        this.y2 = Number.NaN;\n    }\n    /** Get calculated X1. */\n    getX1() {\n        return this.x1;\n    }\n    /** Get calculated Y1. */\n    getY1() {\n        return this.y1;\n    }\n    /** Get calculated width. */\n    width() {\n        return this.x2 - this.x1;\n    }\n    /** Get calculated height. */\n    height() {\n        return this.y2 - this.y1;\n    }\n    /** Add point to BoundingBox. */\n    addPoint(x, y) {\n        if (isNaN(this.x1) || x < this.x1)\n            this.x1 = x;\n        if (isNaN(this.x2) || x > this.x2)\n            this.x2 = x;\n        if (isNaN(this.y1) || y < this.y1)\n            this.y1 = y;\n        if (isNaN(this.y2) || y > this.y2)\n            this.y2 = y;\n    }\n    /** Add X to BoundingBox. */\n    addX(x) {\n        this.addPoint(x, this.y1);\n    }\n    /** Add Y to BoundingBox. */\n    addY(y) {\n        this.addPoint(this.x1, y);\n    }\n    /** Add quadratic curve to BoundingBox. */\n    addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {\n        this.addPoint(p0x, p0y);\n        this.addPoint(p2x, p2y);\n        const p01x = p1x - p0x;\n        const p12x = p2x - p1x;\n        let denom = p01x - p12x;\n        if (denom != 0) {\n            const t = p01x / denom;\n            if (t > 0 && t < 1) {\n                const it = 1 - t;\n                this.addX(it * it * p0x + 2 * it * t * p1x + t * t * p2x);\n            }\n        }\n        const p01y = p1y - p0y;\n        const p12y = p2y - p1y;\n        denom = p01y - p12y;\n        if (denom != 0) {\n            const t = p01y / denom;\n            if (t > 0 && t < 1) {\n                const it = 1 - t;\n                this.addY(it * it * p0y + 2 * it * t * p1y + t * t * p2y);\n            }\n        }\n    }\n    /** Add bezier curve to BoundingBox. */\n    addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n        // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n        const p0 = [p0x, p0y];\n        const p1 = [p1x, p1y];\n        const p2 = [p2x, p2y];\n        const p3 = [p3x, p3y];\n        let i;\n        this.addPoint(p0[0], p0[1]);\n        this.addPoint(p3[0], p3[1]);\n        const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +\n            3 * Math.pow(1 - t, 2) * t * p1[i] +\n            3 * (1 - t) * Math.pow(t, 2) * p2[i] +\n            Math.pow(t, 3) * p3[i];\n        for (i = 0; i <= 1; i++) {\n            const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n            const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n            const c = 3 * p1[i] - 3 * p0[i];\n            if (a === 0) {\n                if (b === 0)\n                    continue;\n                const t = -c / b;\n                if (0 < t && t < 1) {\n                    if (i === 0)\n                        this.addX(f(t, i));\n                    if (i === 1)\n                        this.addY(f(t, i));\n                }\n                continue;\n            }\n            const b2ac = Math.pow(b, 2) - 4 * c * a;\n            if (b2ac < 0)\n                continue;\n            const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                if (i === 0)\n                    this.addX(f(t1, i));\n                if (i === 1)\n                    this.addY(f(t1, i));\n            }\n            const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                if (i === 0)\n                    this.addX(f(t2, i));\n                if (i === 1)\n                    this.addY(f(t2, i));\n            }\n        }\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defined } from './util';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\n// Internal <span></span> element for parsing CSS font shorthand strings.\nlet fontParser;\nconst Fonts = {};\nexport class Font {\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of pixels that is equivalent to `fontSize`\n     */\n    static convertSizeToPixelValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of points that is equivalent to `fontSize`\n     */\n    static convertSizeToPointValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param f\n     * @param size\n     * @param weight\n     * @param style\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\n     */\n    static validate(f, size, weight, style) {\n        // If f is a string but all other arguments are undefined, we assume that\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            // f is a FontInfo object, so we extract its fields.\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            // f is a string representing the font family name or undefined.\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;\n        size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        // If size is a number, we assume the unit is `pt`.\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\n        return { family, size, weight, style };\n    }\n    /**\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\n     */\n    static fromCSSString(cssFontShorthand) {\n        // Let the browser parse this string for us.\n        // First, create a span element.\n        // Then, set its style.font and extract it back out.\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    /**\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\n     */\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = ''; // no space! Omit the style section.\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = ''; // no space! Omit the weight section.\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Font.SIZE + 'pt ';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            // size is already a string.\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;\n        return `${style}${weight}${size}${family}`;\n    }\n    /**\n     * @param fontSize a number representing a font size, or a string font size with units.\n     * @param scaleFactor multiply the size by this factor.\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\n     * If the fontSize argument was a number, the return value will be a number.\n     * If the fontSize argument was a string, the return value will be a string.\n     */\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    /**\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\n     * @returns true if the font weight indicates bold.\n     */\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            // a string can be 'bold' or '700'\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    /**\n     * @param style\n     * @returns true if the font style indicates 'italic'.\n     */\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    /**\n     * @param fontName\n     * @param woffURL The absolute or relative URL to the woff file.\n     * @param includeWoff2 If true, we assume that a woff2 file is in\n     * the same folder as the woff file, and will append a `2` to the url.\n     */\n    // Support distributions of the typescript compiler that do not yet include the FontFace API declarations.\n    // eslint-disable-next-line\n    // @ts-ignore\n    static loadWebFont(fontName, woffURL, includeWoff2 = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const woff2URL = includeWoff2 ? `url(${woffURL}2) format('woff2'), ` : '';\n            const woff1URL = `url(${woffURL}) format('woff')`;\n            const woffURLs = woff2URL + woff1URL;\n            // eslint-disable-next-line\n            // @ts-ignore\n            const fontFace = new FontFace(fontName, woffURLs);\n            yield fontFace.load();\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.fonts.add(fontFace);\n            return fontFace;\n        });\n    }\n    /**\n     * Load the web fonts that are used by ChordSymbol. For example, `flow.html` calls:\n     *   `await Vex.Flow.Font.loadWebFonts();`\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\n     * and a @font-face { font-family: ... } rule in your CSS.\n     * If you do not load either of these fonts, ChordSymbol will fall back to Times or Arial,\n     * depending on the current music engraving font.\n     *\n     * You can customize `Font.WEB_FONT_HOST` and `Font.WEB_FONT_FILES` to load different fonts\n     * for your app.\n     */\n    static loadWebFonts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const host = Font.WEB_FONT_HOST;\n            const files = Font.WEB_FONT_FILES;\n            for (const fontName in files) {\n                const fontPath = files[fontName];\n                Font.loadWebFont(fontName, host + fontPath);\n            }\n        });\n    }\n    /**\n     * @param fontName\n     * @param data optionally set the Font object's `.data` property.\n     *   This is usually done when setting up a font for the first time.\n     * @param metrics optionally set the Font object's `.metrics` property.\n     *   This is usually done when setting up a font for the first time.\n     * @returns a Font object with the given `fontName`.\n     *   Reuse an existing Font object if a matching one is found.\n     */\n    static load(fontName, data, metrics) {\n        let font = Fonts[fontName];\n        if (!font) {\n            font = new Font(fontName);\n            Fonts[fontName] = font;\n        }\n        if (data) {\n            font.setData(data);\n        }\n        if (metrics) {\n            font.setMetrics(metrics);\n        }\n        return font;\n    }\n    /**\n     * Use `Font.load(fontName)` to get a Font object.\n     * Do not call this constructor directly.\n     */\n    constructor(fontName) {\n        this.name = fontName;\n    }\n    getName() {\n        return this.name;\n    }\n    getData() {\n        return defined(this.data, 'FontError', 'Missing font data');\n    }\n    getMetrics() {\n        return defined(this.metrics, 'FontError', 'Missing metrics');\n    }\n    setData(data) {\n        this.data = data;\n    }\n    setMetrics(metrics) {\n        this.metrics = metrics;\n    }\n    hasData() {\n        return this.data !== undefined;\n    }\n    getResolution() {\n        return this.getData().resolution;\n    }\n    getGlyphs() {\n        return this.getData().glyphs;\n    }\n    /**\n     * Use the provided key to look up a value in this font's metrics file (e.g., bravura_metrics.ts, petaluma_metrics.ts).\n     * @param key is a string separated by periods (e.g., stave.endPaddingMax, clef.lineCount.'5'.shiftY).\n     * @param defaultValue is returned if the lookup fails.\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\n     */\n    // eslint-disable-next-line\n    lookupMetric(key, defaultValue) {\n        const keyParts = key.split('.');\n        // Start with the top level font metrics object, and keep looking deeper into the object (via each part of the period-delimited key).\n        let currObj = this.getMetrics();\n        for (let i = 0; i < keyParts.length; i++) {\n            const keyPart = keyParts[i];\n            const value = currObj[keyPart];\n            if (value === undefined) {\n                // If the key lookup fails, we fall back to the defaultValue.\n                return defaultValue;\n            }\n            // The most recent lookup succeeded, so we drill deeper into the object.\n            currObj = value;\n        }\n        // After checking every part of the key (i.e., the loop completed), return the most recently retrieved value.\n        return currObj;\n    }\n    /** For debugging. */\n    toString() {\n        return '[' + this.name + ' Font]';\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// STATIC MEMBERS\n/** Default sans-serif font family. */\nFont.SANS_SERIF = 'Arial, sans-serif';\n/** Default serif font family. */\nFont.SERIF = 'Times New Roman, serif';\n/** Default font size in `pt`. */\nFont.SIZE = 10;\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\n/**\n * Customize this field to specify a different CDN for delivering web fonts.\n * Alternative: https://cdn.jsdelivr.net/npm/vexflow-fonts@1.0.3/\n * Or you can use your own host.\n */\nFont.WEB_FONT_HOST = 'https://unpkg.com/vexflow-fonts@1.0.3/';\n/**\n * These font files will be loaded from the CDN specified by `Font.WEB_FONT_HOST` when\n * `await Font.loadWebFonts()` is called. Customize this field to specify a different\n * set of fonts to load. See: `Font.loadWebFonts()`.\n */\nFont.WEB_FONT_FILES = {\n    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff',\n    PetalumaScript: 'petaluma/PetalumaScript_1.10_FS.woff',\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\nimport { RuntimeError } from './util';\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    static getDefaultRegistry() {\n        return Registry.defaultRegistry;\n    }\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\n    // the provided registry as soon as they're constructed.\n    static enableDefaultRegistry(registry) {\n        Registry.defaultRegistry = registry;\n    }\n    static disableDefaultRegistry() {\n        Registry.defaultRegistry = undefined;\n    }\n    constructor() {\n        this.index = new Index();\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    // Updates the indexes for element 'id'. If an element's attribute changes\n    // from A -> B, make sure to remove the element from A.\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    /**\n     * Register element `elem` with this registry.\n     * This adds the element to its index and watches it for attribute changes.\n     * @param elem\n     * @param id\n     * @returns this\n     */\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        // Manually add id to index, then update other indexes.\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _a, _b;\n        return (_b = (_a = this.index.id) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b[id]; // return undefined if the id is not found.\n    }\n    getElementsByAttribute(attribute, value) {\n        const index_attr = this.index[attribute];\n        if (index_attr) {\n            const index_attr_val = index_attr[value];\n            if (index_attr_val) {\n                const keys = Object.keys(index_attr_val);\n                return keys.map((k) => index_attr_val[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    // This is called by the element when an attribute value changes. If an indexed\n    // attribute changes, then update the local index.\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Registry } from './registry';\nimport { Category } from './typeguard';\nimport { defined, prefix } from './util';\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n */\nexport class Element {\n    static get CATEGORY() {\n        return Category.Element;\n    }\n    static newID() {\n        return `auto${Element.ID++}`;\n    }\n    constructor() {\n        var _a;\n        this.children = [];\n        this.attrs = {\n            id: Element.newID(),\n            type: this.getCategory(),\n            class: '',\n        };\n        this.rendered = false;\n        // If a default registry exist, then register with it right away.\n        (_a = Registry.getDefaultRegistry()) === null || _a === void 0 ? void 0 : _a.register(this);\n    }\n    addChildElement(child) {\n        this.children.push(child);\n        return this;\n    }\n    getCategory() {\n        return this.constructor.CATEGORY;\n    }\n    /**\n     * Set the element style used to render.\n     *\n     * Example:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.draw();\n     * ```\n     * Note: If the element draws additional sub-elements (ie.: Modifiers in a Stave),\n     * the style can be applied to all of them by means of the context:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.getContext().setFillStyle('red');\n     * element.getContext().setStrokeStyle('red');\n     * element.draw();\n     * ```\n     * or using drawWithStyle:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     */\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    /** Set the element & associated children style used for rendering. */\n    setGroupStyle(style) {\n        this.style = style;\n        this.children.forEach((child) => child.setGroupStyle(style));\n        return this;\n    }\n    /** Get the element style used for rendering. */\n    getStyle() {\n        return this.style;\n    }\n    /** Apply the element style to `context`. */\n    applyStyle(context = this.context, style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.save();\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        return this;\n    }\n    /** Restore the style of `context`. */\n    restoreStyle(context = this.context, style = this.getStyle()) {\n        if (!style)\n            return this;\n        if (!context)\n            return this;\n        context.restore();\n        return this;\n    }\n    /**\n     * Draw the element and all its sub-elements (ie.: Modifiers in a Stave)\n     * with the element style.\n     */\n    drawWithStyle() {\n        this.checkContext();\n        this.applyStyle();\n        this.draw();\n        this.restoreStyle();\n    }\n    /** Check if it has a class label (An element can have multiple class labels).  */\n    hasClass(className) {\n        var _a;\n        if (!this.attrs.class)\n            return false;\n        return ((_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ').indexOf(className)) != -1;\n    }\n    /** Add a class label (An element can have multiple class labels).  */\n    addClass(className) {\n        var _a;\n        if (this.hasClass(className))\n            return this;\n        if (!this.attrs.class)\n            this.attrs.class = `${className}`;\n        else\n            this.attrs.class = `${this.attrs.class} ${className}`;\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    /** Remove a class label (An element can have multiple class labels).  */\n    removeClass(className) {\n        var _a, _b;\n        if (!this.hasClass(className))\n            return this;\n        const arr = (_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ');\n        if (arr) {\n            arr.splice(arr.indexOf(className));\n            this.attrs.class = arr.join(' ');\n        }\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    /** Call back from registry after the element is registered. */\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    /** Return the rendered status. */\n    isRendered() {\n        return this.rendered;\n    }\n    /** Set the rendered status. */\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    /** Return the element attributes. */\n    getAttributes() {\n        return this.attrs;\n    }\n    /** Return an attribute. */\n    // eslint-disable-next-line\n    getAttribute(name) {\n        return this.attrs[name];\n    }\n    /** Return associated SVGElement. */\n    getSVGElement(suffix = '') {\n        const id = prefix(this.attrs.id + suffix);\n        const element = document.getElementById(id);\n        if (element)\n            return element;\n    }\n    /** Set an attribute. */\n    setAttribute(name, value) {\n        var _a;\n        const oldID = this.attrs.id;\n        const oldValue = this.attrs[name];\n        this.attrs[name] = value;\n        // Register with old id to support id changes.\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        return this.boundingBox;\n    }\n    /** Return the context. */\n    getContext() {\n        return this.context;\n    }\n    /** Set the context. */\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    /** Validate and return the context. */\n    checkContext() {\n        return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Font Handling\n    /**\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial').\n     */\n    set font(f) {\n        this.setFont(f);\n    }\n    /** Returns the CSS compatible font string. */\n    get font() {\n        return Font.toCSSString(this.textFont);\n    }\n    /**\n     * Set the element's font family, size, weight, style (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     * @param font is 1) a `FontInfo` object or\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     * If no arguments are provided, then the font is set to the default font.\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\n     */\n    setFont(font, size, weight, style) {\n        // Allow subclasses to override `TEXT_FONT`.\n        const defaultTextFont = this.constructor.TEXT_FONT;\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const fontIsUndefined = font === undefined;\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        if (fontIsObject) {\n            // `font` is case 1) a FontInfo object\n            this.textFont = Object.assign(Object.assign({}, defaultTextFont), font);\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            // `font` is case 2) CSS font shorthand.\n            this.textFont = Font.fromCSSString(font);\n        }\n        else if (fontIsUndefined && sizeWeightStyleAreUndefined) {\n            // All arguments are undefined. Do not check for `arguments.length === 0`,\n            // which fails on the edge case: `setFont(undefined)`.\n            // TODO: See if we can remove this case entirely without introducing a visual diff.\n            // The else case below seems like it should be equivalent to this case.\n            this.textFont = Object.assign({}, defaultTextFont);\n        }\n        else {\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\n            // The other parameters represent the size, weight, and style.\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\n            // Following CSS conventions, unspecified params are reset to the default.\n            this.textFont = Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);\n        }\n        return this;\n    }\n    getFont() {\n        if (!this.textFont) {\n            this.resetFont();\n        }\n        return Font.toCSSString(this.textFont);\n    }\n    /**\n     * Reset the text font to the style indicated by the static `TEXT_FONT` property.\n     * Subclasses can call this to initialize `textFont` for the first time.\n     */\n    resetFont() {\n        this.setFont();\n    }\n    /** Return a copy of the current FontInfo object. */\n    get fontInfo() {\n        if (!this.textFont) {\n            this.resetFont();\n        }\n        // We can cast to Required<FontInfo> here, because\n        // we just called resetFont() above to ensure this.textFont is set.\n        return Object.assign({}, this.textFont);\n    }\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    /** Change the font size, while keeping everything else the same. */\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\n     */\n    getFontSize() {\n        return this.fontSize;\n    }\n    /**\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\n     */\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     */\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    /**\n     * @returns the font size in `pt`.\n     */\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    /**\n     * @returns the font size in `px`.\n     */\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    /**\n     * @returns a CSS font-style string (e.g., 'italic').\n     */\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    /**\n     * @returns a CSS font-weight string (e.g., 'bold').\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\n     */\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n}\nElement.ID = 1000;\n/**\n * Default font for text. This is not related to music engraving. Instead, see `Flow.setMusicFont(...fontNames)`\n * to customize the font for musical symbols placed on the score.\n */\nElement.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { RuntimeError } from './util';\nconst RESOLUTION = 16384;\n/**\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\n */\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    // This is the default duration used to render bars (BarNote). Bars no longer\n    // consume ticks, so this should be a no-op.\n    // TODO(0xfe): This needs to be cleaned up.\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { acc: 'b', num: 1 },\n    Dm: { acc: 'b', num: 1 },\n    Bb: { acc: 'b', num: 2 },\n    Gm: { acc: 'b', num: 2 },\n    Eb: { acc: 'b', num: 3 },\n    Cm: { acc: 'b', num: 3 },\n    Ab: { acc: 'b', num: 4 },\n    Fm: { acc: 'b', num: 4 },\n    Db: { acc: 'b', num: 5 },\n    Bbm: { acc: 'b', num: 5 },\n    Gb: { acc: 'b', num: 6 },\n    Ebm: { acc: 'b', num: 6 },\n    Cb: { acc: 'b', num: 7 },\n    Abm: { acc: 'b', num: 7 },\n    G: { acc: '#', num: 1 },\n    Em: { acc: '#', num: 1 },\n    D: { acc: '#', num: 2 },\n    Bm: { acc: '#', num: 2 },\n    A: { acc: '#', num: 3 },\n    'F#m': { acc: '#', num: 3 },\n    E: { acc: '#', num: 4 },\n    'C#m': { acc: '#', num: 4 },\n    B: { acc: '#', num: 5 },\n    'G#m': { acc: '#', num: 5 },\n    'F#': { acc: '#', num: 6 },\n    'D#m': { acc: '#', num: 6 },\n    'C#': { acc: '#', num: 7 },\n    'A#m': { acc: '#', num: 7 },\n};\nconst clefs = {\n    treble: { line_shift: 0 },\n    bass: { line_shift: 6 },\n    tenor: { line_shift: 4 },\n    alto: { line_shift: 3 },\n    soprano: { line_shift: 1 },\n    percussion: { line_shift: 0 },\n    'mezzo-soprano': { line_shift: 2 },\n    'baritone-c': { line_shift: 5 },\n    'baritone-f': { line_shift: 5 },\n    subbass: { line_shift: 7 },\n    french: { line_shift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, int_val: 0 },\n    CN: { index: 0, int_val: 0, accidental: 'n' },\n    'C#': { index: 0, int_val: 1, accidental: '#' },\n    'C##': { index: 0, int_val: 2, accidental: '##' },\n    CB: { index: 0, int_val: 11, accidental: 'b' },\n    CBB: { index: 0, int_val: 10, accidental: 'bb' },\n    D: { index: 1, int_val: 2 },\n    DN: { index: 1, int_val: 2, accidental: 'n' },\n    'D#': { index: 1, int_val: 3, accidental: '#' },\n    'D##': { index: 1, int_val: 4, accidental: '##' },\n    DB: { index: 1, int_val: 1, accidental: 'b' },\n    DBB: { index: 1, int_val: 0, accidental: 'bb' },\n    E: { index: 2, int_val: 4 },\n    EN: { index: 2, int_val: 4, accidental: 'n' },\n    'E#': { index: 2, int_val: 5, accidental: '#' },\n    'E##': { index: 2, int_val: 6, accidental: '##' },\n    EB: { index: 2, int_val: 3, accidental: 'b' },\n    EBB: { index: 2, int_val: 2, accidental: 'bb' },\n    F: { index: 3, int_val: 5 },\n    FN: { index: 3, int_val: 5, accidental: 'n' },\n    'F#': { index: 3, int_val: 6, accidental: '#' },\n    'F##': { index: 3, int_val: 7, accidental: '##' },\n    FB: { index: 3, int_val: 4, accidental: 'b' },\n    FBB: { index: 3, int_val: 3, accidental: 'bb' },\n    G: { index: 4, int_val: 7 },\n    GN: { index: 4, int_val: 7, accidental: 'n' },\n    'G#': { index: 4, int_val: 8, accidental: '#' },\n    'G##': { index: 4, int_val: 9, accidental: '##' },\n    GB: { index: 4, int_val: 6, accidental: 'b' },\n    GBB: { index: 4, int_val: 5, accidental: 'bb' },\n    A: { index: 5, int_val: 9 },\n    AN: { index: 5, int_val: 9, accidental: 'n' },\n    'A#': { index: 5, int_val: 10, accidental: '#' },\n    'A##': { index: 5, int_val: 11, accidental: '##' },\n    AB: { index: 5, int_val: 8, accidental: 'b' },\n    ABB: { index: 5, int_val: 7, accidental: 'bb' },\n    B: { index: 6, int_val: 11 },\n    BN: { index: 6, int_val: 11, accidental: 'n' },\n    'B#': { index: 6, int_val: 12, accidental: '#' },\n    'B##': { index: 6, int_val: 13, accidental: '##' },\n    BB: { index: 6, int_val: 10, accidental: 'b' },\n    BBB: { index: 6, int_val: 9, accidental: 'bb' },\n    R: { index: 6, rest: true },\n    X: {\n        index: 6,\n        accidental: '',\n        octave: 4,\n        code: 'noteheadXBlack',\n        shift_right: 5.5,\n    },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n    d: { name: 'diamond' },\n    x: { name: 'x' },\n    ci: { name: 'circled' },\n    cx: { name: 'circle x' },\n    sf: { name: 'slashed' },\n    sb: { name: 'slashed backward' },\n    sq: { name: 'square' },\n    tu: { name: 'triangle up' },\n    td: { name: 'triangle down' },\n};\nconst accidentals = {\n    '#': { code: 'accidentalSharp', parenRightPaddingAdjustment: -1 },\n    '##': { code: 'accidentalDoubleSharp', parenRightPaddingAdjustment: -1 },\n    b: { code: 'accidentalFlat', parenRightPaddingAdjustment: -2 },\n    bb: { code: 'accidentalDoubleFlat', parenRightPaddingAdjustment: -2 },\n    n: { code: 'accidentalNatural', parenRightPaddingAdjustment: -1 },\n    '{': { code: 'accidentalParensLeft', parenRightPaddingAdjustment: -1 },\n    '}': { code: 'accidentalParensRight', parenRightPaddingAdjustment: -1 },\n    db: { code: 'accidentalThreeQuarterTonesFlatZimmermann', parenRightPaddingAdjustment: -1 },\n    d: { code: 'accidentalQuarterToneFlatStein', parenRightPaddingAdjustment: 0 },\n    '++': { code: 'accidentalThreeQuarterTonesSharpStein', parenRightPaddingAdjustment: -1 },\n    '+': { code: 'accidentalQuarterToneSharpStein', parenRightPaddingAdjustment: -1 },\n    '+-': { code: 'accidentalKucukMucennebSharp', parenRightPaddingAdjustment: -1 },\n    bs: { code: 'accidentalBakiyeFlat', parenRightPaddingAdjustment: -1 },\n    bss: { code: 'accidentalBuyukMucennebFlat', parenRightPaddingAdjustment: -1 },\n    o: { code: 'accidentalSori', parenRightPaddingAdjustment: -1 },\n    k: { code: 'accidentalKoron', parenRightPaddingAdjustment: -1 },\n    bbs: { code: 'vexAccidentalMicrotonal1', parenRightPaddingAdjustment: -1 },\n    '++-': { code: 'vexAccidentalMicrotonal2', parenRightPaddingAdjustment: -1 },\n    ashs: { code: 'vexAccidentalMicrotonal3', parenRightPaddingAdjustment: -1 },\n    afhf: { code: 'vexAccidentalMicrotonal4', parenRightPaddingAdjustment: -1 },\n    accSagittal5v7KleismaUp: { code: 'accSagittal5v7KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v7KleismaDown: { code: 'accSagittal5v7KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5CommaUp: { code: 'accSagittal5CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5CommaDown: { code: 'accSagittal5CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7CommaUp: { code: 'accSagittal7CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7CommaDown: { code: 'accSagittal7CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal25SmallDiesisUp: { code: 'accSagittal25SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal25SmallDiesisDown: { code: 'accSagittal25SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal35MediumDiesisUp: { code: 'accSagittal35MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal35MediumDiesisDown: { code: 'accSagittal35MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11MediumDiesisUp: { code: 'accSagittal11MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11MediumDiesisDown: { code: 'accSagittal11MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11LargeDiesisUp: { code: 'accSagittal11LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11LargeDiesisDown: { code: 'accSagittal11LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal35LargeDiesisUp: { code: 'accSagittal35LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal35LargeDiesisDown: { code: 'accSagittal35LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp25SDown: { code: 'accSagittalSharp25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat25SUp: { code: 'accSagittalFlat25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7CDown: { code: 'accSagittalSharp7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7CUp: { code: 'accSagittalFlat7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5CDown: { code: 'accSagittalSharp5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5CUp: { code: 'accSagittalFlat5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v7kDown: { code: 'accSagittalSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v7kUp: { code: 'accSagittalFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp: { code: 'accSagittalSharp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat: { code: 'accSagittalFlat', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v7kUp: { code: 'accSagittalSharp5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v7kDown: { code: 'accSagittalFlat5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5CUp: { code: 'accSagittalSharp5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5CDown: { code: 'accSagittalFlat5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7CUp: { code: 'accSagittalSharp7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7CDown: { code: 'accSagittalFlat7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp25SUp: { code: 'accSagittalSharp25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat25SDown: { code: 'accSagittalFlat25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp35MUp: { code: 'accSagittalSharp35MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat35MDown: { code: 'accSagittalFlat35MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11MUp: { code: 'accSagittalSharp11MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11MDown: { code: 'accSagittalFlat11MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11LUp: { code: 'accSagittalSharp11LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11LDown: { code: 'accSagittalFlat11LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp35LUp: { code: 'accSagittalSharp35LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat35LDown: { code: 'accSagittalFlat35LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp25SDown: { code: 'accSagittalDoubleSharp25SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat25SUp: { code: 'accSagittalDoubleFlat25SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7CDown: { code: 'accSagittalDoubleSharp7CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7CUp: { code: 'accSagittalDoubleFlat7CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5CDown: { code: 'accSagittalDoubleSharp5CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5CUp: { code: 'accSagittalDoubleFlat5CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v7kDown: { code: 'accSagittalDoubleSharp5v7kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v7kUp: { code: 'accSagittalDoubleFlat5v7kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp: { code: 'accSagittalDoubleSharp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat: { code: 'accSagittalDoubleFlat', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11KleismaUp: { code: 'accSagittal7v11KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11KleismaDown: { code: 'accSagittal7v11KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal17CommaUp: { code: 'accSagittal17CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal17CommaDown: { code: 'accSagittal17CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal55CommaUp: { code: 'accSagittal55CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal55CommaDown: { code: 'accSagittal55CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11CommaUp: { code: 'accSagittal7v11CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v11CommaDown: { code: 'accSagittal7v11CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v11SmallDiesisUp: { code: 'accSagittal5v11SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v11SmallDiesisDown: { code: 'accSagittal5v11SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v11SDown: { code: 'accSagittalSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v11SUp: { code: 'accSagittalFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11CDown: { code: 'accSagittalSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11CUp: { code: 'accSagittalFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp55CDown: { code: 'accSagittalSharp55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat55CUp: { code: 'accSagittalFlat55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17CDown: { code: 'accSagittalSharp17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17CUp: { code: 'accSagittalFlat17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11kDown: { code: 'accSagittalSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11kUp: { code: 'accSagittalFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11kUp: { code: 'accSagittalSharp7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11kDown: { code: 'accSagittalFlat7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17CUp: { code: 'accSagittalSharp17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17CDown: { code: 'accSagittalFlat17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp55CUp: { code: 'accSagittalSharp55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat55CDown: { code: 'accSagittalFlat55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v11CUp: { code: 'accSagittalSharp7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v11CDown: { code: 'accSagittalFlat7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v11SUp: { code: 'accSagittalSharp5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v11SDown: { code: 'accSagittalFlat5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v11SDown: { code: 'accSagittalDoubleSharp5v11SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v11SUp: { code: 'accSagittalDoubleFlat5v11SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v11CDown: { code: 'accSagittalDoubleSharp7v11CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v11CUp: { code: 'accSagittalDoubleFlat7v11CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp55CDown: { code: 'accSagittalDoubleSharp55CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat55CUp: { code: 'accSagittalDoubleFlat55CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp17CDown: { code: 'accSagittalDoubleSharp17CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat17CUp: { code: 'accSagittalDoubleFlat17CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v11kDown: { code: 'accSagittalDoubleSharp7v11kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v11kUp: { code: 'accSagittalDoubleFlat7v11kUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23CommaUp: { code: 'accSagittal23CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23CommaDown: { code: 'accSagittal23CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v19CommaUp: { code: 'accSagittal5v19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v19CommaDown: { code: 'accSagittal5v19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v23SmallDiesisUp: { code: 'accSagittal5v23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v23SmallDiesisDown: { code: 'accSagittal5v23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v23SDown: { code: 'accSagittalSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v23SUp: { code: 'accSagittalFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v19CDown: { code: 'accSagittalSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v19CUp: { code: 'accSagittalFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23CDown: { code: 'accSagittalSharp23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23CUp: { code: 'accSagittalFlat23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23CUp: { code: 'accSagittalSharp23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23CDown: { code: 'accSagittalFlat23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v19CUp: { code: 'accSagittalSharp5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v19CDown: { code: 'accSagittalFlat5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v23SUp: { code: 'accSagittalSharp5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v23SDown: { code: 'accSagittalFlat5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v23SDown: { code: 'accSagittalDoubleSharp5v23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v23SUp: { code: 'accSagittalDoubleFlat5v23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp5v19CDown: { code: 'accSagittalDoubleSharp5v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat5v19CUp: { code: 'accSagittalDoubleFlat5v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp23CDown: { code: 'accSagittalDoubleSharp23CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat23CUp: { code: 'accSagittalDoubleFlat23CUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19SchismaUp: { code: 'accSagittal19SchismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19SchismaDown: { code: 'accSagittal19SchismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal17KleismaUp: { code: 'accSagittal17KleismaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal17KleismaDown: { code: 'accSagittal17KleismaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal143CommaUp: { code: 'accSagittal143CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal143CommaDown: { code: 'accSagittal143CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v49CommaUp: { code: 'accSagittal11v49CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v49CommaDown: { code: 'accSagittal11v49CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal19CommaUp: { code: 'accSagittal19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal19CommaDown: { code: 'accSagittal19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7v19CommaUp: { code: 'accSagittal7v19CommaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7v19CommaDown: { code: 'accSagittal7v19CommaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49SmallDiesisUp: { code: 'accSagittal49SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49SmallDiesisDown: { code: 'accSagittal49SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal23SmallDiesisUp: { code: 'accSagittal23SmallDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal23SmallDiesisDown: { code: 'accSagittal23SmallDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13MediumDiesisUp: { code: 'accSagittal5v13MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13MediumDiesisDown: { code: 'accSagittal5v13MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19MediumDiesisUp: { code: 'accSagittal11v19MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19MediumDiesisDown: { code: 'accSagittal11v19MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49MediumDiesisUp: { code: 'accSagittal49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49MediumDiesisDown: { code: 'accSagittal49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v49MediumDiesisUp: { code: 'accSagittal5v49MediumDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v49MediumDiesisDown: { code: 'accSagittal5v49MediumDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal49LargeDiesisUp: { code: 'accSagittal49LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal49LargeDiesisDown: { code: 'accSagittal49LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19LargeDiesisUp: { code: 'accSagittal11v19LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal11v19LargeDiesisDown: { code: 'accSagittal11v19LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13LargeDiesisUp: { code: 'accSagittal5v13LargeDiesisUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5v13LargeDiesisDown: { code: 'accSagittal5v13LargeDiesisDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23SDown: { code: 'accSagittalSharp23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23SUp: { code: 'accSagittalFlat23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49SDown: { code: 'accSagittalSharp49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49SUp: { code: 'accSagittalFlat49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v19CDown: { code: 'accSagittalSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v19CUp: { code: 'accSagittalFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19CDown: { code: 'accSagittalSharp19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19CUp: { code: 'accSagittalFlat19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v49CDown: { code: 'accSagittalSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v49CUp: { code: 'accSagittalFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp143CDown: { code: 'accSagittalSharp143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat143CUp: { code: 'accSagittalFlat143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17kDown: { code: 'accSagittalSharp17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17kUp: { code: 'accSagittalFlat17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19sDown: { code: 'accSagittalSharp19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19sUp: { code: 'accSagittalFlat19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19sUp: { code: 'accSagittalSharp19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19sDown: { code: 'accSagittalFlat19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp17kUp: { code: 'accSagittalSharp17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat17kDown: { code: 'accSagittalFlat17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp143CUp: { code: 'accSagittalSharp143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat143CDown: { code: 'accSagittalFlat143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v49CUp: { code: 'accSagittalSharp11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v49CDown: { code: 'accSagittalFlat11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp19CUp: { code: 'accSagittalSharp19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat19CDown: { code: 'accSagittalFlat19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp7v19CUp: { code: 'accSagittalSharp7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat7v19CDown: { code: 'accSagittalFlat7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49SUp: { code: 'accSagittalSharp49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49SDown: { code: 'accSagittalFlat49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp23SUp: { code: 'accSagittalSharp23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat23SDown: { code: 'accSagittalFlat23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v13MUp: { code: 'accSagittalSharp5v13MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v13MDown: { code: 'accSagittalFlat5v13MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v19MUp: { code: 'accSagittalSharp11v19MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v19MDown: { code: 'accSagittalFlat11v19MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49MUp: { code: 'accSagittalSharp49MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49MDown: { code: 'accSagittalFlat49MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v49MUp: { code: 'accSagittalSharp5v49MUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v49MDown: { code: 'accSagittalFlat5v49MDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp49LUp: { code: 'accSagittalSharp49LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat49LDown: { code: 'accSagittalFlat49LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp11v19LUp: { code: 'accSagittalSharp11v19LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat11v19LDown: { code: 'accSagittalFlat11v19LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalSharp5v13LUp: { code: 'accSagittalSharp5v13LUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFlat5v13LDown: { code: 'accSagittalFlat5v13LDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp23SDown: { code: 'accSagittalDoubleSharp23SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat23SUp: { code: 'accSagittalDoubleFlat23SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp49SDown: { code: 'accSagittalDoubleSharp49SDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat49SUp: { code: 'accSagittalDoubleFlat49SUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp7v19CDown: { code: 'accSagittalDoubleSharp7v19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat7v19CUp: { code: 'accSagittalDoubleFlat7v19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp19CDown: { code: 'accSagittalDoubleSharp19CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat19CUp: { code: 'accSagittalDoubleFlat19CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp11v49CDown: { code: 'accSagittalDoubleSharp11v49CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat11v49CUp: { code: 'accSagittalDoubleFlat11v49CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp143CDown: { code: 'accSagittalDoubleSharp143CDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat143CUp: { code: 'accSagittalDoubleFlat143CUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp17kDown: { code: 'accSagittalDoubleSharp17kDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat17kUp: { code: 'accSagittalDoubleFlat17kUp', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleSharp19sDown: { code: 'accSagittalDoubleSharp19sDown', parenRightPaddingAdjustment: -1 },\n    accSagittalDoubleFlat19sUp: { code: 'accSagittalDoubleFlat19sUp', parenRightPaddingAdjustment: -1 },\n    accSagittalShaftUp: { code: 'accSagittalShaftUp', parenRightPaddingAdjustment: -1 },\n    accSagittalShaftDown: { code: 'accSagittalShaftDown', parenRightPaddingAdjustment: -1 },\n    accSagittalAcute: { code: 'accSagittalAcute', parenRightPaddingAdjustment: -1 },\n    accSagittalGrave: { code: 'accSagittalGrave', parenRightPaddingAdjustment: -1 },\n    accSagittal1MinaUp: { code: 'accSagittal1MinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal1MinaDown: { code: 'accSagittal1MinaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal2MinasUp: { code: 'accSagittal2MinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal2MinasDown: { code: 'accSagittal2MinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal1TinaUp: { code: 'accSagittal1TinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittal1TinaDown: { code: 'accSagittal1TinaDown', parenRightPaddingAdjustment: -1 },\n    accSagittal2TinasUp: { code: 'accSagittal2TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal2TinasDown: { code: 'accSagittal2TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal3TinasUp: { code: 'accSagittal3TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal3TinasDown: { code: 'accSagittal3TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal4TinasUp: { code: 'accSagittal4TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal4TinasDown: { code: 'accSagittal4TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal5TinasUp: { code: 'accSagittal5TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal5TinasDown: { code: 'accSagittal5TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal6TinasUp: { code: 'accSagittal6TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal6TinasDown: { code: 'accSagittal6TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal7TinasUp: { code: 'accSagittal7TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal7TinasDown: { code: 'accSagittal7TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal8TinasUp: { code: 'accSagittal8TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal8TinasDown: { code: 'accSagittal8TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittal9TinasUp: { code: 'accSagittal9TinasUp', parenRightPaddingAdjustment: -1 },\n    accSagittal9TinasDown: { code: 'accSagittal9TinasDown', parenRightPaddingAdjustment: -1 },\n    accSagittalFractionalTinaUp: { code: 'accSagittalFractionalTinaUp', parenRightPaddingAdjustment: -1 },\n    accSagittalFractionalTinaDown: { code: 'accSagittalFractionalTinaDown', parenRightPaddingAdjustment: -1 },\n    accidentalNarrowReversedFlat: { code: 'accidentalNarrowReversedFlat', parenRightPaddingAdjustment: -1 },\n    accidentalNarrowReversedFlatAndFlat: {\n        code: 'accidentalNarrowReversedFlatAndFlat',\n        parenRightPaddingAdjustment: -1,\n    },\n    accidentalWilsonPlus: { code: 'accidentalWilsonPlus', parenRightPaddingAdjustment: -1 },\n    accidentalWilsonMinus: { code: 'accidentalWilsonMinus', parenRightPaddingAdjustment: -1 },\n};\n// Helps determine the layout of accidentals.\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        second_on_bottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spaced_out_tetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spaced_out_pentachord: [1, 2, 3, 2, 1],\n        very_spaced_out_pentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spaced_out_hexachord: [1, 3, 2, 1, 3, 2],\n        very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: 'augmentationDot', between_lines: true },\n    av: {\n        aboveCode: 'articStaccatissimoAbove',\n        belowCode: 'articStaccatissimoBelow',\n        between_lines: true,\n    },\n    'a>': {\n        aboveCode: 'articAccentAbove',\n        belowCode: 'articAccentBelow',\n        between_lines: true,\n    },\n    'a-': {\n        aboveCode: 'articTenutoAbove',\n        belowCode: 'articTenutoBelow',\n        between_lines: true,\n    },\n    'a^': {\n        aboveCode: 'articMarcatoAbove',\n        belowCode: 'articMarcatoBelow',\n        between_lines: false,\n    },\n    'a+': { code: 'pluckedLeftHandPizzicato', between_lines: false },\n    ao: {\n        aboveCode: 'pluckedSnapPizzicatoAbove',\n        belowCode: 'pluckedSnapPizzicatoBelow',\n        between_lines: false,\n    },\n    ah: { code: 'stringsHarmonic', between_lines: false },\n    'a@': { aboveCode: 'fermataAbove', belowCode: 'fermataBelow', between_lines: false },\n    'a@a': { code: 'fermataAbove', between_lines: false },\n    'a@u': { code: 'fermataBelow', between_lines: false },\n    'a@s': { aboveCode: 'fermataShortAbove', belowCode: 'fermataShortBelow', between_lines: false },\n    'a@as': { code: 'fermataShortAbove', between_lines: false },\n    'a@us': { code: 'fermataShortBelow', between_lines: false },\n    'a@l': { aboveCode: 'fermataLongAbove', belowCode: 'fermataLongBelow', between_lines: false },\n    'a@al': { code: 'fermataLongAbove', between_lines: false },\n    'a@ul': { code: 'fermataLongBelow', between_lines: false },\n    'a@vl': { aboveCode: 'fermataVeryLongAbove', belowCode: 'fermataVeryLongBelow', between_lines: false },\n    'a@avl': { code: 'fermataVeryLongAbove', between_lines: false },\n    'a@uvl': { code: 'fermataVeryLongBelow', between_lines: false },\n    'a|': { code: 'stringsUpBow', between_lines: false },\n    am: { code: 'stringsDownBow', between_lines: false },\n    'a,': { code: 'pictChokeCymbal', between_lines: false }, // Choked\n};\nconst ornaments = {\n    mordent: { code: 'ornamentShortTrill' },\n    mordent_inverted: { code: 'ornamentMordent' },\n    turn: { code: 'ornamentTurn' },\n    turn_inverted: { code: 'ornamentTurnSlash' },\n    tr: { code: 'ornamentTrill' },\n    upprall: { code: 'ornamentPrecompSlideTrillDAnglebert' },\n    downprall: { code: 'ornamentPrecompDoubleCadenceUpperPrefix' },\n    prallup: { code: 'ornamentPrecompTrillSuffixDandrieu' },\n    pralldown: { code: 'ornamentPrecompTrillLowerSuffix' },\n    upmordent: { code: 'ornamentPrecompSlideTrillBach' },\n    downmordent: { code: 'ornamentPrecompDoubleCadenceUpperPrefixTurn' },\n    lineprall: { code: 'ornamentPrecompAppoggTrill' },\n    prallprall: { code: 'ornamentTremblement' },\n    scoop: { code: 'brassScoop' },\n    doit: { code: 'brassDoitMedium' },\n    fall: { code: 'brassFallLipShort' },\n    doitLong: { code: 'brassLiftMedium' },\n    fallLong: { code: 'brassFallRoughMedium' },\n    bend: { code: 'brassBend' },\n    plungerClosed: { code: 'brassMuteClosed' },\n    plungerOpen: { code: 'brassMuteOpen' },\n    flip: { code: 'brassFlip' },\n    jazzTurn: { code: 'brassJazzTurn' },\n    smear: { code: 'brassSmear' },\n};\nexport class Tables {\n    /**\n     * @returns the `Font` object at the head of the music font stack.\n     */\n    static currentMusicFont() {\n        if (Tables.MUSIC_FONT_STACK.length === 0) {\n            throw new RuntimeError('NoFonts', 'The font stack is empty. See: await Flow.fetchMusicFont(...); Flow.setMusicFont(...).');\n        }\n        else {\n            return Tables.MUSIC_FONT_STACK[0];\n        }\n    }\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    /**\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\n     * @param clef\n     * @param params a struct with one option, `octave_shift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n     * @returns properties for the specified note.\n     */\n    static keyProperties(keyOctaveGlyph, clef = 'treble', params) {\n        let options = { octave_shift: 0, duration: '4' };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const duration = Tables.sanitizeDuration(options.duration);\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        if (value.octave)\n            pieces[1] = value.octave.toString();\n        let octave = parseInt(pieces[1], 10);\n        // Octave_shift is the shift to compensate for clef 8va/8vb.\n        octave += -1 * options.octave_shift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).line_shift;\n        let stroke = 0;\n        if (line <= 0 && (line * 2) % 2 === 0)\n            stroke = 1; // stroke up\n        if (line >= 6 && (line * 2) % 2 === 0)\n            stroke = -1; // stroke down\n        // Integer value for note arithmetic.\n        const int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : undefined;\n        // If the user specified a glyph, overwrite the glyph code.\n        const code = value.code;\n        const shift_right = value.shift_right;\n        let customNoteHeadProps = {};\n        if (pieces.length > 2 && pieces[2]) {\n            const glyphName = pieces[2].toUpperCase();\n            customNoteHeadProps = { code: this.codeNoteHead(glyphName, duration) } || {};\n        }\n        return Object.assign({ key,\n            octave,\n            line,\n            int_value, accidental: value.accidental, code,\n            stroke,\n            shift_right, displaced: false }, customNoteHeadProps);\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    static tabToGlyphProps(fret, scale = 1.0) {\n        let glyph = undefined;\n        let width = 0;\n        let shift_y = 0;\n        if (fret.toUpperCase() === 'X') {\n            const glyphMetrics = new Glyph('accidentalDoubleSharp', Tables.TABLATURE_FONT_SCALE).getMetrics();\n            glyph = 'accidentalDoubleSharp';\n            if (glyphMetrics.width == undefined || glyphMetrics.height == undefined)\n                throw new RuntimeError('InvalidMetrics', 'Width and height required');\n            width = glyphMetrics.width;\n            shift_y = -glyphMetrics.height / 2;\n        }\n        else {\n            width = Tables.textWidth(fret);\n        }\n        return {\n            text: fret,\n            code: glyph,\n            getWidth: () => width * scale,\n            shift_y,\n        };\n    }\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\n    // TODO: The actual width depends on the font family, size, weight, style.\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(acc) {\n        return accidentals[acc];\n    }\n    static ornamentCodes(acc) {\n        return ornaments[acc];\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.acc) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.acc];\n        const acc_list = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            acc_list.push({ type: keySpec.acc, line });\n        }\n        return acc_list;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    /**\n     * Convert duration aliases to the number based duration.\n     * If the input isn't an alias, simply return the input.\n     * @param duration\n     * @returns Example: 'q' -> '4', '8' -> '8'\n     */\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    /** Convert the `duration` to a fraction. */\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    /** Convert the `duration` to a number. */\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    /* Convert the `duration` to total ticks. */\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    static codeNoteHead(type, duration) {\n        let code = '';\n        switch (type) {\n            /* Diamond */\n            case 'D0':\n                code = 'noteheadDiamondWhole';\n                break;\n            case 'D1':\n                code = 'noteheadDiamondHalf';\n                break;\n            case 'D2':\n                code = 'noteheadDiamondBlack';\n                break;\n            case 'D3':\n                code = 'noteheadDiamondBlack';\n                break;\n            /* Triangle */\n            case 'T0':\n                code = 'noteheadTriangleUpWhole';\n                break;\n            case 'T1':\n                code = 'noteheadTriangleUpHalf';\n                break;\n            case 'T2':\n                code = 'noteheadTriangleUpBlack';\n                break;\n            case 'T3':\n                code = 'noteheadTriangleUpBlack';\n                break;\n            /* Cross */\n            case 'X0':\n                code = 'noteheadXWhole';\n                break;\n            case 'X1':\n                code = 'noteheadXHalf';\n                break;\n            case 'X2':\n                code = 'noteheadXBlack';\n                break;\n            case 'X3':\n                code = 'noteheadCircleX';\n                break;\n            /* Square */\n            case 'S1':\n                code = 'noteheadSquareWhite';\n                break;\n            case 'S2':\n                code = 'noteheadSquareBlack';\n                break;\n            /* Rectangle */\n            case 'R1':\n                code = 'vexNoteHeadRectWhite'; // no smufl code\n                break;\n            case 'R2':\n                code = 'vexNoteHeadRectBlack'; // no smufl code\n                break;\n            case 'DO':\n                code = 'noteheadTriangleUpBlack';\n                break;\n            case 'RE':\n                code = 'noteheadMoonBlack';\n                break;\n            case 'MI':\n                code = 'noteheadDiamondBlack';\n                break;\n            case 'FA':\n                code = 'noteheadTriangleLeftBlack';\n                break;\n            case 'FAUP':\n                code = 'noteheadTriangleRightBlack';\n                break;\n            case 'SO':\n                code = 'noteheadBlack';\n                break;\n            case 'LA':\n                code = 'noteheadSquareBlack';\n                break;\n            case 'TI':\n                code = 'noteheadTriangleRoundDownBlack';\n                break;\n            case 'D':\n            case 'H': // left for backwards compatibility\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadDiamondDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadDiamondWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadDiamondHalf';\n                        break;\n                    default:\n                        code = 'noteheadDiamondBlack';\n                        break;\n                }\n                break;\n            case 'N':\n            case 'G':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadHalf';\n                        break;\n                    default:\n                        code = 'noteheadBlack';\n                        break;\n                }\n                break;\n            case 'M': // left for backwards compatibility\n            case 'X':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadXDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadXWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadXHalf';\n                        break;\n                    default:\n                        code = 'noteheadXBlack';\n                        break;\n                }\n                break;\n            case 'CX':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadCircleXDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadCircleXWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadCircleXHalf';\n                        break;\n                    default:\n                        code = 'noteheadCircleX';\n                        break;\n                }\n                break;\n            case 'CI':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadCircledDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadCircledWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadCircledHalf';\n                        break;\n                    default:\n                        code = 'noteheadCircledBlack';\n                        break;\n                }\n                break;\n            case 'SQ':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadDoubleWholeSquare';\n                        break;\n                    case '1':\n                        code = 'noteheadSquareWhite';\n                        break;\n                    case '2':\n                        code = 'noteheadSquareWhite';\n                        break;\n                    default:\n                        code = 'noteheadSquareBlack';\n                        break;\n                }\n                break;\n            case 'TU':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadTriangleUpDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadTriangleUpWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadTriangleUpHalf';\n                        break;\n                    default:\n                        code = 'noteheadTriangleUpBlack';\n                        break;\n                }\n                break;\n            case 'TD':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadTriangleDownDoubleWhole';\n                        break;\n                    case '1':\n                        code = 'noteheadTriangleDownWhole';\n                        break;\n                    case '2':\n                        code = 'noteheadTriangleDownHalf';\n                        break;\n                    default:\n                        code = 'noteheadTriangleDownBlack';\n                        break;\n                }\n                break;\n            case 'SF':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadSlashedDoubleWhole1';\n                        break;\n                    case '1':\n                        code = 'noteheadSlashedWhole1';\n                        break;\n                    case '2':\n                        code = 'noteheadSlashedHalf1';\n                        break;\n                    default:\n                        code = 'noteheadSlashedBlack1';\n                }\n                break;\n            case 'SB':\n                switch (duration) {\n                    case '1/2':\n                        code = 'noteheadSlashedDoubleWhole2';\n                        break;\n                    case '1':\n                        code = 'noteheadSlashedWhole2';\n                        break;\n                    case '2':\n                        code = 'noteheadSlashedHalf2';\n                        break;\n                    default:\n                        code = 'noteheadSlashedBlack2';\n                }\n                break;\n        }\n        return code;\n    }\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n    // The default type is a regular note ('n').\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        // Lookup duration for default glyph head code\n        let code = durationCodes[duration];\n        if (code === undefined) {\n            code = durationCodes['4'];\n        }\n        // Get glyph properties for 'type' from duration string (note, rest, harmonic, muted, slash)\n        let glyphTypeProperties = code[type];\n        // Try and get it from the custom list of note heads\n        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);\n        if (codeNoteHead != '')\n            glyphTypeProperties = Object.assign(Object.assign({}, glyphTypeProperties), { code_head: codeNoteHead, code: codeNoteHead });\n        const code_head = glyphTypeProperties.code_head;\n        // The default implementation of getWidth() calls Glyph.getWidth(code_head, scale).\n        // This can be overridden by an individual glyph type (see slash noteheads below: Tables.SLASH_NOTEHEAD_WIDTH).\n        const getWidth = (scale = Tables.NOTATION_FONT_SCALE) => Glyph.getWidth(code_head, scale);\n        // Merge duration props for 'duration' with the note head properties.\n        return Object.assign(Object.assign(Object.assign({}, code.common), { getWidth: getWidth }), glyphTypeProperties);\n    }\n}\nTables.SOFTMAX_FACTOR = 100;\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RENDER_PRECISION_PLACES = 3;\nTables.RESOLUTION = RESOLUTION;\n/**\n * Customize this by calling Flow.setMusicFont(...fontNames);\n */\nTables.MUSIC_FONT_STACK = [];\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\n// HACK:\n// Since text origins are positioned at the baseline, we must\n// compensate for the ascender of the text. Of course, 1 staff space is\n// a very poor approximation.\n//\n// This will be deprecated in the future. This is a temporary solution until\n// we have more robust text metrics.\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalMap = accidentals;\nTables.accidentalColumnsTable = accidentalColumns;\nTables.unicode = {\n    // ♯ accidental sharp\n    sharp: String.fromCharCode(0x266f),\n    // ♭ accidental flat\n    flat: String.fromCharCode(0x266d),\n    // ♮ accidental natural\n    natural: String.fromCharCode(0x266e),\n    // △ major seventh\n    triangle: String.fromCharCode(0x25b3),\n    // ø half-diminished\n    'o-with-slash': String.fromCharCode(0x00f8),\n    // ° diminished\n    degrees: String.fromCharCode(0x00b0),\n    // ○ diminished\n    circle: String.fromCharCode(0x25cb),\n};\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\nTables.validTypes = validNoteTypes;\n// Default time signature.\nTables.TIME4_4 = {\n    num_beats: 4,\n    beat_value: 4,\n    resolution: RESOLUTION,\n};\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\n// The sanitizeDuration() bit may need to be removed by 0xfe.\nconst durationCodes = {\n    '1/2': {\n        common: {\n            code_head: '',\n            stem: false,\n            flag: false,\n            stem_up_extension: -Tables.STEM_HEIGHT,\n            stem_down_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Breve rest\n            code_head: 'restDoubleWhole',\n            rest: true,\n            position: 'B/5',\n            dot_shiftY: 0.5,\n        },\n        s: {\n            // Breve note slash -\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    1: {\n        common: {\n            code_head: '',\n            stem: false,\n            flag: false,\n            stem_up_extension: -Tables.STEM_HEIGHT,\n            stem_down_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_up_extension: -Tables.STEM_HEIGHT,\n            tabnote_stem_down_extension: -Tables.STEM_HEIGHT,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Whole rest\n            code_head: 'restWhole',\n            ledger_code_head: 'restWholeLegerLine',\n            rest: true,\n            position: 'D/5',\n            dot_shiftY: 0.5,\n        },\n        s: {\n            // Whole note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    2: {\n        common: {\n            code_head: '',\n            stem: true,\n            flag: false,\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Half rest\n            code_head: 'restHalf',\n            ledger_code_head: 'restHalfLegerLine',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n        },\n        s: {\n            // Half note slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    4: {\n        common: {\n            code_head: '',\n            stem: true,\n            flag: false,\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Quarter rest\n            code_head: 'restQuarter',\n            stem: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.5,\n            line_below: 1.5,\n        },\n        s: {\n            // Quarter slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    8: {\n        common: {\n            code_head: '',\n            stem: true,\n            flag: true,\n            beam_count: 1,\n            stem_beam_extension: 0,\n            code_flag_upstem: 'flag8thUp',\n            code_flag_downstem: 'flag8thDown',\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Eighth rest\n            code_head: 'rest8th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 1.0,\n        },\n        s: {\n            // Eighth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    16: {\n        common: {\n            code_head: '',\n            beam_count: 2,\n            stem_beam_extension: 0,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag16thUp',\n            code_flag_downstem: 'flag16thDown',\n            stem_up_extension: 0,\n            stem_down_extension: 0,\n            tabnote_stem_up_extension: 0,\n            tabnote_stem_down_extension: 0,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Sixteenth rest\n            code_head: 'rest16th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -0.5,\n            line_above: 1.0,\n            line_below: 2.0,\n        },\n        s: {\n            // Sixteenth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    32: {\n        common: {\n            code_head: '',\n            beam_count: 3,\n            stem_beam_extension: 7.5,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag32ndUp',\n            code_flag_downstem: 'flag32ndDown',\n            stem_up_extension: 9,\n            stem_down_extension: 9,\n            tabnote_stem_up_extension: 9,\n            tabnote_stem_down_extension: 9,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Thirty-second rest\n            code_head: 'rest32nd',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 2.0,\n        },\n        s: {\n            // Thirty-second slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    64: {\n        common: {\n            code_head: '',\n            beam_count: 4,\n            stem_beam_extension: 15,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag64thUp',\n            code_flag_downstem: 'flag64thDown',\n            stem_up_extension: 13,\n            stem_down_extension: 13,\n            tabnote_stem_up_extension: 13,\n            tabnote_stem_down_extension: 13,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Sixty-fourth rest\n            code_head: 'rest64th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -1.5,\n            line_above: 2.0,\n            line_below: 3.0,\n        },\n        s: {\n            // Sixty-fourth slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n    128: {\n        common: {\n            code_head: '',\n            beam_count: 5,\n            stem_beam_extension: 22.5,\n            stem: true,\n            flag: true,\n            code_flag_upstem: 'flag128thUp',\n            code_flag_downstem: 'flag128thDown',\n            stem_up_extension: 22,\n            stem_down_extension: 22,\n            tabnote_stem_up_extension: 22,\n            tabnote_stem_down_extension: 22,\n            dot_shiftY: 0,\n            line_above: 0,\n            line_below: 0,\n        },\n        r: {\n            // Hundred-twenty-eight rest\n            code_head: 'rest128th',\n            stem: false,\n            flag: false,\n            rest: true,\n            position: 'B/4',\n            dot_shiftY: -2.5,\n            line_above: 3.0,\n            line_below: 3.0,\n        },\n        s: {\n            // Hundred-twenty-eight slash\n            // Drawn with canvas primitives\n            getWidth: () => Tables.SLASH_NOTEHEAD_WIDTH,\n            position: 'B/4',\n        },\n    },\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var OutlineCode;\n(function (OutlineCode) {\n    OutlineCode[OutlineCode[\"MOVE\"] = 0] = \"MOVE\";\n    OutlineCode[OutlineCode[\"LINE\"] = 1] = \"LINE\";\n    OutlineCode[OutlineCode[\"QUADRATIC\"] = 2] = \"QUADRATIC\";\n    OutlineCode[OutlineCode[\"BEZIER\"] = 3] = \"BEZIER\";\n})(OutlineCode || (OutlineCode = {}));\nclass GlyphCacheEntry {\n    constructor(fontStack, code, category) {\n        this.point = -1;\n        this.metrics = Glyph.loadMetrics(fontStack, code, category);\n        this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.metrics.scale, this.metrics.x_shift, this.metrics.y_shift);\n        if (category) {\n            this.point = Glyph.lookupFontMetric(this.metrics.font, category, code, 'point', -1);\n        }\n    }\n}\nclass GlyphCache {\n    constructor() {\n        this.cache = new Map();\n    }\n    lookup(code, category) {\n        let entries = this.cache.get(Glyph.CURRENT_CACHE_KEY);\n        if (entries === undefined) {\n            entries = {};\n            this.cache.set(Glyph.CURRENT_CACHE_KEY, entries);\n        }\n        const key = category ? `${code}%${category}` : code;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = new GlyphCacheEntry(Glyph.MUSIC_FONT_STACK, code, category);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n}\nclass GlyphOutline {\n    constructor(outline, originX, originY, scale) {\n        this.outline = outline;\n        this.originX = originX;\n        this.originY = originY;\n        this.scale = scale;\n        this.i = 0;\n        this.precision = 1;\n        // Automatically assign private properties: this.outline, this.originX, this.originY, and this.scale.\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n    }\n    done() {\n        return this.i >= this.outline.length;\n    }\n    next() {\n        return Math.round((this.outline[this.i++] * this.precision) / this.precision);\n    }\n    nextX() {\n        return Math.round((this.originX + this.outline[this.i++] * this.scale) * this.precision) / this.precision;\n    }\n    nextY() {\n        return Math.round((this.originY - this.outline[this.i++] * this.scale) * this.precision) / this.precision;\n    }\n    static parse(str) {\n        const result = [];\n        const parts = str.split(' ');\n        let i = 0;\n        while (i < parts.length) {\n            switch (parts[i++]) {\n                case 'm':\n                    result.push(OutlineCode.MOVE, parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'l':\n                    result.push(OutlineCode.LINE, parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'q':\n                    result.push(OutlineCode.QUADRATIC, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n                case 'b':\n                    result.push(OutlineCode.BEZIER, parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]), parseInt(parts[i++]));\n                    break;\n            }\n        }\n        return result;\n    }\n}\nexport class Glyph extends Element {\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Glyph;\n    }\n    /**\n     * Pass a key of the form `glyphs.{category}.{code}.{key}` to Font.lookupMetric(). If the initial lookup fails,\n     * try again with the path `glyphs.{category}.{key}`. If the second lookup fails, return the defaultValue.\n     *\n     * @param font\n     * @param category any metric path under 'glyphs', so 'stem.up' could resolve to glyphs.stem.up.shiftX, glyphs.stem.up.shiftY, etc.\n     * @param code\n     * @param key\n     * @param defaultValue\n     */\n    static lookupFontMetric(font, category, code, key, defaultValue) {\n        let value = font.lookupMetric(`glyphs.${category}.${code}.${key}`, undefined);\n        if (value === undefined) {\n            // The first lookup failed, so we omit .${code} and try again (with a defaultValue this time).\n            value = font.lookupMetric(`glyphs.${category}.${key}`, defaultValue);\n        }\n        return value;\n    }\n    static lookupGlyph(fontStack, code) {\n        defined(fontStack, 'BadFontStack', 'Font stack is misconfigured');\n        let glyph;\n        let font;\n        for (let i = 0; i < fontStack.length; i++) {\n            font = fontStack[i];\n            glyph = font.getGlyphs()[code];\n            if (glyph)\n                return { glyph, font };\n        }\n        throw new RuntimeError('BadGlyph', `Glyph ${code} does not exist in font.`);\n    }\n    static loadMetrics(fontStack, code, category) {\n        const { glyph, font } = Glyph.lookupGlyph(fontStack, code);\n        if (!glyph.o)\n            throw new RuntimeError('BadGlyph', `Glyph ${code} has no outline defined.`);\n        let x_shift = 0;\n        let y_shift = 0;\n        let scale = 1;\n        if (category && font) {\n            x_shift = Glyph.lookupFontMetric(font, category, code, 'shiftX', 0);\n            y_shift = Glyph.lookupFontMetric(font, category, code, 'shiftY', 0);\n            scale = Glyph.lookupFontMetric(font, category, code, 'scale', 1);\n        }\n        const x_min = glyph.x_min;\n        const x_max = glyph.x_max;\n        const ha = glyph.ha;\n        if (!glyph.cached_outline) {\n            glyph.cached_outline = GlyphOutline.parse(glyph.o);\n        }\n        return {\n            x_min,\n            x_max,\n            x_shift,\n            y_shift,\n            scale,\n            ha,\n            outline: glyph.cached_outline,\n            font,\n            width: x_max - x_min,\n            height: ha,\n        };\n    }\n    /**\n     * Renders glyphs from the default font stack.\n     *\n     * @param ctx Canvas or SVG context\n     * @param x_pos x coordinate\n     * @param y_pos y coordinate\n     * @param point the point size of the font\n     * @param code the glyph code in font.getGlyphs()\n     * @param options\n     * @returns\n     */\n    static renderGlyph(ctx, x_pos, y_pos, point, code, options) {\n        var _a;\n        const data = Glyph.cache.lookup(code, options === null || options === void 0 ? void 0 : options.category);\n        const metrics = data.metrics;\n        if (data.point != -1) {\n            point = data.point;\n        }\n        const customScale = (_a = options === null || options === void 0 ? void 0 : options.scale) !== null && _a !== void 0 ? _a : 1;\n        const scale = ((point * 72.0) / (metrics.font.getResolution() * 100.0)) * metrics.scale * customScale;\n        Glyph.renderOutline(ctx, metrics.outline, scale, x_pos + metrics.x_shift * customScale, y_pos + metrics.y_shift * customScale);\n        return metrics;\n    }\n    static renderOutline(ctx, outline, scale, x_pos, y_pos) {\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n        ctx.beginPath();\n        let x, y;\n        while (!go.done()) {\n            switch (go.next()) {\n                case OutlineCode.MOVE:\n                    ctx.moveTo(go.nextX(), go.nextY());\n                    break;\n                case OutlineCode.LINE:\n                    ctx.lineTo(go.nextX(), go.nextY());\n                    break;\n                case OutlineCode.QUADRATIC:\n                    x = go.nextX();\n                    y = go.nextY();\n                    ctx.quadraticCurveTo(go.nextX(), go.nextY(), x, y);\n                    break;\n                case OutlineCode.BEZIER:\n                    x = go.nextX();\n                    y = go.nextY();\n                    ctx.bezierCurveTo(go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n                    break;\n            }\n        }\n        ctx.fill();\n    }\n    static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {\n        const go = new GlyphOutline(outline, x_pos, y_pos, scale);\n        const bboxComp = new BoundingBoxComputation();\n        // (penX, penY) hold the pen position: the start of each stroke.\n        let penX = x_pos;\n        let penY = y_pos;\n        let x, y;\n        while (!go.done()) {\n            switch (go.next()) {\n                case OutlineCode.MOVE:\n                    // Note that we don't add any points to the bounding box until a srroke is actually drawn.\n                    penX = go.nextX();\n                    penY = go.nextY();\n                    break;\n                case OutlineCode.LINE:\n                    bboxComp.addPoint(penX, penY);\n                    penX = go.nextX();\n                    penY = go.nextY();\n                    bboxComp.addPoint(penX, penY);\n                    break;\n                case OutlineCode.QUADRATIC:\n                    x = go.nextX();\n                    y = go.nextY();\n                    bboxComp.addQuadraticCurve(penX, penY, go.nextX(), go.nextY(), x, y);\n                    penX = x;\n                    penY = y;\n                    break;\n                case OutlineCode.BEZIER:\n                    x = go.nextX();\n                    y = go.nextY();\n                    bboxComp.addBezierCurve(penX, penY, go.nextX(), go.nextY(), go.nextX(), go.nextY(), x, y);\n                    penX = x;\n                    penY = y;\n                    break;\n            }\n        }\n        return new BoundingBox(bboxComp.getX1(), bboxComp.getY1(), bboxComp.width(), bboxComp.height());\n    }\n    static getWidth(code, point, category) {\n        const data = Glyph.cache.lookup(code, category);\n        if (data.point != -1) {\n            point = data.point;\n        }\n        const scale = (point * 72) / (data.metrics.font.getResolution() * 100);\n        return data.bbox.getW() * scale;\n    }\n    /**\n     * @param code\n     * @param point\n     * @param options\n     */\n    constructor(code, point, options) {\n        super();\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.bbox = new BoundingBox(0, 0, 0, 0);\n        this.topGlyphs = [];\n        this.botGlyphs = [];\n        this.options = {};\n        this.scale = 1;\n        this.code = code;\n        this.point = point;\n        this.originShift = { x: 0, y: 0 };\n        this.x_shift = 0;\n        this.y_shift = 0;\n        if (options) {\n            this.setOptions(options);\n        }\n        else {\n            this.reset();\n        }\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n    getCode() {\n        return this.code;\n    }\n    // eslint-disable-next-line\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.reset();\n    }\n    setPoint(point) {\n        this.point = point;\n        return this;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    setXShift(x_shift) {\n        this.x_shift = x_shift;\n        return this;\n    }\n    getYshift() {\n        return this.y_shift;\n    }\n    setYShift(y_shift) {\n        this.y_shift = y_shift;\n        return this;\n    }\n    reset() {\n        const data = Glyph.cache.lookup(this.code, this.options.category);\n        this.metrics = data.metrics;\n        // Override point from metrics file\n        if (data.point != -1) {\n            this.point = data.point;\n        }\n        this.scale = (this.point * 72) / (this.metrics.font.getResolution() * 100);\n        this.bbox = new BoundingBox(data.bbox.getX() * this.scale, data.bbox.getY() * this.scale, data.bbox.getW() * this.scale, data.bbox.getH() * this.scale);\n    }\n    checkMetrics() {\n        return defined(this.metrics, 'BadGlyph', `Glyph ${this.code} is not initialized.`);\n    }\n    getMetrics() {\n        const metrics = this.checkMetrics();\n        const metricsScale = metrics.scale;\n        return {\n            x_min: metrics.x_min * this.scale * metricsScale,\n            x_max: metrics.x_max * this.scale * metricsScale,\n            width: this.bbox.getW(),\n            height: this.bbox.getH(),\n            scale: this.scale * metricsScale,\n            x_shift: metrics.x_shift,\n            y_shift: metrics.y_shift,\n            outline: metrics.outline,\n            font: metrics.font,\n            ha: metrics.ha,\n        };\n    }\n    setOriginX(x) {\n        const { bbox } = this;\n        const originX = Math.abs(bbox.getX() / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.originShift.x = -xShift;\n    }\n    setOriginY(y) {\n        const { bbox } = this;\n        const originY = Math.abs(bbox.getY() / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.originShift.y = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n    render(ctx, x, y) {\n        const metrics = this.checkMetrics();\n        const outline = metrics.outline;\n        const scale = this.scale * metrics.scale;\n        this.setRendered();\n        this.applyStyle(ctx);\n        const xPos = x + this.originShift.x + metrics.x_shift;\n        const yPos = y + this.originShift.y + metrics.y_shift;\n        Glyph.renderOutline(ctx, outline, scale, xPos, yPos);\n        this.restoreStyle(ctx);\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    renderToStave(x) {\n        const context = this.checkContext();\n        const metrics = this.checkMetrics();\n        const stave = this.checkStave();\n        const outline = metrics.outline;\n        const scale = this.scale * metrics.scale;\n        this.setRendered();\n        this.applyStyle();\n        const xPos = x + this.x_shift + metrics.x_shift;\n        const yPos = stave.getYForGlyphs() + this.y_shift + metrics.y_shift;\n        Glyph.renderOutline(context, outline, scale, xPos, yPos);\n        this.restoreStyle();\n    }\n}\nGlyph.cache = new GlyphCache();\n// The current cache key for GlyphCache above.\n// Computed when Flow.setMusicFont(...) is called.\n// It is set to a comma separated list of font names.\nGlyph.CURRENT_CACHE_KEY = '';\n// Used by the GlyphCache above.\n// Set when Flow.setMusicFont(...) is called.\nGlyph.MUSIC_FONT_STACK = [];\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\n// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('Vex.Flow.Modifier', args); }\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n    /**\n     * Modifiers category string. Every modifier has a different category.\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\n     */\n    static get CATEGORY() {\n        return Category.Modifier;\n    }\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    constructor() {\n        super();\n        this.width = 0;\n        // The `text_line` is reserved space above or below a stave.\n        this.text_line = 0;\n        this.position = Modifier.Position.LEFT;\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.spacingFromNextModifier = 0;\n    }\n    /** Called when position changes. */\n    reset() {\n        // DO NOTHING.\n    }\n    /** Get modifier widths. */\n    getWidth() {\n        return this.width;\n    }\n    /** Set modifier widths. */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    /**\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n     * Also verifies that the index is valid.\n     */\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    /**\n     * Set attached note.\n     * @param note (`StaveNote`, `TabNote`, etc.)\n     */\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    /** Get note index, which is a specific note in a chord. */\n    getIndex() {\n        return this.index;\n    }\n    /** Check and get note index, which is a specific note in a chord. */\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    /** Set note index, which is a specific note in a chord. */\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n    }\n    /** Every modifier must be part of a `ModifierContext`. */\n    setModifierContext(c) {\n        this.modifierContext = c;\n        return this;\n    }\n    /** Get position. */\n    getPosition() {\n        return this.position;\n    }\n    /**\n     * Set position.\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n     */\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    /** Set the `text_line` for the modifier. */\n    setTextLine(line) {\n        this.text_line = line;\n        return this;\n    }\n    /** Shift modifier down `y` pixels. Negative values shift up. */\n    setYShift(y) {\n        this.y_shift = y;\n        return this;\n    }\n    /** Set spacing from next modifier. */\n    setSpacingFromNextModifier(x) {\n        this.spacingFromNextModifier = x;\n    }\n    /** Get spacing from next modifier. */\n    getSpacingFromNextModifier() {\n        return this.spacingFromNextModifier;\n    }\n    /**\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\n     * shift reverse.\n     */\n    setXShift(x) {\n        this.x_shift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.x_shift -= x;\n        }\n        else {\n            this.x_shift += x;\n        }\n        return this;\n    }\n    /** Get shift modifier `x` */\n    getXShift() {\n        return this.x_shift;\n    }\n    /** Render the modifier onto the canvas. */\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n    alignSubNotesWithNote(subNotes, note) {\n        // Shift over the tick contexts of each note\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n        });\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { RuntimeError } from './util';\n/** Music implements some standard music theory routines. */\nexport class Music {\n    /** Number of an canonical notes (12). */\n    static get NUM_TONES() {\n        return this.canonical_notes.length;\n    }\n    /** Names of root notes ('c', 'd',...) */\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    /** Values of the root notes.*/\n    static get root_values() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    /** Indices of the root notes.*/\n    static get root_indices() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\n    static get canonical_notes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n    static get diatonic_intervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    /** NoteAccidental associated to diatonic intervals. */\n    static get diatonic_accidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    /** Semitones shift associated to intervals .*/\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    /** Semitones shifts associated with scales. */\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    /** Scales associated with m (minor) and M (major). */\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    /** Accidentals abbreviations. */\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    /** Note values. */\n    static get noteValues() {\n        return {\n            c: { root_index: 0, int_val: 0 },\n            cn: { root_index: 0, int_val: 0 },\n            'c#': { root_index: 0, int_val: 1 },\n            'c##': { root_index: 0, int_val: 2 },\n            cb: { root_index: 0, int_val: 11 },\n            cbb: { root_index: 0, int_val: 10 },\n            d: { root_index: 1, int_val: 2 },\n            dn: { root_index: 1, int_val: 2 },\n            'd#': { root_index: 1, int_val: 3 },\n            'd##': { root_index: 1, int_val: 4 },\n            db: { root_index: 1, int_val: 1 },\n            dbb: { root_index: 1, int_val: 0 },\n            e: { root_index: 2, int_val: 4 },\n            en: { root_index: 2, int_val: 4 },\n            'e#': { root_index: 2, int_val: 5 },\n            'e##': { root_index: 2, int_val: 6 },\n            eb: { root_index: 2, int_val: 3 },\n            ebb: { root_index: 2, int_val: 2 },\n            f: { root_index: 3, int_val: 5 },\n            fn: { root_index: 3, int_val: 5 },\n            'f#': { root_index: 3, int_val: 6 },\n            'f##': { root_index: 3, int_val: 7 },\n            fb: { root_index: 3, int_val: 4 },\n            fbb: { root_index: 3, int_val: 3 },\n            g: { root_index: 4, int_val: 7 },\n            gn: { root_index: 4, int_val: 7 },\n            'g#': { root_index: 4, int_val: 8 },\n            'g##': { root_index: 4, int_val: 9 },\n            gb: { root_index: 4, int_val: 6 },\n            gbb: { root_index: 4, int_val: 5 },\n            a: { root_index: 5, int_val: 9 },\n            an: { root_index: 5, int_val: 9 },\n            'a#': { root_index: 5, int_val: 10 },\n            'a##': { root_index: 5, int_val: 11 },\n            ab: { root_index: 5, int_val: 8 },\n            abb: { root_index: 5, int_val: 7 },\n            b: { root_index: 6, int_val: 11 },\n            bn: { root_index: 6, int_val: 11 },\n            'b#': { root_index: 6, int_val: 0 },\n            'b##': { root_index: 6, int_val: 1 },\n            bb: { root_index: 6, int_val: 10 },\n            bbb: { root_index: 6, int_val: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonical_notes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonic_intervals.length;\n    }\n    /** Return root and accidental associated to a note. */\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    /** Return root, accidental and type associated to a key. */\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            // Unspecified type implies major\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    /** Note value associated to a note name. */\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.int_val;\n    }\n    /** Interval value associated to an interval name. */\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    /** Canonical note name associated to a value. */\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonical_notes[noteValue];\n    }\n    /** Interval name associated to a value. */\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonic_intervals[intervalValue];\n    }\n    /**\n     * Given a note, interval, and interval direction, produce the relative note.\n     */\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    /**\n     * Given a root and note value, produce the relative note name.\n     */\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            // Possibly wrap around. (Add +1 for modulo operator)\n            const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverse_interval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverse_interval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    /**\n     * Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    /**\n     * Return the interval of a note, given a diatonic scale.\n     * e.g., given the scale C, and the note E, returns M3.\n     */\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    /**\n     * Create a scale map that represents the pitch state for a\n     * `keySignature`. For example, passing a `G` to `keySignature` would\n     * return a scale map with every note naturalized except for `F` which\n     * has an `F#` state.\n     */\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.root_indices[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\nimport { Fraction } from './fraction';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Music } from './music';\nimport { Tables } from './tables';\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('Vex.Flow.Accidental', args);\n}\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\nexport class Accidental extends Modifier {\n    /** Accidentals category string. */\n    static get CATEGORY() {\n        return Category.Accidental;\n    }\n    /** Arrange accidentals inside a ModifierContext. */\n    static format(accidentals, state) {\n        // If there are no accidentals, no need to format their positions.\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const musicFont = Tables.currentMusicFont();\n        const noteheadAccidentalPadding = musicFont.lookupMetric('accidental.noteheadAccidentalPadding');\n        const leftShift = state.left_shift + noteheadAccidentalPadding;\n        const accidentalSpacing = musicFont.lookupMetric('accidental.accidentalSpacing');\n        const additionalPadding = musicFont.lookupMetric('accidental.leftPadding'); // padding to the left of all accidentals\n        const accList = [];\n        let prevNote = undefined;\n        let shiftL = 0;\n        // First determine the accidentals' Y positions from the note.keys\n        for (let i = 0; i < accidentals.length; ++i) {\n            const acc = accidentals[i];\n            const note = acc.getNote();\n            const stave = note.getStave();\n            const index = acc.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), shiftL);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });\n            }\n            else {\n                accList.push({ line: props.line, shift: shiftL, acc });\n            }\n        }\n        // Sort accidentals by line number.\n        accList.sort((a, b) => b.line - a.line);\n        // FIXME: Confusing name. Each object in this array has a property called `line`.\n        // So if this is a list of lines, you end up with: `line.line` which is very awkward.\n        const lineList = [];\n        // amount by which all accidentals must be shifted right or left for\n        // stem flipping, notehead shifting concerns.\n        let accShift = 0;\n        let previousLine = undefined;\n        // Create an array of unique line numbers (lineList) from accList\n        for (let i = 0; i < accList.length; i++) {\n            const acc = accList[i];\n            // if this is the first line, or a new line, add a lineList\n            if (previousLine === undefined || previousLine !== acc.line) {\n                lineList.push({\n                    line: acc.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                });\n            }\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\n            // clearance instead of 2.5 lines for b or bb.\n            // FIXME: Naming could use work. acc.acc is very awkward\n            if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {\n                lineList[lineList.length - 1].flatLine = false;\n            }\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n            if (acc.acc.type !== '##') {\n                lineList[lineList.length - 1].dblSharpLine = false;\n            }\n            // Track how many accidentals are on this line:\n            lineList[lineList.length - 1].numAcc++;\n            // Track the total x_offset needed for this line which will be needed\n            // for formatting lines w/ multiple accidentals:\n            // width = accidental width + universal spacing between accidentals\n            lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;\n            // if this accShift is larger, use it to keep first column accidentals in the same line\n            accShift = acc.shift > accShift ? acc.shift : accShift;\n            previousLine = acc.line;\n        }\n        // ### Place Accidentals in Columns\n        //\n        // Default to a classic triangular layout (middle accidental farthest left),\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\n        // Elaine Gould's _Behind Bars_.\n        //\n        // Additionally, this implements different vertical collision rules for\n        // flats (only need 2.5 lines clearance below) and double sharps (only\n        // need 2.5 lines of clearance above or below).\n        //\n        // Classic layouts and exception patterns are found in the 'tables.js'\n        // in 'Tables.accidentalColumnsTable'\n        //\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n        // using as few columns as possible for the verticle structure.\n        //\n        // TODO (?): Allow column to be specified for an accidental at run-time?\n        let totalColumns = 0;\n        // establish the boundaries for a group of notes with clashing accidentals:\n        for (let i = 0; i < lineList.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {\n                // if this note conflicts with the next:\n                if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {\n                    // include the next note in the group:\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            // Gets an a line from the `lineList`, relative to the current group\n            const getGroupLine = (index) => lineList[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n            // Set columns for the lines in this group:\n            const groupLength = groupEnd - groupStart + 1;\n            // Set the accidental column for each line of the group\n            let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'second_on_bottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spaced_out_tetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spaced_out_pentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'very_spaced_out_pentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spaced_out_hexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'very_spaced_out_hexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            // If the group contains seven members or more, use ascending parallel lines\n            // of accidentals, using as few columns as possible while avoiding collisions.\n            if (groupLength >= 7) {\n                // First, determine how many columns to use:\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < lineList.length; line++) {\n                        if (this.checkCollision(lineList[line], lineList[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                // Then, assign a column to each line of accidentals\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    lineList[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                // If the group contains fewer than seven members, use the layouts from\n                // the Tables.accidentalColumnsTable (See: tables.ts).\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    lineList[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            // Increment i to the last note that was set, so that if a lower set of notes\n            // does not conflict at all with this group, it can have its own classic shape.\n            i = groupEnd;\n        }\n        // ### Convert Columns to x_offsets\n        //\n        // This keeps columns aligned, even if they have different accidentals within them\n        // which sometimes results in a larger x_offset than is an accidental might need\n        // to preserve the symmetry of the accidental shape.\n        //\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n        // music with complex chord clusters.\n        //\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n        // parallel columns.\n        // track each column's max width, which will be used as initial shift of later columns:\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = accShift + leftShift;\n        columnXOffsets[0] = accShift + leftShift;\n        // Fill columnWidths with widest needed x-space;\n        // this is what keeps the columns parallel.\n        lineList.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            // this column's offset = this column's width + previous column's offset\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        // Set the xShift for each accidental according to column offsets:\n        let accCount = 0;\n        lineList.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            // handle all of the accidentals on a given line:\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth;\n                accList[accCount].acc.setXShift(xShift);\n                // keep track of the width of accidentals we've added so far, so that when\n                // we loop, we add space for them.\n                lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        // update the overall layout with the full width of the accidental shapes:\n        state.left_shift += totalShift + additionalPadding;\n    }\n    /** Helper function to determine whether two lines of accidentals collide vertically */\n    static checkCollision(line1, line2) {\n        let clearance = line2.line - line1.line;\n        let clearanceRequired = 3;\n        // But less clearance is required for certain accidentals: b, bb and ##.\n        if (clearance > 0) {\n            // then line 2 is on top\n            clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n            if (line1.dblSharpLine)\n                clearance -= 0.5;\n        }\n        else {\n            // line 1 is on top\n            clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n            if (line2.dblSharpLine)\n                clearance -= 0.5;\n        }\n        const collision = Math.abs(clearance) < clearanceRequired;\n        L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);\n        return collision;\n    }\n    /**\n     * Use this method to automatically apply accidentals to a set of `voices`.\n     * The accidentals will be remembered between all the voices provided.\n     * Optionally, you can also provide an initial `keySignature`.\n     */\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        // Sort the tickables in each voice by their tick position in the voice.\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        // Default key signature is C major.\n        if (!keySignature)\n            keySignature = 'C';\n        // Get the scale map, which represents the current state of each pitch.\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            // Array to store all pitches that modified accidental states\n            // at this tick position\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                // Only StaveNote implements .addModifier(), which is used below.\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                // Go through each key and determine if an accidental should be applied.\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    // Force a natural for every key without an accidental\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    // Determine if the current pitch has the same accidental\n                    // as the scale state\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    // Determine if an identical pitch in the chord already\n                    // modified the accidental state\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    // Remove accidentals\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    // Add the accidental to the StaveNote\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        // Modify the scale map so that the root pitch has an\n                        // updated state\n                        scaleMap[key.root + octave] = pitch;\n                        // Create the accidental\n                        const accidental = new Accidental(accidentalString);\n                        // Attach the accidental to the StaveNote\n                        staveNote.addModifier(accidental, keyIndex);\n                        // Add the pitch to list of pitches that modified accidentals\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                // process grace notes\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    /**\n     * Create accidental.\n     * @param type value from `Vex.Flow.accidentalCodes.accidentals` table in `tables.ts`.\n     * For example: `#`, `##`, `b`, `n`, etc.\n     */\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.render_options = {\n            // Font size for glyphs\n            font_scale: 38,\n            // Padding between accidental and parentheses on each side\n            parenLeftPadding: 2,\n            parenRightPadding: 2,\n        };\n        this.accidental = Tables.accidentalCodes(this.type);\n        defined(this.accidental, 'ArgumentError', `Unknown accidental type: ${type}`);\n        // Cautionary accidentals have parentheses around them\n        this.cautionary = false;\n        this.reset();\n    }\n    reset() {\n        const fontScale = this.render_options.font_scale;\n        this.glyph = new Glyph(this.accidental.code, fontScale);\n        this.glyph.setOriginX(1.0);\n        if (this.cautionary) {\n            this.parenLeft = new Glyph(Tables.accidentalCodes('{').code, fontScale);\n            this.parenRight = new Glyph(Tables.accidentalCodes('}').code, fontScale);\n            this.parenLeft.setOriginX(1.0);\n            this.parenRight.setOriginX(1.0);\n        }\n    }\n    /** Get width in pixels. */\n    getWidth() {\n        if (this.cautionary) {\n            const parenLeft = defined(this.parenLeft);\n            const parenRight = defined(this.parenRight);\n            const parenWidth = parenLeft.getMetrics().width +\n                parenRight.getMetrics().width +\n                this.render_options.parenLeftPadding +\n                this.render_options.parenRightPadding;\n            return this.glyph.getMetrics().width + parenWidth;\n        }\n        else {\n            return this.glyph.getMetrics().width;\n        }\n    }\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        // Accidentals attached to grace notes are rendered smaller.\n        if (isGraceNote(note)) {\n            this.render_options.font_scale = 25;\n            this.reset();\n        }\n        return this;\n    }\n    /** If called, draws parenthesis around accidental. */\n    setAsCautionary() {\n        this.cautionary = true;\n        this.render_options.font_scale = 28;\n        this.reset();\n        return this;\n    }\n    /** Render accidental onto canvas. */\n    draw() {\n        const { type, position, index, cautionary, x_shift, y_shift, glyph, render_options: { parenLeftPadding, parenRightPadding }, } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // Figure out the start `x` and `y` coordinates for note and index.\n        const start = note.getModifierStartXY(position, index);\n        let accX = start.x + x_shift;\n        const accY = start.y + y_shift;\n        L('Rendering: ', type, accX, accY);\n        if (!cautionary) {\n            glyph.render(ctx, accX, accY);\n        }\n        else {\n            const parenLeft = defined(this.parenLeft);\n            const parenRight = defined(this.parenRight);\n            // Render the accidental in parentheses.\n            parenRight.render(ctx, accX, accY);\n            accX -= parenRight.getMetrics().width;\n            accX -= parenRightPadding;\n            accX -= this.accidental.parenRightPaddingAdjustment;\n            glyph.render(ctx, accX, accY);\n            accX -= glyph.getMetrics().width;\n            accX -= parenLeftPadding;\n            parenLeft.render(ctx, accX, accY);\n        }\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`. */\nAccidental.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('Vex.Flow.Stem', args);\n}\nexport class Stem extends Element {\n    static get CATEGORY() {\n        return Category.Stem;\n    }\n    // Stem directions\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    // Theme\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    constructor(options) {\n        super();\n        this.stem_up_y_offset = 0;\n        this.stem_down_y_offset = 0;\n        this.stem_up_y_base_offset = 0;\n        this.stem_down_y_base_offset = 0;\n        // Default notehead x bounds\n        this.x_begin = (options === null || options === void 0 ? void 0 : options.x_begin) || 0;\n        this.x_end = (options === null || options === void 0 ? void 0 : options.x_end) || 0;\n        // Y bounds for top/bottom most notehead\n        this.y_top = (options === null || options === void 0 ? void 0 : options.y_top) || 0;\n        this.y_bottom = (options === null || options === void 0 ? void 0 : options.y_bottom) || 0;\n        // Stem top extension\n        this.stem_extension = (options === null || options === void 0 ? void 0 : options.stem_extension) || 0;\n        // Direction of the stem\n        this.stem_direction = (options === null || options === void 0 ? void 0 : options.stem_direction) || 0;\n        // Flag to override all draw calls\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (options === null || options === void 0 ? void 0 : options.stemletHeight) || 0;\n        // Use to adjust the rendered height without affecting\n        // the results of `.getExtents()`\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    setOptions(options) {\n        // Changing where the stem meets the head\n        this.stem_up_y_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_offset) || 0;\n        this.stem_down_y_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_offset) || 0;\n        this.stem_up_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_up_y_base_offset) || 0;\n        this.stem_down_y_base_offset = (options === null || options === void 0 ? void 0 : options.stem_down_y_base_offset) || 0;\n    }\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds(x_begin, x_end) {\n        this.x_begin = x_begin;\n        this.x_end = x_end;\n        return this;\n    }\n    // Set the direction of the stem in relation to the noteheads\n    setDirection(direction) {\n        this.stem_direction = direction;\n    }\n    // Set the extension for the stem, generally for flags or beams\n    setExtension(ext) {\n        this.stem_extension = ext;\n    }\n    getExtension() {\n        return this.stem_extension;\n    }\n    // The the y bounds for the top and bottom noteheads\n    setYBounds(y_top, y_bottom) {\n        this.y_top = y_top;\n        this.y_bottom = y_bottom;\n    }\n    // Gets the entire height for the stem\n    getHeight() {\n        const y_offset = this.stem_direction === Stem.UP ? this.stem_up_y_offset : this.stem_down_y_offset;\n        const unsigned_height = this.y_bottom - this.y_top + (Stem.HEIGHT - y_offset + this.stem_extension); // parentheses just for grouping.\n        return unsigned_height * this.stem_direction;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents() {\n        const isStemUp = this.stem_direction === Stem.UP;\n        const ys = [this.y_top, this.y_bottom];\n        const stemHeight = Stem.HEIGHT + this.stem_extension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Tables.currentMusicFont().lookupMetric('stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    // Render the stem onto the canvas\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stem_x;\n        let stem_y;\n        const stem_direction = this.stem_direction;\n        let y_base_offset = 0;\n        if (stem_direction === Stem.DOWN) {\n            // Down stems are rendered to the left of the head.\n            stem_x = this.x_begin;\n            stem_y = this.y_top + this.stem_down_y_offset;\n            y_base_offset = this.stem_down_y_base_offset;\n        }\n        else {\n            // Up stems are rendered to the right of the head.\n            stem_x = this.x_end;\n            stem_y = this.y_bottom - this.stem_up_y_offset;\n            y_base_offset = this.stem_up_y_base_offset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);\n        // The offset from the stem's base which is required fo satisfy the stemlet height\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;\n        // Draw the stem\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('stem', this.getAttribute('id'), { pointerBBox: true });\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stem_x, stem_y - stemletYOffset + y_base_offset);\n        ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);\n        ctx.stroke();\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`. */\nStem.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font, FontStyle, FontWeight } from './font';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextFormatter.DEBUG)\n        log('Vex.Flow.TextFormatter', args);\n}\n/**\n * Text widths are stored in a cache, so we don't have to recompute widths\n * for the same font + string combination.\n *\n * The cache is first keyed by the font information. The key is of the form:\n *   `${family}-${size}-${weight}-${style}`\n * The second level key is the specific text to be measured.\n *\n * The stored value is the measured width in `em` units.\n *   textWidth == textWidthCache[cacheKey][textToMeasure]\n */\nconst textWidthCache = {};\nconst textHeightCache = {};\n/**\n * Applications may register additional fonts via `TextFormatter.registerInfo(info)`.\n * The metrics for those fonts will be made available to the application.\n */\nconst registry = {};\nexport class TextFormatter {\n    /**\n     * Return all registered font families.\n     */\n    static getFontFamilies() {\n        const registeredFonts = [];\n        for (const fontFamily in registry) {\n            const formatterInfo = registry[fontFamily];\n            registeredFonts.push(Object.assign({}, formatterInfo));\n        }\n        return registeredFonts;\n    }\n    /**\n     * Call `TextFormatter.registerInfo(info)` to register font information before using this method.\n     *\n     * This method creates a formatter for the font that most closely matches the requested font.\n     * We compare font family, bold, and italic attributes.\n     * This method will return a fallback formatter if there are no matches.\n     */\n    static create(requestedFont = {}) {\n        L('create: ', requestedFont);\n        if (!requestedFont.family) {\n            requestedFont.family = Font.SANS_SERIF;\n        }\n        // TODO: One potential (small) optimization is to cache the TextFormatter object\n        // returned for each font info. We would probably want to clear the cache if\n        // the registry is ever updated.\n        const candidates = [];\n        // The incoming font family is a string of comma-separated font family names.\n        // (e.g., `PetalumaScript, Arial, sans-serif`).\n        const requestedFamilies = requestedFont.family.split(/\\s*,\\s*/);\n        for (const requestedFamily of requestedFamilies) {\n            for (const fontFamily in registry) {\n                // Support cases where the registry contains 'Roboto Slab Medium',\n                // but the requestedFont.family is 'Roboto Slab'.\n                if (fontFamily.startsWith(requestedFamily)) {\n                    candidates.push(registry[fontFamily]);\n                }\n            }\n            if (candidates.length > 0) {\n                break;\n            }\n        }\n        let formatter;\n        if (candidates.length === 0) {\n            // No match, so return a fallback text formatter.\n            formatter = new TextFormatter(Object.values(registry)[0]);\n        }\n        else if (candidates.length === 1) {\n            formatter = new TextFormatter(candidates[0]);\n        }\n        else {\n            const bold = Font.isBold(requestedFont.weight);\n            const italic = Font.isItalic(requestedFont.style);\n            const perfectMatch = candidates.find((f) => f.bold === bold && f.italic === italic);\n            if (perfectMatch) {\n                formatter = new TextFormatter(perfectMatch);\n            }\n            else {\n                const partialMatch = candidates.find((f) => f.italic === italic || f.bold === bold);\n                if (partialMatch) {\n                    formatter = new TextFormatter(partialMatch);\n                }\n                else {\n                    formatter = new TextFormatter(candidates[0]);\n                }\n            }\n        }\n        const fontSize = requestedFont.size;\n        if (typeof fontSize !== 'undefined') {\n            const fontSizeInPt = Font.convertSizeToPointValue(fontSize);\n            formatter.setFontSize(fontSizeInPt);\n        }\n        return formatter;\n    }\n    /**\n     * @param fontFamily used as a key to the font registry.\n     * @returns the same info object that was passed in via `TextFormatter.registerInfo(info)`\n     */\n    static getInfo(fontFamily) {\n        return registry[fontFamily];\n    }\n    /**\n     * Apps may register their own fonts and metrics, and those metrics\n     * will be available to the app for formatting.\n     *\n     * Metrics can be generated from a font file using fontgen_text.js in the tools/fonts directory.\n     * @param info\n     * @param overwrite\n     */\n    static registerInfo(info, overwrite = false) {\n        L('registerInfo: ', info, overwrite);\n        const fontFamily = info.family;\n        const currFontInfo = registry[fontFamily];\n        if (currFontInfo === undefined || overwrite) {\n            registry[fontFamily] = info;\n        }\n    }\n    /**\n     * Use `TextFormatter.create(...)` to build an instance from information previously\n     * registered via `TextFormatter.registerInfo(info)`.\n     */\n    constructor(formatterInfo) {\n        /** Font family. */\n        this.family = '';\n        /** Specified in `pt` units. */\n        this.size = 14;\n        /** Font metrics are extracted at 1000 upem (units per em). */\n        this.resolution = 1000;\n        /**\n         * For text formatting, we do not require glyph outlines, but instead rely on glyph\n         * bounding box metrics such as:\n         * ```\n         * {\n         *    x_min: 48,\n         *    x_max: 235,\n         *    y_min: -17,\n         *    y_max: 734,\n         *    ha: 751,\n         *    leftSideBearing: 48,\n         *    advanceWidth: 286,\n         *  }\n         * ```\n         */\n        this.glyphs = {};\n        this.serifs = false;\n        this.monospaced = false;\n        this.italic = false;\n        this.bold = false;\n        this.superscriptOffset = 0;\n        this.subscriptOffset = 0;\n        this.maxSizeGlyph = '@';\n        // This is an internal key used to index the `textWidthCache`.\n        this.cacheKey = '';\n        this.updateParams(formatterInfo);\n    }\n    get localHeightCache() {\n        var _a;\n        if (textHeightCache[this.cacheKey] === undefined) {\n            textHeightCache[this.cacheKey] = {};\n        }\n        return (_a = textHeightCache[this.cacheKey]) !== null && _a !== void 0 ? _a : {};\n    }\n    updateParams(params) {\n        if (params.family)\n            this.family = params.family;\n        if (params.resolution)\n            this.resolution = params.resolution;\n        if (params.glyphs)\n            this.glyphs = params.glyphs;\n        if (params.serifs)\n            this.serifs = params.serifs;\n        if (params.monospaced)\n            this.monospaced = params.monospaced;\n        if (params.italic)\n            this.italic = params.italic;\n        if (params.bold)\n            this.bold = params.bold;\n        if (params.maxSizeGlyph)\n            this.maxSizeGlyph = params.maxSizeGlyph;\n        if (params.superscriptOffset)\n            this.superscriptOffset = params.superscriptOffset;\n        if (params.subscriptOffset)\n            this.subscriptOffset = params.subscriptOffset;\n        this.updateCacheKey();\n    }\n    /** Create a hash with the current font data, so we can cache computed widths. */\n    updateCacheKey() {\n        const family = this.family.replace(/\\s+/g, '_');\n        const size = this.size;\n        const weight = this.bold ? FontWeight.BOLD : FontWeight.NORMAL;\n        const style = this.italic ? FontStyle.ITALIC : FontStyle.NORMAL;\n        // Use the same key format as SVGContext.\n        this.cacheKey = `${family}%${size}%${weight}%${style}`;\n    }\n    /**\n     * The glyphs table is indexed by the character (e.g., 'C', '@').\n     * See: robotoslab_glyphs.ts & petalumascript_glyphs.ts.\n     */\n    getGlyphMetrics(character) {\n        if (this.glyphs[character]) {\n            return this.glyphs[character];\n        }\n        else {\n            return this.glyphs[this.maxSizeGlyph];\n        }\n    }\n    get maxHeight() {\n        const metrics = this.getGlyphMetrics(this.maxSizeGlyph);\n        return (metrics.ha / this.resolution) * this.fontSizeInPixels;\n    }\n    /**\n     * Retrieve the character's advanceWidth as a fraction of an `em` unit.\n     * For the space character ' ' as defined in the:\n     *   petalumascript_glyphs.ts: 250 advanceWidth in the 1000 unitsPerEm font returns 0.25.\n     *   robotoslab_glyphs.ts:     509 advanceWidth in the 2048 unitsPerEm font returns 0.2485.\n     */\n    getWidthForCharacterInEm(c) {\n        var _a;\n        const metrics = this.getGlyphMetrics(c);\n        if (!metrics) {\n            // An arbitrary number, close to the `em` width of the '#' and '5' characters in PetalumaScript.\n            return 0.65;\n        }\n        else {\n            const advanceWidth = (_a = metrics.advanceWidth) !== null && _a !== void 0 ? _a : 0;\n            return advanceWidth / this.resolution;\n        }\n    }\n    /**\n     * Retrieve the character's y bounds (ymin, ymax) and height.\n     */\n    getYForCharacterInPx(c) {\n        const metrics = this.getGlyphMetrics(c);\n        const rv = { yMin: 0, yMax: this.maxHeight, height: this.maxHeight };\n        if (!metrics) {\n            return rv;\n        }\n        else {\n            if (typeof metrics.y_min === 'number') {\n                rv.yMin = (metrics.y_min / this.resolution) * this.fontSizeInPixels;\n            }\n            if (typeof metrics.y_max === 'number') {\n                rv.yMax = (metrics.y_max / this.resolution) * this.fontSizeInPixels;\n            }\n            rv.height = rv.yMax - rv.yMin;\n            return rv;\n        }\n    }\n    getYForStringInPx(str) {\n        const entry = this.localHeightCache;\n        const extent = { yMin: 0, yMax: this.maxHeight, height: this.maxHeight };\n        const cache = entry[str];\n        if (cache !== undefined) {\n            return cache;\n        }\n        for (let i = 0; i < str.length; ++i) {\n            const curY = this.getYForCharacterInPx(str[i]);\n            extent.yMin = Math.min(extent.yMin, curY.yMin);\n            extent.yMax = Math.max(extent.yMax, curY.yMax);\n            extent.height = extent.yMax - extent.yMin;\n        }\n        entry[str] = extent;\n        return extent;\n    }\n    /**\n     * Retrieve the total width of `text` in `em` units.\n     */\n    getWidthForTextInEm(text) {\n        const key = this.cacheKey;\n        // Get the cache for this specific font family, size, weight, style combination.\n        // The cache contains previously computed widths for different `text` strings.\n        let cachedWidths = textWidthCache[key];\n        if (cachedWidths === undefined) {\n            cachedWidths = {};\n            textWidthCache[key] = cachedWidths;\n        }\n        let width = cachedWidths[text];\n        if (width === undefined) {\n            width = 0;\n            for (let i = 0; i < text.length; ++i) {\n                width += this.getWidthForCharacterInEm(text[i]);\n            }\n            cachedWidths[text] = width;\n        }\n        return width;\n    }\n    /** The width of the text (in `em`) is scaled by the font size (in `px`). */\n    getWidthForTextInPx(text) {\n        return this.getWidthForTextInEm(text) * this.fontSizeInPixels;\n    }\n    /**\n     * @param size in pt.\n     */\n    setFontSize(size) {\n        this.size = size;\n        // The width cache key depends on the current font size.\n        this.updateCacheKey();\n        return this;\n    }\n    /** `this.size` is specified in points. Convert to pixels. */\n    get fontSizeInPixels() {\n        return this.size * Font.scaleToPxFrom.pt;\n    }\n    getResolution() {\n        return this.resolution;\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.TextFormatter.DEBUG` to `true`. */\nTextFormatter.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TextFormatter } from './textformatter';\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('Vex.Flow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n    /** Annotations category string. */\n    static get CATEGORY() {\n        return Category.Annotation;\n    }\n    // Use the same padding for annotations as note head so the\n    // words don't run into each other.\n    static get minAnnotationPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('noteHead.minPadding');\n    }\n    /** Arrange annotations within a `ModifierContext` */\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            const textFormatter = TextFormatter.create(annotation.textFont);\n            // Text height is expressed in fractional stave spaces.\n            const textLines = (2 + textFormatter.getYForStringInPx(annotation.text).height) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const glyphWidth = note.getGlyphProps().getWidth();\n            // Get the text width from the font metrics.\n            const textWidth = textFormatter.getWidthForTextInPx(annotation.text);\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\n            }\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                rightWidth = Math.max(rightWidth, textWidth);\n            }\n            else {\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\n                rightWidth = Math.max(rightWidth, textWidth / 2);\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n            }\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.render_options.draw_stem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.top_text_line + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.top_text_line = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.top_text_line);\n                    state.top_text_line += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.text_line + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.text_line = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.text_line);\n                    state.text_line += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.text_line);\n            }\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));\n        state.left_shift += leftOverlap;\n        state.right_shift += rightOverlap;\n        return true;\n    }\n    /**\n     * Annotations inherit from `Modifier` and is positioned correctly when\n     * in a `ModifierContext`.\n     * Create a new `Annotation` with the string `text`.\n     */\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\n        // this is to support legacy application that may expect this.\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n        this.resetFont();\n        // The default width is calculated from the text.\n        this.setWidth(Tables.textWidth(text));\n    }\n    /**\n     * Set vertical position of text (above or below stave).\n     * @param just value in `AnnotationVerticalJustify`.\n     */\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    /**\n     * Get horizontal justification.\n     */\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    /**\n     * Set horizontal justification.\n     * @param justification value in `Annotation.Justify`.\n     */\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    /** Render text beside the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const textFormatter = TextFormatter.create(this.textFont);\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        // Apply style might not save context, if this.style is undefined, so we\n        // still need to save context state just before this, since we will be\n        // changing ctx parameters below.\n        this.applyStyle();\n        ctx.openGroup('annotation', this.getAttribute('id'));\n        ctx.setFont(this.textFont);\n        const text_width = textFormatter.getWidthForTextInPx(this.text);\n        const text_height = textFormatter.getYForStringInPx(this.text).height;\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - text_width;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - text_width / 2;\n        } /* CENTER_STEM */\n        else {\n            x = note.getStemX() - text_width / 2;\n        }\n        let stem_ext = {};\n        let spacing = 0;\n        const has_stem = note.hasStem();\n        const stave = note.checkStave();\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        if (has_stem) {\n            stem_ext = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            // Use the largest (lowest) Y value\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE + text_height;\n            if (has_stem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stem_ext.topY + text_height + spacing * this.text_line);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.text_line) - 1;\n            const yb = stave.getYForBottomText(this.text_line);\n            y = yt + (yb - yt) / 2 + text_height / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            const topY = Math.min(...note.getYs());\n            y = topY - (this.text_line + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (has_stem && stemDirection === Stem.UP) {\n                // If the stem is above the stave already, go with default line width vs. actual\n                // since the lines between don't really matter.\n                spacing = stem_ext.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stem_ext.topY - spacing * (this.text_line + 1));\n            }\n        } /* CENTER_STEM */\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        ctx.fillText(this.text, x, y);\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`. */\nAnnotation.DEBUG = false;\nAnnotation.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n/** Text annotations can be positioned and justified relative to the note. */\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns.\n// MIT License\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('Vex.Flow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\n// This includes both staff and ledger lines\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    // Initially, snap to nearest staff line or space\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nfunction getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nfunction getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nfunction getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            // this amount is larger than the stem-tip offset because we start from\n            // the center of the notehead\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `Vex.Flow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n    /** Articulations category string. */\n    static get CATEGORY() {\n        return Category.Articulation;\n    }\n    /**\n     * FIXME:\n     * Most of the complex formatting logic (ie: snapping to space) is\n     * actually done in .render(). But that logic belongs in this method.\n     *\n     * Unfortunately, this isn't possible because, by this point, stem lengths\n     * have not yet been finalized. Finalized stem lengths are required to determine the\n     * initial position of any stem-side articulation.\n     *\n     * This indicates that all objects should have their stave set before being\n     * formatted. It can't be an optional if you want accurate vertical positioning.\n     * Consistently positioned articulations that play nice with other modifiers\n     * won't be possible until we stop relying on render-time formatting.\n     *\n     * Ideally, when this function has completed, the vertical articulation positions\n     * should be ready to render without further adjustment. But the current state\n     * is far from this ideal.\n     */\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        let maxGlyphWidth = 0;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), defined(articulation.glyph.getMetrics().height) / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            maxGlyphWidth = Math.max(note.getGlyphProps().getWidth(), maxGlyphWidth);\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            // Decide if we need to consider beam direction in placement.\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.top_text_line, ABOVE);\n                const curTop = noteLine + state.top_text_line + 0.5;\n                // If articulation must be above stave, add lines between note and stave top\n                if (!articulation.articulation.between_lines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.top_text_line);\n                state.top_text_line += increment;\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.text_line, BELOW);\n                const curBottom = noteLine + state.text_line + 0.5;\n                // if articulation must be below stave, add lines from note to stave bottom\n                if (!articulation.articulation.between_lines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.text_line);\n                state.text_line += increment;\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.left_shift + state.right_shift), 0));\n        state.left_shift += overlap / 2;\n        state.right_shift += overlap / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    /**\n     * Create a new articulation.\n     * @param type entry in `Vex.Flow.articulationCodes` in `tables.ts` or Glyph code.\n     *\n     * Notes (by default):\n     * - Glyph codes ending with 'Above' will be positioned ABOVE\n     * - Glyph codes ending with 'Below' will be positioned BELOW\n     */\n    constructor(type) {\n        super();\n        this.type = type;\n        this.position = ABOVE;\n        this.render_options = {\n            font_scale: 38,\n        };\n        this.reset();\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        // Use type as glyph code, if not defined as articulation code\n        if (!this.articulation) {\n            this.articulation = { code: this.type, between_lines: false };\n            if (this.type.endsWith('Above'))\n                this.position = ABOVE;\n            if (this.type.endsWith('Below'))\n                this.position = BELOW;\n        }\n        const code = (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) || this.articulation.code;\n        this.glyph = new Glyph(code !== null && code !== void 0 ? code : '', this.render_options.font_scale);\n        defined(this.glyph, 'ArgumentError', `Articulation not found: ${this.type}`);\n        this.setWidth(defined(this.glyph.getMetrics().width));\n    }\n    /** Set if articulation should be rendered between lines. */\n    setBetweenLines(betweenLines = true) {\n        this.articulation.between_lines = betweenLines;\n        return this;\n    }\n    /** Render articulation in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, glyph, text_line: textLine } = this;\n        const canSitBetweenLines = this.articulation.between_lines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        // Articulations are centered over/under the note head.\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        const padding = Tables.currentMusicFont().lookupMetric(`articulation.${glyph.getCode()}.padding`, 0);\n        let y = {\n            [ABOVE]: () => {\n                glyph.setOrigin(0.5, 1);\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                glyph.setOrigin(0.5, 0);\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                glyph.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection + padding * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        glyph.render(ctx, x, y);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`. */\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2021.\n// MIT License\nimport { Category } from './typeguard';\nexport class RenderContext {\n    static get CATEGORY() {\n        return Category.RenderContext;\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n    /**\n     * This is kept for backwards compatibility with 3.0.9.\n     * @deprecated use `setFont(...)` instead since it now supports CSS font shorthand.\n     */\n    setRawFont(f) {\n        this.setFont(f);\n        return this;\n    }\n}\n/**\n * Draw a tiny dot marker on the specified context. A great debugging aid.\n * @param ctx context\n * @param x dot x coordinate\n * @param y dot y coordinate\n * @param color\n */\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport class Tickable extends Element {\n    static get CATEGORY() {\n        return Category.Tickable;\n    }\n    constructor() {\n        super();\n        this._preFormatted = false;\n        this._postFormatted = false;\n        // These properties represent the duration of\n        // this tickable element.\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\n        this.intrinsicTicks = 0; // Floating point value of ticks\n        this.tickMultiplier = new Fraction(1, 1);\n        // Formatter metrics\n        this.width = 0;\n        this.x_shift = 0; // Shift from tick context\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.align_center = false;\n        this.center_x_shift = 0; // Shift from tick context if center aligned\n        // This flag tells the formatter to ignore this tickable during\n        // formatting and justification. It is set by tickables such as BarNote.\n        this.ignore_ticks = false;\n        // This is a space for an external formatting class or function to maintain\n        // metrics.\n        this.formatterMetrics = {\n            // The freedom of a tickable is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n            // The simplified rational duration of this tick as a string. It can be\n            // used as an index to a map or hashtable.\n            duration: '',\n            // The number of formatting iterations undergone.\n            iterations: 0,\n            // The space in pixels allocated by this formatter, along with the mean space\n            // for tickables of this duration, and the deviation from the mean.\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    /** Reset the Tickable, this function will be overloaded. */\n    reset() {\n        return this;\n    }\n    /** Return the ticks. */\n    getTicks() {\n        return this.ticks;\n    }\n    /** Check if it ignores the ticks. */\n    shouldIgnoreTicks() {\n        return this.ignore_ticks;\n    }\n    /** Ignore the ticks. */\n    setIgnoreTicks(flag) {\n        this.ignore_ticks = flag;\n        return this;\n    }\n    /** Set width of note. Used by the formatter for positioning. */\n    setWidth(width) {\n        this.width = width;\n    }\n    /** Get width of note. Used by the formatter for positioning. */\n    getWidth() {\n        if (!this._preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    /** Displace note by `x` pixels. Used by the formatter. */\n    setXShift(x) {\n        this.x_shift = x;\n        return this;\n    }\n    /** Get the `x` displaced pixels of the note. */\n    getXShift() {\n        return this.x_shift;\n    }\n    /** Get `x` position of this tick context. */\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.x_shift;\n    }\n    /** Return the formatterMetrics. */\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /** Return the center `x` shift. */\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.center_x_shift;\n        }\n        return 0;\n    }\n    /** Set the center `x` shift. */\n    setCenterXShift(centerXShift) {\n        this.center_x_shift = centerXShift;\n        return this;\n    }\n    // Check if tickable is center aligned. */\n    isCenterAligned() {\n        return this.align_center;\n    }\n    // Set/unset center alignment. */\n    setCenterAlignment(align_center) {\n        this.align_center = align_center;\n        return this;\n    }\n    /**\n     * Return the associated voice. Every tickable must be associated with a voice.\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\n     */\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    /** Set the associated voice. */\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    /** Get the tuplet. */\n    getTuplet() {\n        return this.tuplet;\n    }\n    /** Return the intrinsic ticks. */\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    /**\n     * Reset the specific Tuplet if this is not provided, all tuplets are reset.\n     * Remove any prior tuplets from the tick calculation and\n     * reset the intrinsic tick value.\n     */\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                // Revert old multiplier by inverting numerator & denom.:\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            // Revert old multiplier by inverting numerator & denom.:\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    /** Attach to new tuplet. */\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    /**\n     * Add self to the provided ModifierContext `mc`.\n     * If this tickable has modifiers, set modifierContext.\n     * @returns this\n     */\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        this._preFormatted = false;\n        return this;\n    }\n    /**\n     * Optional, if tickable has modifiers, associate a Modifier.\n     * @param mod the modifier\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        this._preFormatted = false;\n        return this;\n    }\n    /** Get the list of associated modifiers. */\n    getModifiers() {\n        return this.modifiers;\n    }\n    /** Set the Tick Context. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this._preFormatted = false;\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    /** Preformat the Tickable. */\n    preFormat() {\n        if (this._preFormatted)\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    /** Set preformatted status. */\n    set preFormatted(value) {\n        this._preFormatted = value;\n    }\n    get preFormatted() {\n        return this._preFormatted;\n    }\n    /** Postformat the Tickable. */\n    postFormat() {\n        if (this._postFormatted)\n            return this;\n        this._postFormatted = true;\n        return this;\n    }\n    /** Set postformatted status. */\n    set postFormatted(value) {\n        this._postFormatted = value;\n    }\n    get postFormatted() {\n        return this._postFormatted;\n    }\n    /** Return the intrinsic ticks. */\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    /** Set the intrinsic ticks. */\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Get the tick multiplier. */\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    /** Apply a tick multiplier. */\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Set the duration. */\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    /** Attach this note to a modifier context. */\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font } from './font';\nimport { drawDot } from './rendercontext';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport class Note extends Tickable {\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Note;\n    }\n    /** Debug helper. Displays various note metrics for the given note. */\n    static plotMetrics(ctx, note, yPos) {\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + (note.getFormatterMetrics().freedom.right || 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        // Preserve backwards-compatibility\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        // If specified type is invalid, return undefined.\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        // If no type specified, check duration or custom types\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            // If we have keys, try and check if we've got a custom glyph\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    // We have a custom glyph specified after the note eg. /X2\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        // Calculate the tick duration of the note\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        // Are there any dots?\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        // Add ticks as necessary depending on the numbr of dots\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    /**\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n     * positioning and layout.\n     *\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\n     */\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        /** Parses `noteStruct` and get note properties. */\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        // Set note properties from parameters.\n        this.keys = noteStruct.keys || [];\n        // per-pitch properties\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.duration_override) {\n            // Custom duration\n            this.setDuration(noteStruct.duration_override);\n        }\n        else {\n            // Default duration\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        // Get the glyph code for this note from the font.\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Tables.getGlyphProps(this.duration, t));\n        // Note to play for audio players.\n        this.playNote = undefined;\n        // Positioning contexts used by the Formatter.\n        this.ignore_ticks = false;\n        // Positioning variables\n        this.width = 0; // Width in pixels calculated after preFormat\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n        this.x_shift = 0; // X shift from tick context X\n        this.ys = []; // list of y coordinates for each note\n        // we need to hold on to these for ties and beams.\n        if (noteStruct.align_center) {\n            this.setCenterAlignment(noteStruct.align_center);\n        }\n        // The render surface.\n        this.render_options = {\n            annotation_spacing: 5,\n            glyph_font_scale: 1,\n            stroke_px: 1,\n            scale: 1,\n            font: '',\n            y_shift: 0,\n        };\n    }\n    /**\n     * Get the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    getPlayNote() {\n        return this.playNote;\n    }\n    /**\n     * Set the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    /**\n     * @returns true if this note is a type of rest.\n     *\n     * Rests don't have pitches, but take up space in the score.\n     * Subclasses should override this default implementation.\n     */\n    isRest() {\n        return false;\n    }\n    /** Add stroke. */\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the target stave. */\n    getStave() {\n        return this.stave;\n    }\n    /** Check and get the target stave. */\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /** Set the target stave. */\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    /** Get spacing to the left of the notes. */\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    /** Get spacing to the right of the notes. */\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    /** Set spacing to the left of the notes. */\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    /** Set spacing to the right of the notes. */\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n    shouldIgnoreTicks() {\n        return this.ignore_ticks;\n    }\n    /** Get the stave line number for the note. */\n    // eslint-disable-next-line\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    /** Get the stave line number for rest. */\n    getLineForRest() {\n        return 0;\n    }\n    /**\n     * @deprecated Use `getGlyphProps()` instead.\n     */\n    // eslint-disable-next-line\n    getGlyph() {\n        return this.glyphProps;\n    }\n    /** Get the glyph associated with this note. */\n    getGlyphProps() {\n        return this.glyphProps;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return this.glyphProps.getWidth(this.render_options.glyph_font_scale);\n    }\n    /**\n     * Set Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    /**\n     * Get Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    /**\n     * Get the Y position of the space above the stave onto which text can\n     * be rendered.\n     */\n    getYForTopText(text_line) {\n        return this.checkStave().getYForTopText(text_line);\n    }\n    /** Return the voice that this note belongs in. */\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    /** Attach this note to `voice`. */\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the `TickContext` for this note. */\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    /** Set the `TickContext` for this note. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Accessor to duration. */\n    getDuration() {\n        return this.duration;\n    }\n    /** Accessor to isDotted. */\n    isDotted() {\n        return this.getModifiersByType('Dot').length > 0;\n    }\n    /** Accessor to hasStem. */\n    hasStem() {\n        return false;\n    }\n    /** Accessor to note type. */\n    getNoteType() {\n        return this.noteType;\n    }\n    /** Get the beam. */\n    getBeam() {\n        return this.beam;\n    }\n    /** Check and get the beam. */\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    /** Check it has a beam. */\n    hasBeam() {\n        return this.beam != undefined;\n    }\n    /** Set the beam. */\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    /**\n     * Attach a modifier to this note.\n     * @param modifier the Modifier to add.\n     * @param index of the key to modify.\n     * @returns this\n     */\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        // Backwards compatibility with 3.0.9.\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            // eslint-disable-next-line\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        // Some versions of VexFlow had the two parameters reversed.\n        // Check here and throw an error if the argument types are not correct.\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    /** Get all modifiers of a specific type in `this.modifiers`. */\n    getModifiersByType(type) {\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\n    }\n    /** Get the coordinates for where modifiers begin. */\n    // eslint-disable-next-line\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.x_shift : -this.x_shift;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        if (this.checkModifierContext().getMembers('Parenthesis').length !== 0)\n            px += Tables.currentMusicFont().lookupMetric('parenthesis.default.width');\n        return px;\n    }\n    /** Get the metrics for this note. */\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().left_shift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().right_shift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx - // subtract left modifiers\n            modRightPx - // subtract right modifiers\n            this.leftDisplacedHeadPx - // subtract left displaced head\n            this.rightDisplacedHeadPx; // subtract right displaced head\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            // Modifier spacing.\n            modLeftPx,\n            modRightPx,\n            // Displaced note head on left or right.\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    /**\n     * Get the absolute `X` position of this note's tick context. This\n     * excludes x_shift, so you'll need to factor it in if you're\n     * looking for the post-formatted x-position.\n     */\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        // Position note to left edge of tick context.\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Tables.currentMusicFont().lookupMetric('stave.padding');\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    /** Get the direction of the stem. */\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the top and bottom `y` values of the stem. */\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the `x` coordinate to the right of the note. */\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const note_glyph_width = this.glyphProps.getWidth();\n        tieStartX += note_glyph_width / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    /** Get the `x` coordinate to the left of the note. */\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const note_glyph_width = this.glyphProps.getWidth();\n        tieEndX += note_glyph_width / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    // Get the pitches in the note\n    getKeys() {\n        return this.keys;\n    }\n    // Get the properties for all the keys in the note\n    getKeyProps() {\n        return this.keyProps;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    static get CATEGORY() {\n        return Category.StaveModifier;\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    constructor() {\n        super();\n        this.width = 0;\n        this.x = 0;\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    placeGlyphOnLine(glyph, stave, line, customShift = 0) {\n        glyph.setYShift(stave.getYForLine(line !== null && line !== void 0 ? line : 0) - stave.getYForGlyphs() + customShift);\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n    // eslint-disable-next-line\n    draw(...args) {\n        // DO NOTHING.\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author Larry Kuhns 2011\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Barline;\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    // Draw barlines\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('stavebarline', this.getAttribute('id'));\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                // If the barline is shifted over (in front of clef/time/key)\n                // Draw vertical bar at the beginning.\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n    drawVerticalBar(stave, x, double_bar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (double_bar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let x_shift = 3;\n        if (!begin) {\n            x_shift = -5;\n        }\n        staveCtx.fillRect(x + x_shift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dot_radius = 2;\n        // Shift dots left or right\n        if (begin) {\n            x_shift += 4;\n        }\n        else {\n            x_shift -= 4;\n        }\n        const dot_x = x + x_shift + dot_radius / 2;\n        // calculate the y offset based on number of stave lines\n        let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dot_y = topY + y_offset + dot_radius / 2;\n        // draw the top repeat dot\n        staveCtx.beginPath();\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        // draw the bottom repeat dot\n        dot_y += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Author: Aaron (@AaronDavidNewman)\n//\n// This implements chord symbols above/below a chord.\n// Chord symbols are modifiers that can be attached to notes.\n// They can contain multiple 'blocks' which represent text or\n// glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { TextFormatter } from './textformatter';\nimport { Category, isStemmableNote } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('Vex.Flow.ChordSymbol', args);\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolTypes;\n(function (SymbolTypes) {\n    SymbolTypes[SymbolTypes[\"GLYPH\"] = 1] = \"GLYPH\";\n    SymbolTypes[SymbolTypes[\"TEXT\"] = 2] = \"TEXT\";\n    SymbolTypes[SymbolTypes[\"LINE\"] = 3] = \"LINE\";\n})(SymbolTypes || (SymbolTypes = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n    static get CATEGORY() {\n        return Category.ChordSymbol;\n    }\n    static get superSubRatio() {\n        return ChordSymbol.metrics.global.superSubRatio;\n    }\n    /** Currently unused: Globally turn off text formatting, if the built-in formatting does not work for your font. */\n    static set NO_TEXT_FORMAT(val) {\n        ChordSymbol.noFormat = val;\n    }\n    static get NO_TEXT_FORMAT() {\n        return ChordSymbol.noFormat;\n    }\n    static getMetricForGlyph(glyphCode) {\n        if (ChordSymbol.metrics.glyphs[glyphCode]) {\n            return ChordSymbol.metrics.glyphs[glyphCode];\n        }\n        return undefined;\n    }\n    static get engravingFontResolution() {\n        return Tables.currentMusicFont().getResolution();\n    }\n    static get spacingBetweenBlocks() {\n        return ChordSymbol.metrics.global.spacing / ChordSymbol.engravingFontResolution;\n    }\n    static getWidthForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0.65; // probably should do something here.\n        }\n        return metric.advanceWidth / ChordSymbol.engravingFontResolution;\n    }\n    static getYShiftForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0;\n        }\n        return metric.yOffset / ChordSymbol.engravingFontResolution;\n    }\n    static getXShiftForGlyph(glyph) {\n        const metric = ChordSymbol.getMetricForGlyph(glyph.code);\n        if (!metric) {\n            return 0;\n        }\n        return (-1 * metric.leftSideBearing) / ChordSymbol.engravingFontResolution;\n    }\n    static get superscriptOffset() {\n        return ChordSymbol.metrics.global.superscriptOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get subscriptOffset() {\n        return ChordSymbol.metrics.global.subscriptOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get kerningOffset() {\n        return ChordSymbol.metrics.global.kerningOffset / ChordSymbol.engravingFontResolution;\n    }\n    static get metrics() {\n        const chordSymbol = Tables.currentMusicFont().getMetrics().chordSymbol;\n        if (!chordSymbol)\n            throw new RuntimeError('BadMetrics', `chordSymbol missing`);\n        return chordSymbol;\n    }\n    static get lowerKerningText() {\n        // For example, see: `bravura_metrics.ts`\n        // BravuraMetrics.glyphs.chordSymbol.global.lowerKerningText, which returns an array of letters.\n        // ['D', 'F', 'P', 'T', 'V', 'Y']\n        return ChordSymbol.metrics.global.lowerKerningText;\n    }\n    static get upperKerningText() {\n        return ChordSymbol.metrics.global.upperKerningText;\n    }\n    static isSuperscript(block) {\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    static isSubscript(block) {\n        return block.symbolModifier !== undefined && block.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n    static get minPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('noteHead.minPadding');\n    }\n    /**\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n     * Estimate how many lines above/below the staff we need.\n     */\n    static format(symbols, state) {\n        var _a;\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let nonSuperWidth = 0;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (const symbol of symbols) {\n            const fontSize = Font.convertSizeToPointValue((_a = symbol.textFont) === null || _a === void 0 ? void 0 : _a.size);\n            const fontAdj = Font.scaleSize(fontSize, 0.05);\n            const glyphAdj = fontAdj * 2;\n            const note = symbol.checkAttachedNote();\n            let symbolWidth = 0;\n            let lineSpaces = 1;\n            let vAlign = false;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = ChordSymbol.isSuperscript(block);\n                const sub = ChordSymbol.isSubscript(block);\n                const superSubScale = sup || sub ? ChordSymbol.superSubRatio : 1;\n                const adj = block.symbolType === SymbolTypes.GLYPH ? glyphAdj * superSubScale : fontAdj * superSubScale;\n                // If there are super/subscripts, they extend beyond the line so\n                // assume they take up 2 lines\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                // If there is a symbol-specific offset, add it but consider font\n                // size since font and glyphs will be interspersed.\n                const fontSize = symbol.textFormatter.fontSizeInPixels;\n                const superSubFontSize = fontSize * superSubScale;\n                if (block.symbolType === SymbolTypes.GLYPH && block.glyph !== undefined) {\n                    block.width = ChordSymbol.getWidthForGlyph(block.glyph) * superSubFontSize;\n                    block.yShift += ChordSymbol.getYShiftForGlyph(block.glyph) * superSubFontSize;\n                    block.xShift += ChordSymbol.getXShiftForGlyph(block.glyph) * superSubFontSize;\n                    block.glyph.scale = block.glyph.scale * adj;\n                }\n                else if (block.symbolType === SymbolTypes.TEXT) {\n                    block.width = block.width * superSubFontSize;\n                    block.yShift += symbol.getYOffsetForText(block.text) * adj;\n                }\n                if (block.symbolType === SymbolTypes.GLYPH &&\n                    block.glyph !== undefined &&\n                    block.glyph.code === ChordSymbol.glyphs.over.code) {\n                    lineSpaces = 2;\n                }\n                block.width += ChordSymbol.spacingBetweenBlocks * fontSize * superSubScale;\n                // If a subscript immediately  follows a superscript block, try to\n                // overlay them.\n                if (sup && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (!ChordSymbol.isSuperscript(prev)) {\n                        nonSuperWidth = width;\n                    }\n                }\n                if (sub && nonSuperWidth > 0) {\n                    vAlign = true;\n                    // slide the symbol over so it lines up with superscript\n                    block.xShift = block.xShift + (nonSuperWidth - width);\n                    width = nonSuperWidth;\n                    nonSuperWidth = 0;\n                    // If we have vertically lined up, turn kerning off.\n                    symbol.setEnableKerning(false);\n                }\n                if (!sup && !sub) {\n                    nonSuperWidth = 0;\n                }\n                block.vAlign = vAlign;\n                width += block.width;\n                symbolWidth = width;\n            }\n            // make kerning adjustments after computing super/subscripts\n            symbol.updateKerningAdjustments();\n            symbol.updateOverBarAdjustments();\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.top_text_line);\n                state.top_text_line += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.text_line + 1);\n                state.text_line += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth() && isStemmableNote(note)) {\n                const glyphWidth = note.getGlyphProps().getWidth();\n                if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\n                    maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                    leftWidth = Math.max(leftWidth, symbolWidth) + ChordSymbol.minPadding;\n                }\n                else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\n                    maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                    rightWidth = Math.max(rightWidth, symbolWidth);\n                }\n                else {\n                    leftWidth = Math.max(leftWidth, symbolWidth / 2) + ChordSymbol.minPadding;\n                    rightWidth = Math.max(rightWidth, symbolWidth / 2);\n                    maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                    maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n                }\n            }\n            width = 0; // reset symbol width\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.right_shift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.left_shift, 0));\n        state.left_shift += leftOverlap;\n        state.right_shift += rightOverlap;\n        return true;\n    }\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.useKerning = true;\n        this.reportWidth = true;\n        this.resetFont();\n    }\n    /**\n     * Default text font.\n     * Choose a font family that works well with the current music engraving font.\n     * @override `Element.TEXT_FONT`.\n     */\n    static get TEXT_FONT() {\n        let family = 'Roboto Slab, Times, serif';\n        if (Tables.currentMusicFont().getName() === 'Petaluma') {\n            // Fixes Issue #1180\n            family = 'PetalumaScript, Arial, sans-serif';\n        }\n        return {\n            family,\n            size: 12,\n            weight: FontWeight.NORMAL,\n            style: FontStyle.NORMAL,\n        };\n    }\n    /**\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\n     */\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * this.textFormatter.fontSizeInPixels;\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * this.textFormatter.fontSizeInPixels;\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    updateOverBarAdjustments() {\n        const barIndex = this.symbolBlocks.findIndex(({ symbolType, glyph }) => symbolType === SymbolTypes.GLYPH && glyph !== undefined && glyph.code === 'csymDiagonalArrangementSlash');\n        if (barIndex < 0) {\n            return;\n        }\n        const bar = this.symbolBlocks[barIndex];\n        const xoff = bar.width / 4;\n        const yoff = 0.25 * this.textFormatter.fontSizeInPixels;\n        let symIndex = 0;\n        for (symIndex === 0; symIndex < barIndex; ++symIndex) {\n            const symbol = this.symbolBlocks[symIndex];\n            symbol.xShift = symbol.xShift + xoff;\n            symbol.yShift = symbol.yShift - yoff;\n        }\n        for (symIndex = barIndex + 1; symIndex < this.symbolBlocks.length; ++symIndex) {\n            const symbol = this.symbolBlocks[symIndex];\n            symbol.xShift = symbol.xShift - xoff;\n            symbol.yShift = symbol.yShift + yoff;\n        }\n    }\n    updateKerningAdjustments() {\n        let accum = 0;\n        for (let j = 0; j < this.symbolBlocks.length; ++j) {\n            const symbol = this.symbolBlocks[j];\n            accum += this.getKerningAdjustment(j);\n            symbol.xShift += accum;\n        }\n    }\n    /** Do some basic kerning so that letter chords like 'A' don't have the extensions hanging off to the right. */\n    getKerningAdjustment(j) {\n        if (!this.useKerning) {\n            return 0;\n        }\n        const currSymbol = this.symbolBlocks[j];\n        const prevSymbol = j > 0 ? this.symbolBlocks[j - 1] : undefined;\n        let adjustment = 0;\n        // Move things into the '/' over bar\n        if (currSymbol.symbolType === SymbolTypes.GLYPH &&\n            currSymbol.glyph !== undefined &&\n            currSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\n            adjustment += currSymbol.glyph.metrics.x_shift;\n        }\n        if (prevSymbol !== undefined &&\n            prevSymbol.symbolType === SymbolTypes.GLYPH &&\n            prevSymbol.glyph !== undefined &&\n            prevSymbol.glyph.code === ChordSymbol.glyphs.over.code) {\n            adjustment += prevSymbol.glyph.metrics.x_shift;\n        }\n        // For superscripts that follow a letter without much top part, move it to the left slightly\n        let preKernUpper = false;\n        let preKernLower = false;\n        if (prevSymbol !== undefined && prevSymbol.symbolType === SymbolTypes.TEXT) {\n            preKernUpper = ChordSymbol.upperKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n            preKernLower = ChordSymbol.lowerKerningText.some((xx) => xx === prevSymbol.text[prevSymbol.text.length - 1]);\n        }\n        const kerningOffsetPixels = ChordSymbol.kerningOffset * this.textFormatter.fontSizeInPixels;\n        // TODO: adjust kern for font size.\n        // Where should this constant live?\n        if (preKernUpper && currSymbol.symbolModifier === SymbolModifiers.SUPERSCRIPT) {\n            adjustment += kerningOffsetPixels;\n        }\n        if (preKernLower && currSymbol.symbolType === SymbolTypes.TEXT) {\n            if (currSymbol.text[0] >= 'a' && currSymbol.text[0] <= 'z') {\n                adjustment += kerningOffsetPixels / 2;\n            }\n            if (ChordSymbol.upperKerningText.some((xx) => xx === (prevSymbol === null || prevSymbol === void 0 ? void 0 : prevSymbol.text[prevSymbol.text.length - 1]))) {\n                adjustment += kerningOffsetPixels / 2;\n            }\n        }\n        return adjustment;\n    }\n    /**\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n     * Each block can have its own vertical orientation.\n     */\n    // eslint-disable-next-line\n    getSymbolBlock(params = {}) {\n        var _a, _b, _c;\n        const symbolType = (_a = params.symbolType) !== null && _a !== void 0 ? _a : SymbolTypes.TEXT;\n        const symbolBlock = {\n            text: (_b = params.text) !== null && _b !== void 0 ? _b : '',\n            symbolType,\n            symbolModifier: (_c = params.symbolModifier) !== null && _c !== void 0 ? _c : SymbolModifiers.NONE,\n            xShift: 0,\n            yShift: 0,\n            vAlign: false,\n            width: 0,\n        };\n        // Note: symbol widths are resolution and font-independent.\n        // We convert to pixel values when we know what the font is.\n        if (symbolType === SymbolTypes.GLYPH && typeof params.glyph === 'string') {\n            const glyphArgs = ChordSymbol.glyphs[params.glyph];\n            const glyphPoints = 20;\n            symbolBlock.glyph = new Glyph(glyphArgs.code, glyphPoints, { category: 'chordSymbol' });\n            // Beware: glyph.metrics is not the same as glyph.getMetrics() !\n            // rv.glyph.point = rv.glyph.point * rv.glyph.metrics.scale;\n            // rv.width = rv.glyph.getMetrics().width;\n            // don't set yShift here, b/c we need to do it at formatting time after the font is set.\n        }\n        else if (symbolType === SymbolTypes.TEXT) {\n            symbolBlock.width = this.textFormatter.getWidthForTextInEm(symbolBlock.text);\n        }\n        else if (symbolType === SymbolTypes.LINE) {\n            symbolBlock.width = params.width;\n        }\n        return symbolBlock;\n    }\n    /** Add a symbol to this chord, could be text, glyph or line. */\n    // eslint-disable-next-line\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    // ### Convenience functions for creating different types of chord symbol parts.\n    /** Add a text block. */\n    // eslint-disable-next-line\n    addText(text, parameters = {}) {\n        const symbolType = SymbolTypes.TEXT;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text, symbolType }));\n    }\n    /** Add a text block with superscript modifier. */\n    addTextSuperscript(text) {\n        const symbolType = SymbolTypes.TEXT;\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\n    }\n    /** Add a text block with subscript modifier. */\n    addTextSubscript(text) {\n        const symbolType = SymbolTypes.TEXT;\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolType, symbolModifier });\n    }\n    /** Add a glyph block with superscript modifier. */\n    addGlyphSuperscript(glyph) {\n        const symbolType = SymbolTypes.GLYPH;\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ glyph, symbolType, symbolModifier });\n    }\n    /** Add a glyph block. */\n    // eslint-disable-next-line\n    addGlyph(glyph, params = {}) {\n        const symbolType = SymbolTypes.GLYPH;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { glyph, symbolType }));\n    }\n    /**\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n     */\n    // eslint-disable-next-line\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            if (ChordSymbol.glyphs[char]) {\n                if (str.length > 0) {\n                    this.addText(str, params);\n                    str = '';\n                }\n                this.addGlyph(char, params);\n            }\n            else {\n                // Collect consecutive characters with no glyphs.\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n    // eslint-disable-next-line\n    addLine(width, params = {}) {\n        const symbolType = SymbolTypes.LINE;\n        return this.addSymbolBlock(Object.assign(Object.assign({}, params), { symbolType, width }));\n    }\n    /**\n     * Set the chord symbol's font family, size, weight, style (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     *\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     *\n     * @override See: Element.\n     */\n    setFont(f, size, weight, style) {\n        super.setFont(f, size, weight, style);\n        this.textFormatter = TextFormatter.create(this.textFont);\n        return this;\n    }\n    setEnableKerning(val) {\n        this.useKerning = val;\n        return this;\n    }\n    /** Set vertical position of text (above or below stave). */\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    /** Set horizontal justification. */\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    getWidth() {\n        let width = 0;\n        this.symbolBlocks.forEach((symbol) => {\n            width += symbol.vAlign ? 0 : symbol.width;\n        });\n        return width;\n    }\n    getYOffsetForText(text) {\n        var _a;\n        let acc = 0;\n        let i = 0;\n        for (i = 0; i < text.length; ++i) {\n            const metrics = this.textFormatter.getGlyphMetrics(text[i]);\n            if (metrics) {\n                const yMax = (_a = metrics.y_max) !== null && _a !== void 0 ? _a : 0;\n                acc = yMax < acc ? yMax : acc;\n            }\n        }\n        const resolution = this.textFormatter.getResolution();\n        return i > 0 ? -1 * (acc / resolution) : 0;\n    }\n    /** Render text and glyphs above/below the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // We're changing context parameters. Save current state.\n        ctx.save();\n        this.applyStyle();\n        ctx.openGroup('chordsymbol', this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.textFont);\n        let y;\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\n            y = stave.getYForBottomText(this.text_line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stem_ext = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stem_base = note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;\n                y = Math.max(y, stem_base + spacing * (this.text_line + 2));\n            }\n        }\n        else {\n            // (this.vertical === VerticalJustify.TOP)\n            const topY = Math.min(...note.getYs());\n            y = Math.min(stave.getYForTopText(this.text_line), topY - 10);\n            if (hasStem) {\n                const stem_ext = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            // HorizontalJustify.CENTER_STEM\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', this.textFormatter, x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            const isSuper = ChordSymbol.isSuperscript(symbol);\n            const isSub = ChordSymbol.isSubscript(symbol);\n            let curY = y;\n            L('shift was ', symbol.xShift, symbol.yShift);\n            L('curY pre sub ', curY);\n            if (isSuper) {\n                curY += this.superscriptOffset;\n            }\n            if (isSub) {\n                curY += this.subscriptOffset;\n            }\n            L('curY sup/sub ', curY);\n            if (symbol.symbolType === SymbolTypes.TEXT) {\n                if (isSuper || isSub) {\n                    ctx.save();\n                    if (this.textFont) {\n                        const { family, size, weight, style } = this.textFont;\n                        const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n                        ctx.setFont(family, smallerFontSize, weight, style);\n                    }\n                }\n                // TODO???\n                // We estimate the text width, fill it in with the empirical value so the formatting is even.\n                // const textDim = ctx.measureText(symbol.text);\n                // symbol.width = textDim.width;\n                L('Rendering Text: ', symbol.text, x + symbol.xShift, curY + symbol.yShift);\n                ctx.fillText(symbol.text, x + symbol.xShift, curY + symbol.yShift);\n                if (isSuper || isSub) {\n                    ctx.restore();\n                }\n            }\n            else if (symbol.symbolType === SymbolTypes.GLYPH && symbol.glyph) {\n                curY += symbol.yShift;\n                L('Rendering Glyph: ', symbol.glyph.code, x + symbol.xShift, curY);\n                symbol.glyph.render(ctx, x + symbol.xShift, curY);\n            }\n            else if (symbol.symbolType === SymbolTypes.LINE) {\n                L('Rendering Line : ', symbol.width, x, curY);\n                ctx.beginPath();\n                ctx.setLineWidth(1); // ?\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + symbol.width, curY);\n                ctx.stroke();\n            }\n            x += symbol.width;\n            if (symbol.vAlign) {\n                x += symbol.xShift;\n            }\n        });\n        ctx.closeGroup();\n        this.restoreStyle();\n        ctx.restore();\n    }\n}\nChordSymbol.DEBUG = false;\n// Chord symbols can be positioned and justified relative to the note.\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\n// Glyph data\nChordSymbol.glyphs = {\n    diminished: {\n        code: 'csymDiminished',\n    },\n    dim: {\n        code: 'csymDiminished',\n    },\n    halfDiminished: {\n        code: 'csymHalfDiminished',\n    },\n    '+': {\n        code: 'csymAugmented',\n    },\n    augmented: {\n        code: 'csymAugmented',\n    },\n    majorSeventh: {\n        code: 'csymMajorSeventh',\n    },\n    minor: {\n        code: 'csymMinor',\n    },\n    '-': {\n        code: 'csymMinor',\n    },\n    '(': {\n        code: 'csymParensLeftTall',\n    },\n    leftParen: {\n        code: 'csymParensLeftTall',\n    },\n    ')': {\n        code: 'csymParensRightTall',\n    },\n    rightParen: {\n        code: 'csymParensRightTall',\n    },\n    leftBracket: {\n        code: 'csymBracketLeftTall',\n    },\n    rightBracket: {\n        code: 'csymBracketRightTall',\n    },\n    leftParenTall: {\n        code: 'csymParensLeftVeryTall',\n    },\n    rightParenTall: {\n        code: 'csymParensRightVeryTall',\n    },\n    '/': {\n        code: 'csymDiagonalArrangementSlash',\n    },\n    over: {\n        code: 'csymDiagonalArrangementSlash',\n    },\n    '#': {\n        code: 'accidentalSharp',\n    },\n    b: {\n        code: 'accidentalFlat',\n    },\n};\nChordSymbol.symbolTypes = SymbolTypes;\nChordSymbol.symbolModifiers = SymbolModifiers;\n/** Currently unused. */\nChordSymbol.noFormat = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('Vex.Flow.BarNote', args);\n}\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n    static get CATEGORY() {\n        return Category.BarNote;\n    }\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        // Tell the formatter that bar notes have no duration.\n        this.ignore_ticks = true;\n        this.setType(type);\n    }\n    /** Get the type of bar note.*/\n    getType() {\n        return this.type;\n    }\n    /** Set the type of bar note. */\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        // Set width to width of relevant `Barline`.\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    /** Overridden to ignore. */\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render note to stave. */\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        this.applyStyle(ctx);\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.draw(this.checkStave());\n        this.restoreStyle(ctx);\n        this.setRendered();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`. */\nBarNote.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { TextFormatter } from './textformatter';\nimport { Category, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n    static get CATEGORY() {\n        return Category.Bend;\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    // Arrange bends in `ModifierContext`\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let last_width = 0;\n        // Format Bends\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.top_text_line < stringPos) {\n                    state.top_text_line = stringPos;\n                }\n            }\n            bend.setXShift(last_width);\n            last_width = bend.getWidth();\n            bend.setTextLine(state.top_text_line);\n        }\n        state.right_shift += last_width;\n        state.top_text_line += 1;\n        return true;\n    }\n    /**\n     * Example of a phrase:\n     * ```\n     *    [{\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"half\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"1 1/2\"\n     *     width: 8;\n     *   }]\n     * ```\n     * @param text text for bend (\"Full\", \"Half\", etc.) (DEPRECATED)\n     * @param release if true, render a release. (DEPRECATED)\n     * @param phrase if set, ignore \"text\" and \"release\", and use the more sophisticated phrase specified\n     */\n    constructor(text, release = false, phrase) {\n        super();\n        this.text = text;\n        this.x_shift = 0;\n        this.release = release;\n        this.tap = '';\n        this.resetFont();\n        this.render_options = {\n            line_width: 1.5,\n            line_style: '#777777',\n            bend_width: 8,\n            release_width: 8,\n        };\n        if (phrase) {\n            this.phrase = phrase;\n        }\n        else {\n            // Backward compatibility\n            this.phrase = [{ type: Bend.UP, text: this.text }];\n            if (this.release)\n                this.phrase.push({ type: Bend.DOWN, text: '' });\n        }\n        this.updateWidth();\n    }\n    /** Set horizontal shift in pixels. */\n    setXShift(value) {\n        this.x_shift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    /** Get text provided in the constructor. */\n    getText() {\n        return this.text;\n    }\n    getTextHeight() {\n        const textFormatter = TextFormatter.create(this.textFont);\n        return textFormatter.maxHeight;\n    }\n    /** Recalculate width. */\n    updateWidth() {\n        const textFormatter = TextFormatter.create(this.textFont);\n        const measureText = (text) => {\n            return textFormatter.getWidthForTextInPx(text);\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;\n                bend.width = Math.max(additional_width, measureText(bend.text)) + 3;\n                bend.draw_width = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.x_shift);\n        return this;\n    }\n    /** Draw the bend on the rendering context. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const x_shift = this.x_shift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        // this.text_line is relative to top string in the group.\n        const bend_height = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) + 3;\n        const annotation_y = start.y - ((this.text_line + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cp_x = x + width;\n            const cp_y = y;\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.render_options.line_width);\n            ctx.setStrokeStyle(this.render_options.line_style);\n            ctx.setFillStyle(this.render_options.line_style);\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderRelease = (x, y, width, height) => {\n            ctx.save();\n            ctx.beginPath();\n            ctx.setLineWidth(this.render_options.line_width);\n            ctx.setStrokeStyle(this.render_options.line_style);\n            ctx.setFillStyle(this.render_options.line_style);\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y); // tip of the arrow\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const render_x = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, render_x, annotation_y);\n            ctx.restore();\n        };\n        let last_bend = undefined;\n        let last_bend_draw_width = 0;\n        let last_drawn_width = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.draw_width)\n                bend.draw_width = 0;\n            if (i === 0)\n                bend.draw_width += x_shift;\n            last_drawn_width = bend.draw_width + last_bend_draw_width - (i === 1 ? x_shift : 0);\n            if (bend.type === Bend.UP) {\n                if (last_bend && last_bend.type === Bend.UP) {\n                    renderArrowHead(start.x, bend_height, +1);\n                }\n                renderBend(start.x, start.y, last_drawn_width, bend_height);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (last_bend && last_bend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n                if (last_bend && last_bend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n                if (!last_bend) {\n                    last_drawn_width = bend.draw_width;\n                    renderRelease(start.x, start.y, last_drawn_width, bend_height);\n                }\n            }\n            renderText(start.x + last_drawn_width, bend.text);\n            last_bend = bend;\n            last_bend_draw_width = bend.draw_width;\n            last_bend.x = start.x;\n            start.x += last_drawn_width;\n        }\n        if (!last_bend || last_bend.x == undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        // Final arrowhead and text\n        if (last_bend.type === Bend.UP) {\n            renderArrowHead(last_bend.x + last_drawn_width, bend_height, +1);\n        }\n        else if (last_bend.type === Bend.DOWN) {\n            renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);\n        }\n    }\n}\n/** Default text font. */\nBend.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements dot modifiers for notes.\nimport { Modifier } from './modifier';\nimport { Category, isGraceNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Dot extends Modifier {\n    static get CATEGORY() {\n        return Category.Dot;\n    }\n    /** Returns the dots associated to a Note. */\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    /** Add a dot on the specified keys to the notes. */\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    dot.setDotShiftY(note.glyphProps.dot_shiftY);\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) != undefined) {\n                const dot = new Dot();\n                dot.setDotShiftY(note.glyphProps.dot_shiftY);\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                dot.setDotShiftY(note.glyphProps.dot_shiftY);\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    // Arrange dots inside a ModifierContext.\n    static format(dots, state) {\n        const right_shift = state.right_shift;\n        const dot_spacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dot_list = [];\n        const max_shift_map = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                // consider right displaced head with no previous modifier\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 }; // Shim key props for dot placement\n                shift = right_shift;\n            }\n            else {\n                // note object is not StaveNote or TabNote.\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const note_id = note.getAttribute('id');\n            dot_list.push({ line: props.line, note, note_id, dot });\n            max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);\n        }\n        // Sort dots by line number.\n        dot_list.sort((a, b) => b.line - a.line);\n        let dot_shift = right_shift;\n        let x_width = 0;\n        let last_line = null;\n        let last_note = null;\n        let prev_dotted_space = null;\n        let half_shiftY = 0;\n        for (let i = 0; i < dot_list.length; ++i) {\n            const { dot, note, note_id, line } = dot_list[i];\n            // Reset the position of the dot every line.\n            if (line !== last_line || note !== last_note) {\n                dot_shift = max_shift_map[note_id];\n            }\n            if (!note.isRest() && line !== last_line) {\n                if (Math.abs(line % 1) === 0.5) {\n                    // note is on a space, so no dot shift\n                    half_shiftY = 0;\n                }\n                else {\n                    // note is on a line, so shift dot to space above the line\n                    half_shiftY = 0.5;\n                    if (last_note != null && !last_note.isRest() && last_line != null && last_line - line === 0.5) {\n                        // previous note on a space, so shift dot to space below the line\n                        half_shiftY = -0.5;\n                    }\n                    else if (line + half_shiftY === prev_dotted_space) {\n                        // previous space is dotted, so shift dot to space below the line\n                        half_shiftY = -0.5;\n                    }\n                }\n            }\n            // convert half_shiftY to a multiplier for dots.draw()\n            if (note.isRest()) {\n                dot.dot_shiftY += -half_shiftY;\n            }\n            else {\n                dot.dot_shiftY = -half_shiftY;\n            }\n            prev_dotted_space = line + half_shiftY;\n            dot.setXShift(dot_shift);\n            dot_shift += dot.getWidth() + dot_spacing; // spacing\n            x_width = dot_shift > x_width ? dot_shift : x_width;\n            last_line = line;\n            last_note = note;\n        }\n        // Update state.\n        state.right_shift += x_width;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.radius = 2;\n        this.setWidth(5);\n        this.dot_shiftY = 0;\n    }\n    setNote(note) {\n        this.note = note;\n        if (isGraceNote(note)) {\n            this.radius *= 0.5;\n            this.setWidth(3);\n        }\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dot_shiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        // Set the starting y coordinate to the base of the stem for TabNotes.\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        const x = start.x + this.x_shift + this.width - this.radius;\n        const y = start.y + this.y_shift + this.dot_shiftY * lineSpace;\n        ctx.beginPath();\n        ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);\n        ctx.fill();\n    }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n// Author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { TextFormatter } from './textformatter';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class FretHandFinger extends Modifier {\n    static get CATEGORY() {\n        return Category.FretHandFinger;\n    }\n    // Arrange fingerings inside a ModifierContext.\n    static format(nums, state) {\n        const { left_shift, right_shift } = state;\n        const num_spacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const nums_list = [];\n        let prev_note = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textFormatter = TextFormatter.create(num.textFont);\n            const textHeight = textFormatter.maxHeight;\n            if (num.position === ModifierPosition.ABOVE) {\n                state.top_text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.text_line += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prev_note) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (left_shift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (right_shift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prev_note = note;\n            }\n            nums_list.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort fingernumbers by line number.\n        nums_list.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < nums_list.length; ++i) {\n            let num_shift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = nums_list[i];\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = left_shift + shiftL;\n                numShiftR = right_shift + shiftR;\n            }\n            const numWidth = num.getWidth() + num_spacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(left_shift + numShiftL);\n                num_shift = left_shift + numWidth; // spacing\n                xWidthL = num_shift > xWidthL ? num_shift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                num_shift = shiftRight + numWidth; // spacing\n                xWidthR = num_shift > xWidthR ? num_shift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.left_shift += xWidthL;\n        state.right_shift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    constructor(finger) {\n        super();\n        this.finger = finger;\n        this.width = 7;\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.x_offset = 0; // Horizontal offset from default\n        this.y_offset = 0; // Vertical offset from default\n        this.resetFont();\n    }\n    setFretHandFinger(finger) {\n        this.finger = finger;\n        return this;\n    }\n    getFretHandFinger() {\n        return this.finger;\n    }\n    setOffsetX(x) {\n        this.x_offset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.y_offset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dot_x = start.x + this.x_shift + this.x_offset;\n        let dot_y = start.y + this.y_shift + this.y_offset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dot_x -= 4;\n                dot_y -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dot_x -= 2;\n                dot_y += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dot_x -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dot_x += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        ctx.save();\n        ctx.setFont(this.textFont);\n        ctx.fillText('' + this.finger, dot_x, dot_y);\n        ctx.restore();\n    }\n}\nFretHandFinger.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 9,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('Vex.Flow.NoteHead', args);\n}\n/**\n * Draw slashnote head manually. No glyph exists for this.\n * @param ctx the Canvas context\n * @param duration the duration of the note. ex: \"4\"\n * @param x the x coordinate to draw at\n * @param y the y coordinate to draw at\n * @param stem_direction the direction of the stem\n */\nfunction drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {\n    const width = Tables.SLASH_NOTEHEAD_WIDTH;\n    ctx.save();\n    ctx.setLineWidth(Tables.STEM_WIDTH);\n    let fill = false;\n    if (Tables.durationToNumber(duration) > 2) {\n        fill = true;\n    }\n    if (!fill)\n        x -= (Tables.STEM_WIDTH / 2) * stem_direction;\n    ctx.beginPath();\n    ctx.moveTo(x, y + staveSpace);\n    ctx.lineTo(x, y + 1);\n    ctx.lineTo(x + width, y - staveSpace);\n    ctx.lineTo(x + width, y);\n    ctx.lineTo(x, y + staveSpace);\n    ctx.closePath();\n    if (fill) {\n        ctx.fill();\n    }\n    else {\n        ctx.stroke();\n    }\n    if (Tables.durationToFraction(duration).equals(0.5)) {\n        const breve_lines = [-3, -1, width + 1, width + 3];\n        for (let i = 0; i < breve_lines.length; i++) {\n            ctx.beginPath();\n            ctx.moveTo(x + breve_lines[i], y - 10);\n            ctx.lineTo(x + breve_lines[i], y + 11);\n            ctx.stroke();\n        }\n    }\n    ctx.restore();\n}\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n    static get CATEGORY() {\n        return Category.NoteHead;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.custom_glyph = false;\n        this.stem_up_x_offset = 0;\n        this.stem_down_x_offset = 0;\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.note_type)\n            this.noteType = noteStruct.note_type;\n        this.displaced = noteStruct.displaced || false;\n        this.stem_direction = noteStruct.stem_direction || Stem.UP;\n        this.line = noteStruct.line || 0;\n        // Get glyph code based on duration and note type. This could be\n        // regular notes, rests, or other custom codes.\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // Swap out the glyph with ledger lines\n        if ((this.line > 5 || this.line < 0) && this.glyphProps.ledger_code_head) {\n            this.glyphProps.code_head = this.glyphProps.ledger_code_head;\n        }\n        this.glyph_code = this.glyphProps.code_head;\n        this.x_shift = noteStruct.x_shift || 0;\n        if (noteStruct.custom_glyph_code) {\n            this.custom_glyph = true;\n            this.glyph_code = noteStruct.custom_glyph_code;\n            this.stem_up_x_offset = noteStruct.stem_up_x_offset || 0;\n            this.stem_down_x_offset = noteStruct.stem_down_x_offset || 0;\n        }\n        this.setStyle(noteStruct.style);\n        this.slashed = noteStruct.slashed || false;\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // font size for note heads\n            glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE });\n        this.setWidth(this.custom_glyph &&\n            !this.glyph_code.startsWith('noteheadSlashed') &&\n            !this.glyph_code.startsWith('noteheadCircled')\n            ? Glyph.getWidth(this.glyph_code, this.render_options.glyph_font_scale)\n            : this.glyphProps.getWidth(this.render_options.glyph_font_scale));\n    }\n    /** Get the width of the notehead. */\n    getWidth() {\n        return this.width;\n    }\n    /** Determine if the notehead is displaced. */\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    /** Set the X coordinate. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Get the Y coordinate. */\n    getY() {\n        return this.y;\n    }\n    /** Set the Y coordinate. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Get the stave line the notehead is placed on. */\n    getLine() {\n        return this.line;\n    }\n    /** Set the stave line the notehead is placed on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Get the canvas `x` coordinate position of the notehead. */\n    getAbsoluteX() {\n        // If the note has not been preformatted, then get the static x value\n        // Otherwise, it's been formatted and we should use it's x value relative\n        // to its tick context\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        // For a more natural displaced notehead, we adjust the displacement amount\n        // by half the stem width in order to maintain a slight overlap with the stem\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        const musicFont = Tables.currentMusicFont();\n        const fontShift = musicFont.lookupMetric('notehead.shiftX', 0) * this.stem_direction;\n        const displacedFontShift = musicFont.lookupMetric('noteHead.displacedShiftX', 0) * this.stem_direction;\n        return (x +\n            fontShift +\n            (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction + displacedFontShift : 0));\n    }\n    /** Get the `BoundingBox` for the `NoteHead`. */\n    getBoundingBox() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n        }\n        const spacing = this.checkStave().getSpacingBetweenLines();\n        const half_spacing = spacing / 2;\n        const min_y = this.y - half_spacing;\n        return new BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);\n    }\n    /** Set notehead to a provided `stave`. */\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const width = this.getWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx;\n        this.setWidth(width);\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the notehead. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let head_x = this.getAbsoluteX();\n        if (this.custom_glyph) {\n            // head_x += this.x_shift;\n            head_x +=\n                this.stem_direction === Stem.UP\n                    ? this.stem_up_x_offset +\n                        (this.glyphProps.stem ? this.glyphProps.getWidth(this.render_options.glyph_font_scale) - this.width : 0)\n                    : this.stem_down_x_offset;\n        }\n        const y = this.y;\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", head_x, y);\n        // Begin and end positions for head.\n        const stem_direction = this.stem_direction;\n        const glyph_font_scale = this.render_options.glyph_font_scale;\n        const categorySuffix = `${this.glyph_code}Stem${stem_direction === Stem.UP ? 'Up' : 'Down'}`;\n        if (this.noteType === 's') {\n            const staveSpace = this.checkStave().getSpacingBetweenLines();\n            drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);\n        }\n        else {\n            Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code, {\n                category: `noteHead.${categorySuffix}`,\n            });\n        }\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`. */\nNoteHead.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StemmableNote extends Note {\n    static get CATEGORY() {\n        return Category.StemmableNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n    }\n    // Get and set the note's `Stem`\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChildElement(stem);\n        return this;\n    }\n    // Builds and sets a new stem\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag(category = 'flag') {\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = this.getStemDirection() === Stem.DOWN ? glyphProps.code_flag_downstem : glyphProps.code_flag_upstem;\n            if (flagCode)\n                this.flag = new Glyph(flagCode, this.render_options.glyph_font_scale, { category });\n        }\n    }\n    // Get the custom glyph associated with the outer note head on the base of the stem.\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    // Get the full length of stem\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    // Get the number of beams for this duration\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beam_count;\n        }\n        else {\n            return 0;\n        }\n    }\n    // Get the minimum length of stem\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        let length = frac.value() <= 1 ? 0 : 20;\n        // if note is flagged, cannot shorten beam\n        switch (this.duration) {\n            case '8':\n                if (this.beam == undefined)\n                    length = 35;\n                break;\n            case '16':\n                length = this.beam == undefined ? 35 : 25;\n                break;\n            case '32':\n                length = this.beam == undefined ? 45 : 35;\n                break;\n            case '64':\n                length = this.beam == undefined ? 50 : 40;\n                break;\n            case '128':\n                length = this.beam == undefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    // Get/set the direction of the stem\n    getStemDirection() {\n        if (!this.stem_direction)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem_direction;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stem_direction = direction;\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n            // Lookup the base custom notehead (closest to the base of the stem) to extend or shorten\n            // the stem appropriately. If there's no custom note head, lookup the standard notehead.\n            const glyphProps = this.getBaseCustomNoteHeadGlyphProps() || this.getGlyphProps();\n            // Get the font-specific customizations for the note heads.\n            const offsets = Tables.currentMusicFont().lookupMetric(`stem.noteHead.${glyphProps.code_head}`, {\n                offsetYBaseStemUp: 0,\n                offsetYTopStemUp: 0,\n                offsetYBaseStemDown: 0,\n                offsetYTopStemDown: 0,\n            });\n            // Configure the stem to use these offsets.\n            this.stem.setOptions({\n                stem_up_y_offset: offsets.offsetYTopStemUp,\n                stem_down_y_offset: offsets.offsetYTopStemDown,\n                stem_up_y_base_offset: offsets.offsetYBaseStemUp,\n                stem_down_y_base_offset: offsets.offsetYBaseStemDown, // glyph.stem_down_y_base_offset,\n            });\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    // Get the `x` coordinate of the stem\n    getStemX() {\n        const x_begin = this.getAbsoluteX() + this.x_shift;\n        const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();\n        const stem_x = this.stem_direction === Stem.DOWN ? x_begin : x_end;\n        return stem_x;\n    }\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;\n    }\n    // Get the stem extension for the current duration\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        if (this.stem_extension_override != undefined) {\n            return this.stem_extension_override;\n        }\n        // Use stem_beam_extension with beams\n        if (this.beam) {\n            return glyphProps.stem_beam_extension;\n        }\n        if (glyphProps) {\n            return this.getStemDirection() === Stem.UP ? glyphProps.stem_up_extension : glyphProps.stem_down_extension;\n        }\n        return 0;\n    }\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength(height) {\n        this.stem_extension_override = height - Stem.HEIGHT;\n        return this;\n    }\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return Tables.getGlyphProps(this.duration).flag == true && !this.beam;\n    }\n    /** Post formats the note. */\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    /** Renders the stem onto the canvas. */\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).draw();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.\n//\n// See `tests/stavenote_tests.ts` for usage examples.\nimport { BoundingBox } from './boundingbox';\nimport { Modifier } from './modifier';\nimport { NoteHead } from './notehead';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\nfunction showDeprecationWarningForNoteHeads() {\n    // eslint-disable-next-line\n    console.warn('StaveNote.note_heads is deprecated. Use StaveNote.noteHeads instead.', 'This accessor will be removed in VexFlow 5.0.');\n}\n// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('Vex.Flow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.StaveNote;\n    }\n    /**\n     * @deprecated Use Stem.UP.\n     */\n    static get STEM_UP() {\n        return Stem.UP;\n    }\n    /**\n     * @deprecated Use Stem.DOWN.\n     */\n    static get STEM_DOWN() {\n        return Stem.DOWN;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('noteHead.minPadding');\n    }\n    /** Format notes inside a ModifierContext. */\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            // Formatting uses sortedKeyProps to calculate line and minL.\n            const props = notes[i].sortedKeyProps;\n            const line = props[0].keyProps.line;\n            let minL = props[props.length - 1].keyProps.line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL = line + notes[i].glyphProps.line_above;\n                minL = line - notes[i].glyphProps.line_below;\n            }\n            else {\n                maxL =\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\n            }\n            notesList.push({\n                line: props[0].keyProps.line,\n                maxLine: maxL,\n                minLine: minL,\n                isrest: notes[i].isRest(),\n                stemDirection: stemDirection,\n                stemMax,\n                stemMin,\n                voice_shift: notes[i].getVoiceShiftWidth(),\n                is_displaced: notes[i].isDisplaced(),\n                note: notes[i],\n            });\n        }\n        let voices = 0;\n        let noteU = undefined;\n        let noteM = undefined;\n        let noteL = undefined;\n        const draw = [false, false, false];\n        for (let i = 0; i < notesList.length; i++) {\n            draw[i] = notesList[i].note.render_options.draw == false ? false : true;\n        }\n        if (draw[0] && draw[1] && draw[2]) {\n            // Three visible notes\n            voices = 3;\n            noteU = notesList[0];\n            noteM = notesList[1];\n            noteL = notesList[2];\n        }\n        else if (draw[0] && draw[1]) {\n            // Two visible notes, 0 & 1\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[1];\n        }\n        else if (draw[0] && draw[2]) {\n            // Two visible notes, 0 & 2\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[2];\n        }\n        else if (draw[1] && draw[2]) {\n            // Two visible notes, 1 & 2\n            voices = 2;\n            noteU = notesList[1];\n            noteL = notesList[2];\n        }\n        else {\n            // No shift required for less than 2 visible notes\n            return true;\n        }\n        // for two voice backward compatibility, ensure upper voice is stems up\n        // for three voices, the voices must be in order (upper, middle, lower)\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);\n        let xShift = 0;\n        // Test for two voice note intersection\n        if (voices === 2) {\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\n                noteL.note.render_options.draw = false;\n            }\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    // shift rest up\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    // shift rest down\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else {\n                    //Instead of shifting notes, remove the appropriate flag\n                    //If we are sharing a line, switch one notes stem direction.\n                    //If we are sharing a line and in the same voice, only then offset one note\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\n                        //If we have different dot values, must offset\n                        //Or If we have a white mixed with a black notehead, must offset\n                        let whiteNoteHeadCount = 0;\n                        let blackNoteHeadCount = 0;\n                        if (Tables.durationToNumber(noteU.note.duration) === 2) {\n                            whiteNoteHeadCount++;\n                        }\n                        else if (Tables.durationToNumber(noteU.note.duration) > 2) {\n                            blackNoteHeadCount++;\n                        }\n                        if (Tables.durationToNumber(noteL.note.duration) === 2) {\n                            whiteNoteHeadCount++;\n                        }\n                        else if (Tables.durationToNumber(noteL.note.duration) > 2) {\n                            blackNoteHeadCount++;\n                        }\n                        if ((whiteNoteHeadCount !== 2 && blackNoteHeadCount !== 2) ||\n                            noteU.note.getModifiersByType(Category.Dot).length !== noteL.note.getModifiersByType(Category.Dot).length) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                // upper voice is middle voice, so shift it right\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                // shift lower voice right\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (lineDiff < 1 && lineDiff > 0) {\n                            //if the notes are quite close but not on the same line, shift\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                // upper voice is middle voice, so shift it right\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                // shift lower voice right\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (noteU.note.voice !== noteL.note.voice) {\n                            //If we are not in the same voice\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                if (noteU.line != noteL.line) {\n                                    xShift = voiceXShift + 2;\n                                    noteU.note.setXShift(xShift);\n                                }\n                                else {\n                                    //same line, swap stem direction for one note\n                                    if (noteL.stemDirection === 1) {\n                                        noteL.stemDirection = -1;\n                                        noteL.note.setStemDirection(-1);\n                                    }\n                                }\n                            }\n                        } //Very close whole notes\n                    }\n                    else if (lineDiff < 1) {\n                        xShift = voiceXShift + 2;\n                        if (noteU.stemDirection === noteL.stemDirection) {\n                            // upper voice is middle voice, so shift it right\n                            noteU.note.setXShift(xShift);\n                        }\n                        else {\n                            // shift lower voice right\n                            noteL.note.setXShift(xShift);\n                        }\n                    }\n                    else if (noteU.note.hasStem()) {\n                        noteU.stemDirection = -noteU.note.getStemDirection();\n                        noteU.note.setStemDirection(noteU.stemDirection);\n                    }\n                    else if (noteL.note.hasStem()) {\n                        noteL.stemDirection = -noteL.note.getStemDirection();\n                        noteL.note.setStemDirection(noteL.stemDirection);\n                    }\n                }\n            }\n            // format complete\n            state.right_shift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        // For three voices, test if rests can be repositioned\n        //\n        // Special case 1 :: middle voice rest between two notes\n        //\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    // center middle voice rest between the upper and lower voices\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2; // shift middle rest right\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                // format complete\n                state.right_shift += xShift;\n                return true;\n            }\n        }\n        // Special case 2 :: all voices are rests\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            // Hide upper voice rest\n            noteU.note.render_options.draw = false;\n            // Hide lower voice rest\n            noteL.note.render_options.draw = false;\n            // format complete\n            state.right_shift += xShift;\n            return true;\n        }\n        // Test if any other rests can be repositioned\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            // Hide middle voice rest\n            noteM.note.render_options.draw = false;\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            // Hide middle voice rest\n            noteM.note.render_options.draw = false;\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            // shift upper voice rest up;\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            // shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        // If middle voice intersects upper or lower voice\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            // shift middle note right\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.right_shift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.minLine = 0;\n        this.maxLine = 0;\n        // Sorted variant of keyProps used internally\n        this.sortedKeyProps = [];\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octave_shift = (_b = noteStruct.octave_shift) !== null && _b !== void 0 ? _b : 0;\n        // Pull note rendering properties.\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // if true, displace note to right\n        this.displaced = false;\n        this.dot_shiftY = 0;\n        // for displaced ledger lines\n        this.use_default_head_x = false;\n        // Drawing\n        this._noteHeads = [];\n        this.modifiers = [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // font size for note heads and rests\n            glyph_font_scale: noteStruct.glyph_font_scale || Tables.NOTATION_FONT_SCALE, \n            // number of stroke px to the left and right of head\n            stroke_px: noteStruct.stroke_px || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        // Set the stem direction\n        if (noteStruct.auto_stem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stem_direction) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    reset() {\n        super.reset();\n        // Save prior noteHead styles & reapply them after making new noteheads.\n        const noteHeadStyles = this._noteHeads.map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        this._noteHeads.forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this._noteHeads.forEach((head) => head.setStave(stave));\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        // Update stem extension if a beam is assigned.\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    // Builds a `Stem` for the note\n    buildStem() {\n        this.setStem(new Stem({ hide: !!this.isRest() }));\n        return this;\n    }\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads() {\n        this._noteHeads = [];\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        // Draw notes from bottom to top.\n        // For down-stem notes, we draw from top to bottom.\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            // Building noteheads rely on sortedKeNotes in order to calculate the displacements\n            const noteProps = this.sortedKeyProps[i].keyProps;\n            const line = noteProps.line;\n            // Keep track of last line with a note head, so that consecutive heads\n            // are correctly displaced.\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.use_default_head_x = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                note_type: this.noteType,\n                displaced,\n                stem_direction: stemDirection,\n                custom_glyph_code: noteProps.code,\n                glyph_font_scale: this.render_options.glyph_font_scale,\n                x_shift: noteProps.shift_right,\n                stem_up_x_offset: noteProps.stem_up_x_offset,\n                stem_down_x_offset: noteProps.stem_down_x_offset,\n                line: noteProps.line,\n            });\n            this.addChildElement(notehead);\n            this._noteHeads[this.sortedKeyProps[i].index] = notehead;\n        }\n    }\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        // Figure out optimal stem direction based on given notes\n        // minLine & maxLine rely on sortedKeyProps\n        this.minLine = this.sortedKeyProps[0].keyProps.line;\n        this.maxLine = this.sortedKeyProps[this.keyProps.length - 1].keyProps.line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps() {\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            // All rests use the same position on the line.\n            // if (this.glyph.rest) key = this.glyph.position;\n            if (this.glyphProps.rest)\n                this.glyphProps.position = key;\n            const options = { octave_shift: this.octave_shift || 0, duration: this.duration };\n            const props = Tables.keyProperties(key, this.clef, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            // Override line placement for default rests\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            // Calculate displacement of this note\n            const line = props.line;\n            if (lastLine == undefined) {\n                lastLine = line;\n            }\n            else {\n                if (Math.abs(lastLine - line) === 0.5) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    // Have to mark the previous note as\n                    // displaced as well, for modifier placement\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        // Sort the notes from lowest line to highest line in sortedKeyProps\n        // Warn no longer required as keyProps remains unsorted\n        this.keyProps.forEach((keyProps, index) => {\n            this.sortedKeyProps.push({ keyProps, index });\n        });\n        this.sortedKeyProps.sort((a, b) => a.keyProps.line - b.keyProps.line);\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        var _a, _b;\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getBoundingBox on an unformatted note.\");\n        }\n        const { width: w, modLeftPx, leftDisplacedHeadPx } = this.getMetrics();\n        const x = this.getAbsoluteX() - modLeftPx - leftDisplacedHeadPx;\n        let minY = 0;\n        let maxY = 0;\n        const halfLineSpacing = ((_b = (_a = this.getStave()) === null || _a === void 0 ? void 0 : _a.getSpacingBetweenLines()) !== null && _b !== void 0 ? _b : 0) / 2;\n        const lineSpacing = halfLineSpacing * 2;\n        if (this.isRest()) {\n            const y = this.ys[0];\n            const frac = Tables.durationToFraction(this.duration);\n            if (frac.equals(1) || frac.equals(2)) {\n                minY = y - halfLineSpacing;\n                maxY = y + halfLineSpacing;\n            }\n            else {\n                minY = y - this.glyphProps.line_above * lineSpacing;\n                maxY = y + this.glyphProps.line_below * lineSpacing;\n            }\n        }\n        else if (this.glyphProps.stem) {\n            const ys = this.getStemExtents();\n            ys.baseY += halfLineSpacing * this.getStemDirection();\n            minY = Math.min(ys.topY, ys.baseY);\n            maxY = Math.max(ys.topY, ys.baseY);\n        }\n        else {\n            minY = 0;\n            maxY = 0;\n            for (let i = 0; i < this.ys.length; ++i) {\n                const yy = this.ys[i];\n                if (i === 0) {\n                    minY = yy;\n                    maxY = yy;\n                }\n                else {\n                    minY = Math.min(yy, minY);\n                    maxY = Math.max(yy, maxY);\n                }\n            }\n            minY -= halfLineSpacing;\n            maxY += halfLineSpacing;\n        }\n        return new BoundingBox(x, minY, w, maxY - minY);\n    }\n    // Gets the line number of the bottom note in the chord.\n    // If `isTopNote` is `true` then get the top note's line number instead\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        // No precondition assumed for sortedness of keyProps array\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return this.glyphProps.rest;\n    }\n    // Determine if the current note is a chord\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    // Determine if the `StaveNote` has a stem\n    hasStem() {\n        return this.glyphProps.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            // We adjust the origin of the stem because we want the stem left-aligned\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\n            return super.getStemX() + (this.stem_direction ? Stem.WIDTH / (2 * -this.stem_direction) : 0);\n        }\n    }\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `text_line`\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);\n    }\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = this._noteHeads.map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(y_top, y_bottom);\n        }\n        return this;\n    }\n    // Check if note is shifted to the right\n    isDisplaced() {\n        return this.displaced;\n    }\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.x_shift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.x_shift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    // Get the stave line on which to place a rest\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY(position, index, options = {}) {\n        var _a, _b;\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            // FIXME: Left modifier padding, move to font file\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            // FIXME: Right modifier padding, move to font file\n            x = this.getGlyphWidth() + this.x_shift + 2;\n            if (this.stem_direction === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += (_b = (_a = this === null || this === void 0 ? void 0 : this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().width) !== null && _b !== void 0 ? _b : 0;\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle(style) {\n        return super.setGroupStyle(style);\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        if (stem)\n            stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        var _a;\n        (_a = this.flag) === null || _a === void 0 ? void 0 : _a.setStyle(style);\n    }\n    getFlagStyle() {\n        var _a;\n        return (_a = this.flag) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle(index, style) {\n        this._noteHeads[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth() {\n        // TODO: may need to accommodate for dot here.\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stem_direction === Stem.DOWN ? this.getGlyphWidth() : 0);\n        // For upstems with flags, the extra space is unnecessary, since it's taken\n        // up by the flag.\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stem_direction === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            // If there are no modifiers on this note, make sure there is adequate padding\n            // between the notes.\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        // For upward flagged notes, the width of the flag needs to be added\n        if (this.shouldDrawFlag() && this.stem_direction === Stem.UP) {\n            width += this.getGlyphWidth();\n            // TODO: Add flag width as a separate metric\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    /**\n     * @typedef {Object} noteHeadBounds\n     * @property {number} y_top the highest notehead bound\n     * @property {number} y_bottom the lowest notehead bound\n     * @property {number|Null} displaced_x the starting x for displaced noteheads\n     * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads\n     * @property {number} highest_line the highest notehead line in traditional music line\n     *  numbering (bottom line = 1, top line = 5)\n     * @property {number} lowest_line the lowest notehead line\n     * @property {number|false} highest_displaced_line the highest staff line number\n     *   for a displaced notehead\n     * @property {number|false} lowest_displaced_line\n     * @property {number} highest_non_displaced_line\n     * @property {number} lowest_non_displaced_line\n     */\n    /**\n     * Get the staff line and y value for the highest & lowest noteheads\n     * @returns {noteHeadBounds}\n     */\n    getNoteHeadBounds() {\n        // Top and bottom Y values for stem.\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        this._noteHeads.forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            y_top: yTop,\n            y_bottom: yBottom,\n            displaced_x: displacedX,\n            non_displaced_x: nonDisplacedX,\n            highest_line: highestLine,\n            lowest_line: lowestLine,\n            highest_displaced_line: highestDisplacedLine,\n            lowest_displaced_line: lowestDisplacedLine,\n            highest_non_displaced_line: highestNonDisplacedLine,\n            lowest_non_displaced_line: lowestNonDisplacedLine,\n        };\n    }\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.x_shift;\n    }\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return this._noteHeads.slice();\n    }\n    /** @deprecated use StaveNote.noteHeads instead. */\n    get note_heads() {\n        showDeprecationWarningForNoteHeads();\n        return this.noteHeads;\n    }\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { glyphProps, render_options: { stroke_px }, } = this;\n        const ctx = this.checkContext();\n        const width = glyphProps.getWidth() + stroke_px * 2;\n        const doubleWidth = 2 * (glyphProps.getWidth() + stroke_px) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highest_line, lowest_line, highest_displaced_line, highest_non_displaced_line, lowest_displaced_line, lowest_non_displaced_line, displaced_x, non_displaced_x, } = this.getNoteHeadBounds();\n        // Early out if there are no ledger lines to draw.\n        if (highest_line < 6 && lowest_line > 0)\n            return;\n        const min_x = Math.min(displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0, non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = min_x - stroke_px;\n            else if (normal)\n                x = (non_displaced_x !== null && non_displaced_x !== void 0 ? non_displaced_x : 0) - stroke_px;\n            else\n                x = (displaced_x !== null && displaced_x !== void 0 ? displaced_x : 0) - stroke_px;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        this.applyStyle(ctx, style);\n        // Draw ledger lines below the staff:\n        for (let line = 6; line <= highest_line; ++line) {\n            const normal = non_displaced_x !== undefined && line <= highest_non_displaced_line;\n            const displaced = highest_displaced_line !== undefined && line <= highest_displaced_line;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        // Draw ledger lines above the staff:\n        for (let line = 0; line >= lowest_line; --line) {\n            const normal = non_displaced_x !== undefined && line >= lowest_non_displaced_line;\n            const displaced = lowest_displaced_line !== undefined && line >= lowest_displaced_line;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        this.restoreStyle(ctx, style);\n    }\n    // Draw all key modifiers\n    drawModifiers(noteheadParam) {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = this._noteHeads[index];\n            if (notehead == noteheadParam) {\n                const noteheadStyle = notehead.getStyle();\n                notehead.applyStyle(ctx, noteheadStyle);\n                modifier.setContext(ctx);\n                modifier.drawWithStyle();\n                notehead.restoreStyle(ctx, noteheadStyle);\n            }\n        }\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyphProps.flag == true;\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam;\n    }\n    // Draw the flag for the note\n    drawFlag() {\n        var _a, _b, _c, _d, _e;\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { y_top, y_bottom } = this.getNoteHeadBounds();\n            // eslint-disable-next-line\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX();\n            // What's with the magic +/- 2\n            // ANSWER: a corner of the note stem pokes out beyond the tip of the flag.\n            // The extra +/- 2 pushes the flag glyph outward so it covers the stem entirely.\n            // Alternatively, we could shorten the stem.\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    y_top -\n                        noteStemHeight +\n                        2 -\n                        (this.glyphProps ? this.glyphProps.stem_down_extension : 0) * this.getStaveNoteScale() -\n                        ((_b = (_a = this.flag) === null || _a === void 0 ? void 0 : _a.getMetrics().y_shift) !== null && _b !== void 0 ? _b : 0) * (1 - this.getStaveNoteScale())\n                : // Up stems are above the note head and have flags on the right.\n                    y_bottom -\n                        noteStemHeight -\n                        2 +\n                        (this.glyphProps ? this.glyphProps.stem_up_extension : 0) * this.getStaveNoteScale() -\n                        ((_d = (_c = this.flag) === null || _c === void 0 ? void 0 : _c.getMetrics().y_shift) !== null && _d !== void 0 ? _d : 0) * (1 - this.getStaveNoteScale());\n            // Draw the Flag\n            (_e = this.flag) === null || _e === void 0 ? void 0 : _e.render(ctx, flagX, flagY);\n        }\n    }\n    // Draw the NoteHeads\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        this._noteHeads.forEach((notehead) => {\n            notehead.applyStyle(ctx);\n            ctx.openGroup('notehead', notehead.getAttribute('id'), { pointerBBox: true });\n            notehead.setContext(ctx).draw();\n            this.drawModifiers(notehead);\n            ctx.closeGroup();\n            notehead.restoreStyle(ctx);\n        });\n    }\n    drawStem(stemOptions) {\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\n        // is called at all. Perhaps these should be removed?\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        // If we will render a flag, we shorten the stem so that the tip\n        // does not poke through the flag.\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        if (this.stem) {\n            this.stem.setContext(ctx).draw();\n        }\n    }\n    /** Primarily used as the scaling factor for grace notes, GraceNote will return the required scale. */\n    getStaveNoteScale() {\n        return 1.0;\n    }\n    /**\n     * Override stemmablenote stem extension to adjust for distance from middle line.\n     */\n    getStemExtension() {\n        const super_stem_extension = super.getStemExtension();\n        if (!this.glyphProps.stem) {\n            return super_stem_extension;\n        }\n        const stem_direction = this.getStemDirection();\n        if (stem_direction !== this.calculateOptimalStemDirection()) {\n            return super_stem_extension; // no adjustment for manually set stem direction.\n        }\n        let mid_line_distance;\n        const MIDDLE_LINE = 3;\n        if (stem_direction === Stem.UP) {\n            // Note that the use of maxLine here instead of minLine might\n            // seem counterintuitive, but in the case of (say) treble clef\n            // chord(F2, E4) stem up, we do not want to extend the stem because\n            // of F2, when a normal octave-length stem above E4 is fine.\n            //\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\n            // will be known.\n            mid_line_distance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            mid_line_distance = this.minLine - MIDDLE_LINE;\n        }\n        // how many lines more than an octave is the relevant notehead?\n        const lines_over_octave_from_mid_line = mid_line_distance - 3.5;\n        if (lines_over_octave_from_mid_line <= 0) {\n            return super_stem_extension;\n        }\n        const stave = this.getStave();\n        let spacing_between_lines = 10;\n        if (stave != undefined) {\n            spacing_between_lines = stave.getSpacingBetweenLines();\n        }\n        return super_stem_extension + lines_over_octave_from_mid_line * spacing_between_lines;\n    }\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw() {\n        if (this.render_options.draw === false)\n            return;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        // Format note head x positions\n        this._noteHeads.forEach((notehead) => notehead.setX(xBegin));\n        if (this.stem) {\n            // Format stem x positions\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n        }\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        // Apply the overall style -- may be contradicted by local settings:\n        this.applyStyle();\n        ctx.openGroup('stavenote', this.getAttribute('id'));\n        this.drawLedgerLines();\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        ctx.closeGroup();\n        this.restoreStyle();\n        this.setRendered();\n    }\n}\nStaveNote.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveTie extends Element {\n    static get CATEGORY() {\n        return Category.StaveTie;\n    }\n    /**\n     * @param notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.render_options = {\n            cp1: 8,\n            cp2: 12,\n            text_shift_x: 0,\n            first_x_shift: 0,\n            last_x_shift: 0,\n            y_shift: 7,\n            tie_spacing: 0,\n        };\n        this.resetFont();\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');\n        }\n        if (!notes.first_indices) {\n            notes.first_indices = [0];\n        }\n        if (!notes.last_indices) {\n            notes.last_indices = [0];\n        }\n        if (notes.first_indices.length !== notes.last_indices.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indices.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.notes.first_note || !this.notes.last_note;\n    }\n    renderTie(params) {\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.render_options.cp1;\n        let cp2 = this.render_options.cp2;\n        if (Math.abs(params.last_x_px - params.first_x_px) < 10) {\n            cp1 = 2;\n            cp2 = 8;\n        }\n        const first_x_shift = this.render_options.first_x_shift;\n        const last_x_shift = this.render_options.last_x_shift;\n        const y_shift = this.render_options.y_shift * params.direction;\n        // setNotes(...) verified that first_indices and last_indices are not undefined.\n        // As a result, we use the ! non-null assertion operator here.\n        // eslint-disable-next-line\n        const first_indices = this.notes.first_indices;\n        // eslint-disable-next-line\n        const last_indices = this.notes.last_indices;\n        this.applyStyle();\n        ctx.openGroup('stavetie', this.getAttribute('id'));\n        for (let i = 0; i < first_indices.length; ++i) {\n            const cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;\n            const first_y_px = params.first_ys[first_indices[i]] + y_shift;\n            const last_y_px = params.last_ys[last_indices[i]] + y_shift;\n            if (isNaN(first_y_px) || isNaN(last_y_px)) {\n                throw new RuntimeError('BadArguments', 'Bad indices for tie rendering.');\n            }\n            const top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;\n            const bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);\n            ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);\n            ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);\n            ctx.closePath();\n            ctx.fill();\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n    renderText(first_x_px, last_x_px) {\n        var _a, _b, _c;\n        if (!this.text)\n            return;\n        const ctx = this.checkContext();\n        let center_x = (first_x_px + last_x_px) / 2;\n        center_x -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.first_note) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.last_note) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, center_x + this.render_options.text_shift_x, stave.getYForTopText() - 1);\n            ctx.restore();\n        }\n    }\n    /**\n     * Returns the TieNotes structure of the first and last note this tie connects.\n     */\n    getNotes() {\n        return this.notes;\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const first_note = this.notes.first_note;\n        const last_note = this.notes.last_note;\n        // Provide some default values so the compiler doesn't complain.\n        let first_x_px = 0;\n        let last_x_px = 0;\n        let first_ys = [0];\n        let last_ys = [0];\n        let stem_direction = 0;\n        if (first_note) {\n            first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;\n            stem_direction = first_note.getStemDirection();\n            first_ys = first_note.getYs();\n        }\n        else if (last_note) {\n            const stave = last_note.checkStave();\n            first_x_px = stave.getTieStartX();\n            first_ys = last_note.getYs();\n            this.notes.first_indices = this.notes.last_indices;\n        }\n        if (last_note) {\n            last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;\n            stem_direction = last_note.getStemDirection();\n            last_ys = last_note.getYs();\n        }\n        else if (first_note) {\n            const stave = first_note.checkStave();\n            last_x_px = stave.getTieEndX();\n            last_ys = first_note.getYs();\n            this.notes.last_indices = this.notes.first_indices;\n        }\n        if (this.direction) {\n            stem_direction = this.direction;\n        }\n        this.renderTie({\n            first_x_px,\n            last_x_px,\n            first_ys,\n            last_ys,\n            direction: stem_direction,\n        });\n        this.renderText(first_x_px, last_x_px);\n        return true;\n    }\n}\n/** Default text font. */\nStaveTie.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n","// / [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nimport { Category } from './typeguard';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return Category.TabTie;\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    /**\n     * @param notes is a struct that has:\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super(notes, text);\n        this.render_options.cp1 = 9;\n        this.render_options.cp2 = 11;\n        this.render_options.y_shift = 3;\n        this.direction = -1; // Tab tie's are always face up.\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n    static get CATEGORY() {\n        return Category.Voice;\n    }\n    /**\n     * Modes allow the addition of ticks in three different ways:\n     * - STRICT: This is the default. Ticks must fill the voice.\n     * - SOFT: Ticks can be added without restrictions.\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n     */\n    static get Mode() {\n        return VoiceMode;\n    }\n    constructor(time) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = {\n            softmaxFactor: Tables.SOFTMAX_FACTOR,\n        };\n        // Convert the `time` string into a VoiceTime object if necessary.\n        let voiceTime;\n        if (typeof time === 'string') {\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    num_beats: parseInt(match[1]),\n                    beat_value: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        // Default time signature is 4/4.\n        this.time = Object.assign({ num_beats: 4, beat_value: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        // Recalculate total ticks.\n        this.totalTicks = new Fraction(this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    /** Get the total ticks in the voice. */\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    /** Get the total ticks used in the voice by all the tickables. */\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    /** Get the largest width of all the tickables. */\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    /** Get the tick count for the shortest tickable */\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    /** Get the tickables in the voice. */\n    getTickables() {\n        return this.tickables;\n    }\n    /** Get the voice mode. */\n    getMode() {\n        return this.mode;\n    }\n    /**\n     * Set the voice mode.\n     * @param mode value from `VoiceMode`\n     */\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    /** Get the resolution multiplier for the voice. */\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    /** Get the actual tick resolution for the voice. */\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    /** Set the voice's stave. */\n    setStave(stave) {\n        this.stave = stave;\n        // Reset the bounding box so we can reformat.\n        this.boundingBox = undefined;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    /** Get the bounding box for the voice. */\n    getBoundingBox() {\n        if (!this.boundingBox) {\n            const stave = this.checkStave();\n            let boundingBox = undefined;\n            for (let i = 0; i < this.tickables.length; ++i) {\n                const tickable = this.tickables[i];\n                if (!tickable.getStave())\n                    tickable.setStave(stave);\n                const bb = tickable.getBoundingBox();\n                if (bb) {\n                    boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n                }\n            }\n            this.boundingBox = boundingBox;\n        }\n        return this.boundingBox;\n    }\n    /** Set the voice mode to strict or soft. */\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    /** Determine if the voice is complete according to the voice mode. */\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * We use softmax to layout the tickables proportional to the exponent of\n     * their duration. The softmax factor is used to determine the 'linearness' of\n     * the layout.\n     *\n     * The softmax of all the tickables in this voice should sum to 1.\n     */\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        return this;\n    }\n    /**\n     * Calculate the sum of the exponents of all the ticks in this voice to use\n     * as the denominator of softmax.\n     */\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = this.tickables.map(exp).reduce((a, b) => a + b, 0);\n        return this.expTicksUsed;\n    }\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    /** Add a tickable to the voice. */\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            // Update the total ticks for this line.\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0; // reset\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            // Track the smallest tickable for formatting.\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            // Expand total ticks using denominator from ticks used.\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        // Add the tickable to the line.\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    /** Add an array of tickables to the voice. */\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    /** Preformat the voice by applying the voice's stave to each note. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /**\n     * Render the voice onto the canvas `context` and an optional `stave`.\n     * If `stave` is omitted, it is expected that the notes have staves\n     * already set.\n     *\n     * This method also calculates the voice's boundingBox while drawing\n     * the notes. Note the similarities with this.getBoundingBox().\n     */\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        let boundingBox = undefined;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            // Set the stave if provided.\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            const bb = tickable.getBoundingBox();\n            if (bb) {\n                boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;\n            }\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n        this.boundingBox = boundingBox;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { Category, isStaveNote } from './typeguard';\nimport { log } from './util';\nimport { Voice } from './voice';\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('Vex.Flow.GraceNoteGroup', args);\n}\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.GraceNoteGroup;\n    }\n    /** Arranges groups inside a `ModifierContext`. */\n    static format(gracenote_groups, state) {\n        const group_spacing_stave = 4;\n        const group_spacing_tab = 0;\n        if (!gracenote_groups || gracenote_groups.length === 0)\n            return false;\n        const group_list = [];\n        let prev_note = null;\n        let shiftL = 0;\n        for (let i = 0; i < gracenote_groups.length; ++i) {\n            const gracenote_group = gracenote_groups[i];\n            const note = gracenote_group.getNote();\n            const is_stavenote = isStaveNote(note);\n            const spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;\n            if (is_stavenote && note !== prev_note) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shiftL = Math.max(note.getLeftDisplacedHeadPx(), shiftL);\n                }\n                prev_note = note;\n            }\n            group_list.push({ shift: shiftL, gracenote_group, spacing });\n        }\n        // If first note left shift in case it is displaced\n        let group_shift = group_list[0].shift;\n        let formatWidth;\n        for (let i = 0; i < group_list.length; ++i) {\n            const gracenote_group = group_list[i].gracenote_group;\n            gracenote_group.preFormat();\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n            group_shift = Math.max(formatWidth, group_shift);\n        }\n        for (let i = 0; i < group_list.length; ++i) {\n            const gracenote_group = group_list[i].gracenote_group;\n            formatWidth = gracenote_group.getWidth() + group_list[i].spacing;\n            gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift) + StaveNote.minNoteheadPadding);\n        }\n        state.left_shift += group_shift;\n        return true;\n    }\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n    constructor(grace_notes, show_slur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.grace_notes = grace_notes;\n        this.width = 0;\n        this.show_slur = show_slur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            num_beats: 4,\n            beat_value: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.render_options = {\n            slur_y_shift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.grace_notes);\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(grace_notes) {\n        grace_notes = grace_notes || this.grace_notes;\n        if (grace_notes.length > 1) {\n            const beam = new Beam(grace_notes);\n            beam.render_options.beam_width = 3;\n            beam.render_options.partial_beam_length = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width + StaveNote.minNoteheadPadding;\n    }\n    getGraceNotes() {\n        return this.grace_notes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function\n        // Draw grace notes.\n        this.grace_notes.forEach((graceNote) => graceNote.setContext(ctx).draw());\n        // Draw beams.\n        this.beams.forEach((beam) => beam.setContext(ctx).draw());\n        if (this.show_slur) {\n            // Create and draw slur.\n            const is_stavenote = isStaveNote(note);\n            const TieClass = is_stavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                last_note: this.grace_notes[0],\n                first_note: note,\n                first_indices: [0],\n                last_indices: [0],\n            });\n            this.slur.render_options.cp2 = 12;\n            this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;\n            this.slur.setContext(ctx).draw();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { Voice } from './voice';\nexport class NoteSubGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.NoteSubGroup;\n    }\n    // Arrange groups inside a `ModifierContext`\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.left_shift += width;\n        return true;\n    }\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            num_beats: 4,\n            beat_value: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\nimport { Fraction } from './fraction';\nimport { RuntimeError } from './util';\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n */\nexport class TickContext {\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    constructor(options) {\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = options && options.tickID ? options.tickID : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined; // Biggest tickable\n        this.minTicks = undefined; // this can remian null if all tickables have ignore_ticks\n        this.minTickable = undefined;\n        this.padding = 1; // padding on each side (width += padding * 2)\n        this.x = 0;\n        this.xBase = 0; // base x position without xOffset\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n        this.tickables = []; // Notes, tabs, chords, lyrics.\n        this.tickablesByVoice = {}; // Tickables indexed by voice number\n        // Formatting metrics\n        this.notePx = 0; // width of widest note in this context\n        this.glyphPx = 0; // width of glyph (note head)\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n        this.modLeftPx = 0; // Left modifier pixels\n        this.modRightPx = 0; // Right modifier pixels\n        this.totalLeftPx = 0; // Total left pixels\n        this.totalRightPx = 0; // Total right pixels\n        this.tContexts = []; // Parent array of tick contexts\n        this.width = 0;\n        this.formatterMetrics = {\n            // The freedom of a tickcontext is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    } // use of xBase and xOffset is optional, avoids offset creep\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    /**\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n     */\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    /** Gets widths context, note and left/right modifiers for formatting. */\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width,\n            glyphPx,\n            notePx,\n            leftDisplacedHeadPx,\n            rightDisplacedHeadPx,\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks == null) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex || 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            // Maintain max displaced head pixels from all tickables in the context\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            // Maintain the widest note for all tickables in the context\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            // Maintain the widest note head\n            this.glyphPx = Math.max(this.glyphPx, metrics.glyphWidth || 0);\n            // Total modifier shift\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            // Total shift\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            // Recalculate the tick context total width\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n// MIT License\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { Category, isTabNote } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('Vex.Flow.Ornament', args);\n}\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `Vex.Flow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n    /** Ornaments category string. */\n    static get CATEGORY() {\n        return Category.Ornament;\n    }\n    static get minPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('noteHead.minPadding');\n    }\n    /** Arrange ornaments inside `ModifierContext` */\n    static format(ornaments, state) {\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0; // width is used by ornaments, which are always centered on the note head\n        let right_shift = state.right_shift; // jazz ornaments calculate r/l shift separately\n        let left_shift = state.left_shift;\n        let yOffset = 0;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (Ornament.ornamentRelease.indexOf(ornament.type) >= 0) {\n                ornament.x_shift += right_shift + 2;\n            }\n            if (Ornament.ornamentAttack.indexOf(ornament.type) >= 0) {\n                ornament.x_shift -= left_shift + 2;\n            }\n            if (ornament.reportedWidth && ornament.x_shift < 0) {\n                left_shift += ornament.reportedWidth;\n            }\n            else if (ornament.reportedWidth && ornament.x_shift >= 0) {\n                right_shift += ornament.reportedWidth + Ornament.minPadding;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n            }\n            // articulations above/below the line can be stacked.\n            if (Ornament.ornamentArticulation.indexOf(ornament.type) >= 0) {\n                // Unfortunately we don't know the stem direction.  So we base it\n                // on the line number, but also allow it to be overridden.\n                const ornamentNote = defined(ornament.note, 'NoAttachedNote');\n                if (ornamentNote.getLineNumber() >= 3 || ornament.getPosition() === Modifier.Position.ABOVE) {\n                    state.top_text_line += increment;\n                    ornament.y_shift += yOffset;\n                    yOffset -= ornament.glyph.bbox.getH();\n                }\n                else {\n                    state.text_line += increment;\n                    ornament.y_shift += yOffset;\n                    yOffset += ornament.glyph.bbox.getH();\n                }\n            }\n            else {\n                if (ornament.getPosition() === Modifier.Position.ABOVE) {\n                    ornament.setTextLine(state.top_text_line);\n                    state.top_text_line += increment;\n                }\n                else {\n                    ornament.setTextLine(state.text_line);\n                    state.text_line += increment;\n                }\n            }\n        }\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\n        // X position, but jazz ornaments sometimes need to.\n        state.left_shift = left_shift + width / 2;\n        state.right_shift = right_shift + width / 2;\n        return true;\n    }\n    /**\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n     * these are generally on the top of the staff.\n     */\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    /**\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\n     * any accidentals\n     */\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    /**\n     * The ornament is aligned based on the note head, but without regard to whether the\n     * stem goes up or down.\n     */\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'bend', 'plungerClosed', 'plungerOpen', 'scoop'];\n    }\n    /**\n     * An ornament that happens on the release of the note, generally placed after the\n     * note and overlapping the next beat/measure..\n     */\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    /** ornamentArticulation goes above/below the note based on space availablity */\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    /**\n     * Legacy ornaments have hard-coded metrics.  If additional ornament types are\n     * added, get their metrics here.\n     */\n    getMetrics() {\n        const ornamentMetrics = Tables.currentMusicFont().getMetrics().ornament;\n        if (!ornamentMetrics)\n            throw new RuntimeError('BadMetrics', `ornament missing`);\n        return ornamentMetrics[this.ornament.code];\n    }\n    /**\n     * Create a new ornament of type `type`, which is an entry in\n     * `Vex.Flow.ornamentCodes` in `tables.ts`.\n     */\n    constructor(type) {\n        super();\n        this.type = type;\n        this.delayed = false;\n        this.render_options = {\n            font_scale: 38,\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        this.ornament = Tables.ornamentCodes(this.type);\n        // new ornaments have their origin at the origin, and have more specific\n        // metrics.  Legacy ornaments do some\n        // x scaling, and have hard-coded metrics\n        const metrics = this.getMetrics();\n        // some jazz ornaments are above or below depending on stem direction.\n        this.adjustForStemDirection = false;\n        // some jazz ornaments like falls are supposed to overlap with future bars\n        // and so we report a different width than they actually take up.\n        this.reportedWidth = metrics && metrics.reportedWidth ? metrics.reportedWidth : 0;\n        this.stemUpYOffset = metrics && metrics.stemUpYOffset ? metrics.stemUpYOffset : 0;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        if (!this.ornament) {\n            throw new RuntimeError('ArgumentError', `Ornament not found: '${this.type}'`);\n        }\n        this.x_shift = metrics ? metrics.xOffset : 0;\n        this.y_shift = metrics ? metrics.yOffset : 0;\n        this.glyph = new Glyph(this.ornament.code, this.render_options.font_scale, {\n            category: `ornament.${this.ornament.code}`,\n        });\n        // Is this a jazz ornament that goes between this note and the next note.\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        // Legacy ornaments need this.  I don't know why, but horizontal spacing issues\n        // happen if I don't set it.\n        if (!metrics) {\n            this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift\n        }\n    }\n    /** Set whether the ornament is to be delayed. */\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    /** Set the upper accidental for the ornament. */\n    setUpperAccidental(accid) {\n        const scale = this.render_options.font_scale / 1.3;\n        this.accidentalUpper = new Glyph(Tables.accidentalCodes(accid).code, scale);\n        this.accidentalUpper.setOrigin(0.5, 1.0);\n        return this;\n    }\n    /** Set the lower accidental for the ornament. */\n    setLowerAccidental(accid) {\n        const scale = this.render_options.font_scale / 1.3;\n        this.accidentalLower = new Glyph(Tables.accidentalCodes(accid).code, scale);\n        this.accidentalLower.setOrigin(0.5, 1.0);\n        return this;\n    }\n    /** Render ornament in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDir = note.getStemDirection();\n        const stave = note.checkStave();\n        this.applyStyle();\n        ctx.openGroup('ornament', this.getAttribute('id'));\n        // Get stem extents\n        const stemExtents = note.checkStem().getExtents();\n        let y = stemDir === Stem.DOWN ? stemExtents.baseY : stemExtents.topY;\n        // TabNotes don't have stems attached to them. Tab stems are rendered outside the stave.\n        if (isTabNote(note)) {\n            if (note.hasStem()) {\n                if (stemDir === Stem.DOWN) {\n                    y = stave.getYForTopText(this.text_line);\n                }\n            }\n            else {\n                // Without a stem\n                y = stave.getYForTopText(this.text_line);\n            }\n        }\n        const isPlacedOnNoteheadSide = stemDir === Stem.DOWN;\n        const spacing = stave.getSpacingBetweenLines();\n        let lineSpacing = 1;\n        // Beamed stems are longer than quarter note stems, adjust accordingly\n        if (!isPlacedOnNoteheadSide && note.hasBeam()) {\n            lineSpacing += 0.5;\n        }\n        const totalSpacing = spacing * (this.text_line + lineSpacing);\n        const glyphYBetweenLines = y - totalSpacing;\n        // Get initial coordinates for the modifier position\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        // If the ornament is aligned with the note head, don't consider the stave y\n        // but use the 'natural' modifier y\n        let glyphY = this.ornamentAlignWithNoteHead\n            ? start.y\n            : Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);\n        glyphY += this.y_shift;\n        // Ajdust x position if ornament is delayed\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = glyphX - (stave.getX() - 10);\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                delayXShift += this.glyph.getMetrics().width / 2;\n                const nextContext = TickContext.getNextContext(note.getTickContext());\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - startX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.ornament, glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.render(ctx, glyphX, glyphY);\n            glyphY -= this.accidentalLower.getMetrics().height;\n            glyphY -= this.render_options.accidentalLowerPadding;\n        }\n        if (this.stemUpYOffset && note.hasStem() && note.getStemDirection() === 1) {\n            glyphY += this.stemUpYOffset;\n        }\n        if (note.getLineNumber() < 5 && Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            glyphY = note.checkStave().getBoundingBox().getY() + 40;\n        }\n        this.glyph.render(ctx, glyphX + this.x_shift, glyphY);\n        if (this.accidentalUpper) {\n            glyphY -= this.glyph.getMetrics().height + this.render_options.accidentalUpperPadding;\n            this.accidentalUpper.render(ctx, glyphX, glyphY);\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`. */\nOrnament.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Rodrigo Vilar\n// MIT License\nimport { Glyph } from './glyph';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isGraceNote } from './typeguard';\n/** Parenthesis implements parenthesis modifiers for notes. */\nexport class Parenthesis extends Modifier {\n    static get CATEGORY() {\n        return Category.Parenthesis;\n    }\n    /** Add parentheses to the notes. */\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    /** Arrange parentheses inside a ModifierContext. */\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let x_widthL = 0;\n        let x_widthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                x_widthR = x_widthR > shift + parenthesis.width ? x_widthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index);\n                x_widthL = x_widthL > shift + parenthesis.width ? x_widthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.left_shift += x_widthL;\n        state.right_shift += x_widthR;\n        return true;\n    }\n    /**\n     * Constructor\n     *\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\n     */\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\n    }\n    /** Set the associated note. */\n    setNote(note) {\n        this.note = note;\n        this.point = Tables.currentMusicFont().lookupMetric('parenthesis.default.point');\n        this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.default.width'));\n        if (isGraceNote(note)) {\n            this.point = Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.point');\n            this.setWidth(Tables.currentMusicFont().lookupMetric('parenthesis.gracenote.width'));\n        }\n        return this;\n    }\n    /** Render the parenthesis. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        const x = start.x + this.x_shift;\n        const y = start.y + this.y_shift;\n        if (this.position == Modifier.Position.RIGHT) {\n            Glyph.renderGlyph(ctx, x + 1, y, this.point, 'noteheadParenthesisRight', {\n                category: `noteHead.standard.noteheadParenthesisRight`,\n            });\n        }\n        else if (this.position == Modifier.Position.LEFT) {\n            Glyph.renderGlyph(ctx, x - 2, y, this.point, 'noteheadParenthesisLeft', {\n                category: `noteHead.standard.noteheadParenthesisLeft`,\n            });\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Ron B. Yeh\n// MIT License\n//\n// Utilities for working with Web APIs.\n// See: https://developer.mozilla.org/en-US/docs/Web/API\nimport { globalObject } from './util';\n// eslint-disable-next-line\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLCanvasElement class,\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        // OR it's pretending to be a <canvas> element. Good enough!\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\n// eslint-disable-next-line\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLDivElement class.\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font } from './font';\nimport { RenderContext } from './rendercontext';\nimport { globalObject, warn } from './util';\nimport { isHTMLCanvas } from './web';\n/**\n * A rendering context for the Canvas backend. This class serves as a proxy for the\n * underlying CanvasRenderingContext2D object, part of the browser's API.\n */\nexport class CanvasContext extends RenderContext {\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n    }\n    /**\n     * Ensure that width and height do not exceed the browser limit.\n     * @returns array of [width, height] clamped to the browser limit.\n     */\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    constructor(context) {\n        super();\n        /** Height of one line of text (in pixels). */\n        this.textHeight = 0;\n        this.context2D = context;\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    /**\n     * Set all pixels to transparent black rgba(0,0,0,0).\n     */\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // eslint-disable-next-line\n    openGroup(cls, id, attrs) {\n        // Containers not implemented.\n    }\n    closeGroup() {\n        // Containers not implemented.\n    }\n    // eslint-disable-next-line\n    add(child) {\n        // Containers not implemented.\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\n    // eslint-disable-next-line\n    setBackgroundFillStyle(style) {\n        // DO NOTHING\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\n        // transform, so we have to do it manually. We assume uniform scaling\n        // (though allow for rotation) because the blur can only be scaled\n        // uniformly anyway.\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height) {\n        const canvas = this.context2D.canvas;\n        const devicePixelRatio = globalObject().devicePixelRatio || 1;\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * devicePixelRatio, height * devicePixelRatio);\n        // Divide back down by the pixel ratio and convert to integers.\n        width = (width / devicePixelRatio) | 0;\n        height = (height / devicePixelRatio) | 0;\n        canvas.width = width * devicePixelRatio;\n        canvas.height = height * devicePixelRatio;\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\n        // Only HTMLCanvasElement has a style attribute.\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(devicePixelRatio, devicePixelRatio);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    /**\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n     */\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        // Return x, y, width & height in the same manner as svg getBBox\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.context2D.font;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Gregory Ristow (2015)\nimport { Font, FontStyle, FontWeight } from './font';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\nclass MeasureTextCache {\n    constructor() {\n        // The cache is keyed first by the text string, then by the font attributes\n        // joined together.\n        this.cache = {};\n    }\n    lookup(text, svg, attributes) {\n        let entries = this.cache[text];\n        if (entries === undefined) {\n            entries = {};\n            this.cache[text] = entries;\n        }\n        const family = attributes['font-family'];\n        const size = attributes['font-size'];\n        const weight = attributes['font-weight'];\n        const style = attributes['font-style'];\n        const key = `${family}%${size}%${weight}%${style}`;\n        let entry = entries[key];\n        if (entry === undefined) {\n            entry = this.measureImpl(text, svg, attributes);\n            entries[key] = entry;\n        }\n        return entry;\n    }\n    measureImpl(text, svg, attributes) {\n        let txt = this.txt;\n        if (!txt) {\n            // Create the SVG text element that will be used to measure text in the event\n            // of a cache miss.\n            txt = document.createElementNS(SVG_NS, 'text');\n            this.txt = txt;\n        }\n        txt.textContent = text;\n        if (attributes['font-family'])\n            txt.setAttributeNS(null, 'font-family', attributes['font-family']);\n        if (attributes['font-size'])\n            txt.setAttributeNS(null, 'font-size', `${attributes['font-size']}`);\n        if (attributes['font-style'])\n            txt.setAttributeNS(null, 'font-style', attributes['font-style']);\n        if (attributes['font-weight'])\n            txt.setAttributeNS(null, 'font-weight', `${attributes['font-weight']}`);\n        svg.appendChild(txt);\n        const bbox = txt.getBBox();\n        svg.removeChild(txt);\n        return { x: bbox.x, y: bbox.y, width: bbox.width, height: bbox.height };\n    }\n}\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        // Create a SVG element and add it to the container element.\n        const svg = this.create('svg');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        this.lineWidth = 1.0;\n        const defaultFontAttributes = {\n            'font-family': Font.SANS_SERIF,\n            'font-size': Font.SIZE + 'pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 0.3, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.shadow_attributes = {\n            width: 0,\n            color: 'black',\n        };\n        this.state_stack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    // Allow grouping elements in containers for interactivity.\n    openGroup(cls, id, attrs) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        if (attrs && attrs.pointerBBox) {\n            group.setAttribute('pointer-events', 'bounding-box');\n        }\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    /**\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\n     * cutting a \"hole\" into the SVG drawing.\n     */\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.shadow_attributes.color = color;\n        return this;\n    }\n    /**\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\n     *             represents no blur and larger numbers represent increasingly more blur.\n     * @returns this\n     */\n    setShadowBlur(blur) {\n        this.shadow_attributes.width = blur;\n        return this;\n    }\n    /**\n     * @param width\n     * @returns this\n     */\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        this.lineWidth = width;\n        return this;\n    }\n    /**\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n     * @returns this\n     *\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    /**\n     * @param capType\n     * @returns this\n     */\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    // ### Sizing & Scaling Methods:\n    // TODO (GCR): See note at scale() -- separate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        // uses viewBox to scale\n        // TODO (GCR): we may at some point want to distinguish the\n        // style.width / style.height properties that are applied to\n        // the SVG object from our internal conception of the SVG\n        // width/height.  This would allow us to create automatically\n        // scaling SVG's that filled their containers, for instance.\n        //\n        // As this isn't implemented in Canvas contexts,\n        // I've left as is for now, but in using the viewBox to\n        // handle internal scaling, am trying to make it possible\n        // for us to eventually move in that direction.\n        this.state.scaleX = x;\n        this.state.scaleY = y;\n        const visibleWidth = this.width / x;\n        const visibleHeight = this.height / y;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    /**\n     * 1 arg: string in the \"x y w h\" format\n     * 4 args: x:number, y:number, w:number, h:number\n     */\n    setViewBox(viewBox_or_minX, minY, width, height) {\n        if (typeof viewBox_or_minX === 'string') {\n            this.svg.setAttribute('viewBox', viewBox_or_minX);\n        }\n        else {\n            const viewBoxString = viewBox_or_minX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    // ### Drawing helper methods:\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length == 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    // ### Shape & Path Methods:\n    clear() {\n        // Clear the SVG by removing all inner children.\n        // (This approach is usually slightly more efficient\n        // than removing the old SVG & adding a new one to\n        // the container element, since it does not cause the\n        // container to resize twice.  Also, the resize\n        // triggered by removing the entire SVG can trigger\n        // a touchcancel event when the element resizes away\n        // from a touch point.)\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n        // Replace the viewbox attribute we just removed.\n        this.scale(this.state.scaleX, this.state.scaleY);\n    }\n    // ## Rectangles:\n    rect(x, y, width, height, attributes) {\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.lineWidth, stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        // Currently this fills a rect with the backgroundFillStyle, rather\n        // than \"cut a hole\" into the existing shapes.\n        //\n        // Since tabNote seems to be the only module that makes use of this\n        // it may be worth creating a separate tabStave that would\n        // draw lines around locations of tablature fingering.\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    // ## Paths:\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        // svg behavior different from canvas.  Don't normalize angles if\n        // we are drawing a circle because they both normalize to 0\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            // There's no way to specify a completely circular arc in SVG so we have to\n            // use two semi-circular arcs.\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    getShadowStyle() {\n        const sa = this.shadow_attributes;\n        // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n        // of the same radius, so we scale the drop-shadow radius here to make it\n        // look close to the canvas shadow.\n        return `filter: drop-shadow(0 0 ${sa.width / 1.5}px ${sa.color})`;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', 'stroke-width': this.lineWidth, d: this.path });\n        if (this.shadow_attributes.width > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    // ## Text Methods:\n    measureText(text) {\n        return SVGContext.measureTextCache.lookup(text, this.svg, this.attributes);\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    // TODO: State should be deep-copied.\n    save() {\n        this.state_stack.push({\n            state: {\n                'font-family': this.state['font-family'],\n                'font-weight': this.state['font-weight'],\n                'font-style': this.state['font-style'],\n                'font-size': this.state['font-size'],\n                scale: this.state.scale,\n            },\n            attributes: {\n                'font-family': this.attributes['font-family'],\n                'font-weight': this.attributes['font-weight'],\n                'font-style': this.attributes['font-style'],\n                'font-size': this.attributes['font-size'],\n                fill: this.attributes.fill,\n                stroke: this.attributes.stroke,\n                'stroke-width': this.attributes['stroke-width'],\n                'stroke-dasharray': this.attributes['stroke-dasharray'],\n            },\n            shadow_attributes: {\n                width: this.shadow_attributes.width,\n                color: this.shadow_attributes.color,\n            },\n            lineWidth: this.lineWidth,\n        });\n        return this;\n    }\n    // TODO: State should be deep-restored.\n    restore() {\n        const savedState = this.state_stack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state['font-family'] = state.state['font-family'];\n            this.state['font-weight'] = state.state['font-weight'];\n            this.state['font-style'] = state.state['font-style'];\n            this.state['font-size'] = state.state['font-size'];\n            this.state.scale = state.state.scale;\n            this.attributes['font-family'] = state.attributes['font-family'];\n            this.attributes['font-weight'] = state.attributes['font-weight'];\n            this.attributes['font-style'] = state.attributes['font-style'];\n            this.attributes['font-size'] = state.attributes['font-size'];\n            this.attributes.fill = state.attributes.fill;\n            this.attributes.stroke = state.attributes.stroke;\n            this.attributes['stroke-width'] = state.attributes['stroke-width'];\n            this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];\n            this.shadow_attributes.width = state.shadow_attributes.width;\n            this.shadow_attributes.color = state.shadow_attributes.color;\n            this.lineWidth = state.lineWidth;\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\n     *              font-style attribute (e.g., font-style=\"italic\")\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.fontCSSString;\n    }\n}\nSVGContext.measureTextCache = new MeasureTextCache();\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { isRenderContext } from './typeguard';\nimport { RuntimeError } from './util';\nimport { isHTMLCanvas, isHTMLDiv } from './web';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\n// End of line types\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    // Draw a dashed line (horizontal, vertical or diagonal\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n    // setting the second number to 0 draws a solid line.\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            // The user has provided what looks like a RenderContext, let's just use it.\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                // The backend must be specified if the render context isn't directly provided.\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 == 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            // Verify backend and create context\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d', { willReadFrequently: true });\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\n// Used by vexflow_test_helpers.ts\n// Should this be private?\n// Can we do this in a cleaner way?\nRenderer.lastContext = undefined;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n    static get CATEGORY() {\n        return Category.TextNote;\n    }\n    /** Glyph data. */\n    static get GLYPHS() {\n        return {\n            segno: {\n                code: 'segno',\n            },\n            tr: {\n                code: 'ornamentTrill',\n            },\n            mordent: {\n                code: 'ornamentMordent',\n            },\n            mordent_upper: {\n                code: 'ornamentShortTrill',\n            },\n            mordent_lower: {\n                code: 'ornamentMordent',\n            },\n            f: {\n                code: 'dynamicForte',\n            },\n            p: {\n                code: 'dynamicPiano',\n            },\n            m: {\n                code: 'dynamicMezzo',\n            },\n            s: {\n                code: 'dynamicSforzando',\n            },\n            z: {\n                code: 'dynamicZ',\n            },\n            coda: {\n                code: 'coda',\n            },\n            pedal_open: {\n                code: 'keyboardPedalPed',\n            },\n            pedal_close: {\n                code: 'keyboardPedalUp',\n            },\n            caesura_straight: {\n                code: 'caesura',\n            },\n            caesura_curved: {\n                code: 'caesuraCurved',\n            },\n            breath: {\n                code: 'breathMarkComma',\n            },\n            tick: {\n                code: 'breathMarkTick',\n            },\n            turn: {\n                code: 'ornamentTurn',\n            },\n            turn_inverted: {\n                code: 'ornamentTurnSlash',\n            },\n        };\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.text = noteStruct.text || '';\n        this.superscript = noteStruct.superscript;\n        this.subscript = noteStruct.subscript;\n        this.setFont(noteStruct.font);\n        this.line = noteStruct.line || 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignore_ticks = noteStruct.ignore_ticks || false;\n        this.justification = TextJustification.LEFT;\n        // Determine and set initial note width. Note that the text width is\n        // an approximation and isn't very accurate. The only way to accurately\n        // measure the length of text is with `CanvasRenderingContext2D.measureText()`.\n        if (noteStruct.glyph) {\n            const struct = TextNote.GLYPHS[noteStruct.glyph];\n            if (!struct)\n                throw new RuntimeError('Invalid glyph type: ' + noteStruct.glyph);\n            this.glyph = new Glyph(struct.code, 40, { category: 'textNote' });\n            this.setWidth(this.glyph.getMetrics().width);\n        }\n        else {\n            this.glyph = undefined;\n        }\n    }\n    /** Set the horizontal justification of the TextNote. */\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Return the Stave line on which the TextNote is placed. */\n    getLine() {\n        return this.line;\n    }\n    /** Return the unformatted text of this TextNote. */\n    getText() {\n        return this.text;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.smooth) {\n            this.setWidth(0);\n        }\n        else {\n            if (this.glyph) {\n                // Width already set.\n            }\n            else {\n                const ctx = this.checkContext();\n                ctx.setFont(this.textFont);\n                this.setWidth(ctx.measureText(this.text).width);\n            }\n        }\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        // We reposition to the center of the note head\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    /**\n     * Renders the TextNote.\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        // Reposition to center of note head\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        // Align based on tick-context width.\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        let y;\n        if (this.glyph) {\n            y = stave.getYForLine(this.line + -3);\n            this.glyph.render(ctx, x, y);\n        }\n        else {\n            y = stave.getYForLine(this.line + -3);\n            this.applyStyle(ctx);\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.text, x, y);\n            const height = ctx.measureText(this.text).height;\n            // We called this.setFont(...) in the constructor, so we know this.textFont is available.\n            // eslint-disable-next-line\n            const { family, size, weight, style } = this.textFont;\n            // Scale the font size by 1/1.3.\n            const smallerFontSize = Font.scaleSize(size, 0.769231);\n            if (this.superscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.superscript, x + this.width + 2, y - height / 2.2);\n            }\n            if (this.subscript) {\n                ctx.setFont(family, smallerFontSize, weight, style);\n                ctx.fillText(this.subscript, x + this.width + 2, y + height / 2.2 - 1);\n            }\n            this.restoreStyle(ctx);\n        }\n    }\n}\nTextNote.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 12,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\nTextNote.Justification = TextJustification;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\nimport { Font, FontStyle, FontWeight } from './font';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Volta;\n    }\n    static get type() {\n        return VoltaType;\n    }\n    constructor(type, number, x, y_shift) {\n        super();\n        this.volta = type;\n        this.x = x;\n        this.y_shift = y_shift;\n        this.number = number;\n        this.resetFont();\n    }\n    setShiftY(y) {\n        this.y_shift = y;\n        return this;\n    }\n    draw(stave, x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x; // don't include x (offset) for width\n        const top_y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        const vert_height = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.volta) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, top_y, 1, vert_height);\n                ctx.fillRect(this.x + x + width, top_y, 1, vert_height);\n                break;\n            default:\n                break;\n        }\n        // If the beginning of a volta, draw measure number\n        if (this.volta === VoltaType.BEGIN || this.volta === VoltaType.BEGIN_END) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText(this.number, this.x + x + 5, top_y + 15);\n            ctx.restore();\n        }\n        ctx.fillRect(this.x + x, top_y, width, 1);\n        return this;\n    }\n}\nVolta.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 9,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Renderer } from './renderer';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StringNumber extends Modifier {\n    static get CATEGORY() {\n        return Category.StringNumber;\n    }\n    static get metrics() {\n        var _a;\n        return ((_a = Tables.currentMusicFont().getMetrics().stringNumber) !== null && _a !== void 0 ? _a : {\n            verticalPadding: 0,\n            stemPadding: 0,\n            leftPadding: 0,\n            rightPadding: 0,\n        });\n    }\n    // ## Static Methods\n    // Arrange string numbers inside a `ModifierContext`\n    static format(nums, state) {\n        const left_shift = state.left_shift;\n        const right_shift = state.right_shift;\n        const num_spacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const nums_list = [];\n        let prev_note = null;\n        let shift_left = 0;\n        let shift_right = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.text_line = mc.getState().top_text_line;\n                    state.top_text_line += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.text_line = mc.getState().text_line;\n                    state.text_line += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prev_note) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (left_shift === 0) {\n                        shift_left = Math.max(note.getLeftDisplacedHeadPx(), shift_left);\n                    }\n                    if (right_shift === 0) {\n                        shift_right = Math.max(note.getRightDisplacedHeadPx(), shift_right);\n                    }\n                }\n                prev_note = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            nums_list.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: shift_left,\n                shiftR: shift_right,\n            });\n        }\n        // Sort string numbers by line number.\n        nums_list.sort((a, b) => b.line - a.line);\n        let num_shiftR = 0;\n        let x_widthL = 0;\n        let x_widthR = 0;\n        let last_line = null;\n        let last_note = null;\n        for (let i = 0; i < nums_list.length; ++i) {\n            let num_shift = 0;\n            const note = nums_list[i].note;\n            const pos = nums_list[i].pos;\n            const num = nums_list[i].num;\n            const line = nums_list[i].line;\n            const shiftR = nums_list[i].shiftR;\n            // Reset the position of the string number every line.\n            if (line !== last_line || note !== last_note) {\n                num_shiftR = right_shift + shiftR;\n            }\n            const num_width = num.getWidth() + num_spacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(left_shift);\n                num_shift = shift_left + num_width; // spacing\n                x_widthL = num_shift > x_widthL ? num_shift : x_widthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(num_shiftR);\n                num_shift += num_width; // spacing\n                x_widthR = num_shift > x_widthR ? num_shift : x_widthR;\n            }\n            last_line = line;\n            last_note = note;\n        }\n        state.left_shift += x_widthL;\n        state.right_shift += x_widthR;\n        return true;\n    }\n    constructor(number) {\n        super();\n        this.string_number = number;\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n        this.x_shift = 0;\n        this.y_shift = 0;\n        this.text_line = 0;\n        this.stem_offset = 0;\n        this.x_offset = 0; // Horizontal offset from default\n        this.y_offset = 0; // Vertical offset from default\n        this.dashed = true; // true - draw dashed extension  false - no extension\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n        this.radius = 8;\n        this.drawCircle = true;\n        this.setWidth(this.radius * 2 + 4);\n        this.resetFont();\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.string_number = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.x_offset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.y_offset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.last_note = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    setDrawCircle(drawCircle) {\n        this.drawCircle = drawCircle;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dot_x = start.x + this.x_shift + this.x_offset;\n        let stem_ext = {};\n        if (note.hasStem()) {\n            stem_ext = note.checkStem().getExtents();\n        }\n        let dot_y = start.y + this.y_shift + this.y_offset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dot_y = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection == Stem.UP) {\n                        dot_y = stem_ext.topY + StringNumber.metrics.stemPadding;\n                    }\n                    dot_y -= this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dot_y = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection == Stem.DOWN) {\n                        dot_y = stem_ext.topY - StringNumber.metrics.stemPadding;\n                    }\n                    dot_y += this.radius + StringNumber.metrics.verticalPadding + this.text_line * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dot_x -= this.radius / 2 + StringNumber.metrics.leftPadding;\n                break;\n            case Modifier.Position.RIGHT:\n                dot_x += this.radius / 2 + StringNumber.metrics.rightPadding;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        ctx.save();\n        if (this.drawCircle) {\n            ctx.beginPath();\n            ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);\n            ctx.setLineWidth(1.5);\n            ctx.stroke();\n        }\n        ctx.setFont(this.textFont);\n        const x = dot_x - ctx.measureText(this.string_number).width / 2;\n        ctx.fillText('' + this.string_number, x, dot_y + 4.5);\n        const lastNote = this.last_note;\n        if (isStemmableNote(lastNote)) {\n            // Only StemmableNote objects have getStemX().\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n        ctx.restore();\n    }\n}\nStringNumber.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Larry Kuhns\n//\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasquedo, etc.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Stroke extends Modifier {\n    static get CATEGORY() {\n        return Category.Stroke;\n    }\n    // Arrange strokes inside `ModifierContext`\n    static format(strokes, state) {\n        const left_shift = state.left_shift;\n        const stroke_spacing = 0;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                // Only StaveNote objects have getKeyProps().\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                // Only TabNote objects have getPositions().\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = left_shift;\n        // There can only be one stroke .. if more than one, they overlay each other\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + stroke_spacing, xShift);\n        }, 0);\n        state.left_shift += xShift;\n        return true;\n    }\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ all_voices: true }, options);\n        // multi voice - span stroke across all voices if true\n        this.all_voices = this.options.all_voices;\n        // multi voice - end note of stroke, set in draw()\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.render_options = {\n            font_scale: 38,\n        };\n        this.resetFont();\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.note_end = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let ys = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const line_space = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                // Only Note objects have getYs().\n                // note is an instance of either StaveNote or TabNote.\n                ys = note.getYs();\n                for (let n = 0; n < ys.length; n++) {\n                    if (this.note === notes[i] || this.all_voices) {\n                        topY = Math.min(topY, ys[n]);\n                        botY = Math.max(botY, ys[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrow_shift_x = 0;\n        let arrow_y = 0;\n        let text_shift_x = 0;\n        let text_y = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n                arrow = 'arrowheadBlackUp';\n                arrow_shift_x = -3;\n                arrow_y = topY - line_space / 2 + 10;\n                botY += line_space / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n                arrow = 'arrowheadBlackDown';\n                arrow_shift_x = 0.5;\n                arrow_y = botY + line_space / 2;\n                topY -= line_space / 2;\n                break;\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASQUEDO_DOWN:\n                arrow = 'arrowheadBlackUp';\n                arrow_shift_x = -3;\n                text_shift_x = this.x_shift + arrow_shift_x - 2;\n                if (isStaveNote(note)) {\n                    topY += 1.5 * line_space;\n                    if ((botY - topY) % 2 !== 0) {\n                        botY += 0.5 * line_space;\n                    }\n                    else {\n                        botY += line_space;\n                    }\n                    arrow_y = topY - line_space;\n                    text_y = botY + line_space + 2;\n                }\n                else {\n                    topY += 1.5 * line_space;\n                    botY += line_space;\n                    arrow_y = topY - 0.75 * line_space;\n                    text_y = botY + 0.25 * line_space;\n                }\n                break;\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASQUEDO_UP:\n                arrow = 'arrowheadBlackDown';\n                arrow_shift_x = -4;\n                text_shift_x = this.x_shift + arrow_shift_x - 1;\n                if (isStaveNote(note)) {\n                    arrow_y = line_space / 2;\n                    topY += 0.5 * line_space;\n                    if ((botY - topY) % 2 === 0) {\n                        botY += line_space / 2;\n                    }\n                    arrow_y = botY + 0.5 * line_space;\n                    text_y = topY - 1.25 * line_space;\n                }\n                else {\n                    topY += 0.25 * line_space;\n                    botY += 0.5 * line_space;\n                    arrow_y = botY + 0.25 * line_space;\n                    text_y = topY - line_space;\n                }\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY += 0.5 * line_space;\n                botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        let strokeLine = 'straight';\n        // Draw the stroke\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.x_shift, topY, 1, botY - topY);\n        }\n        else {\n            strokeLine = 'wiggly';\n            if (isStaveNote(note)) {\n                for (let i = topY; i <= botY; i += line_space) {\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n                }\n            }\n            else {\n                let i;\n                for (i = topY; i <= botY; i += 10) {\n                    Glyph.renderGlyph(ctx, x + this.x_shift - 4, i, this.render_options.font_scale, 'vexWiggleArpeggioUp');\n                }\n                if (this.type === Stroke.Type.RASQUEDO_DOWN) {\n                    text_y = i + 0.25 * line_space;\n                }\n            }\n        }\n        if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n            return; // skip drawing arrow heads or text\n        }\n        // Draw the arrow head\n        Glyph.renderGlyph(ctx, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow, {\n            category: `stroke_${strokeLine}.${arrow}`,\n        });\n        // Draw the rasquedo \"R\"\n        if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            ctx.fillText('R', x + text_shift_x, text_y);\n            ctx.restore();\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3,\n    ROLL_UP: 4,\n    RASQUEDO_DOWN: 5,\n    RASQUEDO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n};\nStroke.TEXT_FONT = {\n    family: Font.SERIF,\n    size: Font.SIZE,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n    static get CATEGORY() {\n        return Category.Vibrato;\n    }\n    /** Arrange vibratos inside a `ModifierContext`. */\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        // Vibratos are always on top.\n        let text_line = state.top_text_line;\n        let width = 0;\n        let shift = state.right_shift - 7;\n        // If there's a bend, drop the text line\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            text_line = text_line - (bendHeight + 1);\n        }\n        else {\n            state.top_text_line += 1;\n        }\n        // Format Vibratos\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(text_line);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.right_shift += width;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.render_options = {\n            harsh: false,\n            vibrato_width: 20,\n            wave_height: 6,\n            wave_width: 4,\n            wave_girth: 2,\n        };\n        this.setVibratoWidth(this.render_options.vibrato_width);\n    }\n    /** Set harsh vibrato. */\n    setHarsh(harsh) {\n        this.render_options.harsh = harsh;\n        return this;\n    }\n    /** Set vibrato width in pixels. */\n    setVibratoWidth(width) {\n        this.render_options.vibrato_width = width;\n        this.setWidth(width);\n        return this;\n    }\n    /** Draw the vibrato on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x + this.x_shift;\n        const vy = note.getYForTopText(this.text_line) + 2;\n        Vibrato.renderVibrato(ctx, vx, vy, this.render_options);\n    }\n    /**\n     * Static rendering method that can be called from\n     * other classes (e.g. VibratoBracket).\n     */\n    static renderVibrato(ctx, x, y, opts) {\n        const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;\n        const num_waves = vibrato_width / wave_width;\n        ctx.beginPath();\n        let i;\n        if (harsh) {\n            ctx.moveTo(x, y + wave_girth + 1);\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.lineTo(x + wave_width, y - wave_height / 2);\n                x += wave_width;\n                ctx.lineTo(x + wave_width, y + wave_height / 2);\n                x += wave_width;\n            }\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);\n                x -= wave_width;\n                ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);\n                x -= wave_width;\n            }\n            ctx.fill();\n        }\n        else {\n            ctx.moveTo(x, y + wave_girth);\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);\n                x += wave_width;\n                ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);\n                x += wave_width;\n            }\n            for (i = 0; i < num_waves / 2; ++i) {\n                ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n                x -= wave_width;\n                ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);\n                x -= wave_width;\n            }\n            ctx.fill();\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.)\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('Vex.Flow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        // Formatting data.\n        this.state = {\n            left_shift: 0,\n            right_shift: 0,\n            text_line: 0,\n            top_text_line: 0,\n        };\n        // Current members\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    /**\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n     * Here we add a new member to this.members, and create a new array if needed.\n     * @param member\n     * @returns this\n     */\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    /**\n     * @deprecated\n     */\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.left_shift;\n    }\n    getRightShift() {\n        return this.state.right_shift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.left_shift + this.state.right_shift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        // The ordering below determines when different members are formatted and rendered.\n        StaveNote.format(members[Category.StaveNote], state);\n        Parenthesis.format(members[Category.Parenthesis], state);\n        Dot.format(members[Category.Dot], state);\n        FretHandFinger.format(members[Category.FretHandFinger], state);\n        Accidental.format(members[Category.Accidental], state);\n        Stroke.format(members[Category.Stroke], state);\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\n        StringNumber.format(members[Category.StringNumber], state);\n        Articulation.format(members[Category.Articulation], state);\n        Ornament.format(members[Category.Ornament], state);\n        Annotation.format(members[Category.Annotation], state);\n        ChordSymbol.format(members[Category.ChordSymbol], state);\n        Bend.format(members[Category.Bend], state);\n        Vibrato.format(members[Category.Vibrato], state, this);\n        // Update width of this member context\n        this.width = state.left_shift + state.right_shift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        // If post-formatting is required for an element, add more lines below.\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\n    }\n}\nModifierContext.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.\n// Co-author: Benjamin W. Bohl\n// MIT License\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('Vex.Flow.Clef', args);\n}\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Clef;\n    }\n    /**\n     * Every clef name is associated with a glyph code from the font file\n     * and a default stave line number.\n     */\n    static get types() {\n        return {\n            treble: {\n                code: 'gClef',\n                line: 3,\n                point: 0,\n            },\n            bass: {\n                code: 'fClef',\n                line: 1,\n                point: 0,\n            },\n            alto: {\n                code: 'cClef',\n                line: 2,\n                point: 0,\n            },\n            tenor: {\n                code: 'cClef',\n                line: 1,\n                point: 0,\n            },\n            percussion: {\n                code: 'unpitchedPercussionClef1',\n                line: 2,\n                point: 0,\n            },\n            soprano: {\n                code: 'cClef',\n                line: 4,\n                point: 0,\n            },\n            'mezzo-soprano': {\n                code: 'cClef',\n                line: 3,\n                point: 0,\n            },\n            'baritone-c': {\n                code: 'cClef',\n                line: 0,\n                point: 0,\n            },\n            'baritone-f': {\n                code: 'fClef',\n                line: 2,\n                point: 0,\n            },\n            subbass: {\n                code: 'fClef',\n                line: 0,\n                point: 0,\n            },\n            french: {\n                code: 'gClef',\n                line: 4,\n                point: 0,\n            },\n            tab: {\n                code: '6stringTabClef',\n                line: 3,\n                point: 0,\n            },\n        };\n    }\n    static get annotationSmufl() {\n        return {\n            '8va': 'timeSig8',\n            '8vb': 'timeSig8',\n        };\n    }\n    /** Create a new clef. */\n    constructor(type, size, annotation) {\n        super();\n        /**\n         * The attribute `clef` must be a key from\n         * `Clef.types`\n         */\n        this.clef = Clef.types['treble'];\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        this.setWidth(Tables.currentMusicFont().lookupMetric(`clef_${this.size}.width`));\n        L('Creating clef:', type);\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.type = type;\n        this.clef = Clef.types[type];\n        if (size === undefined) {\n            this.size = 'default';\n        }\n        else {\n            this.size = size;\n        }\n        const musicFont = Tables.currentMusicFont();\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\n        if (annotation !== undefined) {\n            const code = Clef.annotationSmufl[annotation];\n            const point = musicFont.lookupMetric(`clef_${this.size}.annotations.${annotation}.point`);\n            const line = musicFont.lookupMetric(`clef_${this.size}.annotations.${annotation}.${this.type}.line`);\n            const x_shift = musicFont.lookupMetric(`clef_${this.size}.annotations.${annotation}.${this.type}.shiftX`);\n            this.annotation = { code, point, line, x_shift };\n            this.attachment = new Glyph(this.annotation.code, this.annotation.point);\n            this.attachment.metrics.x_max = 0;\n            this.attachment.setXShift(this.annotation.x_shift);\n        }\n        else {\n            this.annotation = undefined;\n        }\n        return this;\n    }\n    /** Get clef width. */\n    getWidth() {\n        if (this.type === 'tab') {\n            defined(this.stave, 'ClefError', \"Can't get width without stave.\");\n        }\n        return this.width;\n    }\n    /** Set associated stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    /** Render clef. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('clef', this.getAttribute('id'));\n        Glyph.renderGlyph(ctx, this.x, stave.getYForLine(this.clef.line), this.clef.point, this.clef.code, {\n            category: `clef_${this.size}`,\n        });\n        if (this.annotation !== undefined && this.attachment !== undefined) {\n            this.placeGlyphOnLine(this.attachment, stave, this.annotation.line);\n            this.attachment.setStave(stave);\n            this.attachment.setContext(ctx);\n            this.attachment.renderToStave(this.x);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n/** To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`. */\nClef.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport class KeySignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.KeySignature;\n    }\n    // Create a new Key Signature based on a `key_spec`\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?\n        this.glyphs = [];\n        this.xPositions = []; // relative to this.x\n        this.paddingForced = false;\n    }\n    // Add an accidental glyph to the `KeySignature` instance which represents\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n    // spacing will be included in the glyph's position\n    convertToGlyph(acc, nextAcc) {\n        const accGlyphData = Tables.accidentalCodes(acc.type);\n        const glyph = new Glyph(accGlyphData.code, this.glyphFontScale);\n        // Determine spacing between current accidental and the next accidental\n        let extraWidth = 1;\n        if (acc.type === 'n' && nextAcc) {\n            const spacing = KeySignature.accidentalSpacing[nextAcc.type];\n            if (spacing) {\n                const isAbove = nextAcc.line >= acc.line;\n                extraWidth = isAbove ? spacing.above : spacing.below;\n            }\n        }\n        // Place the glyph on the stave\n        this.placeGlyphOnLine(glyph, this.checkStave(), acc.line);\n        this.glyphs.push(glyph);\n        const xPosition = this.xPositions[this.xPositions.length - 1];\n        const glyphWidth = glyph.getMetrics().width + extraWidth;\n        // Store the next accidental's x position\n        this.xPositions.push(xPosition + glyphWidth);\n        // Expand size of key signature\n        this.width += glyphWidth;\n    }\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    convertToCancelAccList(spec) {\n        // Get the accidental list for the cancelled key signature\n        const cancel_accList = Tables.keySignature(spec);\n        // If the cancelled key has a different accidental type, ie: # vs b\n        const different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;\n        // Determine how many naturals needed to add\n        const naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;\n        // Return if no naturals needed\n        if (naturals < 1)\n            return undefined;\n        // Get the line position for each natural\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!different_types) {\n                index = cancel_accList.length - naturals + i;\n            }\n            const acc = cancel_accList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        // Combine naturals with main accidental list for the key signature\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancel_accList[0].type,\n        };\n    }\n    // Deprecated\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0; // if clef === \"treble\"\n        let customLines; // when clef doesn't follow treble key sig shape\n        switch (clef) {\n            // Treble & Subbass both have offsets of 0, so are not included.\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        // If there's a special case, assign those lines/spaces:\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    getWidth() {\n        if (!this.formatted)\n            this.format();\n        return this.width;\n    }\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Alter the accidentals of a key spec one by one.\n    // Each alteration is a new accidental that replaces the\n    // original accidental (or the canceled one).\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    format() {\n        const stave = this.checkStave();\n        this.width = 0;\n        this.glyphs = [];\n        this.xPositions = [0]; // initialize with initial x position\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1]);\n            }\n        }\n        this.formatted = true;\n    }\n    /**\n     * Return the Glyph objects making up this KeySignature.\n     */\n    getGlyphs() {\n        if (!this.formatted)\n            this.format();\n        return this.glyphs;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.glyphs.length; i++) {\n            const glyph = this.glyphs[i];\n            const x = this.x + this.xPositions[i];\n            glyph.setStave(stave);\n            glyph.setContext(ctx);\n            glyph.renderToStave(x);\n        }\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n// Space between natural and following accidental depending\n// on vertical position\nKeySignature.accidentalSpacing = {\n    '#': {\n        above: 6,\n        below: 4,\n    },\n    b: {\n        above: 4,\n        below: 7,\n    },\n    n: {\n        above: 4,\n        below: 1,\n    },\n    '##': {\n        above: 6,\n        below: 4,\n    },\n    bb: {\n        above: 4,\n        below: 7,\n    },\n    db: {\n        above: 4,\n        below: 7,\n    },\n    d: {\n        above: 4,\n        below: 7,\n    },\n    bbs: {\n        above: 4,\n        below: 7,\n    },\n    '++': {\n        above: 6,\n        below: 4,\n    },\n    '+': {\n        above: 6,\n        below: 4,\n    },\n    '+-': {\n        above: 6,\n        below: 4,\n    },\n    '++-': {\n        above: 6,\n        below: 4,\n    },\n    bs: {\n        above: 4,\n        below: 10,\n    },\n    bss: {\n        above: 4,\n        below: 10,\n    },\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { StaveModifier } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport class Repetition extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Repetition;\n    }\n    constructor(type, x, y_shift) {\n        super();\n        this.symbol_type = type;\n        this.x = x;\n        this.x_shift = 0;\n        this.y_shift = y_shift;\n        this.resetFont();\n    }\n    setShiftX(x) {\n        this.x_shift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.y_shift = y;\n        return this;\n    }\n    draw(stave, x) {\n        this.setRendered();\n        switch (this.symbol_type) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSignoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSignoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.coda.offsetY'), 40, 'coda', { category: 'coda' });\n        return this;\n    }\n    drawSignoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines()) + this.y_shift;\n        Glyph.renderGlyph(stave.checkContext(), this.x + x + this.x_shift, y + Tables.currentMusicFont().lookupMetric('staveRepetition.segno.offsetY'), 30, 'segno', { category: 'segno' });\n        return this;\n    }\n    drawSymbolText(stave, x, text, draw_coda) {\n        const ctx = stave.checkContext();\n        ctx.save();\n        ctx.setFont(this.textFont);\n        let text_x = 0;\n        let symbol_x = 0;\n        const modifierWidth = stave.getNoteStartX() - this.x;\n        switch (this.symbol_type) {\n            // To the left with symbol\n            case Repetition.type.CODA_LEFT:\n                // Offset Coda text to right of stave beginning\n                text_x = this.x + stave.getVerticalBarWidth();\n                symbol_x =\n                    text_x +\n                        ctx.measureText(text).width +\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\n                break;\n            // To the right without symbol\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n                text_x =\n                    this.x +\n                        x +\n                        this.x_shift +\n                        stave.getWidth() -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -\n                        modifierWidth -\n                        ctx.measureText(text).width;\n                break;\n            // To the right with symbol\n            default:\n                text_x =\n                    this.x +\n                        x +\n                        this.x_shift +\n                        stave.getWidth() -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.spacing') -\n                        modifierWidth -\n                        ctx.measureText(text).width -\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\n                symbol_x =\n                    text_x +\n                        ctx.measureText(text).width +\n                        Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetX');\n                break;\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) +\n            this.y_shift +\n            Tables.currentMusicFont().lookupMetric('staveRepetition.symbolText.offsetY');\n        if (draw_coda) {\n            Glyph.renderGlyph(ctx, symbol_x, y, 40, 'coda', { category: 'coda' });\n        }\n        ctx.fillText(text, text_x, y + 5);\n        ctx.restore();\n        return this;\n    }\n}\nRepetition.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 12,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\nRepetition.type = {\n    NONE: 1,\n    CODA_LEFT: 2,\n    CODA_RIGHT: 3,\n    SEGNO_LEFT: 4,\n    SEGNO_RIGHT: 5,\n    DC: 6,\n    DC_AL_CODA: 7,\n    DC_AL_FINE: 8,\n    DS: 9,\n    DS_AL_CODA: 10,\n    DS_AL_FINE: 11,\n    FINE: 12,\n    TO_CODA: 13, // To Coda at end of stave\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Larry Kuhns 2011\nimport { Font, FontStyle, FontWeight } from './font';\nimport { StaveModifier } from './stavemodifier';\nimport { TextFormatter } from './textformatter';\nimport { Category } from './typeguard';\nexport class StaveSection extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveSection;\n    }\n    constructor(section, x, shift_y, drawRect = true) {\n        super();\n        this.setWidth(16);\n        this.section = section;\n        this.x = x;\n        this.shift_x = 0;\n        this.shift_y = shift_y;\n        this.drawRect = drawRect;\n        this.resetFont();\n    }\n    setStaveSection(section) {\n        this.section = section;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    draw(stave, shift_x) {\n        const borderWidth = 2;\n        const padding = 2;\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(borderWidth);\n        ctx.setFont(this.textFont);\n        const textFormatter = TextFormatter.create(this.textFont);\n        const textWidth = textFormatter.getWidthForTextInPx(this.section);\n        const textY = textFormatter.getYForStringInPx(this.section);\n        const textHeight = textY.height;\n        const headroom = -1 * textY.yMin;\n        const width = textWidth + 2 * padding; // add left & right padding\n        const height = textHeight + 2 * padding; // add top & bottom padding\n        //  Seems to be a good default y\n        const y = stave.getYForTopText(1.5) + this.shift_y;\n        const x = this.x + shift_x;\n        if (this.drawRect) {\n            ctx.beginPath();\n            ctx.rect(x, y - height + headroom, width, height);\n            ctx.stroke();\n        }\n        ctx.fillText(this.section, x + padding, y - padding);\n        ctx.restore();\n        return this;\n    }\n}\nStaveSection.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 10,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Radosaw Eichler 2012\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { TextFormatter } from './textformatter';\nimport { Category } from './typeguard';\nexport class StaveTempo extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveTempo;\n    }\n    constructor(tempo, x, shift_y) {\n        super();\n        /** Font size for note. */\n        this.render_options = { glyph_font_scale: 30 };\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.shift_x = 10;\n        this.shift_y = shift_y;\n        this.resetFont();\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    draw(stave, shift_x) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const options = this.render_options;\n        // FIXME: What does the '38' mean? Why 38? Is that supposed to\n        // be the default font size for standard notation?\n        const scale = options.glyph_font_scale / 38;\n        const name = this.tempo.name;\n        const duration = this.tempo.duration;\n        const dots = this.tempo.dots || 0;\n        const bpm = this.tempo.bpm;\n        let x = this.x + this.shift_x + shift_x;\n        const y = stave.getYForTopText(1) + this.shift_y;\n        ctx.save();\n        const textFormatter = TextFormatter.create(this.textFont);\n        if (name) {\n            ctx.setFont(this.textFont);\n            ctx.fillText(name, x, y);\n            x += textFormatter.getWidthForTextInPx(name);\n        }\n        if (duration && bpm) {\n            // Override the weight and style.\n            const noteTextFont = Object.assign(Object.assign({}, this.textFont), { weight: 'normal', style: 'normal' });\n            ctx.setFont(noteTextFont);\n            const noteTextFormatter = TextFormatter.create(noteTextFont);\n            if (name) {\n                x += noteTextFormatter.getWidthForTextInPx('|');\n                ctx.fillText('(', x, y);\n                x += noteTextFormatter.getWidthForTextInPx('(');\n            }\n            const glyphProps = Tables.getGlyphProps(duration);\n            x += 3 * scale;\n            Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, glyphProps.code_head);\n            x += Glyph.getWidth(glyphProps.code_head, options.glyph_font_scale);\n            // Draw stem and flags\n            if (glyphProps.stem) {\n                let stem_height = 30;\n                if (glyphProps.beam_count)\n                    stem_height += 3 * (glyphProps.beam_count - 1);\n                stem_height *= scale;\n                const y_top = y - stem_height;\n                ctx.fillRect(x - scale, y_top, scale, stem_height);\n                if (glyphProps.code && glyphProps.code_flag_upstem) {\n                    const flagMetrics = Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, glyphProps.code_flag_upstem, {\n                        category: 'flag.staveTempo',\n                    });\n                    x += (flagMetrics.width * Tables.NOTATION_FONT_SCALE) / flagMetrics.font.getData().resolution;\n                }\n            }\n            // Draw dot\n            for (let i = 0; i < dots; i++) {\n                x += 6 * scale;\n                ctx.beginPath();\n                ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);\n                ctx.fill();\n            }\n            ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);\n        }\n        ctx.restore();\n        return this;\n    }\n}\nStaveTempo.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 14,\n    weight: FontWeight.BOLD,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\nimport { Font, FontStyle, FontWeight } from './font';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TextJustification, TextNote } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveText extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveText;\n    }\n    constructor(text, position, options = {}) {\n        super();\n        this.setWidth(16);\n        this.text = text;\n        this.position = position;\n        this.options = Object.assign({ shift_x: 0, shift_y: 0, justification: TextNote.Justification.CENTER }, options);\n        this.resetFont();\n    }\n    setStaveText(text) {\n        this.text = text;\n        return this;\n    }\n    setShiftX(x) {\n        this.shift_x = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.shift_y = y;\n        return this;\n    }\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    draw(stave) {\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        const text_width = ctx.measureText('' + this.text).width;\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - text_width - 24 + this.options.shift_x;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX() + this.options.shift_x;\n                if (this.options.justification === TextJustification.CENTER) {\n                    x += stave.getWidth() / 2 - text_width / 2;\n                }\n                else if (this.options.justification === TextJustification.RIGHT) {\n                    x += stave.getWidth() - text_width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2) + this.options.shift_y;\n                }\n                else {\n                    y = stave.getYForBottomText(2) + this.options.shift_y;\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        ctx.fillText('' + this.text, x, y + 4);\n        ctx.restore();\n        return this;\n    }\n}\nStaveText.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 16,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Renders time signatures glyphs for staffs\n// This class is used by TimeSignature to render the associated glyphs\nimport { Glyph } from './glyph';\nimport { defined } from './util';\nexport class TimeSignatureGlyph extends Glyph {\n    constructor(timeSignature, topDigits, botDigits, code, point, options) {\n        var _a;\n        super(code, point, options);\n        this.timeSignature = timeSignature;\n        this.topGlyphs = [];\n        this.botGlyphs = [];\n        let topWidth = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            let timeSigType = topDigits[i];\n            switch (topDigits[i]) {\n                case '-':\n                    timeSigType = 'Minus';\n                    break;\n                case '+':\n                    timeSigType = botDigits.length > 0 ? 'PlusSmall' : 'Plus';\n                    break;\n                case '(':\n                    timeSigType = botDigits.length > 0 ? 'ParensLeftSmall' : 'ParensLeft';\n                    break;\n                case ')':\n                    timeSigType = botDigits.length > 0 ? 'ParensRightSmall' : 'ParensRight';\n                    break;\n            }\n            const topGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\n            this.topGlyphs.push(topGlyph);\n            topWidth += (_a = topGlyph.getMetrics().width) !== null && _a !== void 0 ? _a : 0;\n        }\n        let botWidth = 0;\n        for (let i = 0; i < botDigits.length; ++i) {\n            let timeSigType = botDigits[i];\n            switch (botDigits[i]) {\n                case '+':\n                    timeSigType = 'PlusSmall';\n                    break;\n                case '(':\n                    timeSigType = 'ParensLeftSmall';\n                    break;\n                case ')':\n                    timeSigType = 'ParensRightSmall';\n                    break;\n            }\n            const botGlyph = new Glyph('timeSig' + timeSigType, this.timeSignature.point);\n            this.botGlyphs.push(botGlyph);\n            botWidth += defined(botGlyph.getMetrics().width);\n        }\n        this.width = Math.max(topWidth, botWidth);\n        this.xMin = this.getMetrics().x_min;\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n        this.reset();\n    }\n    getMetrics() {\n        return {\n            x_min: this.xMin,\n            x_max: this.xMin + this.width,\n            width: this.width,\n        };\n    }\n    renderToStave(x) {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        let start_x = x + this.topStartX;\n        let y = 0;\n        if (this.botGlyphs.length > 0)\n            y = stave.getYForLine(this.timeSignature.topLine);\n        else\n            y = (stave.getYForLine(this.timeSignature.topLine) + stave.getYForLine(this.timeSignature.bottomLine)) / 2;\n        for (let i = 0; i < this.topGlyphs.length; ++i) {\n            const glyph = this.topGlyphs[i];\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + this.x_shift, y);\n            start_x += defined(glyph.getMetrics().width);\n        }\n        start_x = x + this.botStartX;\n        y = stave.getYForLine(this.timeSignature.bottomLine);\n        for (let i = 0; i < this.botGlyphs.length; ++i) {\n            const glyph = this.botGlyphs[i];\n            this.timeSignature.placeGlyphOnLine(glyph, stave, 0);\n            Glyph.renderOutline(ctx, glyph.getMetrics().outline, this.scale, start_x + glyph.getMetrics().x_shift, y);\n            start_x += defined(glyph.getMetrics().width);\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\nimport { Glyph } from './glyph';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { TimeSignatureGlyph } from './timesigglyph';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    if (numbers.length !== 2 && numbers[0] !== '+' && numbers[0] !== '-') {\n        throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must be in the form \"<numerator>/<denominator>\"`);\n    }\n    numbers.forEach((number) => {\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\n        if (/^[0-9+\\-()]+$/.test(number) == false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\nexport class TimeSignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.TimeSignature;\n    }\n    static get glyphs() {\n        return {\n            C: {\n                code: 'timeSigCommon',\n                point: 40,\n                line: 2,\n            },\n            'C|': {\n                code: 'timeSigCutCommon',\n                point: 40,\n                line: 2,\n            },\n        };\n    }\n    constructor(timeSpec = '4/4', customPadding = 15, validate_args = true) {\n        super();\n        this.validate_args = validate_args;\n        const padding = customPadding;\n        const musicFont = Tables.currentMusicFont();\n        this.point = musicFont.lookupMetric('digits.point');\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.topLine = 2 + fontLineShift;\n        this.bottomLine = 4 + fontLineShift;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.info = this.parseTimeSpec(timeSpec);\n        this.setWidth(defined(this.info.glyph.getMetrics().width));\n        this.setPadding(padding);\n    }\n    parseTimeSpec(timeSpec) {\n        var _a, _b;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const { line, code, point } = TimeSignature.glyphs[timeSpec];\n            return {\n                line,\n                num: false,\n                glyph: new Glyph(code, point),\n            };\n        }\n        if (this.validate_args) {\n            assertIsValidTimeSig(timeSpec);\n        }\n        const parts = timeSpec.split('/');\n        return {\n            num: true,\n            glyph: this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : ''),\n        };\n    }\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        return new TimeSignatureGlyph(this, topDigits, botDigits, 'timeSig0', this.point);\n    }\n    getInfo() {\n        return this.info;\n    }\n    setTimeSig(timeSpec) {\n        this.info = this.parseTimeSpec(timeSpec);\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        this.info.glyph.setStave(stave);\n        this.info.glyph.setContext(ctx);\n        this.placeGlyphOnLine(this.info.glyph, stave, this.info.line);\n        this.info.glyph.renderToStave(this.x);\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { KeySignature } from './keysignature';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { RuntimeError } from './util';\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    static get CATEGORY() {\n        return Category.Stave;\n    }\n    // This is the sum of the padding that normally goes on left + right of a stave during\n    // drawing. Used to size staves correctly with content width.\n    static get defaultPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.padding') + musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    // Right padding, used by system if startX is already determined.\n    static get rightPadding() {\n        const musicFont = Tables.currentMusicFont();\n        return musicFont.lookupMetric('stave.endPaddingMax');\n    }\n    constructor(x, y, width, options) {\n        super();\n        // Initialized by the constructor via this.resetLines().\n        this.height = 0;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.start_x = x + 5;\n        this.end_x = x + width;\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.resetFont();\n        this.options = Object.assign({ vertical_bar_width: 10, num_lines: 5, fill_style: '#999999', left_bar: true, right_bar: true, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, space_above_staff_ln: 4, space_below_staff_ln: 4, top_text_position: 1, bottom_text_position: 4, line_config: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 1.4 };\n        this.resetLines();\n        // beg bar\n        this.addModifier(new Barline(this.options.left_bar ? BarlineType.SINGLE : BarlineType.NONE));\n        // end bar\n        this.addEndModifier(new Barline(this.options.right_bar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    /** Set default style for ledger lines. */\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    /** Get default style for ledger lines. */\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacing_between_lines_px * spacing;\n    }\n    resetLines() {\n        this.options.line_config = [];\n        for (let i = 0; i < this.options.num_lines; i++) {\n            this.options.line_config.push({ visible: true });\n        }\n        this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;\n        this.options.bottom_text_position = this.options.num_lines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.start_x = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.start_x;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.end_x;\n    }\n    getTieStartX() {\n        return this.start_x;\n    }\n    getTieEndX() {\n        return this.end_x;\n    }\n    getX() {\n        return this.x;\n    }\n    getNumLines() {\n        return this.options.num_lines;\n    }\n    setNumLines(n) {\n        this.options.num_lines = n;\n        this.resetLines();\n        return this;\n    }\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    getY() {\n        return this.y;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0) - Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    getBottomLineBottomY() {\n        return this.getYForLine(this.getNumLines() - 1) + Tables.STAVE_LINE_THICKNESS / 2;\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.start_x += shift;\n        this.end_x += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.end_x = this.x + width;\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n        // this.modifiers[1].setX(this.end_x);\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    getStyle() {\n        return Object.assign({ fillStyle: this.options.fill_style, strokeStyle: this.options.fill_style, lineWidth: Tables.STAVE_LINE_THICKNESS }, super.getStyle());\n    }\n    /**\n     * Set the measure number of this Stave.\n     */\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    /**\n     * Return the measure number of this Stave.\n     */\n    getMeasure() {\n        return this.measure;\n    }\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let start_x = this.start_x - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && start_x > begBarline.getWidth()) {\n            start_x -= begBarline.getWidth();\n        }\n        return start_x;\n    }\n    /** Coda & Segno Symbol functions */\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    // Volta functions\n    setVoltaType(type, number_t, y) {\n        this.modifiers.push(new Volta(type, number_t, this.x, y));\n        return this;\n    }\n    // Section functions\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section, this.x + xOffset, y, drawRect);\n        if (fontSize)\n            staveSection.setFontSize(fontSize);\n        this.modifiers.push(staveSection);\n        return this;\n    }\n    // Tempo functions\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    // Text functions\n    setText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacing_between_lines_px;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;\n        return score_bottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.num_lines);\n    }\n    // This returns\n    /** @returns the y for the *center* of a staff line */\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        // Does the reverse of getYForLine - somewhat dumb and just calls\n        // getYForLine until the right value is reaches\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.top_text_position);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottom_text_position + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacing_between_lines_px;\n        const headroom = options.space_above_staff_ln;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    // This method adds a stave modifier to the stave. Note that the first two\n    // modifiers (BarLines) are automatically added upon construction.\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    // Bar Line functions\n    setBegBarType(type) {\n        // Only valid bar types at beginning of stave is none, single or begin repeat\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        // Repeat end not valid at end of stave\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a key signature to the stave.\n     *\n     * Example:\n     * `stave.addKeySignature('Db');`\n     * @param keySpec new key specification `[A-G][b|#]?`\n     * @param cancelKeySpec\n     * @param position\n     * @returns\n     */\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    /**\n     * Add a clef to the stave.\n     *\n     * Example:\n     *\n     * stave.addClef('treble')\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\n     * @param size\n     * @param annotation\n     * @param position\n     * @returns\n     */\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a time signature to the stave\n     *\n     * Example:\n     *\n     * `stave.addTimeSignature('4/4');`\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n     * @param customPadding\n     * @param position\n     * @returns\n     */\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    // Deprecated\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    /**\n     * @param position\n     * @param category\n     * @returns array of StaveModifiers that match the provided position and category.\n     */\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers;\n        }\n        else if (noPosition) {\n            // A category was provided.\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            // A position was provided.\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            // Both position and category were provided!\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    /**\n     * Use the modifier's `getCategory()` as a key for the `order` array.\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n     */\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.start_x = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = layoutMetrics.xMax || 0;\n                    widths.paddingRight = layoutMetrics.paddingRight || 0;\n                }\n                widths.left = -layoutMetrics.xMin || 0;\n                widths.paddingLeft = layoutMetrics.paddingLeft || 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.end_x = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.applyStyle();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const num_lines = this.options.num_lines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        // Render lines\n        for (let line = 0; line < num_lines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.line_config[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(x + width, y);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        this.restoreStyle();\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            // Only draw modifier if it has a draw function\n            if (typeof modifier.draw === 'function') {\n                modifier.applyStyle(ctx);\n                modifier.draw(this, this.getModifierXShift(i));\n                modifier.restoreStyle(ctx);\n            }\n        }\n        // Render measure numbers\n        if (this.measure > 0) {\n            ctx.save();\n            ctx.setFont(this.textFont);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n            ctx.restore();\n        }\n        return this;\n    }\n    getVerticalBarWidth() {\n        return this.options.vertical_bar_width;\n    }\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines() {\n        return this.options.line_config;\n    }\n    /**\n     * Configure properties of the lines in the Stave\n     * @param line_number The index of the line to configure.\n     * @param line_config An configuration object for the specified line.\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine(line_number, line_config) {\n        if (line_number >= this.options.num_lines || line_number < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (line_config.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof line_config.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.line_config[line_number] = line_config;\n        return this;\n    }\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param lines_configuration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the num_lines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines(lines_configuration) {\n        if (lines_configuration.length !== this.options.num_lines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        // Make sure the defaults are present in case an incomplete set of\n        //  configuration options were supplied.\n        // eslint-disable-next-line\n        for (const line_config in lines_configuration) {\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\n            if (lines_configuration[line_config].visible == undefined) {\n                lines_configuration[line_config] = this.options.line_config[line_config];\n            }\n            this.options.line_config[line_config] = Object.assign(Object.assign({}, this.options.line_config[line_config]), lines_configuration[line_config]);\n        }\n        this.options.line_config = lines_configuration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        let maxX = 0;\n        // align note start\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        // align REPEAT_BEGIN\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() == BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n        maxX = 0;\n        // Align time signatures\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.TimeSignature);\n            modifiers.forEach((modifier) => {\n                if (modifier.getX() > maxX)\n                    maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.TimeSignature);\n            modifiers.forEach((modifier) => {\n                modifier.setX(maxX);\n            });\n        });\n    }\n}\nStave.TEXT_FONT = {\n    family: Font.SANS_SERIF,\n    size: 8,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let x_shift = 3;\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    const thickLineOffset = 2; // For aesthetics\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        x_shift = -5; // Flips the side of the thin line\n        variableWidth = 3;\n    }\n    // Thin line\n    ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n    static get CATEGORY() {\n        return Category.StaveConnector;\n    }\n    constructor(top_stave, bottom_stave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.width = 3;\n        this.top_stave = top_stave;\n        this.bottom_stave = bottom_stave;\n        this.type = StaveConnector.type.DOUBLE;\n        this.resetFont();\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n        // 2. Offset BRACE type not to overlap with another StaveConnector\n        this.x_shift = 0;\n        this.texts = [];\n    }\n    /**\n     * Set type.\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n     */\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        // Be certain that the type is a valid type:\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    /**\n     * Get type.\n     * @returns number {@link StaveConnector.type}\n     */\n    getType() {\n        return this.type;\n    }\n    /** Set optional associated Text. */\n    setText(text, options = {}) {\n        this.texts.push({\n            content: text,\n            options: Object.assign({ shift_x: 0, shift_y: 0 }, options),\n        });\n        return this;\n    }\n    setXShift(x_shift) {\n        if (typeof x_shift !== 'number') {\n            throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n        }\n        this.x_shift = x_shift;\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    /** Render connector and associated text. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.top_stave.getYForLine(0);\n        let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n        let width = this.width;\n        let topX = this.top_stave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.top_stave.getX() + this.top_stave.getWidth();\n        }\n        let attachment_height = botY - topY;\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= this.width + 2;\n                topY -= this.thickness;\n                attachment_height += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                // May need additional code to draw brace\n                const x1 = this.top_stave.getX() - 2 + this.x_shift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachment_height / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachment_height;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachment_height;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachment_height;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachment_height;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachment_height;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachment_height;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachment_height = botY - topY;\n                Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n                Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n                topX -= this.width + 2;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachment_height -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachment_height);\n        }\n        // If the connector is a thin double barline, draw the paralell line\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachment_height);\n        }\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        // Add stave connector text\n        for (let i = 0; i < this.texts.length; i++) {\n            const text = this.texts[i];\n            const text_width = ctx.measureText('' + text.content).width;\n            const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n            const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n            ctx.fillText('' + text.content, x, y + 4);\n        }\n        ctx.restore();\n    }\n}\nStaveConnector.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 16,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\n/**\n * SINGLE_LEFT and SINGLE are the same value for compatibility\n * with older versions of vexflow which didn't have right sided\n * stave connectors.\n */\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\n/**\n * Connector type:\n * * \"singleRight\"\n * * \"singleLeft\"\n * * \"single\"\n * * \"double\"\n * * \"brace\"\n * * \"bracket\"\n * * \"boldDoubleLeft\"\n * * \"boldDoubleRight\"\n * * \"thinDouble\"\n * * \"none\"\n */\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Beam } from './beam';\nimport { Font } from './font';\nimport { Fraction } from './fraction';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\nimport { Voice } from './voice';\n// Helper function\nconst sumArray = (arr) => arr.reduce((a, b) => a + b, 0);\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length == 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    // Initialize tick maps.\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    voices.forEach((voice, voiceIndex) => {\n        // Use resolution multiplier as denominator so that no additional expansion\n        // of fractional tick values is needed.\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            // If we have no tick context for this tick, create one.\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                // Maintain a list of unique integerTicks.\n                tickList.push(integerTicks);\n            }\n            // Add this tickable to the TickContext.\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('Vex.Flow.Formatter', args);\n}\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    // If no valid next note group, nextRestLine is same as current.\n    let nextRestLine = currRestLine;\n    // Start with the next note and keep going until we find a valid non-rest note group.\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    // Locate the mid point between two lines.\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n    /**\n     * Helper function to layout \"notes\" one after the other without\n     * regard for proportions. Useful for tests and debugging.\n     */\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tick = new TickContext().addTickable(note).preFormat();\n            const metrics = tick.getMetrics();\n            tick.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tick.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    /** Helper function to plot formatter debug info. */\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        options = Object.assign({ stavePadding: Tables.currentMusicFont().lookupMetric('stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Font.SANS_SERIF, 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${(formatter.totalCost || 0).toFixed(2)} Shift: ${(formatter.totalShift || 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    /**\n     * Helper function to format and draw a single voice. Returns a bounding\n     * box for the notation.\n     * @param ctx  the rendering context\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n     * @param params one of below:\n     *    * Setting `autobeam` only `(context, stave, notes, true)` or\n     *      `(ctx, stave, notes, {autobeam: true})`\n     *    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`\n     *    * Setting both a struct is needed `(context, stave, notes, {\n     *      autobeam: true, align_rests: true})`\n     *    * `autobeam` automatically generates beams for the notes.\n     *    * `align_rests` aligns rests with nearby notes.\n     */\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            auto_beam: false,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.auto_beam = params;\n        }\n        // Start by creating a voice and adding all the notes to it.\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Then create beams, if requested.\n        const beams = options.auto_beam ? Beam.applyAndGetBeams(voice) : [];\n        // Instantiate a `Formatter` and format the notes.\n        new Formatter()\n            .joinVoices([voice]) // , { align_rests: options.align_rests })\n            .formatToStave([voice], stave, { align_rests: options.align_rests, stave });\n        // Render the voice and beams to the stave.\n        voice.setStave(stave).draw(ctx, stave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Return the bounding box of the voice.\n        return voice.getBoundingBox();\n    }\n    /**\n     * Helper function to format and draw aligned tab and stave notes in two\n     * separate staves.\n     * @param ctx the rendering context\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n     * @param stave a `Stave` instance on which to render `Note`s.\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n     * @param autobeam automatically generate beams.\n     * @param params a configuration object:\n     *    * `autobeam` automatically generates beams for the notes.\n     *    * `align_rests` aligns rests with nearby notes.\n     */\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {\n        let opts = {\n            auto_beam: autobeam,\n            align_rests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.auto_beam = params;\n        }\n        // Create a `4/4` voice for `notes`.\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Create a `4/4` voice for `tabnotes`.\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        // Then create beams, if requested.\n        const beams = opts.auto_beam ? Beam.applyAndGetBeams(notevoice) : [];\n        // Instantiate a `Formatter` and align tab and stave notes.\n        new Formatter()\n            .joinVoices([notevoice]) // , { align_rests: opts.align_rests })\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });\n        // Render voices and beams to staves.\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).draw());\n        // Draw a connector between tab and note staves.\n        new StaveConnector(stave, tabstave).setContext(ctx).draw();\n    }\n    /**\n     * Automatically set the vertical position of rests based on previous/next note positions.\n     * @param tickables an array of Tickables.\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n     * @param alignTuplets If `false`, ignores tuplets.\n     */\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                // If activated rests not on default can be rendered as specified.\n                const position = currTickable.getGlyphProps().position.toUpperCase();\n                if (position !== 'R/4' && position !== 'B/4') {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    // Align rests with previous/next notes.\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        // If previous tickable is a rest, use its line number.\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                // Get the rest line for next valid non-rest note group.\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        // Minimum width required to render all the notes in the voices.\n        this.minTotalWidth = 0;\n        // This is set to `true` after `minTotalWidth` is calculated.\n        this.hasMinTotalWidth = false;\n        // Arrays of tick and modifier contexts.\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        // Gaps between contexts, for free movement of notes post\n        // formatting.\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    /**\n     * Find all the rests in each of the `voices` and align them to neighboring notes.\n     *\n     * @param voices\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n     */\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    /**\n     * Estimate the width required to render 'voices'.  This is done by:\n     * 1. Sum the widths of all the tick contexts\n     * 2. Estimate the padding.\n     * The latter is done by calculating the padding 3 different ways, and taking the\n     * greatest value:\n     * 1. the padding required for unaligned notes in different voices\n     * 2. the padding based on the stddev of the tickable widths\n     * 3. the padding based on the stddev of the tickable durations.\n     *\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\n     * room than the proportional formatting gives them.  A measure of all same duration\n     * and width will need no extra padding, and all these quantities will be\n     * zero in that case.\n     *\n     * Note: joinVoices has to be called before calling preCalculateMinTotalWidth.\n     *\n     * @param voices the voices that contain the notes\n     * @returns the estimated width in pixels\n     */\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Tables.currentMusicFont().lookupMetric('stave.unalignedNotePadding');\n        // Calculate additional padding based on 3 methods:\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        // Cache results.\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        // Create tick contexts.\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        // eslint-disable-next-line\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        // Go through each tick context and calculate total width,\n        // and also accumulate values used in padding hints\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            // If this TC doesn't have all the voices on it, it's unaligned.\n            // so increment the unaligned padding accumulator\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            // Calculate the 'width entropy' over all the Tickables.\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        // Find max of 3 methods pad the width with that\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    /**\n     * Get minimum width required to render all voices. Either `format` or\n     * `preCalculateMinTotalWidth` must be called before this method.\n     */\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    /** Calculate the resolution multiplier for `voices`. */\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    /** Create a `ModifierContext` for each tick in `voices`. */\n    createModifierContexts(voices) {\n        if (voices.length == 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        // Initialize tick maps.\n        const tickToContextMap = new Map();\n        const contexts = [];\n        // For each voice, extract notes and create a context for every\n        // new tick that hasn't been seen before.\n        voices.forEach((voice) => {\n            // Use resolution multiplier as denominator so that no additional expansion\n            // of fractional tick values is needed.\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                // If we have no tick context for this tick, create one.\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                // Add this tickable to the TickContext.\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    /**\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\n     * total number of ticks in voices.\n     */\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    /**\n     * Get the AlignmentContexts of TickContexts that were created by createTickContexts.\n     * Returns undefined if createTickContexts has not yet been run.\n     */\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    /**\n     * This is the core formatter logic. Format voices and justify them\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n     * that can't retrieve widths without a canvas. This method sets the `x` positions\n     * of all the tickables/notes in the formatter.\n     */\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        // Initialize context maps.\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        // Reset loss history for evaluator.\n        this.lossHistory = [];\n        // If voices and a stave were provided, set the Stave for each voice\n        // and preFormat to apply Y values to the notes;\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        // Now distribute the ticks to each tick context, and assign them their\n        // own X positions.\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        // Pass 1: Give each note maximum width requested by context.\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            // Make sure that all tickables in this context have calculated their\n            // space requirements.\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            // Calculate shift for the next tick.\n            shift = width - metrics.totalLeftPx;\n        });\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        // No justification needed. End formatting.\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\n        // justifies based on the context's X position, which is the left-most part of the note head.\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n        // the softmax of the ticks.\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    // Go through each tickable and search backwards for another tickable\n                    // in the same voice. If found, use that duration (ticks) to calculate\n                    // the expected distance.\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        // Look for matching voices between tick contexts.\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            // Found matching voices, get largest duration\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                // Calculate the limits of the shift based on modifiers, etc.\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                // Don't allow shifting if notes in the same voice can collide\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n                            // so that two different tick contexts don't align across staves.\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            // Calculate the expected distance of the current context from the last matching tickable. The\n                            // distance is scaled down by the softmax for the voice.\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            // Distribute ticks to the contexts based on the calculated distance error.\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                // Move center aligned tickables to middle\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const musicFont = Tables.currentMusicFont();\n        const configMinPadding = musicFont.lookupMetric('stave.endPaddingMin');\n        const configMaxPadding = musicFont.lookupMetric('stave.endPaddingMax');\n        const leftPadding = musicFont.lookupMetric('stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        // Just one context. Done formatting.\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n        // existing visual regression tests.\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                // If the number of actual ticks in the measure <> configured ticks, right-justify\n                // because the softmax won't yield the correct value\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\n        // without going over\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    /** Calculate the total cost of this formatting decision. */\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        // Calculate available slack per tick context. This works out how much freedom\n        // to move a context has in either direction, without affecting other notes.\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            // Calculate X position of right edge of previous note\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            // Calculate X position of left edge of current note\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            // Tell the tick contexts how much they can reposition themselves.\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        // Calculate mean distance in each voice for each duration type, then calculate\n        // how far each note is from the mean.\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1 };\n            }\n            else {\n                stats.count += 1;\n                stats.mean = (stats.mean + space) / 2;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        // Calculate how much each note deviates from the mean. Loss function is square\n        // root of the sum of squared deviations.\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    /**\n     * Run a single iteration of rejustification. At a high level, this method calculates\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n     * attempt to reduce the cost. You can call this method multiple times until it finds\n     * and oscillates around a global minimum.\n     * @param options[alpha] the \"learning rate\" for the formatter. It determines how much of a shift\n     * the formatter should make based on its cost function.\n     */\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        // Move `current` tickcontext by `shift` pixels, and adjust the freedom\n        // on adjacent tickcontexts.\n        function move(current, shift, prev, next) {\n            current.setX(current.getX() + shift);\n            current.getFormatterMetrics().freedom.left += shift;\n            current.getFormatterMetrics().freedom.right -= shift;\n            if (prev)\n                prev.getFormatterMetrics().freedom.right += shift;\n            if (next)\n                next.getFormatterMetrics().freedom.left -= shift;\n        }\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            move(context, shift, prevContext, nextContext);\n            const cost = -sumArray(context.getTickables().map((t) => t.getFormatterMetrics().space.deviation));\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    /**\n     * This is the top-level call for all formatting logic completed\n     * after `x` *and* `y` values have been computed for the notes\n     * in the voices.\n     */\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    /**\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\n     * the formatters that the voices belong on a single stave.\n     */\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    /**\n     * Align rests in voices, justify the contexts, and position the notes\n     * so voices are aligned and ready to render onto the stave. This method\n     * mutates the `x` positions of all tickables in `voices`.\n     *\n     * Voices are full justified to fit in `justifyWidth` pixels.\n     *\n     * Set `options.context` to the rendering context. Set `options.align_rests`\n     * to true to enable rest alignment.\n     */\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ align_rests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.align_rests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        // Only postFormat if a stave was supplied for y value formatting\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        // eslint-disable-next-line\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\n// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.\nFormatter.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.num_notes must be set.\n *\n * @constructor\n * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   num_notes: fit this many notes into...\n *   notes_occupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of num_notes : notes_occupied.\n *       num_notes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notes_occupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between num_notes and\n *     notes_occupied is greater than 1.\n *\n *   y_offset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyph } from './glyph';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var TupletLocation;\n(function (TupletLocation) {\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\n})(TupletLocation || (TupletLocation = {}));\nexport class Tuplet extends Element {\n    static get CATEGORY() {\n        return Category.Tuplet;\n    }\n    static get LOCATION_TOP() {\n        return TupletLocation.TOP;\n    }\n    static get LOCATION_BOTTOM() {\n        return TupletLocation.BOTTOM;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    static get metrics() {\n        const tupletMetrics = Tables.currentMusicFont().getMetrics().tuplet;\n        if (!tupletMetrics)\n            throw new RuntimeError('BadMetrics', `tuplet missing`);\n        return tupletMetrics;\n    }\n    constructor(notes, options = {}) {\n        super();\n        this.numerator_glyphs = [];\n        this.denom_glyphs = [];\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n        // We accept beats_occupied, but warn that it's deprecated:\n        // the preferred property name is now notes_occupied.\n        if (this.options.beats_occupied) {\n            this.beatsOccupiedDeprecationWarning();\n        }\n        this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n        if (this.options.bracketed != undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n        this.point = Tables.currentMusicFont().lookupMetric('digits.tupletPoint');\n        this.y_pos = 16;\n        this.x_pos = 100;\n        this.width = 200;\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    /**\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n     */\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            // eslint-disable-next-line\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.num_notes;\n    }\n    beatsOccupiedDeprecationWarning() {\n        // eslint-disable-next-line\n        console.warn('beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.', 'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.', 'The old methods will be removed in VexFlow 5.0.');\n    }\n    getBeatsOccupied() {\n        this.beatsOccupiedDeprecationWarning();\n        return this.getNotesOccupied();\n    }\n    setBeatsOccupied(beats) {\n        this.beatsOccupiedDeprecationWarning();\n        return this.setNotesOccupied(beats);\n    }\n    getNotesOccupied() {\n        return this.notes_occupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notes_occupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        this.numerator_glyphs = [];\n        let n = this.num_notes;\n        while (n >= 1) {\n            this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n        this.denom_glyphs = [];\n        n = this.notes_occupied;\n        while (n >= 1) {\n            this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n    }\n    // determine how many tuplets are nested within this tuplet\n    // on the same side (above/below), to calculate a y\n    // offset for this tuplet:\n    getNestedTupletCount() {\n        const location = this.location;\n        const first_note = this.notes[0];\n        let maxTupletCount = countTuplets(first_note, location);\n        let minTupletCount = countTuplets(first_note, location);\n        // Count the tuplets that are on the same side (above/below)\n        // as this tuplet:\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    // determine the y position of the tuplet:\n    getYPosition() {\n        // offset the tuplet for any nested tuplets between\n        // it and the notes:\n        const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        // offset the tuplet for any manual y_offset:\n        const y_offset = this.options.y_offset || 0;\n        // now iterate through the notes and find our highest\n        // or lowest locations, to form a base y_pos\n        const first_note = this.notes[0];\n        let y_pos;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            y_pos = first_note.checkStave().getYForLine(0) - Tuplet.metrics.topModifierOffset;\n            // check modifiers above note to see if they will collide with tuplet beam\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().top_text_line);\n                }\n                const modY = note.getYForTopText(modLines) - Tuplet.metrics.noteHeadOffset;\n                if (note.hasStem() || note.isRest()) {\n                    const top_y = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tuplet.metrics.stemOffset\n                        : note.getStemExtents().baseY - Tuplet.metrics.noteHeadOffset;\n                    y_pos = Math.min(top_y, y_pos);\n                    if (modLines > 0) {\n                        y_pos = Math.min(modY, y_pos);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = Tuplet.metrics.bottomLine; // tuplet default on line 4\n            // check modifiers below note to see if they will collide with tuplet beam\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().text_line + 1);\n                }\n            });\n            y_pos = first_note.checkStave().getYForLine(lineCheck) + Tuplet.metrics.noteHeadOffset;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottom_y = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + Tuplet.metrics.noteHeadOffset\n                        : this.notes[i].getStemExtents().topY + Tuplet.metrics.stemOffset;\n                    if (bottom_y > y_pos) {\n                        y_pos = bottom_y;\n                    }\n                }\n            }\n        }\n        return y_pos + nested_tuplet_y_offset + y_offset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        // determine x value of left bound of tuplet\n        const first_note = this.notes[0];\n        const last_note = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            this.x_pos = first_note.getStemX();\n            this.width = last_note.getStemX() - this.x_pos;\n        }\n        else {\n            this.x_pos = first_note.getTieLeftX() - 5;\n            this.width = last_note.getTieRightX() - this.x_pos + 5;\n        }\n        // determine y value for tuplet\n        this.y_pos = this.getYPosition();\n        const addGlyphWidth = (width, glyph) => width + defined(glyph.getMetrics().width);\n        // calculate total width of tuplet notation\n        let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n        if (this.ratioed) {\n            width = this.denom_glyphs.reduce(addGlyphWidth, width);\n            width += this.point * 0.32;\n        }\n        const notation_center_x = this.x_pos + this.width / 2;\n        const notation_start_x = notation_center_x - width / 2;\n        // draw bracket if the tuplet is not beamed\n        if (this.bracketed) {\n            const line_width = this.width / 2 - width / 2 - 5;\n            // only draw the bracket if it has positive length\n            if (line_width > 0) {\n                ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        // draw numerator glyphs\n        const shiftY = Tables.currentMusicFont().lookupMetric('digits.shiftY', 0);\n        let x_offset = 0;\n        this.numerator_glyphs.forEach((glyph) => {\n            glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n            x_offset += defined(glyph.getMetrics().width);\n        });\n        // display colon and denominator if the ratio is to be shown\n        if (this.ratioed) {\n            const colon_x = notation_start_x + x_offset + this.point * 0.16;\n            const colon_radius = this.point * 0.06;\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, false);\n            ctx.closePath();\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, false);\n            ctx.closePath();\n            ctx.fill();\n            x_offset += this.point * 0.32;\n            this.denom_glyphs.forEach((glyph) => {\n                glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n                x_offset += defined(glyph.getMetrics().width);\n            });\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TupletLocation } from './tuplet';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nexport const BEAM_LEFT = 'L';\nexport const BEAM_RIGHT = 'R';\nexport const BEAM_BOTH = 'B';\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n    static get CATEGORY() {\n        return Category.Beam;\n    }\n    /** Get the direction of the beam */\n    getStemDirection() {\n        return this.stem_direction;\n    }\n    /**\n     * Get the default beam groups for a provided time signature.\n     * Attempt to guess if the time signature is not found in table.\n     * Currently this is fairly naive.\n     */\n    static getDefaultBeamGroups(time_sig) {\n        if (!time_sig || time_sig === 'c') {\n            time_sig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[time_sig];\n        if (groups === undefined) {\n            // If no beam groups found, naively determine\n            // the beam groupings from the time signature\n            const beatTotal = parseInt(time_sig.split('/')[0], 10);\n            const beatValue = parseInt(time_sig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    /**\n     * A helper function to automatically build basic beams for a voice. For more\n     * complex auto-beaming use `Beam.generateBeams()`.\n     * @param voice the voice to generate the beams for\n     * @param stem_direction a stem direction to apply to the entire voice\n     * @param groups an array of `Fraction` representing beat groupings for the beam\n     */\n    static applyAndGetBeams(voice, stem_direction, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stem_direction });\n    }\n    /**\n     * A helper function to autimatically build beams for a voice with\n     * configuration options.\n     *\n     * Example configuration object:\n     *\n     * ```\n     * config = {\n     *   groups: [new Vex.Flow.Fraction(2, 8)],\n     *   stem_direction: -1,\n     *   beam_rests: true,\n     *   beam_middle_only: true,\n     *   show_stemlets: false\n     * };\n     * ```\n     * @param notes an array of notes to create the beams for\n     * @param config the configuration object\n     * @param config.stem_direction set to apply the same direction to all notes\n     * @param config.beam_rests set to `true` to include rests in the beams\n     * @param config.beam_middle_only set to `true` to only beam rests in the middle of the beat\n     * @param config.show_stemlets set to `true` to draw stemlets for rests\n     * @param config.maintain_stem_directions set to `true` to not apply new stem directions\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n     *\n     */\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        // Convert beam groups to tick amounts\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(vf_notes) {\n            return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            // number of ticks in current group\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return; // Ignore untickables (like bar notes)\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                // If the note that was just added overflows the group tick total\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    // If the overflow note can be beamed, start the next group\n                    // with it. Unbeamable notes leave the group overflowed.\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    // We have overflown, so we're going to next tick group. As we might have\n                    // overflown by more than 1 group, we need to go forward as many times as\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n                    // in current groups as we go forward.\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            // Adds any remainder notes beam\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        // Splits up groups by Rest\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beam_rests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    // Determine if the group should be broken at this note\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        // Add current group\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        // Start a new group. Include the current note if the group\n                        // was broken up by stem direction, as that note needs to start\n                        // the next group of notes\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        // Add note to group\n                        tempGroup.push(note);\n                    }\n                });\n                // If there is a remaining group, add it as well\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintain_stem_directions) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stem_direction) {\n                        stemDirection = config.stem_direction;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        // Get all of the tuplets in all of the note groups\n        function getTuplets() {\n            const uniqueTuplets = [];\n            // Go through all of the note groups and inspect for tuplets\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        // Using closures to store the variables throughout the various functions\n        // IMO Keeps it this process lot cleaner - but not super consistent with\n        // the rest of the API's style - Silverwolf90 (Cyril)\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        // Get the notes to be beamed\n        const beamedNoteGroups = getBeamGroups();\n        // Get the tuplets in order to format them accurately\n        const allTuplets = getTuplets();\n        // Create a Vex.Flow.Beam from each group of notes to be beamed\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.show_stemlets) {\n                beam.render_options.show_stemlets = true;\n            }\n            if (config.secondary_breaks) {\n                beam.render_options.secondary_break_ticks = Tables.durationToTicks(config.secondary_breaks);\n            }\n            if (config.flat_beams === true) {\n                beam.render_options.flat_beams = true;\n                beam.render_options.flat_beam_offset = config.flat_beam_offset;\n            }\n            beams.push(beam);\n        });\n        // Reformat tuplets\n        allTuplets.forEach((tuplet) => {\n            // Set the tuplet location based on the stem direction\n            const direction = tuplet.notes[0].stem_direction === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\n            tuplet.setTupletLocation(direction);\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    constructor(notes, auto_stem = false) {\n        super();\n        this.slope = 0;\n        this.y_shift = 0;\n        /**\n         * Overrides to default beam directions for secondary-level beams that do not\n         * connect to any other note. See further explanation at\n         * `setPartialBeamSideAt`\n         */\n        this.forcedPartialDirections = {};\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        // Validate beam line, direction and ticks.\n        this.ticks = notes[0].getIntrinsicTicks();\n        if (this.ticks >= Tables.durationToTicks('4')) {\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i; // shared iterator\n        let note;\n        this.stem_direction = notes[0].getStemDirection();\n        let stem_direction = this.stem_direction;\n        // Figure out optimal stem direction based on given notes\n        if (auto_stem && isStaveNote(notes[0])) {\n            stem_direction = calculateStemDirection(notes);\n        }\n        else if (auto_stem && isTabNote(notes[0])) {\n            // Auto Stem TabNotes\n            const stem_weight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stem_direction = stem_weight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        // Apply stem directions and attach beam to notes\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (auto_stem) {\n                note.setStemDirection(stem_direction);\n                this.stem_direction = stem_direction;\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        this.beam_count = this.getBeamCount();\n        this.break_on_indices = [];\n        this.render_options = {\n            beam_width: 5,\n            max_slope: 0.25,\n            min_slope: -0.25,\n            slope_iterations: 20,\n            slope_cost: 100,\n            show_stemlets: false,\n            stemlet_extension: 7,\n            partial_beam_length: 10,\n            flat_beams: false,\n            min_flat_beam_offset: 15,\n        };\n    }\n    /** Get the notes in this beam. */\n    getNotes() {\n        return this.notes;\n    }\n    /** Get the max number of beams in the set of notes. */\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyphProps().beam_count);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    /** Set which note `indices` to break the secondary beam at. */\n    breakSecondaryAt(indices) {\n        this.break_on_indices = indices;\n        return this;\n    }\n    /**\n     * Forces the direction of a partial beam (a secondary-level beam that exists\n     * on one note only of the beam group). This is useful in rhythms such as 6/8\n     * eighth-sixteenth-eighth-sixteenth, where the direction of the beam on the\n     * first sixteenth note can help imply whether the rhythm is to be felt as\n     * three groups of eighth notes (typical) or as two groups of three-sixteenths\n     * (less common):\n     * ```\n     *  ┌───┬──┬──┐      ┌──┬──┬──┐\n     *  │   ├─ │ ─┤  vs  │ ─┤  │ ─┤\n     *  │   │  │  │      │  │  │  │\n     * ```\n     */\n    setPartialBeamSideAt(noteIndex, side) {\n        this.forcedPartialDirections[noteIndex] = side;\n        return this;\n    }\n    /**\n     * Restore the default direction of a partial beam (a secondary-level beam\n     * that does not connect to any other notes).\n     */\n    unsetPartialBeamSideAt(noteIndex) {\n        delete this.forcedPartialDirections[noteIndex];\n        return this;\n    }\n    /** Return the y coordinate for linear function. */\n    getSlopeY(x, first_x_px, first_y_px, slope) {\n        return first_y_px + (x - first_x_px) * slope;\n    }\n    /** Calculate the best possible slope for the provided notes. */\n    calculateSlope() {\n        const { notes, stem_direction: stemDirection, render_options: { max_slope, min_slope, slope_iterations, slope_cost }, } = this;\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (max_slope - min_slope) / slope_iterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        // iterate through slope values to find best weighted fit\n        for (let slope = min_slope; slope <= max_slope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            // iterate through notes, calculating y shift and stem extension\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    // beam needs to be shifted up to accommodate note\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        // beam overshoots note, account for the difference\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            // most engraving books suggest aiming for a slope about half the angle of the\n            // difference between the first and last notes' stem length;\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            // This tries to align most beams to something closer to the idealSlope, but\n            // doesn't go crazy. To disable, set this.render_options.slope_cost = 0\n            const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);\n            // update state when a more ideal slope is found\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        this.y_shift = yShift;\n    }\n    /** Calculate a slope and y-shift for flat beams. */\n    calculateFlatSlope() {\n        const { notes, stem_direction, render_options: { beam_width, min_flat_beam_offset, flat_beam_offset }, } = this;\n        // If a flat beam offset has not yet been supplied or calculated,\n        // generate one based on the notes in this particular note group\n        let total = 0;\n        let extremeY = 0; // Store the highest or lowest note here\n        let extremeBeamCount = 0; // The beam count of the extreme note\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            // Total up all of the offsets so we can average them out later\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            // Store the highest (stems-up) or lowest (stems-down) note so the\n            //  offset can be adjusted in case the average isn't enough\n            if (stem_direction === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stem_direction === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        // Average the offsets to try and come up with a reasonable one that\n        //  works for all of the notes in the beam group.\n        let offset = total / notes.length;\n        // In case the average isn't long enough, add or subtract some more\n        //  based on the highest or lowest note (again, based on the stem\n        //  direction). This also takes into account the added height due to\n        //  the width of the beams.\n        const beamWidth = beam_width * 1.5;\n        const extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;\n        const newOffset = extremeY + extremeTest * -stem_direction;\n        if (stem_direction === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stem_direction === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flat_beam_offset) {\n            // Set the offset for the group based on the calculations above.\n            this.render_options.flat_beam_offset = offset;\n        }\n        else if (stem_direction === Stem.DOWN && offset > flat_beam_offset) {\n            this.render_options.flat_beam_offset = offset;\n        }\n        else if (stem_direction === Stem.UP && offset < flat_beam_offset) {\n            this.render_options.flat_beam_offset = offset;\n        }\n        // for flat beams, the slope and y_shift are simply 0\n        this.slope = 0;\n        this.y_shift = 0;\n    }\n    /** Return the Beam y offset. */\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        // For flat beams, set the first and last Y to the offset, rather than\n        //  using the note's stem extents.\n        if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {\n            beamY = this.render_options.flat_beam_offset;\n        }\n        return beamY;\n    }\n    /**\n     * Create new stems for the notes in the beam, so that each stem\n     * extends into the beams.\n     */\n    applyStemExtensions() {\n        const { notes, slope, y_shift, beam_count, render_options: { show_stemlets, stemlet_extension, beam_width }, } = this;\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                // Determine necessary extension for cross-stave notes in the beam group\n                let crossStemExtension = 0;\n                if (note.getStemDirection() !== this.stem_direction) {\n                    const beamCount = note.getGlyphProps().beam_count;\n                    crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.render_options.beam_width;\n                    /* This will be required if the partial beams are moved to the note side.\n                    if (i > 0 && note.getGlyph().beam_count > 1) {\n                      const prevBeamCount = this.notes[i - 1].getGlyph().beam_count;\n                      const beamDiff = Math.abs(prevBeamCount - beamCount);\n                      if (beamDiff > 0) crossStemExtension -= beamDiff * (this.render_options.beam_width * 1.5);\n                    }\n                    */\n                }\n                stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && show_stemlets) {\n                    const beamWidth = beam_width;\n                    const totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);\n                }\n            }\n        }\n    }\n    /** Return upper level beam direction. */\n    lookupBeamDirection(duration, prev_tick, tick, next_tick, noteIndex) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const forcedBeamDirection = this.forcedPartialDirections[noteIndex];\n        if (forcedBeamDirection)\n            return forcedBeamDirection;\n        const lookup_duration = `${Tables.durationToNumber(duration) / 2}`;\n        const prev_note_gets_beam = prev_tick < Tables.durationToTicks(lookup_duration);\n        const next_note_gets_beam = next_tick < Tables.durationToTicks(lookup_duration);\n        const note_gets_beam = tick < Tables.durationToTicks(lookup_duration);\n        if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n            return BEAM_BOTH;\n        }\n        else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {\n            return BEAM_LEFT;\n        }\n        else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick, noteIndex);\n    }\n    /** Get the x coordinates for the beam lines of specific `duration`. */\n    getBeamLines(duration) {\n        const tick_of_duration = Tables.durationToTicks(duration);\n        let beam_started = false;\n        const beam_lines = [];\n        let current_beam = undefined;\n        const partial_beam_length = this.render_options.partial_beam_length;\n        let previous_should_break = false;\n        let tick_tally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            // See if we need to break secondary beams on this note.\n            const ticks = note.getTicks().value();\n            tick_tally += ticks;\n            let should_break = false;\n            // 8th note beams are always drawn.\n            if (parseInt(duration, 10) >= 8) {\n                // First, check to see if any indices were set up through breakSecondaryAt()\n                should_break = this.break_on_indices.indexOf(i) !== -1;\n                // If the secondary breaks were auto-configured in the render options,\n                //  handle that as well.\n                if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {\n                    tick_tally = 0;\n                    should_break = true;\n                }\n            }\n            const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;\n            const stem_x = note.getStemX() - Stem.WIDTH / 2;\n            // Check to see if the next note in the group will get a beam at this\n            //  level. This will help to inform the partial beam logic below.\n            const prev_note = this.notes[i - 1];\n            const next_note = this.notes[i + 1];\n            const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;\n            const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;\n            const beam_alone = prev_note && next_note && note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n            // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;\n            if (note_gets_beam) {\n                // This note gets a beam at the current level\n                if (beam_started) {\n                    // We're currently in the middle of a beam. Just continue it on to\n                    //  the stem X of the current note.\n                    current_beam = beam_lines[beam_lines.length - 1];\n                    current_beam.end = stem_x;\n                    // If a secondary beam break is set up, end the beam right now.\n                    if (should_break) {\n                        beam_started = false;\n                        if (next_note && !next_note_gets_beam && current_beam.end === undefined) {\n                            // This note gets a beam,.but the next one does not. This means\n                            //  we need a partial pointing right.\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                    }\n                }\n                else {\n                    // No beam started yet. Start a new one.\n                    current_beam = { start: stem_x, end: undefined };\n                    beam_started = true;\n                    if (beam_alone) {\n                        // previous and next beam exists and does not get a beam but current gets it.\n                        const prev_tick = prev_note.getIntrinsicTicks();\n                        const next_tick = next_note.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick, i);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                        else {\n                            current_beam.end = current_beam.start + partial_beam_length;\n                        }\n                    }\n                    else if (!next_note_gets_beam) {\n                        // The next note doesn't get a beam. Draw a partial.\n                        if ((previous_should_break || i === 0) && next_note) {\n                            // This is the first note (but not the last one), or it is\n                            //  following a secondary break. Draw a partial to the right.\n                            current_beam.end = current_beam.start + partial_beam_length;\n                        }\n                        else {\n                            // By default, draw a partial to the left.\n                            current_beam.end = current_beam.start - partial_beam_length;\n                        }\n                    }\n                    else if (should_break) {\n                        // This note should have a secondary break after it. Even though\n                        //  we just started a beam, it needs to end immediately.\n                        current_beam.end = current_beam.start - partial_beam_length;\n                        beam_started = false;\n                    }\n                    beam_lines.push(current_beam);\n                }\n            }\n            else {\n                // The current note does not get a beam.\n                beam_started = false;\n            }\n            // Store the secondary break flag to inform the partial beam logic in\n            //  the next iteration of the loop.\n            previous_should_break = should_break;\n        }\n        // Add a partial beam pointing left if this is the last note in the group\n        const last_beam = beam_lines[beam_lines.length - 1];\n        if (last_beam && last_beam.end === undefined) {\n            last_beam.end = last_beam.start - partial_beam_length;\n        }\n        return beam_lines;\n    }\n    /** Render the stems for each note. */\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                const stem_x = note.getStemX();\n                stem.setNoteHeadXBounds(stem_x, stem_x);\n                stem.setContext(ctx).draw();\n            }\n        }, this);\n    }\n    // Render the beam lines\n    drawBeamLines(ctx) {\n        const valid_beam_durations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.render_options.beam_width * this.stem_direction;\n        // Draw the beams.\n        for (let i = 0; i < valid_beam_durations.length; ++i) {\n            const duration = valid_beam_durations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beam_line = beamLines[j];\n                const startBeamX = beam_line.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beam_line.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    /** Pre-format the beam. */\n    preFormat() {\n        return this;\n    }\n    /**\n     * Post-format the beam. This can only be called after\n     * the notes in the beam have both `x` and `y` values. ie: they've\n     * been formatted and have staves.\n     */\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        // Calculate a smart slope if we're not forcing the beams to be flat.\n        if (isTabNote(this.notes[0]) || this.render_options.flat_beams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    /** Render the beam to the canvas context */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (this.unbeamable)\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        this.drawStems(ctx);\n        this.applyStyle();\n        ctx.openGroup('beam', this.getAttribute('id'));\n        this.drawBeamLines(ctx);\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\n// MIT License\nimport { Clef } from './clef';\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Category } from './typeguard';\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n    static get CATEGORY() {\n        return Category.ClefNote;\n    }\n    constructor(type, size, annotation) {\n        super({ duration: 'b' });\n        this.type = type;\n        const clef = new Clef(type, size, annotation);\n        this.clef = clef.clef;\n        this.annotation = clef.annotation;\n        this.size = size === undefined ? 'default' : size;\n        this.setWidth(Glyph.getWidth(this.clef.code, this.clef.point, `clefNote_${this.size}`));\n        // Note properties\n        this.ignore_ticks = true;\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.type = type;\n        this.size = size;\n        const clef = new Clef(type, size, annotation);\n        this.clef = clef.clef;\n        this.annotation = clef.annotation;\n        this.setWidth(Glyph.getWidth(this.clef.code, this.clef.point, `clefNote_${this.size}`));\n        return this;\n    }\n    /** Get associated clef. */\n    getClef() {\n        return this.clef;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render clef note. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        const abs_x = this.getAbsoluteX();\n        Glyph.renderGlyph(ctx, abs_x, stave.getYForLine(this.clef.line), this.clef.point, this.clef.code, {\n            category: `clefNote_${this.size}`,\n        });\n        // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.\n        if (this.annotation !== undefined) {\n            const attachment = new Glyph(this.annotation.code, this.annotation.point);\n            attachment.setContext(ctx);\n            attachment.setStave(stave);\n            attachment.setYShift(stave.getYForLine(this.annotation.line) - stave.getYForGlyphs());\n            attachment.setXShift(this.annotation.x_shift);\n            attachment.renderToStave(abs_x);\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('Vex.Flow.Crescendo', args);\n}\n// Private helper to draw the hairpin\nfunction renderHairpin(ctx, params) {\n    const begin_x = params.begin_x;\n    const end_x = params.end_x;\n    const y = params.y;\n    const half_height = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(begin_x, y - half_height);\n        ctx.lineTo(end_x, y);\n        ctx.lineTo(begin_x, y + half_height);\n    }\n    else {\n        ctx.moveTo(end_x, y - half_height);\n        ctx.lineTo(begin_x, y);\n        ctx.lineTo(end_x, y + half_height);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    /** Crescendo category string. */\n    static get CATEGORY() {\n        return Category.Crescendo;\n    }\n    // Initialize the crescendo's properties\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.options = {\n            // Extensions to the length of the crescendo on either side\n            extend_left: 0,\n            extend_right: 0,\n            // Vertical shift\n            y_shift: 0,\n        };\n        // Whether the object is a decrescendo\n        this.decrescendo = false;\n        // The staff line to be placed on\n        this.line = noteStruct.line || 0;\n        // The height at the open end of the cresc/decresc\n        this.height = 15;\n    }\n    // Set the line to center the element on\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Set the full height at the open end\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    // Preformat the note\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    // Render the Crescendo object onto the canvas\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tick_context = this.getTickContext();\n        const next_context = TickContext.getNextContext(tick_context);\n        const begin_x = this.getAbsoluteX();\n        const end_x = next_context ? next_context.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);\n        renderHairpin(ctx, {\n            begin_x: begin_x - this.options.extend_left,\n            end_x: end_x + this.options.extend_right,\n            y: y + this.options.y_shift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements curves (for slurs)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    static get CATEGORY() {\n        return Category.Curve;\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    // from: Start note\n    // to: End note\n    // options:\n    //    cps: List of control points\n    //    x_shift: pixels to shift\n    //    y_shift: pixels to shift\n    constructor(from, to, options) {\n        super();\n        this.render_options = Object.assign({ thickness: 2, x_shift: 0, y_shift: 10, position: CurvePosition.NEAR_HEAD, position_end: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ] }, options);\n        this.from = from;\n        this.to = to;\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        const ctx = this.checkContext();\n        const x_shift = this.render_options.x_shift;\n        const y_shift = this.render_options.y_shift * params.direction;\n        const first_x = params.first_x + x_shift;\n        const first_y = params.first_y + y_shift;\n        const last_x = params.last_x - x_shift;\n        const last_y = params.last_y + y_shift;\n        const thickness = this.render_options.thickness;\n        const cps = this.render_options.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const cp_spacing = (last_x - first_x) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(first_x, first_y);\n        ctx.bezierCurveTo(first_x + cp_spacing + cp0x, first_y + cp0y * params.direction, last_x - cp_spacing + cp1x, last_y + cp1y * params.direction, last_x, last_y);\n        ctx.bezierCurveTo(last_x - cp_spacing + cp1x, last_y + (cp1y + thickness) * params.direction, first_x + cp_spacing + cp0x, first_y + (cp0y + thickness) * params.direction, first_x, first_y);\n        ctx.stroke();\n        ctx.closePath();\n        ctx.fill();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const first_note = this.from;\n        const last_note = this.to;\n        let first_x;\n        let last_x;\n        let first_y;\n        let last_y;\n        let stem_direction = 0;\n        let metric = 'baseY';\n        let end_metric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.render_options.position);\n        const position_end = getPosition(this.render_options.position_end);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            end_metric = 'topY';\n        }\n        if (position_end === CurvePosition.NEAR_HEAD) {\n            end_metric = 'baseY';\n        }\n        else if (position_end === CurvePosition.NEAR_TOP) {\n            end_metric = 'topY';\n        }\n        if (first_note) {\n            first_x = first_note.getTieRightX();\n            stem_direction = first_note.getStemDirection();\n            first_y = first_note.getStemExtents()[metric];\n        }\n        else {\n            const stave = last_note.checkStave();\n            first_x = stave.getTieStartX();\n            first_y = last_note.getStemExtents()[metric];\n        }\n        if (last_note) {\n            last_x = last_note.getTieLeftX();\n            stem_direction = last_note.getStemDirection();\n            last_y = last_note.getStemExtents()[end_metric];\n        }\n        else {\n            const stave = first_note.checkStave();\n            last_x = stave.getTieEndX();\n            last_y = first_note.getStemExtents()[end_metric];\n        }\n        this.renderCurve({\n            first_x,\n            last_x,\n            first_y,\n            last_y,\n            direction: stem_direction * (this.render_options.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// A generic text parsing class for VexFlow.\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('Vex.Flow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString; // string\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches); // nested array\n}\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n    // the EasyScore grammar in easyscore.ts.\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Parse `line` using current grammar. Returns `{success: true}` if the\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n    // where `errorPos` is the location of the error in the string.\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Look for `token` in this.line[this.pos], and return success\n    // if one is found. `token` is specified as a regular expression.\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n    // set, then return success even if the token is not found, but reset\n    // the position before exiting.\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        // Execute all sub rules in sequence.\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                // If `rule.or` is set, then return success if any one\n                // of the subrules match, else all subrules must match.\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n    // then a failed match is also a success (but the position is reset).\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    // Execute the rule produced by the provided `rules` function. This\n    // offloads to one of the above matchers and consolidates the results. It is also\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        // Get rule from Grammar class.\n        // expect(...) handles both lexing & parsing:\n        // - lexer rules produce tokens.\n        // - parser rules produce expressions which may trigger code via the\n        //   { run: () => ... } trigger functions in easyscore.ts.\n        //   These functions build the VexFlow objects that are displayed on screen.\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            // A lexer rule has a `token` property.\n            // Base case: parse the regex and throw an error if the\n            // line doesn't match.\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                // Token match! Update position and throw away parsed portion\n                // of string.\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            // A parser rule has an `expect` property.\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        // If there's a trigger attached to this rule, then run it.\n        // Make the matches accessible through `state.matches` in the\n        // `run: (state) => ...` trigger.\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Articulation } from './articulation';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Parser } from './parser';\nimport { Stem } from './stem';\nimport { defined, log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('Vex.Flow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                // eslint-disable-next-line\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            // eslint-disable-next-line\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            // eslint-disable-next-line\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    // notes is an array with 3 entries\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n); // n => [string, string | null, string]\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n        // e.g., auto | up | down\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        // e.g., treble | bass\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const auto_stem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n        // Build a GhostNote or StaveNote using the information we gathered.\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) == 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, auto_stem });\n        if (!auto_stem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        // Attach accidentals.\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        // Attach dots.\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Set the score defaults.\n     * clef must be set appropriately to avoid errors when adding Staves.\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n     * @param defaults.stem default stem arrangement (auto | up | down)\n     * @returns this\n     */\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    /**\n     * @param options.factory is required.\n     * @returns this\n     */\n    setOptions(options) {\n        var _a, _b;\n        // eslint-disable-next-line\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isAnnotation } from './typeguard';\nimport { RuntimeError } from './util';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.GhostNote;\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            // Preserve backwards-compatibility\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        // Note properties\n        this.setWidth(0);\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        // Draw Annotations\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class GlyphNote extends Note {\n    static get CATEGORY() {\n        return Category.GlyphNote;\n    }\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        // Note properties\n        this.ignore_ticks = this.options.ignoreTicks;\n        this.setGlyph(glyph);\n    }\n    setGlyph(glyph) {\n        this.glyph = glyph;\n        this.setWidth(this.glyph.getMetrics().width);\n        return this;\n    }\n    getBoundingBox() {\n        return this.glyph.getBoundingBox();\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return this.glyph.getMetrics().width;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.applyStyle(ctx);\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        // Context is set when setStave is called on Note\n        const glyph = this.glyph;\n        if (!glyph.getContext()) {\n            glyph.setContext(ctx);\n        }\n        glyph.setStave(stave);\n        glyph.setYShift(stave.getYForLine(this.options.line) - stave.getYForGlyphs());\n        const x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        glyph.renderToStave(x);\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle(ctx);\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class GraceNote extends StaveNote {\n    static get CATEGORY() {\n        return Category.GraceNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    static get SCALE() {\n        return 0.66;\n    }\n    constructor(noteStruct) {\n        super(Object.assign({ glyph_font_scale: Tables.NOTATION_FONT_SCALE * GraceNote.SCALE, stroke_px: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    getStemExtension() {\n        if (this.stem_extension_override) {\n            return this.stem_extension_override;\n        }\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            let ret = super.getStemExtension();\n            if (glyphProps.stem) {\n                const staveNoteScale = this.getStaveNoteScale();\n                ret = (Stem.HEIGHT + ret) * staveNoteScale - Stem.HEIGHT;\n            }\n            return ret;\n        }\n        return 0;\n    }\n    getStaveNoteScale() {\n        return this.render_options.glyph_font_scale / Tables.NOTATION_FONT_SCALE;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const staveNoteScale = this.getStaveNoteScale();\n            // some magic numbers are based on the staveNoteScale 0.66.\n            const offsetScale = staveNoteScale / 0.66;\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                // FIXME: should render slash after beam?\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale, 8 * offsetScale, {\n                    stem: 6 * offsetScale,\n                    beam: 5 * offsetScale,\n                });\n            }\n            else {\n                const stem_direction = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteStemHeight = stem.getHeight();\n                let x = this.getAbsoluteX();\n                let y = stem_direction === Stem.DOWN\n                    ? noteHeadBounds.y_top - noteStemHeight\n                    : noteHeadBounds.y_bottom - noteStemHeight;\n                const defaultStemExtention = stem_direction === Stem.DOWN ? this.glyphProps.stem_down_extension : this.glyphProps.stem_up_extension;\n                let defaultOffsetY = Tables.STEM_HEIGHT;\n                defaultOffsetY -= defaultOffsetY / 2.8;\n                defaultOffsetY += defaultStemExtention;\n                y += defaultOffsetY * staveNoteScale * stem_direction;\n                const offsets = stem_direction === Stem.UP\n                    ? {\n                        x1: 1,\n                        y1: 0,\n                        x2: 13,\n                        y2: -9,\n                    }\n                    : {\n                        x1: -4,\n                        y1: 1,\n                        x2: 13,\n                        y2: 9,\n                    };\n                x += offsets.x1 * offsetScale;\n                y += offsets.y1 * offsetScale;\n                slashBBox = {\n                    x1: x,\n                    y1: y,\n                    x2: x + offsets.x2 * offsetScale,\n                    y2: y + offsets.y2 * offsetScale,\n                };\n            }\n            // FIXME: avoid staff lines, ledger lines or others.\n            const ctx = this.checkContext();\n            ctx.save();\n            ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beam_slope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beam_angle = Math.atan(beam_slope * scaleX);\n        // slash line intersecting point on beam.\n        const iPointOnBeam = {\n            dx: Math.cos(beam_angle) * slashBeamOffset,\n            dy: Math.sin(beam_angle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;\n        const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;\n        const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;\n        const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beam_slope;\n        const ret = {\n            x1: stemX - protrusion_stem_dx,\n            y1: stemY + slashStemOffset - protrusion_stem_dy,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusion_beam_dx,\n            y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,\n        };\n        return ret;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Mark Meeus 2019\nimport { KeySignature } from './keysignature';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class KeySigNote extends Note {\n    static get CATEGORY() {\n        return Category.KeySigNote;\n    }\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        // Note properties\n        this.ignore_ticks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.draw();\n    }\n}\n","// VexFlow - Music Engraving for HTML5\n// Copyright Mohit Muthanna 2010\n//\n// This class implements multiple measure rests.\nimport { Element } from './element';\nimport { Glyph } from './glyph';\nimport { NoteHead } from './notehead';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { defined } from './util';\nlet semibreve_rest;\nfunction get_semibreve_rest() {\n    if (!semibreve_rest) {\n        const noteHead = new NoteHead({ duration: 'w', note_type: 'r' });\n        semibreve_rest = {\n            glyph_font_scale: noteHead.render_options.glyph_font_scale,\n            glyph_code: noteHead.glyph_code,\n            width: noteHead.getWidth(),\n        };\n    }\n    return semibreve_rest;\n}\nexport class MultiMeasureRest extends Element {\n    static get CATEGORY() {\n        return Category.MultiMeasureRest;\n    }\n    /**\n     *\n     * @param number_of_measures Number of measures.\n     * @param options The options object.\n     */\n    constructor(number_of_measures, options) {\n        super();\n        this.xs = { left: NaN, right: NaN };\n        this.hasPaddingLeft = false;\n        this.hasPaddingRight = false;\n        this.hasLineThickness = false;\n        this.hasSymbolSpacing = false;\n        this.number_of_measures = number_of_measures;\n        // Keep track of whether these four options were provided.\n        this.hasPaddingLeft = typeof options.padding_left === 'number';\n        this.hasPaddingRight = typeof options.padding_right === 'number';\n        this.hasLineThickness = typeof options.line_thickness === 'number';\n        this.hasSymbolSpacing = typeof options.symbol_spacing === 'number';\n        const musicFont = Tables.currentMusicFont();\n        this.render_options = Object.assign({ use_symbols: false, show_number: true, number_line: -0.5, number_glyph_point: musicFont.lookupMetric('digits.point'), line: 2, spacing_between_lines_px: Tables.STAVE_LINE_DISTANCE, serif_thickness: 2, semibreve_rest_glyph_scale: Tables.NOTATION_FONT_SCALE, padding_left: 0, padding_right: 0, line_thickness: 5, symbol_spacing: 0 }, options);\n        const fontLineShift = musicFont.lookupMetric('digits.shiftLine', 0);\n        this.render_options.number_line += fontLineShift;\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right, spacingBetweenLines) {\n        const options = this.render_options;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let lineThicknessHalf;\n        if (this.hasLineThickness) {\n            lineThicknessHalf = options.line_thickness * 0.5;\n        }\n        else {\n            lineThicknessHalf = spacingBetweenLines * 0.25;\n        }\n        const serifThickness = options.serif_thickness;\n        const top = y - spacingBetweenLines;\n        const bot = y + spacingBetweenLines;\n        const leftIndented = left + serifThickness;\n        const rightIndented = right - serifThickness;\n        const lineTop = y - lineThicknessHalf;\n        const lineBottom = y + lineThicknessHalf;\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(left, top);\n        ctx.lineTo(leftIndented, top);\n        ctx.lineTo(leftIndented, lineTop);\n        ctx.lineTo(rightIndented, lineTop);\n        ctx.lineTo(rightIndented, top);\n        ctx.lineTo(right, top);\n        ctx.lineTo(right, bot);\n        ctx.lineTo(rightIndented, bot);\n        ctx.lineTo(rightIndented, lineBottom);\n        ctx.lineTo(leftIndented, lineBottom);\n        ctx.lineTo(leftIndented, bot);\n        ctx.lineTo(left, bot);\n        ctx.closePath();\n        ctx.fill();\n    }\n    drawSymbols(stave, ctx, left, right, spacingBetweenLines) {\n        const n4 = Math.floor(this.number_of_measures / 4);\n        const n = this.number_of_measures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.render_options;\n        // FIXME: TODO: invalidate semibreve_rest at the appropriate time\n        // (e.g., if the system font settings are changed).\n        semibreve_rest = undefined;\n        const rest = get_semibreve_rest();\n        const rest_scale = options.semibreve_rest_glyph_scale;\n        const rest_width = rest.width * (rest_scale / rest.glyph_font_scale);\n        const glyphs = {\n            2: {\n                width: rest_width * 0.5,\n                height: spacingBetweenLines,\n            },\n            1: {\n                width: rest_width,\n            },\n        };\n        /* 10: normal spacingBetweenLines */\n        const spacing = this.hasSymbolSpacing ? options.symbol_spacing : 10;\n        const width = n4 * glyphs[2].width + n2 * glyphs[2].width + n1 * glyphs[1].width + (n4 + n2 + n1 - 1) * spacing;\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        const yBottom = stave.getYForLine(line + 1);\n        ctx.save();\n        ctx.setStrokeStyle('none');\n        ctx.setLineWidth(0);\n        for (let i = 0; i < n4; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n2; ++i) {\n            ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);\n            x += glyphs[2].width + spacing;\n        }\n        for (let i = 0; i < n1; ++i) {\n            Glyph.renderGlyph(ctx, x, yTop, rest_scale, rest.glyph_code);\n            x += glyphs[1].width + spacing;\n        }\n        ctx.restore();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        // FIXME: getNoteStartX() returns x + 5(barline width)\n        //        getNoteEndX() returns x + width(no barline width)\n        // See Stave constructor. How do we fix this?\n        // Here, we subtract the barline width.\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.render_options;\n        if (this.hasPaddingLeft) {\n            left = stave.getX() + options.padding_left;\n        }\n        if (this.hasPaddingRight) {\n            right = stave.getX() + stave.getWidth() - options.padding_right;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        const spacingBetweenLines = options.spacing_between_lines_px;\n        if (options.use_symbols) {\n            this.drawSymbols(stave, ctx, left, right, spacingBetweenLines);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right, spacingBetweenLines);\n        }\n        if (options.show_number) {\n            const timeSpec = '/' + this.number_of_measures;\n            const timeSig = new TimeSignature(timeSpec, 0, false);\n            timeSig.point = options.number_glyph_point;\n            timeSig.setTimeSig(timeSpec);\n            timeSig.setStave(stave);\n            timeSig.setX(left + (right - left) * 0.5 - timeSig.getInfo().glyph.getMetrics().width * 0.5);\n            timeSig.bottomLine = options.number_line;\n            timeSig.setContext(ctx).draw();\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Glyph } from './glyph';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('Vex.Flow.PedalMarking', args);\n}\n/**\n * Draws a pedal glyph with the provided `name` on a rendering `context`\n * at the coordinates `x` and `y. Takes into account the glyph data\n * coordinate shifts.\n */\nfunction drawPedalGlyph(name, context, x, y, point) {\n    const glyph_data = PedalMarking.GLYPHS[name];\n    const glyph = new Glyph(glyph_data.code, point, { category: 'pedalMarking' });\n    glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);\n}\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n    static get CATEGORY() {\n        return Category.PedalMarking;\n    }\n    /**\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\n     */\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    /** Create a sostenuto pedal marking */\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    /** Create an una corda pedal marking */\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        // Custom text for the release/depress markings\n        this.custom_depress_text = '';\n        this.custom_release_text = '';\n        this.resetFont();\n        this.render_options = {\n            bracket_height: 10,\n            text_margin_right: 6,\n            bracket_line_width: 1,\n            color: 'black',\n        };\n    }\n    /** Set pedal type. */\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    /**\n     * Set custom text for the `depress`/`release` pedal markings. No text is\n     * set if the parameter is falsy.\n     */\n    setCustomText(depress, release) {\n        this.custom_depress_text = depress || '';\n        this.custom_release_text = release || '';\n        return this;\n    }\n    /** Set the staff line to render the markings on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Draw the bracket based pedal markings. */\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let is_pedal_depressed = false;\n        let prev_x;\n        let prev_y;\n        // Iterate through each note\n        this.notes.forEach((note, index, notes) => {\n            // Each note triggers the opposite pedal action\n            is_pedal_depressed = !is_pedal_depressed;\n            // Get the initial coordinates for the note\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            // Throw if current note is positioned before the previous note\n            if (x < prev_x) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            // Determine if the previous or next note are the same\n            // as the current note. We need to keep track of this for\n            // when adjustments are made for the release+depress action\n            const next_is_same = notes[index + 1] === note;\n            const prev_is_same = notes[index - 1] === note;\n            let x_shift = 0;\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n            if (is_pedal_depressed) {\n                // Adjustment for release+depress\n                x_shift = prev_is_same ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prev_is_same) {\n                    // For MIXED style, start with text instead of bracket\n                    if (this.custom_depress_text) {\n                        // If we have custom text, use instead of the default \"Ped\" glyph\n                        const text_width = ctx.measureText(this.custom_depress_text).width;\n                        ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n                        x_shift = text_width / 2 + this.render_options.text_margin_right;\n                    }\n                    else {\n                        // Render the Ped glyph in position\n                        drawPedalGlyph('pedal_depress', ctx, x, y, point);\n                        x_shift = 20 + this.render_options.text_margin_right;\n                    }\n                }\n                else {\n                    // Draw start bracket\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.render_options.bracket_height);\n                    ctx.lineTo(x + x_shift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                // Adjustment for release+depress\n                x_shift = next_is_same ? -5 : 0;\n                // Draw end bracket\n                ctx.beginPath();\n                ctx.moveTo(prev_x, prev_y);\n                ctx.lineTo(x + x_shift, y);\n                ctx.lineTo(x, y - this.render_options.bracket_height);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Store previous coordinates\n            prev_x = x + x_shift;\n            prev_y = y;\n        });\n    }\n    /**\n     * Draw the text based pedal markings. This defaults to the traditional\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n     */\n    drawText() {\n        const ctx = this.checkContext();\n        let is_pedal_depressed = false;\n        // Iterate through each note, placing glyphs or custom text accordingly\n        this.notes.forEach((note) => {\n            is_pedal_depressed = !is_pedal_depressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            const point = Tables.currentMusicFont().lookupMetric(`pedalMarking.${is_pedal_depressed ? 'down' : 'up'}.point`);\n            let text_width = 0;\n            if (is_pedal_depressed) {\n                if (this.custom_depress_text) {\n                    text_width = ctx.measureText(this.custom_depress_text).width;\n                    ctx.fillText(this.custom_depress_text, x - text_width / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedal_depress', ctx, x, y, point);\n                }\n            }\n            else {\n                if (this.custom_release_text) {\n                    text_width = ctx.measureText(this.custom_release_text).width;\n                    ctx.fillText(this.custom_release_text, x - text_width / 2, y);\n                }\n                else {\n                    drawPedalGlyph('pedal_release', ctx, x, y, point);\n                }\n            }\n        });\n    }\n    /** Render the pedal marking in position on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.save();\n        ctx.setStrokeStyle(this.render_options.color);\n        ctx.setFillStyle(this.render_options.color);\n        ctx.setFont(this.textFont);\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.render_options.bracket_line_width);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n        ctx.restore();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`. */\nPedalMarking.DEBUG = false;\nPedalMarking.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 12,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n/** Glyph data */\nPedalMarking.GLYPHS = {\n    pedal_depress: {\n        code: 'keyboardPedalPed',\n        x_shift: -10,\n        y_shift: 0,\n    },\n    pedal_release: {\n        code: 'keyboardPedalUp',\n        x_shift: -2,\n        y_shift: 3,\n    },\n};\n/** Pedal type as number. */\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\n/** Pedal type as string. */\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\n// Map `type` to SMuFL glyph code.\nconst CODES = {\n    '1': 'repeat1Bar',\n    '2': 'repeat2Bars',\n    '4': 'repeat4Bars',\n    slash: 'repeatBarSlash',\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return Category.RepeatNote;\n    }\n    constructor(type, noteStruct, options) {\n        const glyphCode = CODES[type] || 'repeat1Bar';\n        const glyph = new Glyph(glyphCode, Tables.currentMusicFont().lookupMetric('repeatNote.point', 40), {\n            category: 'repeatNote',\n        });\n        super(glyph, Object.assign({ duration: 'q', align_center: type !== 'slash' }, noteStruct), options);\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `render_options`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { TextJustification } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    static get CATEGORY() {\n        return Category.StaveLine;\n    }\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    first_note: Note,\n    //    last_note: Note,\n    //    first_indices: [n1, n2, n3],\n    //    last_indices: [n1, n2, n3]\n    //  }\n    //  ```\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.resetFont();\n        this.render_options = {\n            // Space to add to the left or the right\n            padding_left: 4,\n            padding_right: 3,\n            // The width of the line in pixels\n            line_width: 1,\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n            line_dash: undefined,\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n            rounded_end: true,\n            // The color of the line and arrowheads\n            color: undefined,\n            // Flags to draw arrows on each end of the line\n            draw_start_arrow: false,\n            draw_end_arrow: false,\n            // The length of the arrowhead sides\n            arrowhead_length: 10,\n            // The angle of the arrowhead\n            arrowhead_angle: Math.PI / 8,\n            // The position of the text\n            text_position_vertical: StaveLine.TextVerticalPosition.TOP,\n            text_justification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    // The the annotation for the `StaveLine`\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    // Set the notes for the `StaveLine`\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');\n        }\n        if (!notes.first_indices)\n            notes.first_indices = [0];\n        if (!notes.last_indices)\n            notes.last_indices = [0];\n        if (notes.first_indices.length !== notes.last_indices.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indices.');\n        }\n        this.notes = notes;\n        this.first_note = notes.first_note;\n        this.first_indices = notes.first_indices;\n        this.last_note = notes.last_note;\n        this.last_indices = notes.last_indices;\n        return this;\n    }\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const render_options = this.render_options;\n        if (render_options.line_dash) {\n            ctx.setLineDash(render_options.line_dash);\n        }\n        if (render_options.line_width) {\n            ctx.setLineWidth(render_options.line_width);\n        }\n        if (render_options.rounded_end) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    // Apply the text styling to the context\n    applyFontStyle() {\n        const ctx = this.checkContext();\n        ctx.setFont(this.textFont);\n        const render_options = this.render_options;\n        const color = render_options.color;\n        if (color) {\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n        }\n    }\n    // Helper function to draw a line with arrow heads\n    drawArrowLine(ctx, pt1, pt2) {\n        const both_arrows = this.render_options.draw_start_arrow && this.render_options.draw_end_arrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        // For ends with arrow we actually want to stop before we get to the arrow\n        // so that wide lines won't put a flat end on the arrow.\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.render_options.arrowhead_length / 3) / distance;\n        let end_x;\n        let end_y;\n        let start_x;\n        let start_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            end_x = Math.round(x1 + (x2 - x1) * ratio);\n            end_y = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            end_x = x2;\n            end_y = y2;\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            start_x = x1 + (x2 - x1) * (1 - ratio);\n            start_y = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            start_x = x1;\n            start_y = y1;\n        }\n        if (this.render_options.color) {\n            ctx.setStrokeStyle(this.render_options.color);\n            ctx.setFillStyle(this.render_options.color);\n        }\n        // Draw the shaft of the arrow\n        ctx.beginPath();\n        ctx.moveTo(start_x, start_y);\n        ctx.lineTo(end_x, end_y);\n        ctx.stroke();\n        ctx.closePath();\n        // calculate the angle of the line\n        const line_angle = Math.atan2(y2 - y1, x2 - x1);\n        // h is the line length of a side of the arrow head\n        const h = Math.abs(this.render_options.arrowhead_length / Math.cos(this.render_options.arrowhead_angle));\n        let angle1;\n        let angle2;\n        let top_x;\n        let top_y;\n        let bottom_x;\n        let bottom_y;\n        if (this.render_options.draw_end_arrow || both_arrows) {\n            angle1 = line_angle + Math.PI + this.render_options.arrowhead_angle;\n            top_x = x2 + Math.cos(angle1) * h;\n            top_y = y2 + Math.sin(angle1) * h;\n            angle2 = line_angle + Math.PI - this.render_options.arrowhead_angle;\n            bottom_x = x2 + Math.cos(angle2) * h;\n            bottom_y = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);\n        }\n        if (this.render_options.draw_start_arrow || both_arrows) {\n            angle1 = line_angle + this.render_options.arrowhead_angle;\n            top_x = x1 + Math.cos(angle1) * h;\n            top_y = y1 + Math.sin(angle1) * h;\n            angle2 = line_angle - this.render_options.arrowhead_angle;\n            bottom_x = x1 + Math.cos(angle2) * h;\n            bottom_y = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);\n        }\n    }\n    // Renders the `StaveLine` on the context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const first_note = this.first_note;\n        const last_note = this.last_note;\n        const render_options = this.render_options;\n        ctx.save();\n        this.applyLineStyle();\n        // Cycle through each set of indices and draw lines\n        let start_position = { x: 0, y: 0 };\n        let end_position = { x: 0, y: 0 };\n        this.first_indices.forEach((first_index, i) => {\n            const last_index = this.last_indices[i];\n            // Get initial coordinates for the start/end of the line\n            start_position = first_note.getModifierStartXY(2, first_index);\n            end_position = last_note.getModifierStartXY(1, last_index);\n            const upwards_slope = start_position.y > end_position.y;\n            // Adjust `x` coordinates for modifiers\n            start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;\n            end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;\n            // Adjust first `x` coordinates for displacements\n            const notehead_width = first_note.getGlyphProps().getWidth();\n            const first_displaced = first_note.getKeyProps()[first_index].displaced;\n            if (first_displaced && first_note.getStemDirection() === 1) {\n                start_position.x += notehead_width + render_options.padding_left;\n            }\n            // Adjust last `x` coordinates for displacements\n            const last_displaced = last_note.getKeyProps()[last_index].displaced;\n            if (last_displaced && last_note.getStemDirection() === -1) {\n                end_position.x -= notehead_width + render_options.padding_right;\n            }\n            // Adjust y position better if it's not coming from the center of the note\n            start_position.y += upwards_slope ? -3 : 1;\n            end_position.y += upwards_slope ? 2 : 0;\n            this.drawArrowLine(ctx, start_position, end_position);\n        });\n        ctx.restore();\n        // Determine the x coordinate where to start the text\n        const text_width = ctx.measureText(this.text).width;\n        const justification = render_options.text_justification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = start_position.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const delta_x = end_position.x - start_position.x;\n            const center_x = delta_x / 2 + start_position.x;\n            x = center_x - text_width / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = end_position.x - text_width;\n        }\n        // Determine the y value to start the text\n        let y = 0;\n        const vertical_position = render_options.text_position_vertical;\n        if (vertical_position === StaveLine.TextVerticalPosition.TOP) {\n            y = first_note.checkStave().getYForTopText();\n        }\n        else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = first_note.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        // Draw the text\n        ctx.save();\n        this.applyFontStyle();\n        ctx.fillText(this.text, x, y);\n        ctx.restore();\n        return this;\n    }\n}\n/** Default text font. */\nStaveLine.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n// Text Positioning\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n    static get CATEGORY() {\n        return Category.System;\n    }\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.partStaves = [];\n        this.partStaveInfos = [];\n        this.partVoices = [];\n    }\n    /** Set formatting options. */\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    /** Get origin X. */\n    getX() {\n        return this.options.x;\n    }\n    /** Set origin X. */\n    setX(x) {\n        this.options.x = x;\n        this.partStaves.forEach((s) => {\n            s.setX(x);\n        });\n    }\n    /** Get origin y. */\n    getY() {\n        return this.options.y;\n    }\n    /** Set origin y. */\n    setY(y) {\n        this.options.y = y;\n        this.partStaves.forEach((s) => {\n            s.setY(y);\n        });\n    }\n    /** Get associated staves. */\n    getStaves() {\n        return this.partStaves;\n    }\n    /** Get associated voices. */\n    getVoices() {\n        return this.partVoices;\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    /**\n     * Add connector between staves.\n     * @param type see {@link StaveConnector.typeString}\n     */\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            top_stave: this.partStaves[0],\n            bottom_stave: this.partStaves[this.partStaves.length - 1],\n            type,\n        });\n        return this.connector;\n    }\n    /**\n     * Add a stave to the system.\n     *\n     * Example (one voice):\n     *\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n     *\n     * Example (two voices):\n     *\n     * `system.addStave({voices: [`\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\n     * `]});`\n     */\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ left_bar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => {\n            voice\n                .setContext(ctx)\n                .setStave(stave)\n                .getTickables()\n                .forEach((tickable) => tickable.setStave(stave));\n            this.partVoices.push(voice);\n        });\n        this.partStaves.push(stave);\n        this.partStaveInfos.push(p);\n        return stave;\n    }\n    /**\n     * Add voices to the system with stave already assigned.\n     */\n    addVoices(voices) {\n        const ctx = this.getContext();\n        voices.forEach((voice) => {\n            voice.setContext(ctx);\n            this.partVoices.push(voice);\n        });\n    }\n    /** Format the system. */\n    format() {\n        const options_details = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(options_details);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        const debugNoteMetricsYs = [];\n        this.partStaves.forEach((part, index) => {\n            y = y + part.space(this.partStaveInfos[index].spaceAbove);\n            part.setY(y);\n            y = y + part.space(this.partStaveInfos[index].spaceBelow);\n            y = y + part.space(this.options.spaceBetweenStaves);\n            if (this.partStaveInfos[index].debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, stave: part });\n                y += 15;\n            }\n            startX = Math.max(startX, part.getNoteStartX());\n        });\n        // Re-assign Stave to update y position\n        this.partVoices.forEach((voice) => {\n            voice.getTickables().forEach((tickable) => {\n                const stave = tickable.getStave();\n                if (stave)\n                    tickable.setStave(stave);\n            });\n        });\n        // Join the voices\n        formatter.joinVoices(this.partVoices);\n        // Update the start position of all staves.\n        this.partStaves.forEach((part) => part.setNoteStartX(startX));\n        if (this.options.autoWidth && this.partVoices.length > 0) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);\n            this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);\n            this.partStaves.forEach((part) => {\n                part.setWidth(this.options.width);\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - (startX - this.options.x)\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        if (this.partVoices.length > 0) {\n            formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        }\n        formatter.postFormat();\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(options_details);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        this.boundingBox = new BoundingBox(this.options.x, this.options.y, this.options.width, this.lastY - this.options.y);\n        Stave.formatBegModifiers(this.partStaves);\n    }\n    /** Render the system. */\n    draw() {\n        // Render debugging information, if requested.\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            this.partVoices.forEach((voice) => {\n                voice.getTickables().forEach((tickable) => {\n                    if (tickable.getStave() === d.stave)\n                        Note.plotMetrics(ctx, tickable, d.y);\n                });\n            });\n        });\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\nimport { Font } from './font';\nimport { Glyph } from './glyph';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category, isDot } from './typeguard';\nimport { defined, RuntimeError } from './util';\n// Gets the unused strings grouped together if consecutive.\n//\n// Parameters:\n// * num_lines - The number of lines\n// * strings_used - An array of numbers representing which strings have fret positions\nfunction getUnusedStringGroups(num_lines, strings_used) {\n    const stem_through = [];\n    let group = [];\n    for (let string = 1; string <= num_lines; string++) {\n        const is_used = strings_used.indexOf(string) > -1;\n        if (!is_used) {\n            group.push(string);\n        }\n        else {\n            stem_through.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stem_through.push(group);\n    return stem_through;\n}\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stem_Y - The `y` coordinate the stem is located on\n// * unused_strings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stem_direction - The direction of the stem\nfunction getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {\n    const up_stem = stem_direction !== 1;\n    const down_stem = stem_direction !== -1;\n    const line_spacing = stave.getSpacingBetweenLines();\n    const total_lines = stave.getNumLines();\n    const stem_lines = [];\n    unused_strings.forEach((strings) => {\n        const containsLastString = strings.indexOf(total_lines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((up_stem && containsFirstString) || (down_stem && containsLastString)) {\n            return;\n        }\n        // If there's only one string in the group, push a duplicate value.\n        // We do this because we need 2 strings to convert into upper/lower y\n        // values.\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const line_ys = [];\n        // Iterate through each group string and store it's y position\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === total_lines;\n            // Get the y value for the appropriate staff line,\n            // we adjust for a 0 index array, since string numbers are index 1\n            let y = stave.getYForLine(string - 1);\n            // Unless the string is the first or last, add padding to each side\n            // of the line\n            if (index === 0 && !isTopBound) {\n                y -= line_spacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += line_spacing / 2 - 1;\n            }\n            // Store the y value\n            line_ys.push(y);\n            // Store a subsequent y value connecting this group to the main\n            // stem above/below the stave if it's the top/bottom string\n            if (stem_direction === 1 && isTopBound) {\n                line_ys.push(stem_y - 2);\n            }\n            else if (stem_direction === -1 && isBottomBound) {\n                line_ys.push(stem_y + 2);\n            }\n        });\n        // Add the sorted y values to the\n        stem_lines.push(line_ys.sort((a, b) => a - b));\n    });\n    return stem_lines;\n}\nexport class TabNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.TabNote;\n    }\n    // Initialize the TabNote with a `noteStruct` full of properties\n    // and whether to `draw_stem` when rendering the note\n    constructor(noteStruct, draw_stem = false) {\n        super(noteStruct);\n        this.glyphPropsArr = [];\n        // Return the number of the greatest string, which is the string lowest on the display\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        // Return the number of the least string, which is the string highest on the display\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false; // Renders parenthesis around notes\n        // Note properties\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\n        this.positions = noteStruct.positions || [];\n        // Render Options\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // font size for note heads and rests\n            glyph_font_scale: Tables.TABLATURE_FONT_SCALE, \n            // Flag to draw a stem\n            draw_stem, \n            // Flag to draw dot modifiers\n            draw_dots: draw_stem, \n            // Flag to extend the main stem through the stave and fret positions\n            draw_stem_through_stave: false, \n            // vertical shift from stave line\n            y_shift: 0, \n            // normal glyph scale\n            scale: 1.0, \n            // default tablature font\n            font: `${Font.SIZE}pt ${Font.SANS_SERIF}` });\n        this.glyphProps = Tables.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stem_direction) {\n            this.setStemDirection(noteStruct.stem_direction);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        // Renders parenthesis around notes\n        this.ghost = false;\n        this.updateWidth();\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    // Determine if the note has a stem\n    hasStem() {\n        if (this.render_options.draw_stem)\n            return true;\n        return false;\n    }\n    // Get the default stem extension for the note\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        if (this.stem_extension_override != null) {\n            return this.stem_extension_override;\n        }\n        if (glyphProps) {\n            return this.getStemDirection() === Stem.UP\n                ? glyphProps.tabnote_stem_up_extension\n                : glyphProps.tabnote_stem_down_extension;\n        }\n        return 0;\n    }\n    // Calculate and store the width of the note\n    updateWidth() {\n        this.glyphPropsArr = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const glyphProps = Tables.tabToGlyphProps(fret.toString(), this.render_options.scale);\n            this.glyphPropsArr.push(glyphProps);\n            this.width = Math.max(glyphProps.getWidth(), this.width);\n        }\n        // For some reason we associate a notehead glyph with a TabNote, and this\n        // glyph is used for certain width calculations. Of course, this is totally\n        // incorrect since a notehead is a poor approximation for the dimensions of\n        // a fret number which can have multiple digits. As a result, we must\n        // overwrite getWidth() to return the correct width\n        this.glyphProps.getWidth = () => this.width;\n    }\n    // Set the `stave` to the note\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        // Calculate the fret number width based on font used\n        if (ctx) {\n            this.width = 0;\n            for (let i = 0; i < this.glyphPropsArr.length; ++i) {\n                const glyphProps = this.glyphPropsArr[i];\n                const text = '' + glyphProps.text;\n                if (text.toUpperCase() !== 'X') {\n                    ctx.save();\n                    ctx.setFont(this.render_options.font);\n                    glyphProps.width = ctx.measureText(text).width;\n                    ctx.restore();\n                    glyphProps.getWidth = () => glyphProps.width;\n                }\n                this.width = Math.max(glyphProps.getWidth(), this.width);\n            }\n            this.glyphProps.getWidth = () => this.width;\n        }\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\n        // while the position.str is a 1-based index\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    // Get the fret positions for the note\n    getPositions() {\n        return this.positions;\n    }\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const note_glyph_width = this.glyphProps.getWidth();\n            x = note_glyph_width / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Get the default line for rest\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        // width is already set during init()\n        this.preFormatted = true;\n    }\n    // Get the x position for the stem\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    // Get the y position for the stem\n    getStemY() {\n        const num_lines = this.checkStave().getNumLines();\n        // The decimal staff line amounts provide optimal spacing between the\n        // fret number and the stem\n        const stemUpLine = -0.5;\n        const stemDownLine = num_lines - 0.5;\n        const stemStartLine = Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    // Get the stem extents for the tabnote\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    // Draw the fal onto the context\n    drawFlag() {\n        var _a;\n        const { beam, glyphProps, render_options: { draw_stem }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam == undefined && draw_stem;\n        // Now it's the flag's turn.\n        if (glyphProps.flag && shouldDrawFlag) {\n            const flag_x = this.getStemX();\n            const flag_y = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() - (this.glyphProps ? this.glyphProps.stem_down_extension : 0)\n                : // Up stems are above the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() + (this.glyphProps ? this.glyphProps.stem_up_extension : 0);\n            // Draw the Flag\n            //this.flag?.setOptions({ category: 'flag.tabStem' });\n            (_a = this.flag) === null || _a === void 0 ? void 0 : _a.render(context, flag_x, flag_y);\n            //Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code, { category: 'flag.tabStem' });\n        }\n    }\n    // Render the modifiers onto the context.\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            // Only draw the dots if enabled.\n            if (isDot(modifier) && !this.render_options.draw_dots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    // Render the stem extension through the fret positions\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.render_options.draw_stem;\n        const stemThrough = this.render_options.draw_stem_through_stave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.save();\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n            ctx.restore();\n        }\n    }\n    // Render the fret positions onto the context\n    drawPositions() {\n        var _a;\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.render_options.y_shift;\n            const glyphProps = this.glyphPropsArr[i];\n            // Center the fret text beneath the notation note head\n            const note_glyph_width = this.glyphProps.getWidth();\n            const tab_x = x + note_glyph_width / 2 - glyphProps.getWidth() / 2;\n            // FIXME: Magic numbers.\n            ctx.clearRect(tab_x - 2, y - 3, glyphProps.getWidth() + 4, 6);\n            if (glyphProps.code) {\n                Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, glyphProps.code);\n            }\n            else {\n                ctx.save();\n                ctx.setFont(this.render_options.font);\n                const text = (_a = glyphProps.text) !== null && _a !== void 0 ? _a : '';\n                ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);\n                ctx.restore();\n            }\n        }\n    }\n    // The main rendering function for the entire note.\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const render_stem = this.beam == undefined && this.render_options.draw_stem;\n        this.applyStyle();\n        ctx.openGroup('tabnote', this.getAttribute('id'), { pointerBBox: true });\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && render_stem) {\n            const stem_x = this.getStemX();\n            this.stem.setNoteHeadXBounds(stem_x, stem_x);\n            this.stem.setContext(ctx).draw();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n        this.restoreStyle();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return Category.TabStave;\n    }\n    constructor(x, y, width, options) {\n        const tab_options = Object.assign({ spacing_between_lines_px: 13, num_lines: 6, top_text_position: 1 }, options);\n        super(x, y, width, tab_options);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    // Deprecated\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Cyril Silverman\n//\n// This file implements `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('Vex.Flow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    static get CATEGORY() {\n        return Category.TextBracket;\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    /**\n     * @deprecated Use `TextBracket.Position` instead.\n     */\n    static get Positions() {\n        L('Positions is deprecated, use TextBracketPosition instead.');\n        return TextBracketPosition;\n    }\n    /**\n     * @deprecated Use `TextBracket.PositionString` instead.\n     */\n    static get PositionsString() {\n        L('PositionsString is deprecated, use PositionString instead.');\n        return TextBracket.PositionString;\n    }\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.text = text;\n        this.superscript = superscript;\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.resetFont();\n        this.render_options = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            line_width: 1,\n            show_bracket: true,\n            bracket_height: 8,\n            // In the BOTTOM position, the bracket line can extend\n            // under the superscript.\n            underline_superscript: true,\n        };\n    }\n    /**\n     * Apply the text backet styling to the provided context.\n     * @param ctx\n     * @returns this\n     */\n    applyStyle(ctx) {\n        ctx.setFont(this.font);\n        const options = this.render_options;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.line_width);\n        return this;\n    }\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed(dashed, dash) {\n        this.render_options.dashed = dashed;\n        if (dash)\n            this.render_options.dash = dash;\n        return this;\n    }\n    // Set the rendering `context` for the octave bracket\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Draw the octave bracket on the rendering context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        // Get the preliminary start and stop coordintates for the bracket\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracket_height = this.render_options.bracket_height * this.position;\n        ctx.save();\n        this.applyStyle(ctx);\n        // Draw text\n        ctx.fillText(this.text, start.x, start.y);\n        // Get the width and height for the octave number\n        const main_measure = ctx.measureText(this.text);\n        const main_width = main_measure.width;\n        const main_height = main_measure.height;\n        // Calculate the y position for the super script\n        const super_y = start.y - main_height / 2.5;\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\n        // eslint-disable-next-line\n        const { family, size, weight, style } = this.textFont;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        ctx.setFont(family, smallerFontSize, weight, style);\n        ctx.fillText(this.superscript, start.x + main_width + 1, super_y);\n        // Determine width and height of the superscript\n        const super_measure = ctx.measureText(this.superscript);\n        const super_width = super_measure.width;\n        const super_height = super_measure.height;\n        // Setup initial coordinates for the bracket line\n        let start_x = start.x;\n        let line_y = super_y;\n        const end_x = stop.x + this.stop.getGlyphProps().getWidth();\n        // Adjust x and y coordinates based on position\n        if (this.position === TextBracketPosition.TOP) {\n            start_x += main_width + super_width + 5;\n            line_y -= super_height / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            line_y += super_height / 2.7;\n            start_x += main_width + 2;\n            if (!this.render_options.underline_superscript) {\n                start_x += super_width;\n            }\n        }\n        if (this.render_options.dashed) {\n            // Main line\n            Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);\n            // Ending Bracket\n            if (this.render_options.show_bracket) {\n                Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(start_x, line_y);\n            // Main line\n            ctx.lineTo(end_x, line_y);\n            if (this.render_options.show_bracket) {\n                // Ending bracket\n                ctx.lineTo(end_x, line_y + bracket_height);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.restore();\n    }\n}\nTextBracket.DEBUG = false;\nTextBracket.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 15,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.ITALIC,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Glyph } from './glyph';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { defined, log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('Vex.Flow.TextDynamics', args);\n}\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n    static get CATEGORY() {\n        return Category.TextDynamics;\n    }\n    /** The glyph data for each dynamics letter. */\n    static get GLYPHS() {\n        return {\n            f: {\n                code: 'dynamicForte',\n                width: 12,\n            },\n            p: {\n                code: 'dynamicPiano',\n                width: 14,\n            },\n            m: {\n                code: 'dynamicMezzo',\n                width: 17,\n            },\n            s: {\n                code: 'dynamicSforzando',\n                width: 10,\n            },\n            z: {\n                code: 'dynamicZ',\n                width: 12,\n            },\n            r: {\n                code: 'dynamicRinforzando',\n                width: 12,\n            },\n        };\n    }\n    /**\n     * Create the dynamics marking.\n     *\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\n     * within a `Voice`.\n     *\n     * @param noteStruct an object that contains a `duration` property and a\n     * `sequence` of letters that represents the letters to render.\n     */\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.sequence = (noteStruct.text || '').toLowerCase();\n        this.line = noteStruct.line || 0;\n        this.glyphs = [];\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { glyph_font_size: 40 });\n        L('New Dynamics Text: ', this.sequence);\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Preformat the dynamics text. */\n    preFormat() {\n        let total_width = 0;\n        // length of this.glyphs must be <=\n        // length of this.sequence, so if we're formatted before\n        // create new glyphs.\n        this.glyphs = [];\n        // Iterate through each letter\n        this.sequence.split('').forEach((letter) => {\n            // Get the glyph data for the letter\n            const glyph_data = TextDynamics.GLYPHS[letter];\n            if (!glyph_data)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            const size = defined(this.render_options.glyph_font_size);\n            const glyph = new Glyph(glyph_data.code, size, { category: 'textNote' });\n            // Add the glyph\n            this.glyphs.push(glyph);\n            total_width += glyph_data.width;\n        });\n        // Store the width of the text\n        this.setWidth(total_width);\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the dynamics text on the rendering context. */\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        let letter_x = x;\n        this.glyphs.forEach((glyph, index) => {\n            const current_letter = this.sequence[index];\n            glyph.render(this.checkContext(), letter_x, y);\n            letter_x += TextDynamics.GLYPHS[current_letter].width;\n        });\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`. */\nTextDynamics.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author Taehoon Moon 2014\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\nimport { Category } from './typeguard';\nexport class TimeSigNote extends Note {\n    static get CATEGORY() {\n        return Category.TimeSigNote;\n    }\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        const timeSignature = new TimeSignature(timeSpec, customPadding);\n        this.timeSigInfo = timeSignature.getInfo();\n        this.setWidth(this.timeSigInfo.glyph.getMetrics().width);\n        // Note properties\n        this.ignore_ticks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (!this.timeSigInfo.glyph.getContext()) {\n            this.timeSigInfo.glyph.setContext(ctx);\n        }\n        this.timeSigInfo.glyph.setStave(stave);\n        this.timeSigInfo.glyph.setYShift(stave.getYForLine(2) - stave.getYForGlyphs());\n        this.timeSigInfo.glyph.renderToStave(this.getAbsoluteX());\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Balazs Forian-Szabo\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('Vex.Flow.VibratoBracket', args);\n}\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n    static get CATEGORY() {\n        return Category.VibratoBracket;\n    }\n    /**\n     * Either the stop or start note must be set, or both of them.\n     * An undefined value for the start or stop note indicates that the vibrato\n     * is drawn from the beginning or until the end of the stave accordingly.\n     */\n    constructor(bracket_data) {\n        super();\n        if (bracket_data.start)\n            this.start = bracket_data.start;\n        if (bracket_data.stop)\n            this.stop = bracket_data.stop;\n        this.line = 1;\n        this.render_options = {\n            harsh: false,\n            wave_height: 6,\n            wave_width: 4,\n            wave_girth: 2,\n            vibrato_width: 0,\n        };\n    }\n    /** Set line position of the vibrato bracket. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Set harsh vibrato bracket. */\n    setHarsh(harsh) {\n        this.render_options.harsh = harsh;\n        return this;\n    }\n    /** Draw the vibrato bracket on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        // If start note is not set then vibrato will be drawn\n        // from the beginning of the stave\n        const start_x = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        // If stop note is not set then vibrato will be drawn\n        // until the end of the stave\n        const stop_x = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.render_options.vibrato_width = stop_x - start_x;\n        L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);\n        Vibrato.renderVibrato(ctx, start_x, y, this.render_options);\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`. */\nVibratoBracket.DEBUG = false;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Mohit Cheppudira\n// MIT License\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve } from './curve';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StringNumber } from './stringnumber';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { isHTMLCanvas } from './web';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('Vex.Flow.Factory', args);\n}\n/**\n * Factory implements a high level API around VexFlow.\n */\nexport class Factory {\n    /**\n     * Static simplified function to access constructor without providing FactoryOptions\n     *\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = Vex.Flow.Factory.newFromElementId('boo', 1200, 600 );`\n     */\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    /**\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n     */\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n            font: Factory.TEXT_FONT,\n        };\n        this.setOptions(options);\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined; // current stave\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId == null) {\n            return;\n        }\n        if (elementId == '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            // We use a custom type check here, because node-canvas mimics canvas,\n            // but is not an instance of window.HTMLCanvasElement.\n            // In fact, `window` might be undefined here.\n            // See: https://www.npmjs.com/package/canvas\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    /** Return pixels from current stave spacing. */\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacing_between_lines_px: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center', kerning: true, reportWidth: true }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        chordSymbol.setEnableKerning(p.kerning);\n        chordSymbol.setReportWidth(p.reportWidth);\n        // There is a default font based on the engraving font.  Only set then\n        // font if it is specific, else use the default\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        var _a;\n        const articulation = new Articulation((_a = params === null || params === void 0 ? void 0 : params.type) !== null && _a !== void 0 ? _a : 'a.');\n        if ((params === null || params === void 0 ? void 0 : params.position) != undefined)\n            articulation.setPosition(params.position);\n        if ((params === null || params === void 0 ? void 0 : params.betweenLines) != undefined)\n            articulation.setBetweenLines(params.betweenLines);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    Ornament(type, params) {\n        const options = Object.assign({ type, position: 0, accidental: '' }, params);\n        const ornament = new Ornament(type);\n        ornament.setPosition(options.position);\n        if (options.upperAccidental) {\n            ornament.setUpperAccidental(options.upperAccidental);\n        }\n        if (options.lowerAccidental) {\n            ornament.setLowerAccidental(options.lowerAccidental);\n        }\n        if (typeof options.delayed !== 'undefined') {\n            ornament.setDelayed(options.delayed);\n        }\n        ornament.setContext(this.context);\n        return ornament;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params, drawCircle = true) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        stringNumber.setDrawCircle(drawCircle);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.number_of_measures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.top_stave, params.bottom_stave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c, _d, _e;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\n            });\n        }\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            first_note: params.from,\n            last_note: params.to,\n            first_indices: params.first_indices,\n            last_indices: params.last_indices,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            first_note: params.from,\n            last_note: params.to,\n            first_indices: params.first_indices,\n            last_indices: params.last_indices,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.harsh)\n            vibratoBracket.setHarsh(params.options.harsh);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    /**\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n     * ```\n     * const vf: Factory = new Vex.Flow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n     * const score: EasyScore = vf.EasyScore();\n     * ```\n     * @param options.factory optional instance of Factory\n     * @param options.builder instance of Builder\n     * @param options.commitHooks function to call after a note element is created\n     * @param options.throwOnError throw error in case of parsing error\n     */\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    /** Render the score. */\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).draw());\n        this.voices.forEach((v) => v.setContext(ctx).draw());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).draw();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).draw());\n        this.reset();\n    }\n}\n/** To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`. */\nFactory.DEBUG = false;\n/** Default text font. */\nFactory.TEXT_FONT = Object.assign({}, Element.TEXT_FONT);\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\nimport { Font } from './font';\nimport { TabNote } from './tabnote';\nimport { Category } from './typeguard';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return Category.GraceTabNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.render_options = Object.assign(Object.assign({}, this.render_options), { \n            // vertical shift from stave line\n            y_shift: 0.3, \n            // grace glyph scale\n            scale: 0.6, \n            // grace tablature font\n            font: `7.5pt ${Font.SANS_SERIF}` });\n        this.updateWidth();\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n//\n// This class implements diatonic key management.\nimport { Music } from './music';\nimport { RuntimeError } from './util';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const is_supported_type = Music.scaleTypes[this.keyParts.type];\n        if (!is_supported_type) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.root_indices[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        // First look for matching note in our altered scale\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in our altered scale\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote != null) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in the original scale\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote != null) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        // Then try to unmodify a currently modified note.\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        // Last resort -- shitshoot\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// ## Description\n// Author: Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveHairpin extends Element {\n    static get CATEGORY() {\n        return Category.StaveHairpin;\n    }\n    /* Helper function to convert ticks into pixels.\n     * Requires a Formatter with voices joined and formatted (to\n     * get pixels per tick)\n     *\n     * options is struct that has:\n     *\n     *  {\n     *   height: px,\n     *   y_shift: px,         // vertical offset\n     *   left_shift_ticks: 0, // left horizontal offset expressed in ticks\n     *   right_shift_ticks: 0 // right horizontal offset expressed in ticks\n     *  }\n     *\n     **/\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt == null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const l_shift_px = ppt * ((_a = options.left_shift_ticks) !== null && _a !== void 0 ? _a : 0);\n        const r_shift_px = ppt * ((_b = options.right_shift_ticks) !== null && _b !== void 0 ? _b : 0);\n        const hairpin_options = {\n            height: options.height,\n            y_shift: options.y_shift,\n            left_shift_px: l_shift_px,\n            right_shift_px: r_shift_px,\n            right_shift_ticks: 0,\n            left_shift_ticks: 0,\n        };\n        new StaveHairpin({\n            first_note: notes.first_note,\n            last_note: notes.last_note,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpin_options)\n            .setPosition(position)\n            .draw();\n    }\n    /**\n     * Create a new hairpin from the specified notes.\n     *\n     * @param {!Object} notes The notes to tie up.\n     * Notes is a struct that has:\n     *\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *  }\n     * @param {!Object} type The type of hairpin\n     */\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.render_options = {\n            height: 10,\n            y_shift: 0,\n            left_shift_px: 0,\n            right_shift_px: 0,\n            right_shift_ticks: 0,\n            left_shift_ticks: 0,\n        };\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        if (options.height != null &&\n            options.y_shift != null &&\n            options.left_shift_px != null &&\n            options.right_shift_px != null) {\n            this.render_options = options;\n        }\n        return this;\n    }\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes(notes) {\n        if (!notes.first_note && !notes.last_note) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');\n        }\n        this.notes = notes;\n        this.first_note = notes.first_note;\n        this.last_note = notes.last_note;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.render_options.y_shift + 20;\n        let y_shift = params.first_y;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            y_shift = params.first_y - params.staff_height;\n        }\n        const l_shift = this.render_options.left_shift_px;\n        const r_shift = this.render_options.right_shift_px;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.last_x + r_shift, y_shift + dis);\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.first_x + l_shift, y_shift + dis);\n                ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);\n                ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.first_note;\n        const lastNote = this.last_note;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            first_x: start.x,\n            last_x: end.x,\n            first_y: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            last_y: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staff_height: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Font, FontStyle, FontWeight } from './font';\nimport { TabTie } from './tabtie';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class TabSlide extends TabTie {\n    static get CATEGORY() {\n        return Category.TabSlide;\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    /**\n     * @param notes is a struct of the form:\n     *  {\n     *    first_note: Note,\n     *    last_note: Note,\n     *    first_indices: [n1, n2, n3],\n     *    last_indices: [n1, n2, n3]\n     *  }\n     * @param notes.first_note the starting note of the slide\n     * @param notes.last_note the ending note of the slide\n     * @param notes.first_indices specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n     * @param notes.last_indices currently unused. we assume it's the same as first_indices.\n     *\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n     */\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        // Determine the direction automatically if it is not provided.\n        if (!direction) {\n            let first_fret = notes.first_note.getPositions()[0].fret;\n            if (typeof first_fret === 'string') {\n                first_fret = parseInt(first_fret, 10);\n            }\n            let last_fret = notes.last_note.getPositions()[0].fret;\n            if (typeof last_fret === 'string') {\n                last_fret = parseInt(last_fret, 10);\n            }\n            // If either of the frets are 'X', parseInt() above will return NaN.\n            // Choose TabSlide.SLIDE_UP by default.\n            if (isNaN(first_fret) || isNaN(last_fret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = first_fret > last_fret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.render_options.cp1 = 11;\n        this.render_options.cp2 = 14;\n        this.render_options.y_shift = 0.5;\n        this.resetFont();\n    }\n    renderTie(params) {\n        if (params.first_ys.length === 0 || params.last_ys.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const first_x_px = params.first_x_px;\n        const first_ys = params.first_ys;\n        const last_x_px = params.last_x_px;\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        // eslint-disable-next-line\n        const first_indices = this.notes.first_indices;\n        for (let i = 0; i < first_indices.length; ++i) {\n            const slide_y = first_ys[first_indices[i]] + this.render_options.y_shift;\n            if (isNaN(slide_y)) {\n                throw new RuntimeError('BadArguments', 'Bad indices for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(first_x_px, slide_y + 3 * direction);\n            ctx.lineTo(last_x_px, slide_y - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\nTabSlide.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 10,\n    weight: FontWeight.BOLD,\n    style: FontStyle.ITALIC,\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// Author: Mike Corrigan <corrigan@gmail.com>\n// MIT License\nimport { Glyph } from './glyph';\nimport { GraceNote } from './gracenote';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote } from './typeguard';\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n    static get CATEGORY() {\n        return Category.Tremolo;\n    }\n    /**\n     * @param num number of bars\n     */\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.code = 'tremolo1';\n        // big strokes scales initialised to 1 (no scale)\n        this.y_spacing_scale = 1;\n        this.extra_stroke_scale = 1;\n    }\n    /** Draw the tremolo on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let x = start.x;\n        const gn = isGraceNote(note);\n        const scale = gn ? GraceNote.SCALE : 1;\n        const category = `tremolo.${gn ? 'grace' : 'default'}`;\n        const musicFont = Tables.currentMusicFont();\n        let y_spacing = musicFont.lookupMetric(`${category}.spacing`) * stemDirection;\n        // add y_spacing_scale for big strokes (#1258)\n        y_spacing *= this.y_spacing_scale;\n        const height = this.num * y_spacing;\n        let y = note.getStemExtents().baseY - height;\n        if (stemDirection < 0) {\n            y += musicFont.lookupMetric(`${category}.offsetYStemDown`) * scale;\n        }\n        else {\n            y += musicFont.lookupMetric(`${category}.offsetYStemUp`) * scale;\n        }\n        const fontScale = musicFont.lookupMetric(`${category}.point`);\n        x += musicFont.lookupMetric(`${category}.offsetXStem${stemDirection === Stem.UP ? 'Up' : 'Down'}`);\n        for (let i = 0; i < this.num; ++i) {\n            Glyph.renderGlyph(ctx, x, y, fontScale, this.code, { category, scale: this.extra_stroke_scale });\n            y += y_spacing;\n        }\n    }\n}\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    /**\n     * Constructor.\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        // Default to standard tuning.\n        this.setTuning(tuningString);\n    }\n    /** Return the note number associated to the note string. */\n    noteToInteger(noteString) {\n        var _a;\n        return (_a = Tables.keyProperties(noteString).int_value) !== null && _a !== void 0 ? _a : -1;\n    }\n    /**\n     * Set tuning identified by tuning name (eg. 'dagdad')\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    /** Return the note number associated with a tablature string. */\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    /** Return the note number associated with a tablature string and fret. */\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    /** Return the note string associated with tablature string and fret. */\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { BoundingBoxComputation } from './boundingboxcomputation';\nimport { CanvasContext } from './canvascontext';\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers, SymbolTypes, } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve, CurvePosition } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { Glyph } from './glyph';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta, VoltaType } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { SVGContext } from './svgcontext';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket, TextBracketPosition } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextFormatter } from './textformatter';\nimport { TextJustification, TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { DATE, ID, VERSION } from './version';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceMode } from './voice';\nexport class Flow {\n    static get BUILD() {\n        return {\n            /** version number. */\n            VERSION: VERSION,\n            /** git commit ID that this library was built from. */\n            ID: ID,\n            /** The date when this library was compiled. */\n            DATE: DATE,\n        };\n    }\n    /**\n     * Examples:\n     * ```\n     * Vex.Flow.setMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Bravura', 'Gonville');\n     * ```\n     *\n     * **CASE 1**: You are using `vexflow.js`, which includes all music fonts (Bravura, Gonville, Petaluma, Custom).\n     * In this case, calling this method is optional, since VexFlow already defaults to a music font stack of:\n     * 'Bravura', 'Gonville', 'Custom'.\n     *\n     * **CASE 2**: You are using `vexflow-bravura.js` or `vexflow-petaluma.js` or `vexflow-gonville.js`,\n     * which includes a single music font. Calling this method is unnecessary.\n     *\n     * **CASE 3**: You are using the light weight `vexflow-core.js` to take advantage of lazy loading for fonts.\n     * In this case, the default music font stack is empty.\n     * Example:\n     * ```\n     * await Vex.Flow.fetchMusicFont('Petaluma');\n     * Vex.Flow.setMusicFont('Petaluma');\n     * ... (do VexFlow stuff) ...\n     * ```\n     * See `demos/fonts/` for more examples.\n     *\n     * @returns an array of Font objects corresponding to the provided `fontNames`.\n     */\n    static setMusicFont(...fontNames) {\n        // Convert the array of font names into an array of Font objects.\n        const fonts = fontNames.map((fontName) => Font.load(fontName));\n        Tables.MUSIC_FONT_STACK = fonts;\n        Glyph.MUSIC_FONT_STACK = fonts.slice();\n        Glyph.CURRENT_CACHE_KEY = fontNames.join(',');\n        return fonts;\n    }\n    /**\n     * Used with vexflow-core which supports dynamic font loading.\n     */\n    // eslint-disable-next-line\n    static fetchMusicFont(fontName, fontModuleOrPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The default implementation does nothing.\n            // See vexflow-core.ts for the implementation that vexflow-core.js uses.\n        });\n    }\n    static getMusicFont() {\n        const fonts = Tables.MUSIC_FONT_STACK;\n        return fonts.map((font) => font.getName());\n    }\n    static get RENDER_PRECISION_PLACES() {\n        return Tables.RENDER_PRECISION_PLACES;\n    }\n    static set RENDER_PRECISION_PLACES(precision) {\n        Tables.RENDER_PRECISION_PLACES = precision;\n    }\n    static get SOFTMAX_FACTOR() {\n        return Tables.SOFTMAX_FACTOR;\n    }\n    static set SOFTMAX_FACTOR(factor) {\n        Tables.SOFTMAX_FACTOR = factor;\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return Tables.STAVE_LINE_THICKNESS;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        Tables.STAVE_LINE_THICKNESS = value;\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get accidentalMap() {\n        return Tables.accidentalMap;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    // eslint-disable-next-line\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\nFlow.Accidental = Accidental;\nFlow.Annotation = Annotation;\nFlow.Articulation = Articulation;\nFlow.Barline = Barline;\nFlow.BarNote = BarNote;\nFlow.Beam = Beam;\nFlow.Bend = Bend;\nFlow.BoundingBox = BoundingBox;\nFlow.BoundingBoxComputation = BoundingBoxComputation;\nFlow.CanvasContext = CanvasContext;\nFlow.ChordSymbol = ChordSymbol;\nFlow.Clef = Clef;\nFlow.ClefNote = ClefNote;\nFlow.Crescendo = Crescendo;\nFlow.Curve = Curve;\nFlow.Dot = Dot;\nFlow.EasyScore = EasyScore;\nFlow.Element = Element;\nFlow.Factory = Factory;\nFlow.Font = Font;\nFlow.Formatter = Formatter;\nFlow.Fraction = Fraction;\nFlow.FretHandFinger = FretHandFinger;\nFlow.GhostNote = GhostNote;\nFlow.Glyph = Glyph;\nFlow.GlyphNote = GlyphNote;\nFlow.GraceNote = GraceNote;\nFlow.GraceNoteGroup = GraceNoteGroup;\nFlow.GraceTabNote = GraceTabNote;\nFlow.KeyManager = KeyManager;\nFlow.KeySignature = KeySignature;\nFlow.KeySigNote = KeySigNote;\nFlow.Modifier = Modifier;\nFlow.ModifierContext = ModifierContext;\nFlow.MultiMeasureRest = MultiMeasureRest;\nFlow.Music = Music;\nFlow.Note = Note;\nFlow.NoteHead = NoteHead;\nFlow.NoteSubGroup = NoteSubGroup;\nFlow.Ornament = Ornament;\nFlow.Parenthesis = Parenthesis;\nFlow.Parser = Parser;\nFlow.PedalMarking = PedalMarking;\nFlow.Registry = Registry;\nFlow.RenderContext = RenderContext;\nFlow.Renderer = Renderer;\nFlow.RepeatNote = RepeatNote;\nFlow.Repetition = Repetition;\nFlow.Stave = Stave;\nFlow.StaveConnector = StaveConnector;\nFlow.StaveHairpin = StaveHairpin;\nFlow.StaveLine = StaveLine;\nFlow.StaveModifier = StaveModifier;\nFlow.StaveNote = StaveNote;\nFlow.StaveTempo = StaveTempo;\nFlow.StaveText = StaveText;\nFlow.StaveTie = StaveTie;\nFlow.Stem = Stem;\nFlow.StringNumber = StringNumber;\nFlow.Stroke = Stroke;\nFlow.SVGContext = SVGContext;\nFlow.System = System;\nFlow.TabNote = TabNote;\nFlow.TabSlide = TabSlide;\nFlow.TabStave = TabStave;\nFlow.TabTie = TabTie;\nFlow.TextBracket = TextBracket;\nFlow.TextDynamics = TextDynamics;\nFlow.TextFormatter = TextFormatter;\nFlow.TextNote = TextNote;\nFlow.TickContext = TickContext;\nFlow.TimeSignature = TimeSignature;\nFlow.TimeSigNote = TimeSigNote;\nFlow.Tremolo = Tremolo;\nFlow.Tuning = Tuning;\nFlow.Tuplet = Tuplet;\nFlow.Vibrato = Vibrato;\nFlow.VibratoBracket = VibratoBracket;\nFlow.Voice = Voice;\nFlow.Volta = Volta;\n// Exported Enums.\n// Sorted by the module / file they are exported from.\nFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\nFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\nFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\nFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\nFlow.SymbolTypes = SymbolTypes;\nFlow.SymbolModifiers = SymbolModifiers;\nFlow.CurvePosition = CurvePosition;\nFlow.FontWeight = FontWeight;\nFlow.FontStyle = FontStyle;\nFlow.ModifierPosition = ModifierPosition;\nFlow.RendererBackends = RendererBackends;\nFlow.RendererLineEndType = RendererLineEndType;\nFlow.BarlineType = BarlineType;\nFlow.StaveModifierPosition = StaveModifierPosition;\nFlow.VoltaType = VoltaType;\nFlow.TextBracketPosition = TextBracketPosition;\nFlow.TextJustification = TextJustification;\nFlow.VoiceMode = VoiceMode;\n","export const VERSION = '4.2.0-beta.0';\nexport const ID = '287a4f978cf04cd00061ef1de5be3edadb45b71c';\nexport const DATE = '2022-12-23T18:55:17.223Z';\n","export const PetalumaScriptFont = {\n    spacing: 50,\n    glyphs: {\n        ' ': {\n            x_min: 0,\n            x_max: 250,\n            y_min: 0,\n            y_max: 500,\n            ha: 500,\n            leftSideBearing: 0,\n            advanceWidth: 250,\n        },\n        '0': {\n            x_min: 33,\n            x_max: 534,\n            y_min: -13,\n            y_max: 751,\n            ha: 764,\n            leftSideBearing: 33,\n            advanceWidth: 570,\n        },\n        '1': {\n            x_min: 48,\n            x_max: 235,\n            y_min: -17,\n            y_max: 734,\n            ha: 751,\n            leftSideBearing: 48,\n            advanceWidth: 286,\n        },\n        '2': {\n            x_min: 56,\n            x_max: 571,\n            y_min: -19,\n            y_max: 741,\n            ha: 760,\n            leftSideBearing: 56,\n            advanceWidth: 626,\n        },\n        '3': {\n            x_min: 50,\n            x_max: 528,\n            y_min: -7,\n            y_max: 731,\n            ha: 738,\n            leftSideBearing: 50,\n            advanceWidth: 589,\n        },\n        '4': {\n            x_min: 38,\n            x_max: 564,\n            y_min: -13,\n            y_max: 743,\n            ha: 756,\n            leftSideBearing: 38,\n            advanceWidth: 614,\n        },\n        '5': {\n            x_min: 42,\n            x_max: 601,\n            y_min: -34,\n            y_max: 743,\n            ha: 777,\n            leftSideBearing: 42,\n            advanceWidth: 648,\n        },\n        '6': {\n            x_min: 47,\n            x_max: 606,\n            y_min: -16,\n            y_max: 743,\n            ha: 759,\n            leftSideBearing: 47,\n            advanceWidth: 667,\n        },\n        '7': {\n            x_min: 47,\n            x_max: 567,\n            y_min: 5,\n            y_max: 739,\n            ha: 734,\n            leftSideBearing: 0,\n            advanceWidth: 615,\n        },\n        '8': {\n            x_min: 40,\n            x_max: 541,\n            y_min: -15,\n            y_max: 752,\n            ha: 767,\n            leftSideBearing: 40,\n            advanceWidth: 585,\n        },\n        '9': {\n            x_min: 40,\n            x_max: 537,\n            y_min: -52,\n            y_max: 736,\n            ha: 788,\n            leftSideBearing: 40,\n            advanceWidth: 592,\n        },\n        '!': {\n            x_min: 49,\n            x_max: 180,\n            y_min: -7,\n            y_max: 761,\n            ha: 768,\n            leftSideBearing: 49,\n            advanceWidth: 230,\n        },\n        '\"': {\n            x_min: 39,\n            x_max: 304,\n            y_min: 596,\n            y_max: 804,\n            ha: 208,\n            leftSideBearing: 39,\n            advanceWidth: 353,\n        },\n        '#': {\n            x_min: 33,\n            x_max: 599,\n            y_min: -8,\n            y_max: 765,\n            ha: 773,\n            leftSideBearing: 33,\n            advanceWidth: 648,\n        },\n        $: {\n            x_min: 53,\n            x_max: 495,\n            y_min: -111,\n            y_max: 823,\n            ha: 934,\n            leftSideBearing: 53,\n            advanceWidth: 560,\n        },\n        '%': {\n            x_min: 35,\n            x_max: 656,\n            y_min: -128,\n            y_max: 808,\n            ha: 936,\n            leftSideBearing: 35,\n            advanceWidth: 711,\n        },\n        '&': {\n            x_min: 53,\n            x_max: 441,\n            y_min: -3,\n            y_max: 753,\n            ha: 756,\n            leftSideBearing: 53,\n            advanceWidth: 500,\n        },\n        \"'\": {\n            x_min: 43,\n            x_max: 161,\n            y_min: 590,\n            y_max: 811,\n            ha: 221,\n            leftSideBearing: 43,\n            advanceWidth: 217,\n        },\n        '(': {\n            x_min: 41,\n            x_max: 311,\n            y_min: -36,\n            y_max: 845,\n            ha: 881,\n            leftSideBearing: 41,\n            advanceWidth: 308,\n        },\n        ')': {\n            x_min: -8,\n            x_max: 257,\n            y_min: -21,\n            y_max: 852,\n            ha: 873,\n            leftSideBearing: -8,\n            advanceWidth: 280,\n        },\n        '*': {\n            x_min: 59,\n            x_max: 539,\n            y_min: 175,\n            y_max: 589,\n            ha: 414,\n            leftSideBearing: 59,\n            advanceWidth: 601,\n        },\n        '+': {\n            x_min: 33,\n            x_max: 361,\n            y_min: 180,\n            y_max: 587,\n            ha: 407,\n            leftSideBearing: 33,\n            advanceWidth: 400,\n        },\n        ',': {\n            x_min: 15,\n            x_max: 176,\n            y_min: -129,\n            y_max: 92,\n            ha: 221,\n            leftSideBearing: 15,\n            advanceWidth: 205,\n        },\n        '-': {\n            x_min: 40,\n            x_max: 380,\n            y_min: 317,\n            y_max: 452,\n            ha: 135,\n            leftSideBearing: 40,\n            advanceWidth: 422,\n        },\n        '.': {\n            x_min: 48,\n            x_max: 185,\n            y_min: -56,\n            y_max: 84,\n            ha: 140,\n            leftSideBearing: 48,\n            advanceWidth: 227,\n        },\n        '/': {\n            x_min: -58,\n            x_max: 654,\n            y_min: -122,\n            y_max: 844,\n            ha: 966,\n            leftSideBearing: -58,\n            advanceWidth: 626,\n        },\n        ':': {\n            x_min: 65,\n            x_max: 225,\n            y_min: 97,\n            y_max: 536,\n            ha: 439,\n            leftSideBearing: 65,\n            advanceWidth: 302,\n        },\n        ';': {\n            x_min: 13,\n            x_max: 295,\n            y_min: -139,\n            y_max: 536,\n            ha: 675,\n            leftSideBearing: 13,\n            advanceWidth: 334,\n        },\n        '<': {\n            x_min: 28,\n            x_max: 438,\n            y_min: -1,\n            y_max: 607,\n            ha: 608,\n            leftSideBearing: 28,\n            advanceWidth: 475,\n        },\n        '=': {\n            x_min: 40,\n            x_max: 383,\n            y_min: 199.9598640852289,\n            y_max: 541,\n            ha: 341.0401359147711,\n            leftSideBearing: 40,\n            advanceWidth: 422,\n        },\n        '>': {\n            x_min: 35,\n            x_max: 421,\n            y_min: 28,\n            y_max: 632,\n            ha: 604,\n            leftSideBearing: 35,\n            advanceWidth: 466,\n        },\n        '?': {\n            x_min: 45,\n            x_max: 548,\n            y_min: -17,\n            y_max: 767,\n            ha: 784,\n            leftSideBearing: 45,\n            advanceWidth: 592,\n        },\n        '@': {\n            x_min: 51,\n            x_max: 730,\n            y_min: -78,\n            y_max: 753,\n            ha: 831,\n            leftSideBearing: 51,\n            advanceWidth: 781,\n        },\n        A: {\n            x_min: 37,\n            x_max: 554,\n            y_min: -4,\n            y_max: 746,\n            ha: 750,\n            leftSideBearing: 37,\n            advanceWidth: 617,\n        },\n        B: {\n            x_min: 37,\n            x_max: 532,\n            y_min: 3,\n            y_max: 783,\n            ha: 780,\n            leftSideBearing: 37,\n            advanceWidth: 579,\n        },\n        C: {\n            x_min: 37,\n            x_max: 583,\n            y_min: -3,\n            y_max: 775,\n            ha: 778,\n            leftSideBearing: 37,\n            advanceWidth: 623,\n        },\n        D: {\n            x_min: 50,\n            x_max: 530,\n            y_min: -15,\n            y_max: 749,\n            ha: 764,\n            leftSideBearing: 50,\n            advanceWidth: 579,\n        },\n        E: {\n            x_min: 45,\n            x_max: 531,\n            y_min: -1,\n            y_max: 743,\n            ha: 744,\n            leftSideBearing: 45,\n            advanceWidth: 585,\n        },\n        F: {\n            x_min: 45,\n            x_max: 459,\n            y_min: 23,\n            y_max: 727,\n            ha: 704,\n            leftSideBearing: 45,\n            advanceWidth: 510,\n        },\n        G: {\n            x_min: 31,\n            x_max: 577,\n            y_min: -8,\n            y_max: 733,\n            ha: 741,\n            leftSideBearing: 31,\n            advanceWidth: 611,\n        },\n        H: {\n            x_min: 37,\n            x_max: 493,\n            y_min: -22,\n            y_max: 758,\n            ha: 780,\n            leftSideBearing: 37,\n            advanceWidth: 535,\n        },\n        I: {\n            x_min: 47,\n            x_max: 501,\n            y_min: -3,\n            y_max: 731,\n            ha: 734,\n            leftSideBearing: 47,\n            advanceWidth: 541,\n        },\n        J: {\n            x_min: 33,\n            x_max: 531,\n            y_min: -23,\n            y_max: 725,\n            ha: 748,\n            leftSideBearing: 33,\n            advanceWidth: 573,\n        },\n        K: {\n            x_min: 43,\n            x_max: 505,\n            y_min: -10,\n            y_max: 740,\n            ha: 750,\n            leftSideBearing: 43,\n            advanceWidth: 560,\n        },\n        L: {\n            x_min: 49,\n            x_max: 457,\n            y_min: -2,\n            y_max: 746,\n            ha: 748,\n            leftSideBearing: 49,\n            advanceWidth: 510,\n        },\n        M: {\n            x_min: 35,\n            x_max: 699,\n            y_min: 1,\n            y_max: 744,\n            ha: 743,\n            leftSideBearing: 35,\n            advanceWidth: 743,\n        },\n        N: {\n            x_min: 34,\n            x_max: 533,\n            y_min: -17,\n            y_max: 761,\n            ha: 778,\n            leftSideBearing: 34,\n            advanceWidth: 579,\n        },\n        O: {\n            x_min: 41,\n            x_max: 608,\n            y_min: -5,\n            y_max: 735,\n            ha: 740,\n            leftSideBearing: 41,\n            advanceWidth: 667,\n        },\n        P: {\n            x_min: 53,\n            x_max: 451,\n            y_min: -18,\n            y_max: 735,\n            ha: 753,\n            leftSideBearing: 53,\n            advanceWidth: 497,\n        },\n        Q: {\n            x_min: 40,\n            x_max: 599,\n            y_min: -67,\n            y_max: 744,\n            ha: 811,\n            leftSideBearing: 40,\n            advanceWidth: 648,\n        },\n        R: {\n            x_min: 39,\n            x_max: 487,\n            y_min: 16,\n            y_max: 735,\n            ha: 719,\n            leftSideBearing: 39,\n            advanceWidth: 535,\n        },\n        S: {\n            x_min: 35,\n            x_max: 552,\n            y_min: -47,\n            y_max: 708,\n            ha: 755,\n            leftSideBearing: 35,\n            advanceWidth: 604,\n        },\n        T: {\n            x_min: 26,\n            x_max: 656,\n            y_min: -13,\n            y_max: 718,\n            ha: 731,\n            leftSideBearing: 26,\n            advanceWidth: 705,\n        },\n        U: {\n            x_min: 41,\n            x_max: 518,\n            y_min: -20,\n            y_max: 748,\n            ha: 768,\n            leftSideBearing: 41,\n            advanceWidth: 567,\n        },\n        V: {\n            x_min: 47,\n            x_max: 509,\n            y_min: -26,\n            y_max: 744,\n            ha: 770,\n            leftSideBearing: 47,\n            advanceWidth: 567,\n        },\n        W: {\n            x_min: 44,\n            x_max: 789,\n            y_min: -35,\n            y_max: 720,\n            ha: 755,\n            leftSideBearing: 44,\n            advanceWidth: 833,\n        },\n        X: {\n            x_min: 63,\n            x_max: 635,\n            y_min: -10,\n            y_max: 745,\n            ha: 755,\n            leftSideBearing: 63,\n            advanceWidth: 680,\n        },\n        Y: {\n            x_min: 43,\n            x_max: 503,\n            y_min: -21,\n            y_max: 734,\n            ha: 755,\n            leftSideBearing: 43,\n            advanceWidth: 541,\n        },\n        Z: {\n            x_min: 42,\n            x_max: 584,\n            y_min: -10,\n            y_max: 739,\n            ha: 749,\n            leftSideBearing: 42,\n            advanceWidth: 629,\n        },\n        '[': {\n            x_min: 46,\n            x_max: 346,\n            y_min: -150,\n            y_max: 884,\n            ha: 1034,\n            leftSideBearing: 46,\n            advanceWidth: 291,\n        },\n        '\\\\': {\n            x_min: 20,\n            x_max: 616,\n            y_min: -100,\n            y_max: 797,\n            ha: 897,\n            leftSideBearing: 20,\n            advanceWidth: 645,\n        },\n        ']': {\n            x_min: -76,\n            x_max: 226,\n            y_min: -150,\n            y_max: 881,\n            ha: 1031,\n            leftSideBearing: -76,\n            advanceWidth: 297,\n        },\n        '^': {\n            x_min: 43,\n            x_max: 437,\n            y_min: 517,\n            y_max: 812,\n            ha: 295,\n            leftSideBearing: 43,\n            advanceWidth: 478,\n        },\n        _: {\n            x_min: 29,\n            x_max: 563,\n            y_min: -110,\n            y_max: -1,\n            ha: 109,\n            leftSideBearing: 29,\n            advanceWidth: 598,\n        },\n        '`': {\n            x_min: 54,\n            x_max: 321,\n            y_min: 540,\n            y_max: 747,\n            ha: 207,\n            leftSideBearing: 54,\n            advanceWidth: 368,\n        },\n        a: {\n            x_min: 20,\n            x_max: 447,\n            y_min: -17,\n            y_max: 495,\n            ha: 512,\n            leftSideBearing: 20,\n            advanceWidth: 494,\n        },\n        b: {\n            x_min: 37,\n            x_max: 466,\n            y_min: -27,\n            y_max: 770,\n            ha: 797,\n            leftSideBearing: 37,\n            advanceWidth: 510,\n        },\n        c: {\n            x_min: 35,\n            x_max: 456,\n            y_min: -9,\n            y_max: 507,\n            ha: 516,\n            leftSideBearing: 35,\n            advanceWidth: 460,\n        },\n        d: {\n            x_min: 45,\n            x_max: 520,\n            y_min: -15,\n            y_max: 764,\n            ha: 779,\n            leftSideBearing: 45,\n            advanceWidth: 560,\n        },\n        e: {\n            x_min: 33,\n            x_max: 370,\n            y_min: -5,\n            y_max: 501,\n            ha: 506,\n            leftSideBearing: 33,\n            advanceWidth: 397,\n        },\n        f: {\n            x_min: 35,\n            x_max: 411,\n            y_min: -13,\n            y_max: 695,\n            ha: 708,\n            leftSideBearing: 35,\n            advanceWidth: 453,\n        },\n        g: {\n            x_min: 33,\n            x_max: 551,\n            y_min: -257,\n            y_max: 505,\n            ha: 762,\n            leftSideBearing: 33,\n            advanceWidth: 611,\n        },\n        h: {\n            x_min: 32,\n            x_max: 458,\n            y_min: -29,\n            y_max: 743,\n            ha: 772,\n            leftSideBearing: 32,\n            advanceWidth: 491,\n        },\n        i: {\n            x_min: 45,\n            x_max: 167,\n            y_min: -13,\n            y_max: 631,\n            ha: 644,\n            leftSideBearing: 45,\n            advanceWidth: 220,\n        },\n        j: {\n            x_min: -127,\n            x_max: 261,\n            y_min: -231,\n            y_max: 601,\n            ha: 832,\n            leftSideBearing: -127,\n            advanceWidth: 308,\n        },\n        k: {\n            x_min: 39,\n            x_max: 443,\n            y_min: -3,\n            y_max: 700,\n            ha: 703,\n            leftSideBearing: 39,\n            advanceWidth: 497,\n        },\n        l: {\n            x_min: 58,\n            x_max: 168,\n            y_min: -8,\n            y_max: 686,\n            ha: 694,\n            leftSideBearing: 58,\n            advanceWidth: 227,\n        },\n        m: {\n            x_min: 39,\n            x_max: 688,\n            y_min: -14,\n            y_max: 501,\n            ha: 515,\n            leftSideBearing: 39,\n            advanceWidth: 718,\n        },\n        n: {\n            x_min: 45,\n            x_max: 491,\n            y_min: -32,\n            y_max: 512,\n            ha: 544,\n            leftSideBearing: 45,\n            advanceWidth: 541,\n        },\n        o: {\n            x_min: 41,\n            x_max: 424,\n            y_min: -12,\n            y_max: 493,\n            ha: 505,\n            leftSideBearing: 41,\n            advanceWidth: 447,\n        },\n        p: {\n            x_min: 25,\n            x_max: 529,\n            y_min: -260,\n            y_max: 500,\n            ha: 760,\n            leftSideBearing: 25,\n            advanceWidth: 573,\n        },\n        q: {\n            x_min: 53,\n            x_max: 603,\n            y_min: -235,\n            y_max: 514,\n            ha: 749,\n            leftSideBearing: 53,\n            advanceWidth: 623,\n        },\n        r: {\n            x_min: 32,\n            x_max: 407,\n            y_min: -7,\n            y_max: 492,\n            ha: 499,\n            leftSideBearing: 32,\n            advanceWidth: 460,\n        },\n        s: {\n            x_min: 49,\n            x_max: 416,\n            y_min: -12,\n            y_max: 519,\n            ha: 531,\n            leftSideBearing: 49,\n            advanceWidth: 460,\n        },\n        t: {\n            x_min: 32,\n            x_max: 442,\n            y_min: -5,\n            y_max: 684,\n            ha: 689,\n            leftSideBearing: 32,\n            advanceWidth: 469,\n        },\n        u: {\n            x_min: 41,\n            x_max: 487,\n            y_min: -5,\n            y_max: 507,\n            ha: 512,\n            leftSideBearing: 41,\n            advanceWidth: 510,\n        },\n        v: {\n            x_min: 16,\n            x_max: 441,\n            y_min: -20,\n            y_max: 542,\n            ha: 562,\n            leftSideBearing: 16,\n            advanceWidth: 456,\n        },\n        w: {\n            x_min: 39,\n            x_max: 639,\n            y_min: -22,\n            y_max: 505,\n            ha: 527,\n            leftSideBearing: 39,\n            advanceWidth: 661,\n        },\n        x: {\n            x_min: 15,\n            x_max: 505,\n            y_min: -39,\n            y_max: 539,\n            ha: 578,\n            leftSideBearing: 15,\n            advanceWidth: 541,\n        },\n        y: {\n            x_min: -98,\n            x_max: 501,\n            y_min: -242,\n            y_max: 511,\n            ha: 753,\n            leftSideBearing: -98,\n            advanceWidth: 548,\n        },\n        z: {\n            x_min: 27,\n            x_max: 479,\n            y_min: -3,\n            y_max: 494,\n            ha: 497,\n            leftSideBearing: 27,\n            advanceWidth: 494,\n        },\n        '{': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '|': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '}': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n        '~': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 308,\n        },\n    },\n    fontFamily: 'PetalumaScript',\n    resolution: 1000,\n    generatedOn: '2020-06-14T18:33:25.407Z',\n};\n","export const RobotoSlabFont = {\n    spacing: 50,\n    glyphs: {\n        ' ': {\n            x_min: 0,\n            x_max: 509,\n            y_min: 0,\n            y_max: 2000,\n            ha: 2000,\n            leftSideBearing: 0,\n            advanceWidth: 509,\n        },\n        '0': {\n            x_min: 121,\n            x_max: 1048,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 121,\n            advanceWidth: 1168,\n        },\n        '1': {\n            x_min: 117,\n            x_max: 767,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 117,\n            advanceWidth: 844,\n        },\n        '2': {\n            x_min: 75.8474576645637,\n            x_max: 1040,\n            y_min: 0,\n            y_max: 1477,\n            ha: 1477,\n            leftSideBearing: 75,\n            advanceWidth: 1131,\n        },\n        '3': {\n            x_min: 74.85365853658536,\n            x_max: 994,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 74,\n            advanceWidth: 1106,\n        },\n        '4': {\n            x_min: 63,\n            x_max: 1114,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 63,\n            advanceWidth: 1187,\n        },\n        '5': {\n            x_min: 96.8448275474953,\n            x_max: 982,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 96,\n            advanceWidth: 1081,\n        },\n        '6': {\n            x_min: 121,\n            x_max: 1067,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 121,\n            advanceWidth: 1144,\n        },\n        '7': {\n            x_min: 76,\n            x_max: 1060,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: -30,\n            advanceWidth: 1128,\n        },\n        '8': {\n            x_min: 92,\n            x_max: 1039,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 92,\n            advanceWidth: 1131,\n        },\n        '9': {\n            x_min: 84,\n            x_max: 1026,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 84,\n            advanceWidth: 1154,\n        },\n        '!': {\n            x_min: 143,\n            x_max: 340,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 143,\n            advanceWidth: 483,\n        },\n        '\"': {\n            x_min: 166,\n            x_max: 634,\n            y_min: 1055,\n            y_max: 1560,\n            ha: 505,\n            leftSideBearing: 166,\n            advanceWidth: 770,\n        },\n        '#': {\n            x_min: 63,\n            x_max: 1179,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 63,\n            advanceWidth: 1246,\n        },\n        $: {\n            x_min: 81.92156915727656,\n            x_max: 1012,\n            y_min: -208,\n            y_max: 1693,\n            ha: 1901,\n            leftSideBearing: 81,\n            advanceWidth: 1110,\n        },\n        '%': {\n            x_min: 77,\n            x_max: 1384,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 77,\n            advanceWidth: 1460,\n        },\n        '&': {\n            x_min: 74,\n            x_max: 1242,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 74,\n            advanceWidth: 1289,\n        },\n        \"'\": {\n            x_min: 166,\n            x_max: 324,\n            y_min: 1055,\n            y_max: 1560,\n            ha: 505,\n            leftSideBearing: 166,\n            advanceWidth: 460,\n        },\n        '(': {\n            x_min: 114,\n            x_max: 650,\n            y_min: -463,\n            y_max: 1636,\n            ha: 2099,\n            leftSideBearing: 114,\n            advanceWidth: 662,\n        },\n        ')': {\n            x_min: 11,\n            x_max: 547,\n            y_min: -463,\n            y_max: 1636,\n            ha: 2099,\n            leftSideBearing: 11,\n            advanceWidth: 654,\n        },\n        '*': {\n            x_min: 66,\n            x_max: 893,\n            y_min: 607,\n            y_max: 1456,\n            ha: 849,\n            leftSideBearing: 66,\n            advanceWidth: 958,\n        },\n        '+': {\n            x_min: 73,\n            x_max: 1071,\n            y_min: 146,\n            y_max: 1206,\n            ha: 1060,\n            leftSideBearing: 73,\n            advanceWidth: 1145,\n        },\n        ',': {\n            x_min: 23,\n            x_max: 315,\n            y_min: -311,\n            y_max: 221,\n            ha: 532,\n            leftSideBearing: 23,\n            advanceWidth: 404,\n        },\n        '-': {\n            x_min: 154,\n            x_max: 643,\n            y_min: 538,\n            y_max: 692,\n            ha: 154,\n            leftSideBearing: 154,\n            advanceWidth: 797,\n        },\n        '.': {\n            x_min: 145,\n            x_max: 342,\n            y_min: 0,\n            y_max: 202,\n            ha: 202,\n            leftSideBearing: 145,\n            advanceWidth: 493,\n        },\n        '/': {\n            x_min: 0,\n            x_max: 774,\n            y_min: -125,\n            y_max: 1456,\n            ha: 1581,\n            leftSideBearing: 0,\n            advanceWidth: 824,\n        },\n        ':': {\n            x_min: 145,\n            x_max: 342,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 145,\n            advanceWidth: 419,\n        },\n        ';': {\n            x_min: 53,\n            x_max: 345,\n            y_min: -311,\n            y_max: 1082,\n            ha: 1393,\n            leftSideBearing: 53,\n            advanceWidth: 424,\n        },\n        '<': {\n            x_min: 76,\n            x_max: 892,\n            y_min: 107,\n            y_max: 1013,\n            ha: 906,\n            leftSideBearing: 76,\n            advanceWidth: 1017,\n        },\n        '=': {\n            x_min: 147,\n            x_max: 981,\n            y_min: 407,\n            y_max: 987,\n            ha: 580,\n            leftSideBearing: 147,\n            advanceWidth: 1127,\n        },\n        '>': {\n            x_min: 125,\n            x_max: 980,\n            y_min: 87,\n            y_max: 993,\n            ha: 906,\n            leftSideBearing: 125,\n            advanceWidth: 1060,\n        },\n        '?': {\n            x_min: 65.92660602419838,\n            x_max: 890,\n            y_min: 0,\n            y_max: 1477,\n            ha: 1477,\n            leftSideBearing: 65,\n            advanceWidth: 953,\n        },\n        '@': {\n            x_min: 84.3592218305664,\n            x_max: 1705.2346925277395,\n            y_min: -453,\n            y_max: 1431,\n            ha: 1884,\n            leftSideBearing: 84,\n            advanceWidth: 1821,\n        },\n        A: {\n            x_min: 70,\n            x_max: 1463,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 70,\n            advanceWidth: 1533,\n        },\n        B: {\n            x_min: 81,\n            x_max: 1253,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1322,\n        },\n        C: {\n            x_min: 80,\n            x_max: 1174,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 80,\n            advanceWidth: 1290,\n        },\n        D: {\n            x_min: 81,\n            x_max: 1291,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1356,\n        },\n        E: {\n            x_min: 81,\n            x_max: 1190,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1306,\n        },\n        F: {\n            x_min: 81,\n            x_max: 1176,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1256,\n        },\n        G: {\n            x_min: 80,\n            x_max: 1226,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 80,\n            advanceWidth: 1346,\n        },\n        H: {\n            x_min: 81,\n            x_max: 1497,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1578,\n        },\n        I: {\n            x_min: 81,\n            x_max: 604,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 685,\n        },\n        J: {\n            x_min: 60,\n            x_max: 1100,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 60,\n            advanceWidth: 1169,\n        },\n        K: {\n            x_min: 81,\n            x_max: 1427,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1501,\n        },\n        L: {\n            x_min: 81,\n            x_max: 1130,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1210,\n        },\n        M: {\n            x_min: 94,\n            x_max: 1888,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 94,\n            advanceWidth: 1982,\n        },\n        N: {\n            x_min: 83,\n            x_max: 1509,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 83,\n            advanceWidth: 1592,\n        },\n        O: {\n            x_min: 70,\n            x_max: 1281,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 70,\n            advanceWidth: 1351,\n        },\n        P: {\n            x_min: 81,\n            x_max: 1242,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 81,\n            advanceWidth: 1297,\n        },\n        Q: {\n            x_min: 70,\n            x_max: 1348,\n            y_min: -245,\n            y_max: 1477,\n            ha: 1722,\n            leftSideBearing: 70,\n            advanceWidth: 1376,\n        },\n        R: {\n            x_min: 81,\n            x_max: 1285,\n            y_min: 0,\n            y_max: 1455,\n            ha: 1455,\n            leftSideBearing: 81,\n            advanceWidth: 1385,\n        },\n        S: {\n            x_min: 115,\n            x_max: 1116,\n            y_min: -21,\n            y_max: 1477,\n            ha: 1498,\n            leftSideBearing: 115,\n            advanceWidth: 1206,\n        },\n        T: {\n            x_min: 96,\n            x_max: 1306,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 96,\n            advanceWidth: 1406,\n        },\n        U: {\n            x_min: 70,\n            x_max: 1452,\n            y_min: -21,\n            y_max: 1456,\n            ha: 1477,\n            leftSideBearing: 70,\n            advanceWidth: 1522,\n        },\n        V: {\n            x_min: 65,\n            x_max: 1443,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 65,\n            advanceWidth: 1508,\n        },\n        W: {\n            x_min: 72,\n            x_max: 2057,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 72,\n            advanceWidth: 2129,\n        },\n        X: {\n            x_min: 80,\n            x_max: 1449,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 80,\n            advanceWidth: 1529,\n        },\n        Y: {\n            x_min: 65,\n            x_max: 1396,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 65,\n            advanceWidth: 1461,\n        },\n        Z: {\n            x_min: 90,\n            x_max: 1107,\n            y_min: 0,\n            y_max: 1456,\n            ha: 1456,\n            leftSideBearing: 90,\n            advanceWidth: 1197,\n        },\n        '[': {\n            x_min: 157,\n            x_max: 541,\n            y_min: -312,\n            y_max: 1664,\n            ha: 1976,\n            leftSideBearing: 157,\n            advanceWidth: 573,\n        },\n        '\\\\': {\n            x_min: 36,\n            x_max: 830,\n            y_min: -125,\n            y_max: 1456,\n            ha: 1581,\n            leftSideBearing: 36,\n            advanceWidth: 841,\n        },\n        ']': {\n            x_min: 23,\n            x_max: 408,\n            y_min: -312,\n            y_max: 1664,\n            ha: 1976,\n            leftSideBearing: 23,\n            advanceWidth: 552,\n        },\n        '^': {\n            x_min: 71,\n            x_max: 802,\n            y_min: 729,\n            y_max: 1456,\n            ha: 727,\n            leftSideBearing: 71,\n            advanceWidth: 864,\n        },\n        _: {\n            x_min: 119,\n            x_max: 1041,\n            y_min: -154,\n            y_max: 0,\n            ha: 154,\n            leftSideBearing: 119,\n            advanceWidth: 1168,\n        },\n        '`': {\n            x_min: 40,\n            x_max: 456,\n            y_min: 1288,\n            y_max: 1560,\n            ha: 272,\n            leftSideBearing: 40,\n            advanceWidth: 496,\n        },\n        a: {\n            x_min: 79,\n            x_max: 1053,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 79,\n            advanceWidth: 1132,\n        },\n        b: {\n            x_min: -16,\n            x_max: 1071,\n            y_min: -21,\n            y_max: 1560,\n            ha: 1581,\n            leftSideBearing: -16,\n            advanceWidth: 1145,\n        },\n        c: {\n            x_min: 78,\n            x_max: 988,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 78,\n            advanceWidth: 1067,\n        },\n        d: {\n            x_min: 78,\n            x_max: 1156,\n            y_min: -21,\n            y_max: 1560,\n            ha: 1581,\n            leftSideBearing: 78,\n            advanceWidth: 1218,\n        },\n        e: {\n            x_min: 74,\n            x_max: 980,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 74,\n            advanceWidth: 1059,\n        },\n        f: {\n            x_min: 64,\n            x_max: 731,\n            y_min: 0,\n            y_max: 1581,\n            ha: 1581,\n            leftSideBearing: 64,\n            advanceWidth: 725,\n        },\n        g: {\n            x_min: 78,\n            x_max: 1133,\n            y_min: -437,\n            y_max: 1102,\n            ha: 1539,\n            leftSideBearing: 78,\n            advanceWidth: 1157,\n        },\n        h: {\n            x_min: 49,\n            x_max: 1255,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 49,\n            advanceWidth: 1315,\n        },\n        i: {\n            x_min: 67,\n            x_max: 590,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 67,\n            advanceWidth: 652,\n        },\n        j: {\n            x_min: -56,\n            x_max: 381,\n            y_min: -437,\n            y_max: 1560,\n            ha: 1997,\n            leftSideBearing: -56,\n            advanceWidth: 525,\n        },\n        k: {\n            x_min: 64,\n            x_max: 1248,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 64,\n            advanceWidth: 1287,\n        },\n        l: {\n            x_min: 64,\n            x_max: 587,\n            y_min: 0,\n            y_max: 1560,\n            ha: 1560,\n            leftSideBearing: 64,\n            advanceWidth: 653,\n        },\n        m: {\n            x_min: 74,\n            x_max: 1905,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 74,\n            advanceWidth: 1977,\n        },\n        n: {\n            x_min: 74,\n            x_max: 1278,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 74,\n            advanceWidth: 1343,\n        },\n        o: {\n            x_min: 78,\n            x_max: 1046,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 78,\n            advanceWidth: 1124,\n        },\n        p: {\n            x_min: 34,\n            x_max: 1119,\n            y_min: -416,\n            y_max: 1102,\n            ha: 1518,\n            leftSideBearing: 34,\n            advanceWidth: 1197,\n        },\n        q: {\n            x_min: 78,\n            x_max: 1135,\n            y_min: -416,\n            y_max: 1102,\n            ha: 1518,\n            leftSideBearing: 78,\n            advanceWidth: 1139,\n        },\n        r: {\n            x_min: 72,\n            x_max: 808,\n            y_min: 0,\n            y_max: 1102,\n            ha: 1102,\n            leftSideBearing: 72,\n            advanceWidth: 854,\n        },\n        s: {\n            x_min: 104,\n            x_max: 933,\n            y_min: -21,\n            y_max: 1102,\n            ha: 1123,\n            leftSideBearing: 104,\n            advanceWidth: 1022,\n        },\n        t: {\n            x_min: 24,\n            x_max: 678,\n            y_min: -17,\n            y_max: 1343,\n            ha: 1360,\n            leftSideBearing: 24,\n            advanceWidth: 730,\n        },\n        u: {\n            x_min: 52,\n            x_max: 1181,\n            y_min: -21,\n            y_max: 1082,\n            ha: 1103,\n            leftSideBearing: 52,\n            advanceWidth: 1245,\n        },\n        v: {\n            x_min: 26,\n            x_max: 1176,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 26,\n            advanceWidth: 1206,\n        },\n        w: {\n            x_min: 52,\n            x_max: 1777,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 52,\n            advanceWidth: 1823,\n        },\n        x: {\n            x_min: 42,\n            x_max: 1163,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 42,\n            advanceWidth: 1203,\n        },\n        y: {\n            x_min: 24,\n            x_max: 1172,\n            y_min: -437,\n            y_max: 1082,\n            ha: 1519,\n            leftSideBearing: 24,\n            advanceWidth: 1192,\n        },\n        z: {\n            x_min: 88,\n            x_max: 960,\n            y_min: 0,\n            y_max: 1082,\n            ha: 1082,\n            leftSideBearing: 88,\n            advanceWidth: 1032,\n        },\n        '{': {\n            x_min: 63,\n            x_max: 671,\n            y_min: -364,\n            y_max: 1597,\n            ha: 1961,\n            leftSideBearing: 63,\n            advanceWidth: 701,\n        },\n        '|': {\n            x_min: 150,\n            x_max: 307,\n            y_min: -270,\n            y_max: 1456,\n            ha: 1726,\n            leftSideBearing: 150,\n            advanceWidth: 451,\n        },\n        '}': {\n            x_min: 27,\n            x_max: 635,\n            y_min: -364,\n            y_max: 1597,\n            ha: 1961,\n            leftSideBearing: 27,\n            advanceWidth: 701,\n        },\n        '~': {\n            x_min: 121,\n            x_max: 1257,\n            y_min: 401,\n            y_max: 803,\n            ha: 402,\n            leftSideBearing: 121,\n            advanceWidth: 1386,\n        },\n    },\n    fontFamily: 'Roboto Slab',\n    resolution: 2048,\n    generatedOn: '2020-06-15T19:12:58.120Z',\n};\n","export const SansFontBold = {\n    glyphs: {\n        '0': {\n            x_min: 86,\n            x_max: 1038,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 86,\n            advanceWidth: 1139,\n        },\n        '1': {\n            x_min: 162,\n            x_max: 806,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 162,\n            advanceWidth: 1139,\n        },\n        '2': {\n            x_min: 51,\n            x_max: 1036,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 51,\n            advanceWidth: 1139,\n        },\n        '3': {\n            x_min: 77,\n            x_max: 1051,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 77,\n            advanceWidth: 1139,\n        },\n        '4': {\n            x_min: 38,\n            x_max: 1092,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 38,\n            advanceWidth: 1139,\n        },\n        '5': {\n            x_min: 91,\n            x_max: 1077,\n            y_min: -25,\n            y_max: 1446,\n            ha: 1471,\n            leftSideBearing: 91,\n            advanceWidth: 1139,\n        },\n        '6': {\n            x_min: 87,\n            x_max: 1066,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 87,\n            advanceWidth: 1139,\n        },\n        '7': {\n            x_min: 87,\n            x_max: 1048,\n            y_min: 0,\n            y_max: 1446,\n            ha: 1446,\n            leftSideBearing: 87,\n            advanceWidth: 1139,\n        },\n        '8': {\n            x_min: 83,\n            x_max: 1047,\n            y_min: -26,\n            y_max: 1472,\n            ha: 1498,\n            leftSideBearing: 83,\n            advanceWidth: 1139,\n        },\n        '9': {\n            x_min: 65,\n            x_max: 1044,\n            y_min: -26,\n            y_max: 1472,\n            ha: 1498,\n            leftSideBearing: 65,\n            advanceWidth: 1139,\n        },\n        ' ': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        '!': {\n            x_min: 184,\n            x_max: 488,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 184,\n            advanceWidth: 682,\n        },\n        '\"': {\n            x_min: 112,\n            x_max: 869,\n            y_min: 945,\n            y_max: 1466,\n            ha: 521,\n            leftSideBearing: 112,\n            advanceWidth: 971,\n        },\n        '#': {\n            x_min: 18,\n            x_max: 1115,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 18,\n            advanceWidth: 1139,\n        },\n        $: {\n            x_min: 70,\n            x_max: 1048,\n            y_min: -205,\n            y_max: 1584,\n            ha: 1789,\n            leftSideBearing: 70,\n            advanceWidth: 1139,\n        },\n        '%': {\n            x_min: 89,\n            x_max: 1725,\n            y_min: -59,\n            y_max: 1491,\n            ha: 1550,\n            leftSideBearing: 89,\n            advanceWidth: 1821,\n        },\n        '&': {\n            x_min: 90,\n            x_max: 1446,\n            y_min: -38,\n            y_max: 1491,\n            ha: 1529,\n            leftSideBearing: 90,\n            advanceWidth: 1479,\n        },\n        \"'\": {\n            x_min: 92,\n            x_max: 398,\n            y_min: 945,\n            y_max: 1466,\n            ha: 521,\n            leftSideBearing: 92,\n            advanceWidth: 487,\n        },\n        '(': {\n            x_min: 107,\n            x_max: 616,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 107,\n            advanceWidth: 682,\n        },\n        ')': {\n            x_min: 67,\n            x_max: 576,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 67,\n            advanceWidth: 682,\n        },\n        '*': {\n            x_min: 28,\n            x_max: 753,\n            y_min: 792,\n            y_max: 1491,\n            ha: 699,\n            leftSideBearing: 28,\n            advanceWidth: 797,\n        },\n        '+': {\n            x_min: 85,\n            x_max: 1110,\n            y_min: 211,\n            y_max: 1236,\n            ha: 1025,\n            leftSideBearing: 85,\n            advanceWidth: 1196,\n        },\n        ',': {\n            x_min: 117,\n            x_max: 421,\n            y_min: -327,\n            y_max: 281,\n            ha: 608,\n            leftSideBearing: 117,\n            advanceWidth: 569,\n        },\n        '-': {\n            x_min: 115,\n            x_max: 667,\n            y_min: 391,\n            y_max: 672,\n            ha: 281,\n            leftSideBearing: 115,\n            advanceWidth: 682,\n        },\n        '.': {\n            x_min: 147,\n            x_max: 428,\n            y_min: 0,\n            y_max: 281,\n            ha: 281,\n            leftSideBearing: 147,\n            advanceWidth: 569,\n        },\n        '/': {\n            x_min: -3,\n            x_max: 571,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: -3,\n            advanceWidth: 569,\n        },\n        ':': {\n            x_min: 201,\n            x_max: 482,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 201,\n            advanceWidth: 682,\n        },\n        ';': {\n            x_min: 170,\n            x_max: 474,\n            y_min: -327,\n            y_max: 1062,\n            ha: 1389,\n            leftSideBearing: 170,\n            advanceWidth: 682,\n        },\n        '<': {\n            x_min: 95,\n            x_max: 1100,\n            y_min: 167,\n            y_max: 1281,\n            ha: 1114,\n            leftSideBearing: 95,\n            advanceWidth: 1196,\n        },\n        '=': {\n            x_min: 85,\n            x_max: 1110,\n            y_min: 372,\n            y_max: 1074,\n            ha: 702,\n            leftSideBearing: 85,\n            advanceWidth: 1196,\n        },\n        '>': {\n            x_min: 95,\n            x_max: 1101,\n            y_min: 166,\n            y_max: 1279,\n            ha: 1113,\n            leftSideBearing: 95,\n            advanceWidth: 1196,\n        },\n        '?': {\n            x_min: 106,\n            x_max: 1158,\n            y_min: 0,\n            y_max: 1481,\n            ha: 1481,\n            leftSideBearing: 106,\n            advanceWidth: 1251,\n        },\n        '@': {\n            x_min: 61,\n            x_max: 1990,\n            y_min: -431,\n            y_max: 1492,\n            ha: 1923,\n            leftSideBearing: 61,\n            advanceWidth: 1997,\n        },\n        A: {\n            x_min: 0,\n            x_max: 1471,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 0,\n            advanceWidth: 1479,\n        },\n        B: {\n            x_min: 150,\n            x_max: 1378,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1479,\n        },\n        C: {\n            x_min: 97,\n            x_max: 1374,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 97,\n            advanceWidth: 1479,\n        },\n        D: {\n            x_min: 148,\n            x_max: 1377,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 148,\n            advanceWidth: 1479,\n        },\n        E: {\n            x_min: 149,\n            x_max: 1264,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 149,\n            advanceWidth: 1366,\n        },\n        F: {\n            x_min: 151,\n            x_max: 1156,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 151,\n            advanceWidth: 1251,\n        },\n        G: {\n            x_min: 98,\n            x_max: 1469,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 98,\n            advanceWidth: 1593,\n        },\n        H: {\n            x_min: 150,\n            x_max: 1322,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1479,\n        },\n        I: {\n            x_min: 140,\n            x_max: 436,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 140,\n            advanceWidth: 569,\n        },\n        J: {\n            x_min: 35,\n            x_max: 973,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 35,\n            advanceWidth: 1139,\n        },\n        K: {\n            x_min: 153,\n            x_max: 1475,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 153,\n            advanceWidth: 1479,\n        },\n        L: {\n            x_min: 157,\n            x_max: 1189,\n            y_min: 0,\n            y_max: 1454,\n            ha: 1454,\n            leftSideBearing: 157,\n            advanceWidth: 1251,\n        },\n        M: {\n            x_min: 145,\n            x_max: 1561,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 145,\n            advanceWidth: 1706,\n        },\n        N: {\n            x_min: 152,\n            x_max: 1315,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 152,\n            advanceWidth: 1479,\n        },\n        O: {\n            x_min: 89,\n            x_max: 1511,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 89,\n            advanceWidth: 1593,\n        },\n        P: {\n            x_min: 149,\n            x_max: 1272,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 149,\n            advanceWidth: 1366,\n        },\n        Q: {\n            x_min: 89,\n            x_max: 1566,\n            y_min: -147,\n            y_max: 1491,\n            ha: 1638,\n            leftSideBearing: 89,\n            advanceWidth: 1593,\n        },\n        R: {\n            x_min: 150,\n            x_max: 1468,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1479,\n        },\n        S: {\n            x_min: 74,\n            x_max: 1266,\n            y_min: -26,\n            y_max: 1491,\n            ha: 1517,\n            leftSideBearing: 74,\n            advanceWidth: 1366,\n        },\n        T: {\n            x_min: 44,\n            x_max: 1209,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 44,\n            advanceWidth: 1251,\n        },\n        U: {\n            x_min: 147,\n            x_max: 1316,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 147,\n            advanceWidth: 1479,\n        },\n        V: {\n            x_min: -1,\n            x_max: 1364,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: -1,\n            advanceWidth: 1366,\n        },\n        W: {\n            x_min: 7,\n            x_max: 1931,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 7,\n            advanceWidth: 1933,\n        },\n        X: {\n            x_min: 0,\n            x_max: 1363,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 0,\n            advanceWidth: 1366,\n        },\n        Y: {\n            x_min: -3,\n            x_max: 1368,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: -3,\n            advanceWidth: 1366,\n        },\n        Z: {\n            x_min: 22,\n            x_max: 1213,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 22,\n            advanceWidth: 1251,\n        },\n        '[': {\n            x_min: 146,\n            x_max: 644,\n            y_min: -413,\n            y_max: 1466,\n            ha: 1879,\n            leftSideBearing: 146,\n            advanceWidth: 682,\n        },\n        '\\\\': {\n            x_min: -3,\n            x_max: 571,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: -3,\n            advanceWidth: 569,\n        },\n        ']': {\n            x_min: 38,\n            x_max: 536,\n            y_min: -413,\n            y_max: 1466,\n            ha: 1879,\n            leftSideBearing: 38,\n            advanceWidth: 682,\n        },\n        '^': {\n            x_min: 115,\n            x_max: 1080,\n            y_min: 692,\n            y_max: 1491,\n            ha: 799,\n            leftSideBearing: 115,\n            advanceWidth: 1196,\n        },\n        _: {\n            x_min: -19,\n            x_max: 1149,\n            y_min: -405,\n            y_max: -223,\n            ha: 182,\n            leftSideBearing: -19,\n            advanceWidth: 1139,\n        },\n        '`': {\n            x_min: 42,\n            x_max: 495,\n            y_min: 1192,\n            y_max: 1491,\n            ha: 299,\n            leftSideBearing: 42,\n            advanceWidth: 682,\n        },\n        a: {\n            x_min: 73,\n            x_max: 1070,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 73,\n            advanceWidth: 1139,\n        },\n        b: {\n            x_min: 135,\n            x_max: 1172,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 135,\n            advanceWidth: 1251,\n        },\n        c: {\n            x_min: 85,\n            x_max: 1087,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        d: {\n            x_min: 84,\n            x_max: 1121,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 84,\n            advanceWidth: 1251,\n        },\n        e: {\n            x_min: 65,\n            x_max: 1057.2517482517483,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 65,\n            advanceWidth: 1139,\n        },\n        f: {\n            x_min: 24,\n            x_max: 742,\n            y_min: 0,\n            y_max: 1491,\n            ha: 1491,\n            leftSideBearing: 24,\n            advanceWidth: 682,\n        },\n        g: {\n            x_min: 84,\n            x_max: 1120,\n            y_min: -431,\n            y_max: 1086,\n            ha: 1517,\n            leftSideBearing: 84,\n            advanceWidth: 1251,\n        },\n        h: {\n            x_min: 146,\n            x_max: 1113,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 146,\n            advanceWidth: 1251,\n        },\n        i: {\n            x_min: 147,\n            x_max: 428,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 147,\n            advanceWidth: 569,\n        },\n        j: {\n            x_min: -94,\n            x_max: 422,\n            y_min: -431,\n            y_max: 1466,\n            ha: 1897,\n            leftSideBearing: -94,\n            advanceWidth: 569,\n        },\n        k: {\n            x_min: 137,\n            x_max: 1119,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 137,\n            advanceWidth: 1139,\n        },\n        l: {\n            x_min: 147,\n            x_max: 428,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 147,\n            advanceWidth: 569,\n        },\n        m: {\n            x_min: 126,\n            x_max: 1688,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 126,\n            advanceWidth: 1821,\n        },\n        n: {\n            x_min: 145,\n            x_max: 1113,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 145,\n            advanceWidth: 1251,\n        },\n        o: {\n            x_min: 82,\n            x_max: 1178,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 82,\n            advanceWidth: 1251,\n        },\n        p: {\n            x_min: 139,\n            x_max: 1175,\n            y_min: -404,\n            y_max: 1086,\n            ha: 1490,\n            leftSideBearing: 139,\n            advanceWidth: 1251,\n        },\n        q: {\n            x_min: 91,\n            x_max: 1122,\n            y_min: -404,\n            y_max: 1086,\n            ha: 1490,\n            leftSideBearing: 91,\n            advanceWidth: 1251,\n        },\n        r: {\n            x_min: 135,\n            x_max: 823,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 135,\n            advanceWidth: 797,\n        },\n        s: {\n            x_min: 48,\n            x_max: 1040,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 48,\n            advanceWidth: 1139,\n        },\n        t: {\n            x_min: 31,\n            x_max: 657,\n            y_min: -24,\n            y_max: 1437,\n            ha: 1461,\n            leftSideBearing: 31,\n            advanceWidth: 682,\n        },\n        u: {\n            x_min: 141,\n            x_max: 1107,\n            y_min: -24,\n            y_max: 1062,\n            ha: 1086,\n            leftSideBearing: 141,\n            advanceWidth: 1251,\n        },\n        v: {\n            x_min: 11,\n            x_max: 1114,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 11,\n            advanceWidth: 1139,\n        },\n        w: {\n            x_min: 9,\n            x_max: 1592,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 9,\n            advanceWidth: 1593,\n        },\n        x: {\n            x_min: 12,\n            x_max: 1120,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 12,\n            advanceWidth: 1139,\n        },\n        y: {\n            x_min: 14,\n            x_max: 1106,\n            y_min: -431,\n            y_max: 1062,\n            ha: 1493,\n            leftSideBearing: 14,\n            advanceWidth: 1139,\n        },\n        z: {\n            x_min: 34,\n            x_max: 982,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 34,\n            advanceWidth: 1024,\n        },\n        '{': {\n            x_min: 60,\n            x_max: 744,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 60,\n            advanceWidth: 797,\n        },\n        '|': {\n            x_min: 176,\n            x_max: 399,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 176,\n            advanceWidth: 573,\n        },\n        '}': {\n            x_min: 45,\n            x_max: 729,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 45,\n            advanceWidth: 797,\n        },\n        '~': {\n            x_min: 67,\n            x_max: 1129,\n            y_min: 519,\n            y_max: 924,\n            ha: 405,\n            leftSideBearing: 67,\n            advanceWidth: 1196,\n        },\n    },\n    fontFamily: 'Arial',\n    resolution: 2048,\n    generatedOn: '2022-11-04T20:05:21.000Z',\n};\n","export const SansFont = {\n    smufl: false,\n    name: 'SANS',\n    spacing: 50,\n    Description: 'Built-in sans-serif font',\n    bold: true,\n    italic: true,\n    monospaced: false,\n    serifs: false,\n    glyphs: {\n        '0': {\n            x_min: 85,\n            x_max: 1041,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        '1': {\n            x_min: 223,\n            x_max: 763,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 223,\n            advanceWidth: 1139,\n        },\n        '2': {\n            x_min: 61.840001123045234,\n            x_max: 1031,\n            y_min: 0,\n            y_max: 1472,\n            ha: 1472,\n            leftSideBearing: 61,\n            advanceWidth: 1139,\n        },\n        '3': {\n            x_min: 86,\n            x_max: 1046,\n            y_min: -26,\n            y_max: 1472,\n            ha: 1498,\n            leftSideBearing: 86,\n            advanceWidth: 1139,\n        },\n        '4': {\n            x_min: 26,\n            x_max: 1040,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 26,\n            advanceWidth: 1139,\n        },\n        '5': {\n            x_min: 85,\n            x_max: 1057,\n            y_min: -25,\n            y_max: 1446,\n            ha: 1471,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        '6': {\n            x_min: 77,\n            x_max: 1045,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 77,\n            advanceWidth: 1139,\n        },\n        '7': {\n            x_min: 97,\n            x_max: 1046,\n            y_min: 0,\n            y_max: 1447,\n            ha: 1447,\n            leftSideBearing: 97,\n            advanceWidth: 1139,\n        },\n        '8': {\n            x_min: 83,\n            x_max: 1049,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 83,\n            advanceWidth: 1139,\n        },\n        '9': {\n            x_min: 85,\n            x_max: 1049,\n            y_min: -25,\n            y_max: 1472,\n            ha: 1497,\n            leftSideBearing: 85,\n            advanceWidth: 1139,\n        },\n        ' ': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        '!': {\n            x_min: 176,\n            x_max: 399,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 176,\n            advanceWidth: 569,\n        },\n        '\"': {\n            x_min: 94,\n            x_max: 631,\n            y_min: 947,\n            y_max: 1466,\n            ha: 519,\n            leftSideBearing: 94,\n            advanceWidth: 727,\n        },\n        '#': {\n            x_min: 21,\n            x_max: 1113,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 21,\n            advanceWidth: 1139,\n        },\n        $: {\n            x_min: 73,\n            x_max: 1043,\n            y_min: -211,\n            y_max: 1601,\n            ha: 1812,\n            leftSideBearing: 73,\n            advanceWidth: 1139,\n        },\n        '%': {\n            x_min: 119,\n            x_max: 1695,\n            y_min: -54,\n            y_max: 1491,\n            ha: 1545,\n            leftSideBearing: 119,\n            advanceWidth: 1821,\n        },\n        '&': {\n            x_min: 88,\n            x_max: 1319,\n            y_min: -34,\n            y_max: 1491,\n            ha: 1525,\n            leftSideBearing: 88,\n            advanceWidth: 1366,\n        },\n        \"'\": {\n            x_min: 90,\n            x_max: 295,\n            y_min: 947,\n            y_max: 1466,\n            ha: 519,\n            leftSideBearing: 90,\n            advanceWidth: 391,\n        },\n        '(': {\n            x_min: 124,\n            x_max: 608,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 124,\n            advanceWidth: 682,\n        },\n        ')': {\n            x_min: 124,\n            x_max: 608,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 124,\n            advanceWidth: 682,\n        },\n        '*': {\n            x_min: 64,\n            x_max: 725,\n            y_min: 867,\n            y_max: 1491,\n            ha: 624,\n            leftSideBearing: 64,\n            advanceWidth: 797,\n        },\n        '+': {\n            x_min: 114,\n            x_max: 1082,\n            y_min: 237,\n            y_max: 1206,\n            ha: 969,\n            leftSideBearing: 114,\n            advanceWidth: 1196,\n        },\n        ',': {\n            x_min: 170,\n            x_max: 387,\n            y_min: -290,\n            y_max: 205,\n            ha: 495,\n            leftSideBearing: 170,\n            advanceWidth: 569,\n        },\n        '-': {\n            x_min: 65,\n            x_max: 618,\n            y_min: 440,\n            y_max: 621,\n            ha: 181,\n            leftSideBearing: 65,\n            advanceWidth: 682,\n        },\n        '.': {\n            x_min: 186,\n            x_max: 391,\n            y_min: 0,\n            y_max: 205,\n            ha: 205,\n            leftSideBearing: 186,\n            advanceWidth: 569,\n        },\n        '/': {\n            x_min: 0,\n            x_max: 569,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        ':': {\n            x_min: 185,\n            x_max: 390,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 185,\n            advanceWidth: 569,\n        },\n        ';': {\n            x_min: 170,\n            x_max: 387,\n            y_min: -290,\n            y_max: 1062,\n            ha: 1352,\n            leftSideBearing: 170,\n            advanceWidth: 569,\n        },\n        '<': {\n            x_min: 112,\n            x_max: 1083,\n            y_min: 226,\n            y_max: 1219,\n            ha: 993,\n            leftSideBearing: 112,\n            advanceWidth: 1196,\n        },\n        '=': {\n            x_min: 114,\n            x_max: 1082,\n            y_min: 417,\n            y_max: 1030,\n            ha: 613,\n            leftSideBearing: 114,\n            advanceWidth: 1196,\n        },\n        '>': {\n            x_min: 112,\n            x_max: 1083,\n            y_min: 226,\n            y_max: 1219,\n            ha: 993,\n            leftSideBearing: 112,\n            advanceWidth: 1196,\n        },\n        '?': {\n            x_min: 90,\n            x_max: 1036,\n            y_min: 0,\n            y_max: 1491,\n            ha: 1491,\n            leftSideBearing: 90,\n            advanceWidth: 1139,\n        },\n        '@': {\n            x_min: 111,\n            x_max: 2005,\n            y_min: -431,\n            y_max: 1493,\n            ha: 1924,\n            leftSideBearing: 111,\n            advanceWidth: 2079,\n        },\n        A: {\n            x_min: -3,\n            x_max: 1369,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: -3,\n            advanceWidth: 1366,\n        },\n        B: {\n            x_min: 150,\n            x_max: 1257,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1366,\n        },\n        C: {\n            x_min: 102,\n            x_max: 1398,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 102,\n            advanceWidth: 1479,\n        },\n        D: {\n            x_min: 158,\n            x_max: 1370,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 158,\n            advanceWidth: 1479,\n        },\n        E: {\n            x_min: 162,\n            x_max: 1256,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 162,\n            advanceWidth: 1366,\n        },\n        F: {\n            x_min: 168,\n            x_max: 1157,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 168,\n            advanceWidth: 1251,\n        },\n        G: {\n            x_min: 109,\n            x_max: 1465,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 109,\n            advanceWidth: 1593,\n        },\n        H: {\n            x_min: 164,\n            x_max: 1314,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 164,\n            advanceWidth: 1479,\n        },\n        I: {\n            x_min: 191,\n            x_max: 385,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 191,\n            advanceWidth: 569,\n        },\n        J: {\n            x_min: 58.84976474807333,\n            x_max: 865,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 58,\n            advanceWidth: 1024,\n        },\n        K: {\n            x_min: 150,\n            x_max: 1362,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1366,\n        },\n        L: {\n            x_min: 150,\n            x_max: 1066,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 150,\n            advanceWidth: 1139,\n        },\n        M: {\n            x_min: 152,\n            x_max: 1551,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 152,\n            advanceWidth: 1706,\n        },\n        N: {\n            x_min: 156,\n            x_max: 1311,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 156,\n            advanceWidth: 1479,\n        },\n        O: {\n            x_min: 99,\n            x_max: 1501,\n            y_min: -25,\n            y_max: 1492,\n            ha: 1517,\n            leftSideBearing: 99,\n            advanceWidth: 1593,\n        },\n        P: {\n            x_min: 158,\n            x_max: 1277,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 158,\n            advanceWidth: 1366,\n        },\n        Q: {\n            x_min: 88,\n            x_max: 1518,\n            y_min: -114,\n            y_max: 1492,\n            ha: 1606,\n            leftSideBearing: 88,\n            advanceWidth: 1593,\n        },\n        R: {\n            x_min: 161,\n            x_max: 1453,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 161,\n            advanceWidth: 1479,\n        },\n        S: {\n            x_min: 92,\n            x_max: 1259,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 92,\n            advanceWidth: 1366,\n        },\n        T: {\n            x_min: 48,\n            x_max: 1210,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 48,\n            advanceWidth: 1251,\n        },\n        U: {\n            x_min: 161,\n            x_max: 1314,\n            y_min: -25,\n            y_max: 1466,\n            ha: 1491,\n            leftSideBearing: 161,\n            advanceWidth: 1479,\n        },\n        V: {\n            x_min: 9,\n            x_max: 1350,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 9,\n            advanceWidth: 1366,\n        },\n        W: {\n            x_min: 25,\n            x_max: 1910,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 25,\n            advanceWidth: 1933,\n        },\n        X: {\n            x_min: 9,\n            x_max: 1353,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 9,\n            advanceWidth: 1366,\n        },\n        Y: {\n            x_min: 6,\n            x_max: 1350,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 6,\n            advanceWidth: 1366,\n        },\n        Z: {\n            x_min: 41,\n            x_max: 1200,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 41,\n            advanceWidth: 1251,\n        },\n        '[': {\n            x_min: 139,\n            x_max: 536,\n            y_min: -407,\n            y_max: 1466,\n            ha: 1873,\n            leftSideBearing: 139,\n            advanceWidth: 569,\n        },\n        '\\\\': {\n            x_min: 0,\n            x_max: 569,\n            y_min: -25,\n            y_max: 1491,\n            ha: 1516,\n            leftSideBearing: 0,\n            advanceWidth: 569,\n        },\n        ']': {\n            x_min: 39,\n            x_max: 436,\n            y_min: -407,\n            y_max: 1466,\n            ha: 1873,\n            leftSideBearing: 39,\n            advanceWidth: 569,\n        },\n        '^': {\n            x_min: 54,\n            x_max: 907,\n            y_min: 690,\n            y_max: 1491,\n            ha: 801,\n            leftSideBearing: 54,\n            advanceWidth: 961,\n        },\n        _: {\n            x_min: -31,\n            x_max: 1162,\n            y_min: -407,\n            y_max: -277,\n            ha: 130,\n            leftSideBearing: -31,\n            advanceWidth: 1139,\n        },\n        '`': {\n            x_min: 89,\n            x_max: 465,\n            y_min: 1194,\n            y_max: 1474,\n            ha: 280,\n            leftSideBearing: 89,\n            advanceWidth: 682,\n        },\n        a: {\n            x_min: 74,\n            x_max: 1052,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 74,\n            advanceWidth: 1139,\n        },\n        b: {\n            x_min: 134,\n            x_max: 1055,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 134,\n            advanceWidth: 1139,\n        },\n        c: {\n            x_min: 80,\n            x_max: 1005,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 80,\n            advanceWidth: 1024,\n        },\n        d: {\n            x_min: 70,\n            x_max: 991,\n            y_min: -24,\n            y_max: 1466,\n            ha: 1490,\n            leftSideBearing: 70,\n            advanceWidth: 1139,\n        },\n        e: {\n            x_min: 75,\n            x_max: 1054,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 75,\n            advanceWidth: 1139,\n        },\n        f: {\n            x_min: 19,\n            x_max: 640,\n            y_min: 0,\n            y_max: 1491,\n            ha: 1491,\n            leftSideBearing: 19,\n            advanceWidth: 569,\n        },\n        g: {\n            x_min: 66,\n            x_max: 1002,\n            y_min: -431,\n            y_max: 1086,\n            ha: 1517,\n            leftSideBearing: 66,\n            advanceWidth: 1139,\n        },\n        h: {\n            x_min: 135,\n            x_max: 1000,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 135,\n            advanceWidth: 1139,\n        },\n        i: {\n            x_min: 136,\n            x_max: 316,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 136,\n            advanceWidth: 455,\n        },\n        j: {\n            x_min: -94,\n            x_max: 314,\n            y_min: -431,\n            y_max: 1466,\n            ha: 1897,\n            leftSideBearing: -94,\n            advanceWidth: 455,\n        },\n        k: {\n            x_min: 136,\n            x_max: 1016,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 136,\n            advanceWidth: 1024,\n        },\n        l: {\n            x_min: 131,\n            x_max: 311,\n            y_min: 0,\n            y_max: 1466,\n            ha: 1466,\n            leftSideBearing: 131,\n            advanceWidth: 455,\n        },\n        m: {\n            x_min: 135,\n            x_max: 1574,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 135,\n            advanceWidth: 1706,\n        },\n        n: {\n            x_min: 135,\n            x_max: 998,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 135,\n            advanceWidth: 1139,\n        },\n        o: {\n            x_min: 68,\n            x_max: 1063,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 68,\n            advanceWidth: 1139,\n        },\n        p: {\n            x_min: 135,\n            x_max: 1057,\n            y_min: -407,\n            y_max: 1086,\n            ha: 1493,\n            leftSideBearing: 135,\n            advanceWidth: 1139,\n        },\n        q: {\n            x_min: 72,\n            x_max: 992,\n            y_min: -407,\n            y_max: 1086,\n            ha: 1493,\n            leftSideBearing: 72,\n            advanceWidth: 1139,\n        },\n        r: {\n            x_min: 133,\n            x_max: 710,\n            y_min: 0,\n            y_max: 1086,\n            ha: 1086,\n            leftSideBearing: 133,\n            advanceWidth: 682,\n        },\n        s: {\n            x_min: 63,\n            x_max: 945,\n            y_min: -24,\n            y_max: 1086,\n            ha: 1110,\n            leftSideBearing: 63,\n            advanceWidth: 1024,\n        },\n        t: {\n            x_min: 36,\n            x_max: 554,\n            y_min: -14,\n            y_max: 1433,\n            ha: 1447,\n            leftSideBearing: 36,\n            advanceWidth: 569,\n        },\n        u: {\n            x_min: 131,\n            x_max: 992,\n            y_min: -24,\n            y_max: 1062,\n            ha: 1086,\n            leftSideBearing: 131,\n            advanceWidth: 1139,\n        },\n        v: {\n            x_min: 26,\n            x_max: 1000,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 26,\n            advanceWidth: 1024,\n        },\n        w: {\n            x_min: 6,\n            x_max: 1463,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 6,\n            advanceWidth: 1479,\n        },\n        x: {\n            x_min: 15,\n            x_max: 1009,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 15,\n            advanceWidth: 1024,\n        },\n        y: {\n            x_min: 33,\n            x_max: 1006,\n            y_min: -431,\n            y_max: 1062,\n            ha: 1493,\n            leftSideBearing: 33,\n            advanceWidth: 1024,\n        },\n        z: {\n            x_min: 40,\n            x_max: 980,\n            y_min: 0,\n            y_max: 1062,\n            ha: 1062,\n            leftSideBearing: 40,\n            advanceWidth: 1024,\n        },\n        '{': {\n            x_min: 57,\n            x_max: 636,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 57,\n            advanceWidth: 684,\n        },\n        '|': {\n            x_min: 188,\n            x_max: 345,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 188,\n            advanceWidth: 532,\n        },\n        '}': {\n            x_min: 47,\n            x_max: 626,\n            y_min: -431,\n            y_max: 1491,\n            ha: 1922,\n            leftSideBearing: 47,\n            advanceWidth: 684,\n        },\n        '~': {\n            x_min: 87,\n            x_max: 1110,\n            y_min: 557,\n            y_max: 885,\n            ha: 328,\n            leftSideBearing: 87,\n            advanceWidth: 1196,\n        },\n    },\n    fontFamily: 'sans-serif',\n    resolution: 2048,\n    generatedOn: '2020-10-18T18:48:11.823Z',\n};\n","export const SerifFont = {\n    smufl: false,\n    name: 'SERIF',\n    spacing: 50,\n    Description: 'Built-in serif font',\n    bold: true,\n    italic: true,\n    monospaced: false,\n    serifs: true,\n    glyphs: {\n        '0': {\n            x_min: 49,\n            x_max: 975,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: 49,\n            advanceWidth: 1024,\n        },\n        '1': {\n            x_min: 227,\n            x_max: 811,\n            y_min: 0,\n            y_max: 1383,\n            ha: 1383,\n            leftSideBearing: 227,\n            advanceWidth: 1024,\n        },\n        '2': {\n            x_min: 61,\n            x_max: 965,\n            y_min: 0,\n            y_max: 1383,\n            ha: 1383,\n            leftSideBearing: 61,\n            advanceWidth: 1024,\n        },\n        '3': {\n            x_min: 88,\n            x_max: 883,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: 88,\n            advanceWidth: 1024,\n        },\n        '4': {\n            x_min: 25,\n            x_max: 967,\n            y_min: 0,\n            y_max: 1384,\n            ha: 1384,\n            leftSideBearing: 25,\n            advanceWidth: 1024,\n        },\n        '5': {\n            x_min: 66,\n            x_max: 898,\n            y_min: -27,\n            y_max: 1409,\n            ha: 1436,\n            leftSideBearing: 66,\n            advanceWidth: 1024,\n        },\n        '6': {\n            x_min: 70,\n            x_max: 958,\n            y_min: -27,\n            y_max: 1401,\n            ha: 1428,\n            leftSideBearing: 70,\n            advanceWidth: 1024,\n        },\n        '7': {\n            x_min: 41,\n            x_max: 920,\n            y_min: -16,\n            y_max: 1356,\n            ha: 1372,\n            leftSideBearing: 41,\n            advanceWidth: 1024,\n        },\n        '8': {\n            x_min: 115,\n            x_max: 911,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: 115,\n            advanceWidth: 1024,\n        },\n        '9': {\n            x_min: 61,\n            x_max: 940,\n            y_min: -41,\n            y_max: 1383,\n            ha: 1424,\n            leftSideBearing: 61,\n            advanceWidth: 1024,\n        },\n        ' ': {\n            x_min: 0,\n            x_max: 0,\n            y_min: 0,\n            y_max: 0,\n            ha: 0,\n            leftSideBearing: 0,\n            advanceWidth: 512,\n        },\n        '!': {\n            x_min: 266,\n            x_max: 488,\n            y_min: -22,\n            y_max: 1383,\n            ha: 1405,\n            leftSideBearing: 266,\n            advanceWidth: 682,\n        },\n        '\"': {\n            x_min: 157.2000021972655,\n            x_max: 678.2500021457677,\n            y_min: 881,\n            y_max: 1385,\n            ha: 504,\n            leftSideBearing: 157,\n            advanceWidth: 836,\n        },\n        '#': {\n            x_min: 10,\n            x_max: 1016,\n            y_min: -1,\n            y_max: 1356,\n            ha: 1357,\n            leftSideBearing: 10,\n            advanceWidth: 1024,\n        },\n        $: {\n            x_min: 90,\n            x_max: 936,\n            y_min: -180,\n            y_max: 1492,\n            ha: 1672,\n            leftSideBearing: 90,\n            advanceWidth: 1024,\n        },\n        '%': {\n            x_min: 125,\n            x_max: 1581,\n            y_min: -30,\n            y_max: 1388,\n            ha: 1418,\n            leftSideBearing: 125,\n            advanceWidth: 1706,\n        },\n        '&': {\n            x_min: 86,\n            x_max: 1536,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 86,\n            advanceWidth: 1593,\n        },\n        \"'\": {\n            x_min: 97.20000219726548,\n            x_max: 273.2500021457677,\n            y_min: 881,\n            y_max: 1385,\n            ha: 504,\n            leftSideBearing: 97,\n            advanceWidth: 369,\n        },\n        '(': {\n            x_min: 98,\n            x_max: 623,\n            y_min: -363,\n            y_max: 1383,\n            ha: 1746,\n            leftSideBearing: 98,\n            advanceWidth: 682,\n        },\n        ')': {\n            x_min: 59,\n            x_max: 584,\n            y_min: -363,\n            y_max: 1383,\n            ha: 1746,\n            leftSideBearing: 59,\n            advanceWidth: 682,\n        },\n        '*': {\n            x_min: 137.96078522291893,\n            x_max: 886.039214777081,\n            y_min: 543,\n            y_max: 1383,\n            ha: 840,\n            leftSideBearing: 137,\n            advanceWidth: 1024,\n        },\n        '+': {\n            x_min: 61,\n            x_max: 1093,\n            y_min: 2,\n            y_max: 1034,\n            ha: 1032,\n            leftSideBearing: 61,\n            advanceWidth: 1155,\n        },\n        ',': {\n            x_min: 115,\n            x_max: 399,\n            y_min: -291,\n            y_max: 208,\n            ha: 499,\n            leftSideBearing: 115,\n            advanceWidth: 512,\n        },\n        '-': {\n            x_min: 80,\n            x_max: 584,\n            y_min: 396,\n            y_max: 525,\n            ha: 129,\n            leftSideBearing: 80,\n            advanceWidth: 682,\n        },\n        '.': {\n            x_min: 143,\n            x_max: 371,\n            y_min: -22,\n            y_max: 205,\n            ha: 227,\n            leftSideBearing: 143,\n            advanceWidth: 512,\n        },\n        '/': {\n            x_min: -17,\n            x_max: 586,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: -17,\n            advanceWidth: 569,\n        },\n        ':': {\n            x_min: 166,\n            x_max: 394,\n            y_min: -22,\n            y_max: 943,\n            ha: 965,\n            leftSideBearing: 166,\n            advanceWidth: 569,\n        },\n        ';': {\n            x_min: 164,\n            x_max: 448,\n            y_min: -290,\n            y_max: 943,\n            ha: 1233,\n            leftSideBearing: 164,\n            advanceWidth: 569,\n        },\n        '<': {\n            x_min: 57,\n            x_max: 1098,\n            y_min: -15,\n            y_max: 1051,\n            ha: 1066,\n            leftSideBearing: 57,\n            advanceWidth: 1155,\n        },\n        '=': {\n            x_min: 61,\n            x_max: 1093,\n            y_min: 246,\n            y_max: 791,\n            ha: 545,\n            leftSideBearing: 61,\n            advanceWidth: 1155,\n        },\n        '>': {\n            x_min: 57,\n            x_max: 1098,\n            y_min: -15,\n            y_max: 1051,\n            ha: 1066,\n            leftSideBearing: 57,\n            advanceWidth: 1155,\n        },\n        '?': {\n            x_min: 139,\n            x_max: 848,\n            y_min: -15,\n            y_max: 1383,\n            ha: 1398,\n            leftSideBearing: 139,\n            advanceWidth: 909,\n        },\n        '@': {\n            x_min: 238,\n            x_max: 1657,\n            y_min: -29,\n            y_max: 1386,\n            ha: 1415,\n            leftSideBearing: 238,\n            advanceWidth: 1886,\n        },\n        A: {\n            x_min: 31,\n            x_max: 1445,\n            y_min: 0,\n            y_max: 1380,\n            ha: 1380,\n            leftSideBearing: 31,\n            advanceWidth: 1479,\n        },\n        B: {\n            x_min: 35,\n            x_max: 1214,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 35,\n            advanceWidth: 1366,\n        },\n        C: {\n            x_min: 57,\n            x_max: 1296,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 57,\n            advanceWidth: 1366,\n        },\n        D: {\n            x_min: 33,\n            x_max: 1403,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 33,\n            advanceWidth: 1479,\n        },\n        E: {\n            x_min: 25,\n            x_max: 1222,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1251,\n        },\n        F: {\n            x_min: 25,\n            x_max: 1119,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1139,\n        },\n        G: {\n            x_min: 66,\n            x_max: 1452,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 66,\n            advanceWidth: 1479,\n        },\n        H: {\n            x_min: 39,\n            x_max: 1438,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 39,\n            advanceWidth: 1479,\n        },\n        I: {\n            x_min: 37,\n            x_max: 642,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 37,\n            advanceWidth: 682,\n        },\n        J: {\n            x_min: 20,\n            x_max: 758,\n            y_min: -28,\n            y_max: 1356,\n            ha: 1384,\n            leftSideBearing: 20,\n            advanceWidth: 797,\n        },\n        K: {\n            x_min: 70,\n            x_max: 1479,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 70,\n            advanceWidth: 1479,\n        },\n        L: {\n            x_min: 25,\n            x_max: 1224,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1251,\n        },\n        M: {\n            x_min: 25,\n            x_max: 1768,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 25,\n            advanceWidth: 1821,\n        },\n        N: {\n            x_min: 25,\n            x_max: 1450,\n            y_min: -22,\n            y_max: 1356,\n            ha: 1378,\n            leftSideBearing: 25,\n            advanceWidth: 1479,\n        },\n        O: {\n            x_min: 70,\n            x_max: 1409,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 70,\n            advanceWidth: 1479,\n        },\n        P: {\n            x_min: 33,\n            x_max: 1110,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 33,\n            advanceWidth: 1139,\n        },\n        Q: {\n            x_min: 70,\n            x_max: 1435,\n            y_min: -364.28571588721996,\n            y_max: 1383,\n            ha: 1747.28571588722,\n            leftSideBearing: 70,\n            advanceWidth: 1479,\n        },\n        R: {\n            x_min: 35,\n            x_max: 1347,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 35,\n            advanceWidth: 1366,\n        },\n        S: {\n            x_min: 86,\n            x_max: 1006,\n            y_min: -28,\n            y_max: 1383,\n            ha: 1411,\n            leftSideBearing: 86,\n            advanceWidth: 1139,\n        },\n        T: {\n            x_min: 35,\n            x_max: 1214,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 35,\n            advanceWidth: 1251,\n        },\n        U: {\n            x_min: 29,\n            x_max: 1444,\n            y_min: -28,\n            y_max: 1356,\n            ha: 1384,\n            leftSideBearing: 29,\n            advanceWidth: 1479,\n        },\n        V: {\n            x_min: 33,\n            x_max: 1428,\n            y_min: -22,\n            y_max: 1356,\n            ha: 1378,\n            leftSideBearing: 33,\n            advanceWidth: 1479,\n        },\n        W: {\n            x_min: 10,\n            x_max: 1906,\n            y_min: -22,\n            y_max: 1356,\n            ha: 1378,\n            leftSideBearing: 10,\n            advanceWidth: 1933,\n        },\n        X: {\n            x_min: 20,\n            x_max: 1449,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 20,\n            advanceWidth: 1479,\n        },\n        Y: {\n            x_min: 45,\n            x_max: 1441,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 45,\n            advanceWidth: 1479,\n        },\n        Z: {\n            x_min: 18,\n            x_max: 1222,\n            y_min: 0,\n            y_max: 1356,\n            ha: 1356,\n            leftSideBearing: 18,\n            advanceWidth: 1251,\n        },\n        '[': {\n            x_min: 180,\n            x_max: 612,\n            y_min: -319,\n            y_max: 1355,\n            ha: 1674,\n            leftSideBearing: 180,\n            advanceWidth: 682,\n        },\n        '\\\\': {\n            x_min: -17,\n            x_max: 586,\n            y_min: -27,\n            y_max: 1383,\n            ha: 1410,\n            leftSideBearing: -17,\n            advanceWidth: 569,\n        },\n        ']': {\n            x_min: 70,\n            x_max: 502,\n            y_min: -319,\n            y_max: 1355,\n            ha: 1674,\n            leftSideBearing: 70,\n            advanceWidth: 682,\n        },\n        '^': {\n            x_min: 49,\n            x_max: 914,\n            y_min: 608,\n            y_max: 1355,\n            ha: 747,\n            leftSideBearing: 49,\n            advanceWidth: 961,\n        },\n        _: {\n            x_min: 0,\n            x_max: 1024,\n            y_min: -255,\n            y_max: -153,\n            ha: 102,\n            leftSideBearing: 0,\n            advanceWidth: 1024,\n        },\n        '`': {\n            x_min: 39,\n            x_max: 499,\n            y_min: 1037,\n            y_max: 1392.509803639748,\n            ha: 355.50980363974804,\n            leftSideBearing: 39,\n            advanceWidth: 682,\n        },\n        a: {\n            x_min: 76,\n            x_max: 905,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 76,\n            advanceWidth: 909,\n        },\n        b: {\n            x_min: 6,\n            x_max: 958,\n            y_min: -20,\n            y_max: 1399,\n            ha: 1419,\n            leftSideBearing: 6,\n            advanceWidth: 1024,\n        },\n        c: {\n            x_min: 51,\n            x_max: 843,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 51,\n            advanceWidth: 909,\n        },\n        d: {\n            x_min: 55,\n            x_max: 1006,\n            y_min: -20,\n            y_max: 1399,\n            ha: 1419,\n            leftSideBearing: 55,\n            advanceWidth: 1024,\n        },\n        e: {\n            x_min: 51,\n            x_max: 868,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 51,\n            advanceWidth: 909,\n        },\n        f: {\n            x_min: 41,\n            x_max: 783,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 41,\n            advanceWidth: 682,\n        },\n        g: {\n            x_min: 57,\n            x_max: 963,\n            y_min: -446,\n            y_max: 942,\n            ha: 1388,\n            leftSideBearing: 57,\n            advanceWidth: 1024,\n        },\n        h: {\n            x_min: 18,\n            x_max: 997,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 18,\n            advanceWidth: 1024,\n        },\n        i: {\n            x_min: 33,\n            x_max: 516,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 33,\n            advanceWidth: 569,\n        },\n        j: {\n            x_min: -142,\n            x_max: 397,\n            y_min: -446,\n            y_max: 1399,\n            ha: 1845,\n            leftSideBearing: -142,\n            advanceWidth: 569,\n        },\n        k: {\n            x_min: 14,\n            x_max: 1029,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 14,\n            advanceWidth: 1024,\n        },\n        l: {\n            x_min: 39,\n            x_max: 523,\n            y_min: 0,\n            y_max: 1399,\n            ha: 1399,\n            leftSideBearing: 39,\n            advanceWidth: 569,\n        },\n        m: {\n            x_min: 33,\n            x_max: 1587,\n            y_min: 0,\n            y_max: 944,\n            ha: 944,\n            leftSideBearing: 33,\n            advanceWidth: 1593,\n        },\n        n: {\n            x_min: 33,\n            x_max: 993,\n            y_min: 0,\n            y_max: 944,\n            ha: 944,\n            leftSideBearing: 33,\n            advanceWidth: 1024,\n        },\n        o: {\n            x_min: 59,\n            x_max: 963,\n            y_min: -20,\n            y_max: 942,\n            ha: 962,\n            leftSideBearing: 59,\n            advanceWidth: 1024,\n        },\n        p: {\n            x_min: 10,\n            x_max: 964,\n            y_min: -443,\n            y_max: 944,\n            ha: 1387,\n            leftSideBearing: 10,\n            advanceWidth: 1024,\n        },\n        q: {\n            x_min: 49,\n            x_max: 999,\n            y_min: -443,\n            y_max: 942.0135137169275,\n            ha: 1385.0135137169275,\n            leftSideBearing: 49,\n            advanceWidth: 1024,\n        },\n        r: {\n            x_min: 10,\n            x_max: 685,\n            y_min: 0,\n            y_max: 944,\n            ha: 944,\n            leftSideBearing: 10,\n            advanceWidth: 682,\n        },\n        s: {\n            x_min: 104,\n            x_max: 713,\n            y_min: -20,\n            y_max: 942.0263161804552,\n            ha: 962.0263161804552,\n            leftSideBearing: 104,\n            advanceWidth: 797,\n        },\n        t: {\n            x_min: 27,\n            x_max: 572,\n            y_min: -18,\n            y_max: 1186,\n            ha: 1204,\n            leftSideBearing: 27,\n            advanceWidth: 569,\n        },\n        u: {\n            x_min: 18,\n            x_max: 981,\n            y_min: -21,\n            y_max: 921,\n            ha: 942,\n            leftSideBearing: 18,\n            advanceWidth: 1024,\n        },\n        v: {\n            x_min: 39,\n            x_max: 976,\n            y_min: -28,\n            y_max: 921,\n            ha: 949,\n            leftSideBearing: 39,\n            advanceWidth: 1024,\n        },\n        w: {\n            x_min: 43,\n            x_max: 1423,\n            y_min: -28,\n            y_max: 921,\n            ha: 949,\n            leftSideBearing: 43,\n            advanceWidth: 1479,\n        },\n        x: {\n            x_min: 35,\n            x_max: 989,\n            y_min: 0,\n            y_max: 921,\n            ha: 921,\n            leftSideBearing: 35,\n            advanceWidth: 1024,\n        },\n        y: {\n            x_min: 29,\n            x_max: 976,\n            y_min: -445,\n            y_max: 921,\n            ha: 1366,\n            leftSideBearing: 29,\n            advanceWidth: 1024,\n        },\n        z: {\n            x_min: 55,\n            x_max: 855,\n            y_min: 0,\n            y_max: 921,\n            ha: 921,\n            leftSideBearing: 55,\n            advanceWidth: 909,\n        },\n        '{': {\n            x_min: 205,\n            x_max: 717,\n            y_min: -377,\n            y_max: 1397,\n            ha: 1774,\n            leftSideBearing: 205,\n            advanceWidth: 983,\n        },\n        '|': {\n            x_min: 137,\n            x_max: 273,\n            y_min: -512,\n            y_max: 1535,\n            ha: 2047,\n            leftSideBearing: 137,\n            advanceWidth: 410,\n        },\n        '}': {\n            x_min: 266,\n            x_max: 778,\n            y_min: -377,\n            y_max: 1397,\n            ha: 1774,\n            leftSideBearing: 266,\n            advanceWidth: 983,\n        },\n        '~': {\n            x_min: 82,\n            x_max: 1028,\n            y_min: 380,\n            y_max: 666,\n            ha: 286,\n            leftSideBearing: 82,\n            advanceWidth: 1108,\n        },\n    },\n    fontFamily: 'serif',\n    resolution: 2048,\n    generatedOn: '2020-10-18T19:03:12.514Z',\n};\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n//\n// Utility methods used by the rest of the VexFlow codebase.\nimport { Flow } from './flow';\nimport { log, RuntimeError } from './util';\nexport class Vex {\n    // Users of `Vex.forEach(a, fn)` should use `Array.prototype.forEach()` instead.\n    // static forEach<T>(arr: T[], callbackFn: (value: T, index: number, array: T[]) => void) {\n    //   arr.forEach(callbackFn);\n    // }\n    /**\n     * Take `arr` and return a new list consisting of the sorted, unique,\n     * contents of arr. Does not modify `arr`.\n     */\n    // eslint-disable-next-line\n    static sortAndUnique(arr, cmp, eq) {\n        if (arr.length > 1) {\n            const newArr = [];\n            let last;\n            arr.sort(cmp);\n            for (let i = 0; i < arr.length; ++i) {\n                if (i === 0 || !eq(arr[i], last)) {\n                    newArr.push(arr[i]);\n                }\n                last = arr[i];\n            }\n            return newArr;\n        }\n        else {\n            return arr;\n        }\n    }\n    /** Check if array `arr` contains `obj`. */\n    // eslint-disable-next-line\n    static contains(arr, obj) {\n        let i = arr.length;\n        while (i--) {\n            if (arr[i] === obj) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Get the 2D Canvas context from DOM element `canvas_sel`.\n    static getCanvasContext(canvasSelector) {\n        if (!canvasSelector) {\n            throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasSelector);\n        }\n        const canvas = document.getElementById(canvasSelector);\n        if (!(canvas && canvas.getContext)) {\n            throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n        }\n        return canvas.getContext('2d');\n    }\n    /** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\n    // eslint-disable-next-line\n    static benchmark(s, f) {\n        const start_time = new Date().getTime();\n        f();\n        const elapsed = new Date().getTime() - start_time;\n        log(s, elapsed + 'ms');\n    }\n    // Get stack trace.\n    static stackTrace() {\n        const err = new Error();\n        return err.stack;\n    }\n}\nVex.Flow = Flow;\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\n// @author Ron B. Yeh\n//\n// A smaller initial bundle that supports dynamic importing of music engraving fonts.\n//\n// vexflow-core.ts is the entry point for output file vexflow-core.js.\n// It does not preload / bundle any music fonts by default.\n// All music fonts will be loaded dynamically via: `Flow.fetchMusicFont(fontName)`\n// Remember to call `Flow.setMusicFont(fontName)` after fetching the font module.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Flow } from '../src/flow';\nimport { Font } from '../src/font';\nimport { loadTextFonts } from '../src/fonts/textfonts';\nimport { globalObject, RuntimeError } from '../src/util';\n// fontModules maps font names => font module paths, which can be loaded at runtime by vexflow-core.js.\n// ADD_MUSIC_FONT\nconst fontModules = {\n    Bravura: './vexflow-font-bravura.js',\n    Gonville: './vexflow-font-gonville.js',\n    Petaluma: './vexflow-font-petaluma.js',\n    Leland: './vexflow-font-leland.js',\n    Custom: './vexflow-font-custom.js',\n};\n/**\n * @param fontName the name of the music font to load.\n * @param fontModuleOrPath Either a font module object (containing a .data and .metrics properties) or a path to a font module.\n * The font module is assumed to be in the same directory as the vexflow-core.js entry point.\n *\n * This replaces the default empty implementation in flow.ts.\n */\nFlow.fetchMusicFont = (fontName, fontModuleOrPath) => __awaiter(void 0, void 0, void 0, function* () {\n    const font = Font.load(fontName);\n    // If the font has already been loaded before we do nothing.\n    if (font.hasData()) {\n        return;\n    }\n    if (!fontModuleOrPath) {\n        // Determine the font module path.\n        if (fontName in fontModules) {\n            fontModuleOrPath = fontModules[fontName];\n        }\n        else {\n            throw new RuntimeError('UnknownFont', `Music font ${fontName} does not exist.`);\n        }\n    }\n    let fontModule;\n    if (typeof fontModuleOrPath === 'string') {\n        const module = yield import(/* webpackIgnore: true */ fontModuleOrPath);\n        const g = globalObject();\n        const VexFlowFont = g['VexFlowFont'];\n        if (typeof VexFlowFont !== 'undefined' && typeof VexFlowFont[fontName] !== 'undefined') {\n            // CJS font modules will set a global variable named: VexFlowFont.Bravura | VexFlowFont.Gonville | VexFlowFont.Petaluma | etc.\n            fontModule = VexFlowFont[fontName];\n        }\n        else {\n            // ESM font modules will export an object named \"Font\" with properties named \"data\" and \"metrics\".\n            // See vexflow-font-bravura.ts for an example.\n            fontModule = module.Font;\n        }\n    }\n    else {\n        fontModule = fontModuleOrPath;\n    }\n    font.setData(fontModule.data);\n    font.setMetrics(fontModule.metrics);\n});\n// Load the two text fonts that ChordSymbol & Annotation use.\nloadTextFonts();\n// Re-export all exports from index.ts.\nexport * from '../src/index';\n// Also collect all exports into a default export for CJS projects.\nexport * as default from '../src/index';\n","// [VexFlow](https://vexflow.com) - Copyright (c) Mohit Muthanna 2010.\n// MIT License\nimport { Font } from '../font';\nimport { TextFormatter } from '../textformatter';\nimport { PetalumaScriptFont } from './petalumascript_glyphs';\nimport { RobotoSlabFont } from './robotoslab_glyphs';\nimport { SansFontBold } from './sans_bold_text_metrics';\nimport { SansFont } from './sans_text_metrics';\nimport { SerifFont } from './serif_text_metrics';\nexport function loadTextFonts() {\n    // Sans-serif fallback font, very close to Arial\n    {\n        const fontData = SansFontBold;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        // Usually @ is the tallest and widest character, although not the\n        // highest since it starts below the baseline.\n        const maxSizeGlyph = '@';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: true,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: false,\n            description: 'Generic SANS font',\n        });\n    }\n    // Sans-serif fallback font, very close to Arial\n    {\n        const fontData = SansFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        // Usually @ is the tallest and widest character, although not the\n        // highest since it starts below the baseline.\n        const maxSizeGlyph = '@';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: false,\n            description: 'Generic SANS font',\n        });\n    }\n    // Serif fallback font, very close to Times\n    {\n        const fontData = SerifFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        // M is wider, but H is taller. :-)\n        // Lowercase b is also taller in this font.\n        const maxSizeGlyph = '@';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: true,\n            description: 'Generic SERIF font',\n        });\n    }\n    // Roboto Slab\n    {\n        const fontData = RobotoSlabFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        // Previously we used 'H', but it isn't actually the tallest or the widest.\n        // Interestingly, the lowercase 'b' is the tallest glyph.\n        const maxSizeGlyph = 'b';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: true,\n            description: 'Text font to pair with the Bravura / Gonville music fonts.',\n        });\n    }\n    // PetalumaScript\n    {\n        const fontData = PetalumaScriptFont;\n        const { fontFamily, resolution, glyphs } = fontData;\n        Font.load(fontFamily, fontData);\n        // M is wider, but H is taller. :-)\n        // Lowercase b is also taller in this font.\n        const maxSizeGlyph = 'b';\n        TextFormatter.registerInfo({\n            family: fontFamily,\n            resolution,\n            glyphs,\n            maxSizeGlyph,\n            monospaced: false,\n            bold: false,\n            italic: false,\n            superscriptOffset: 0.66,\n            subscriptOffset: 0.66,\n            serifs: false,\n            description: 'Text font to pair with the Petaluma music font.',\n        });\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","Function","e","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","isCategory","category","checkAncestors","constructorFcn","constructor","CATEGORY","getPrototypeOf","isAccidental","Category","Accidental","isAnnotation","Annotation","isBarline","Barline","isDot","Dot","isGraceNote","GraceNote","isGraceNoteGroup","GraceNoteGroup","isNote","Note","isRenderContext","RenderContext","isStaveNote","StaveNote","isStemmableNote","StemmableNote","isTabNote","TabNote","RuntimeError","Error","code","message","super","globalObject","self","defined","x","undefined","log","block","args","line","Array","slice","join","console","warn","err","stack","midLine","a","b","mid_line","n","parseInt","prefix","text","normalizeAngle","Math","PI","Fraction","static","Number","isNaN","t","GCD","length","LCM","shift","LCMM","numerator","denominator","set","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","__staticFractionA","copy","__staticFractionB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","floor","remainder","makeAbs","abs","toString","toSimplifiedString","__staticFractionTmp","toMixedString","s","q","f","parse","str","i","split","BoundingBox","that","y","w","h","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","boundingBox","new_x","new_y","new_w","max","new_h","BoundingBoxComputation","x1","NaN","y1","x2","y2","getX1","getY1","width","height","addPoint","addX","addY","addQuadraticCurve","p0x","p0y","p1x","p1y","p2x","p2y","p01x","denom","it","p01y","addBezierCurve","p3x","p3y","p0","p1","p2","p3","pow","c","b2ac","t1","sqrt","t2","FontWeight","FontStyle","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","fontParser","Fonts","Font","fontSize","SIZE","_a","scaleToPxFrom","pt","parseFloat","unit","replace","toLowerCase","size","weight","style","fromCSSString","family","SANS_SERIF","NORMAL","cssFontShorthand","document","createElement","font","fontFamily","fontWeight","fontStyle","fontInfo","st","trim","wt","sz","scaleFactor","parsedWeight","ITALIC","fontName","woffURL","includeWoff2","fontFace","FontFace","load","fonts","host","WEB_FONT_HOST","files","WEB_FONT_FILES","fontPath","loadWebFont","data","metrics","setData","setMetrics","name","getName","getData","getMetrics","hasData","getResolution","resolution","getGlyphs","glyphs","lookupMetric","defaultValue","keyParts","currObj","SERIF","px","em","in","mm","cm","PetalumaScript","Index","id","type","class","Registry","defaultRegistry","registry","index","clear","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","_b","getElementsByAttribute","attribute","index_attr","index_attr_val","keys","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","Element","ID","children","attrs","newID","getCategory","rendered","getDefaultRegistry","addChildElement","child","push","setStyle","setGroupStyle","forEach","getStyle","applyStyle","context","save","shadowColor","setShadowColor","shadowBlur","setShadowBlur","fillStyle","setFillStyle","strokeStyle","setStrokeStyle","lineWidth","setLineWidth","restoreStyle","restore","drawWithStyle","checkContext","draw","hasClass","indexOf","addClass","removeClass","arr","splice","isRendered","setRendered","getAttributes","getSVGElement","suffix","element","oldID","getBoundingBox","getContext","setContext","setFont","toCSSString","textFont","defaultTextFont","TEXT_FONT","fontIsObject","fontIsString","fontIsUndefined","sizeWeightStyleAreUndefined","assign","validate","getFont","resetFont","setFontSize","getFontSize","fontSizeInPoints","convertSizeToPointValue","fontSizeInPixels","convertSizeToPixelValue","RESOLUTION","durations","durationAliases","keySignatures","C","num","Am","F","acc","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","G","Em","D","Bm","A","E","B","clefs","treble","line_shift","bass","tenor","alto","soprano","percussion","subbass","french","notesInfo","int_val","CN","accidental","CB","CBB","DN","DB","DBB","EN","EB","EBB","FN","FB","FBB","GN","GB","GBB","AN","AB","ABB","BN","BB","BBB","R","rest","X","octave","shift_right","accidentals","parenRightPaddingAdjustment","bb","db","bs","bss","bbs","ashs","afhf","accSagittal5v7KleismaUp","accSagittal5v7KleismaDown","accSagittal5CommaUp","accSagittal5CommaDown","accSagittal7CommaUp","accSagittal7CommaDown","accSagittal25SmallDiesisUp","accSagittal25SmallDiesisDown","accSagittal35MediumDiesisUp","accSagittal35MediumDiesisDown","accSagittal11MediumDiesisUp","accSagittal11MediumDiesisDown","accSagittal11LargeDiesisUp","accSagittal11LargeDiesisDown","accSagittal35LargeDiesisUp","accSagittal35LargeDiesisDown","accSagittalSharp25SDown","accSagittalFlat25SUp","accSagittalSharp7CDown","accSagittalFlat7CUp","accSagittalSharp5CDown","accSagittalFlat5CUp","accSagittalSharp5v7kDown","accSagittalFlat5v7kUp","accSagittalSharp","accSagittalFlat","accSagittalSharp5v7kUp","accSagittalFlat5v7kDown","accSagittalSharp5CUp","accSagittalFlat5CDown","accSagittalSharp7CUp","accSagittalFlat7CDown","accSagittalSharp25SUp","accSagittalFlat25SDown","accSagittalSharp35MUp","accSagittalFlat35MDown","accSagittalSharp11MUp","accSagittalFlat11MDown","accSagittalSharp11LUp","accSagittalFlat11LDown","accSagittalSharp35LUp","accSagittalFlat35LDown","accSagittalDoubleSharp25SDown","accSagittalDoubleFlat25SUp","accSagittalDoubleSharp7CDown","accSagittalDoubleFlat7CUp","accSagittalDoubleSharp5CDown","accSagittalDoubleFlat5CUp","accSagittalDoubleSharp5v7kDown","accSagittalDoubleFlat5v7kUp","accSagittalDoubleSharp","accSagittalDoubleFlat","accSagittal7v11KleismaUp","accSagittal7v11KleismaDown","accSagittal17CommaUp","accSagittal17CommaDown","accSagittal55CommaUp","accSagittal55CommaDown","accSagittal7v11CommaUp","accSagittal7v11CommaDown","accSagittal5v11SmallDiesisUp","accSagittal5v11SmallDiesisDown","accSagittalSharp5v11SDown","accSagittalFlat5v11SUp","accSagittalSharp7v11CDown","accSagittalFlat7v11CUp","accSagittalSharp55CDown","accSagittalFlat55CUp","accSagittalSharp17CDown","accSagittalFlat17CUp","accSagittalSharp7v11kDown","accSagittalFlat7v11kUp","accSagittalSharp7v11kUp","accSagittalFlat7v11kDown","accSagittalSharp17CUp","accSagittalFlat17CDown","accSagittalSharp55CUp","accSagittalFlat55CDown","accSagittalSharp7v11CUp","accSagittalFlat7v11CDown","accSagittalSharp5v11SUp","accSagittalFlat5v11SDown","accSagittalDoubleSharp5v11SDown","accSagittalDoubleFlat5v11SUp","accSagittalDoubleSharp7v11CDown","accSagittalDoubleFlat7v11CUp","accSagittalDoubleSharp55CDown","accSagittalDoubleFlat55CUp","accSagittalDoubleSharp17CDown","accSagittalDoubleFlat17CUp","accSagittalDoubleSharp7v11kDown","accSagittalDoubleFlat7v11kUp","accSagittal23CommaUp","accSagittal23CommaDown","accSagittal5v19CommaUp","accSagittal5v19CommaDown","accSagittal5v23SmallDiesisUp","accSagittal5v23SmallDiesisDown","accSagittalSharp5v23SDown","accSagittalFlat5v23SUp","accSagittalSharp5v19CDown","accSagittalFlat5v19CUp","accSagittalSharp23CDown","accSagittalFlat23CUp","accSagittalSharp23CUp","accSagittalFlat23CDown","accSagittalSharp5v19CUp","accSagittalFlat5v19CDown","accSagittalSharp5v23SUp","accSagittalFlat5v23SDown","accSagittalDoubleSharp5v23SDown","accSagittalDoubleFlat5v23SUp","accSagittalDoubleSharp5v19CDown","accSagittalDoubleFlat5v19CUp","accSagittalDoubleSharp23CDown","accSagittalDoubleFlat23CUp","accSagittal19SchismaUp","accSagittal19SchismaDown","accSagittal17KleismaUp","accSagittal17KleismaDown","accSagittal143CommaUp","accSagittal143CommaDown","accSagittal11v49CommaUp","accSagittal11v49CommaDown","accSagittal19CommaUp","accSagittal19CommaDown","accSagittal7v19CommaUp","accSagittal7v19CommaDown","accSagittal49SmallDiesisUp","accSagittal49SmallDiesisDown","accSagittal23SmallDiesisUp","accSagittal23SmallDiesisDown","accSagittal5v13MediumDiesisUp","accSagittal5v13MediumDiesisDown","accSagittal11v19MediumDiesisUp","accSagittal11v19MediumDiesisDown","accSagittal49MediumDiesisUp","accSagittal49MediumDiesisDown","accSagittal5v49MediumDiesisUp","accSagittal5v49MediumDiesisDown","accSagittal49LargeDiesisUp","accSagittal49LargeDiesisDown","accSagittal11v19LargeDiesisUp","accSagittal11v19LargeDiesisDown","accSagittal5v13LargeDiesisUp","accSagittal5v13LargeDiesisDown","accSagittalSharp23SDown","accSagittalFlat23SUp","accSagittalSharp49SDown","accSagittalFlat49SUp","accSagittalSharp7v19CDown","accSagittalFlat7v19CUp","accSagittalSharp19CDown","accSagittalFlat19CUp","accSagittalSharp11v49CDown","accSagittalFlat11v49CUp","accSagittalSharp143CDown","accSagittalFlat143CUp","accSagittalSharp17kDown","accSagittalFlat17kUp","accSagittalSharp19sDown","accSagittalFlat19sUp","accSagittalSharp19sUp","accSagittalFlat19sDown","accSagittalSharp17kUp","accSagittalFlat17kDown","accSagittalSharp143CUp","accSagittalFlat143CDown","accSagittalSharp11v49CUp","accSagittalFlat11v49CDown","accSagittalSharp19CUp","accSagittalFlat19CDown","accSagittalSharp7v19CUp","accSagittalFlat7v19CDown","accSagittalSharp49SUp","accSagittalFlat49SDown","accSagittalSharp23SUp","accSagittalFlat23SDown","accSagittalSharp5v13MUp","accSagittalFlat5v13MDown","accSagittalSharp11v19MUp","accSagittalFlat11v19MDown","accSagittalSharp49MUp","accSagittalFlat49MDown","accSagittalSharp5v49MUp","accSagittalFlat5v49MDown","accSagittalSharp49LUp","accSagittalFlat49LDown","accSagittalSharp11v19LUp","accSagittalFlat11v19LDown","accSagittalSharp5v13LUp","accSagittalFlat5v13LDown","accSagittalDoubleSharp23SDown","accSagittalDoubleFlat23SUp","accSagittalDoubleSharp49SDown","accSagittalDoubleFlat49SUp","accSagittalDoubleSharp7v19CDown","accSagittalDoubleFlat7v19CUp","accSagittalDoubleSharp19CDown","accSagittalDoubleFlat19CUp","accSagittalDoubleSharp11v49CDown","accSagittalDoubleFlat11v49CUp","accSagittalDoubleSharp143CDown","accSagittalDoubleFlat143CUp","accSagittalDoubleSharp17kDown","accSagittalDoubleFlat17kUp","accSagittalDoubleSharp19sDown","accSagittalDoubleFlat19sUp","accSagittalShaftUp","accSagittalShaftDown","accSagittalAcute","accSagittalGrave","accSagittal1MinaUp","accSagittal1MinaDown","accSagittal2MinasUp","accSagittal2MinasDown","accSagittal1TinaUp","accSagittal1TinaDown","accSagittal2TinasUp","accSagittal2TinasDown","accSagittal3TinasUp","accSagittal3TinasDown","accSagittal4TinasUp","accSagittal4TinasDown","accSagittal5TinasUp","accSagittal5TinasDown","accSagittal6TinasUp","accSagittal6TinasDown","accSagittal7TinasUp","accSagittal7TinasDown","accSagittal8TinasUp","accSagittal8TinasDown","accSagittal9TinasUp","accSagittal9TinasDown","accSagittalFractionalTinaUp","accSagittalFractionalTinaDown","accidentalNarrowReversedFlat","accidentalNarrowReversedFlatAndFlat","accidentalWilsonPlus","accidentalWilsonMinus","articulations","between_lines","av","aboveCode","belowCode","ao","ah","am","ornaments","mordent","mordent_inverted","turn","turn_inverted","tr","upprall","downprall","prallup","pralldown","upmordent","downmordent","lineprall","prallprall","scoop","doit","fall","doitLong","fallLong","bend","plungerClosed","plungerOpen","flip","jazzTurn","smear","Tables","MUSIC_FONT_STACK","clef","keyOctaveGlyph","params","options","octave_shift","duration","sanitizeDuration","pieces","toUpperCase","clefProperties","stroke","int_value","customNoteHeadProps","glyphName","codeNoteHead","displaced","integer","noteValue","fret","scale","glyph","shift_y","glyphMetrics","Glyph","TABLATURE_FONT_SCALE","textWidth","getWidth","artic","spec","keySpec","notes","acc_list","durationNumber","durationToFraction","ticks","durationCodes","glyphTypeProperties","code_head","common","NOTATION_FONT_SCALE","SOFTMAX_FACTOR","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","RENDER_PRECISION_PLACES","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","accidentalMap","accidentalColumnsTable","second_on_bottom","spaced_out_tetrachord","spaced_out_pentachord","very_spaced_out_pentachord","spaced_out_hexachord","very_spaced_out_hexachord","unicode","sharp","String","fromCharCode","flat","natural","triangle","degrees","circle","validTypes","m","ci","cx","sf","sb","sq","tu","td","TIME4_4","num_beats","beat_value","stem","flag","stem_up_extension","stem_down_extension","tabnote_stem_up_extension","tabnote_stem_down_extension","dot_shiftY","line_above","line_below","position","ledger_code_head","beam_count","stem_beam_extension","code_flag_upstem","code_flag_downstem","OutlineCode","ModifierPosition","GlyphCacheEntry","fontStack","point","loadMetrics","bbox","getOutlineBoundingBox","outline","x_shift","y_shift","lookupFontMetric","GlyphOutline","originX","originY","precision","round","nextX","nextY","parts","MOVE","LINE","QUADRATIC","BEZIER","lookupGlyph","x_min","x_max","ha","cached_outline","ctx","x_pos","y_pos","cache","lookup","customScale","renderOutline","go","beginPath","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","fill","bboxComp","penX","penY","topGlyphs","botGlyphs","originShift","setOptions","reset","getCode","setPoint","setStave","stave","getXShift","setXShift","getYshift","setYShift","checkMetrics","metricsScale","setOriginX","xShift","setOriginY","yShift","setOrigin","render","xPos","yPos","checkStave","renderToStave","getYForGlyphs","Map","entries","CURRENT_CACHE_KEY","entry","Modifier","Position","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","LEFT","right","RIGHT","text_line","spacingFromNextModifier","setWidth","getNote","note","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","modifierContext","checkModifierContext","setModifierContext","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","alignSubNotesWithNote","subNotes","tickContext","getTickContext","getStave","subNoteXOffset","modLeftPx","modRightPx","subNote","subTickContext","setXOffset","Music","NUM_TONES","canonical_notes","roots","root_values","root_indices","diatonic_intervals","diatonic_accidentals","unison","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","noteValues","root_index","cn","cb","cbb","dn","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","rootValue","multiplier","reverse_interval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySignature","keySigParts","scaleName","keySigString","noteLocation","scaleMap","rootName","noteName","L","DEBUG","state","musicFont","currentMusicFont","noteheadAccidentalPadding","leftShift","left_shift","accidentalSpacing","additionalPadding","accList","prevNote","shiftL","props","getKeyProps","getLeftDisplacedHeadPx","lineSpace","getSpacingBetweenLines","getYForLine","accLine","sort","lineList","previousLine","accShift","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","totalShift","accCount","lastAccOnLine","clearance","clearanceRequired","collision","voices","tickPositions","tickNoteMap","voice","tickPosition","getTickables","shouldIgnoreTicks","notesAtPosition","getTicks","music","scaleMapKey","tickPos","tickables","modifiedPitches","processNote","isRest","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","getModifiers","modifier","addModifier","getGraceNotes","render_options","font_scale","parenLeftPadding","parenRightPadding","accidentalCodes","cautionary","fontScale","parenLeft","parenRight","parenWidth","setAsCautionary","start","getModifierStartXY","accX","accY","Stem","UP","DOWN","WIDTH","HEIGHT","stem_up_y_offset","stem_down_y_offset","stem_up_y_base_offset","stem_down_y_base_offset","x_begin","x_end","y_top","y_bottom","stem_extension","stem_direction","hide","isStemlet","stemletHeight","renderHeightAdjustment","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","getHeight","y_offset","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","baseY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stem_x","stem_y","y_base_offset","stemletYOffset","openGroup","pointerBBox","closeGroup","TextFormatter","textWidthCache","textHeightCache","registeredFonts","formatterInfo","requestedFont","candidates","requestedFamilies","requestedFamily","startsWith","formatter","values","bold","isBold","italic","isItalic","perfectMatch","find","partialMatch","fontSizeInPt","overwrite","serifs","monospaced","superscriptOffset","subscriptOffset","maxSizeGlyph","cacheKey","updateParams","localHeightCache","updateCacheKey","BOLD","getGlyphMetrics","character","maxHeight","getWidthForCharacterInEm","advanceWidth","getYForCharacterInPx","rv","yMin","yMax","y_min","y_max","getYForStringInPx","extent","curY","getWidthForTextInEm","cachedWidths","getWidthForTextInPx","AnnotationHorizontalJustify","AnnotationVerticalJustify","minAnnotationPadding","annotations","leftWidth","rightWidth","maxLeftGlyphWidth","maxRightGlyphWidth","annotation","textFormatter","create","verticalSpaceNeeded","glyphWidth","getGlyphProps","horizontalJustification","stemDirection","hasStem","getStemDirection","lines","draw_stem","getStem","getNoteType","getNumLines","verticalJustification","VerticalJustify","TOP","noteLine","getLineNumber","leastString","top_text_line","BOTTOM","greatestString","curBottom","rightOverlap","right_shift","leftOverlap","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","HorizontalJustifyString","text_width","text_height","getStemX","stem_ext","spacing","has_stem","checkStem","getYs","reduce","yt","getYForTopText","getYForBottomText","getTopLineTopY","extents","getStemExtents","fillText","HorizontalJustify","centerStem","CENTER_STEM","top","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","Articulation","maxGlyphWidth","getIncrement","articulation","increment","curTop","maxWidth","articWidth","overlap","builder","articNameToCode","staccato","tenuto","accent","articString","getFactory","articulationCodes","endsWith","setBetweenLines","betweenLines","textLine","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","isOnStemTip","getInitialOffset","padding","stemTipY","stemBaseY","getTopY","INITIAL_OFFSET","getBottomY","offsetDirection","articLine","snappedLine","snapLineToStaff","setRawFont","drawDot","color","arc","closePath","Tickable","_preFormatted","_postFormatted","intrinsicTicks","tickMultiplier","modifiers","tupletStack","align_center","center_x_shift","ignore_ticks","formatterMetrics","freedom","iterations","space","used","mean","deviation","setIgnoreTicks","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","centerXShift","setCenterAlignment","getVoice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","getNoteCount","getNotesOccupied","applyTickMultiplier","pop","setTuplet","addToModifierContext","mc","addMember","setTickContext","tc","preFormat","preFormatted","postFormat","postFormatted","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","xStart","leftDisplacedHeadPx","xPre1","xAbs","xPost1","notePx","xPost2","rightDisplacedHeadPx","xEnd","xFreedomRight","xWidth","yy","spaceDeviation","durationString","dots","noteStruct","durationProps","parseDuration","customTypes","durationToTicks","currentTicks","parsedNoteStruct","parseNoteStruct","JSON","stringify","keyProps","noteType","duration_override","glyphProps","customGlyphs","playNote","annotation_spacing","glyph_font_scale","stroke_px","getPlayNote","setPlayNote","addStroke","setYs","getRightDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","isTopNote","getLineForRest","getGlyph","getGlyphWidth","getDuration","isDotted","getModifiersByType","getBeam","beam","checkBeam","hasBeam","setBeam","signature","filter","getRightParenthesisPx","getLeftParenthesisPx","getFirstDotPx","getMembers","getState","glyphPx","getNoteStartX","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","StaveModifierPosition","BarlineType","ChordSymbolHorizontalJustify","ChordSymbolVerticalJustify","SymbolTypes","SymbolModifiers","StaveModifier","placeGlyphOnLine","customShift","getPadding","setPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","typeString","single","SINGLE","double","DOUBLE","end","END","repeatBegin","REPEAT_BEGIN","repeatEnd","REPEAT_END","repeatBoth","REPEAT_BOTH","none","NONE","thickness","TYPE","widths","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","BEGIN","setType","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","double_bar","staveCtx","botY","getBottomLineBottomY","fillRect","begin","dot_x","dot_radius","dot_y","BarNote","barline","Bend","bends","last_width","stringPos","release","phrase","tap","line_width","line_style","bend_width","release_width","updateWidth","setTap","getText","getTextHeight","totalWidth","additional_width","draw_width","lowestY","bend_height","annotation_y","renderBend","cp_x","cp_y","renderRelease","renderArrowHead","yBase","renderText","render_x","measureText","last_bend","last_bend_draw_width","last_drawn_width","ChordSymbol","superSubRatio","global","NO_TEXT_FORMAT","val","noFormat","glyphCode","engravingFontResolution","spacingBetweenBlocks","metric","getMetricForGlyph","yOffset","leftSideBearing","kerningOffset","chordSymbol","lowerKerningText","upperKerningText","symbolModifier","SUPERSCRIPT","SUBSCRIPT","minPadding","symbols","nonSuperWidth","symbol","fontAdj","scaleSize","glyphAdj","symbolWidth","lineSpaces","vAlign","j","symbolBlocks","sup","isSuperscript","sub","isSubscript","superSubScale","adj","symbolType","GLYPH","superSubFontSize","getWidthForGlyph","getYShiftForGlyph","getXShiftForGlyph","TEXT","getYOffsetForText","over","prev","setEnableKerning","updateKerningAdjustments","updateOverBarAdjustments","getVertical","getReportWidth","getHorizontal","horizontal","vertical","useKerning","reportWidth","setReportWidth","barIndex","findIndex","xoff","yoff","symIndex","accum","getKerningAdjustment","currSymbol","prevSymbol","adjustment","preKernUpper","preKernLower","some","xx","kerningOffsetPixels","getSymbolBlock","_c","symbolBlock","glyphArgs","glyphPoints","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","addGlyphSuperscript","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","setHorizontal","hj","stem_base","isSuper","isSub","smallerFontSize","diminished","dim","halfDiminished","augmented","majorSeventh","leftParen","rightParen","leftBracket","rightBracket","leftParenTall","rightParenTall","symbolTypes","symbolModifiers","all","dot","setDotShiftY","dot_list","max_shift_map","note_id","dot_shift","x_width","last_line","last_note","prev_dotted_space","half_shiftY","radius","forceFlagRight","FretHandFinger","nums","nums_list","prev_note","shiftLeft","shiftRight","pos","textHeight","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","lastLine","lastNote","num_shift","numWidth","fingerings","fingeringString","number","Fingering","fingering","finger","x_offset","setFretHandFinger","getFretHandFinger","setOffsetX","setOffsetY","NoteHead","custom_glyph","stem_up_x_offset","stem_down_x_offset","note_type","glyph_code","custom_glyph_code","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","fontShift","displacedFontShift","half_spacing","min_y","getYForNote","head_x","categorySuffix","staveSpace","durationToNumber","breve_lines","drawSlashNoteHead","renderGlyph","setStem","buildStem","buildFlag","hasFlag","flagCode","getBaseCustomNoteHeadGlyphProps","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","setStemDirection","offsets","offsetYBaseStemUp","offsetYTopStemUp","offsetYBaseStemDown","offsetYTopStemDown","getCenterGlyphX","stem_extension_override","setStemLength","drawStem","stemOptions","shiftRestVertical","dir","delta","maxLine","minLine","setKeyLine","getKeyLine","STEM_UP","STEM_DOWN","LEDGER_LINE_OFFSET","minNoteheadPadding","notesList","sortedKeyProps","minL","stemMax","stemMin","maxL","isrest","voice_shift","getVoiceShiftWidth","is_displaced","noteU","noteM","noteL","voiceXShift","lineSpacing","lineDiff","whiteNoteHeadCount","blackNoteHeadCount","centerRest","ledgerLineStyle","use_default_head_x","_noteHeads","calculateKeyProps","auto_stem","autoStem","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","head","calcNoteDisplacements","noteProps","notehead","calculateOptimalStemDirection","keyProperties","minY","maxY","halfLineSpacing","frac","resultLine","thisLine","isChord","getNoteHeadBounds","setNoteDisplaced","getRightShift","restLine","isInnerNoteIndex","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","getFlagStyle","setKeyStyle","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","yTop","Infinity","yBottom","highestLine","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","displaced_x","non_displaced_x","highest_line","lowest_line","highest_displaced_line","lowest_displaced_line","highest_non_displaced_line","lowest_non_displaced_line","getNoteHeadBeginX","getNoteHeadEndX","noteHeads","note_heads","drawLedgerLines","doubleWidth","min_x","drawLedgerLine","normal","ledgerWidth","getDefaultLedgerLineStyle","drawModifiers","noteheadParam","noteheadStyle","hasNoBeam","drawFlag","_d","_e","noteStemHeight","flagX","flagY","getStaveNoteScale","drawNoteHeads","super_stem_extension","mid_line_distance","lines_over_octave_from_mid_line","spacing_between_lines","xBegin","shouldRenderStem","stemX","StaveTie","setNotes","cp1","cp2","text_shift_x","first_x_shift","last_x_shift","tie_spacing","first_note","first_indices","last_indices","isPartial","renderTie","first_ys","last_ys","last_x_px","first_x_px","first_y_px","last_y_px","top_cp_y","bottom_cp_y","center_x","getNotes","getTieStartX","getTieEndX","TabTie","VoiceMode","Voice","Mode","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","softmaxFactor","totalTicks","smallestTickCount","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","reCalculateExpTicksUsed","expTicksUsed","softmax","tickValue","v","exp","addTickable","addTickables","gracenote_groups","group_list","gracenote_group","is_stavenote","formatWidth","group_shift","grace_notes","show_slur","slur","slur_y_shift","beams","Formatter","joinVoices","format","getMinTotalWidth","beamNotes","Beam","beam_width","partial_beam_length","graceNote","TieClass","NoteSubGroup","groups","group","TickContext","tContext","contexts","tContexts","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","xOffset","tickablesByVoice","totalLeftPx","totalRightPx","getTickID","getXBase","setXBase","getXOffset","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","tick","Ornament","ornament","ornamentRelease","ornamentAttack","reportedWidth","ornamentArticulation","ornamentNoteTransition","ornamentAlignWithNoteHead","ornamentMetrics","delayed","accidentalLowerPadding","accidentalUpperPadding","ornamentCodes","adjustForStemDirection","stemUpYOffset","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","stemDir","stemExtents","isPlacedOnNoteheadSide","glyphYBetweenLines","glyphX","glyphY","delayXShift","startX","nextContext","getNextContext","Parenthesis","parentheses","x_widthL","x_widthR","parenthesis","isHTMLCanvas","HTMLCanvasElement","toDataURL","isHTMLDiv","HTMLDivElement","appendChild","CanvasContext","CANVAS_BROWSER_SIZE_LIMIT","limit","context2D","canvas","clearRect","cls","setBackgroundFillStyle","blur","getTransform","setLineCap","capType","lineCap","setLineDash","dash","resize","devicePixelRatio","sanitizeCanvasDims","rect","cp1x","cp1y","cp2x","cp2y","cpx","cpy","startAngle","endAngle","counterclockwise","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","ATTRIBUTES_TO_IGNORE","path","SVG_NS","TWO_PI","SVGContext","backgroundFillStyle","fontCSSString","svg","parent","pen","defaultFontAttributes","scaleX","scaleY","attributes","groupAttributes","applyAttributes","shadow_attributes","state_stack","svgElementType","createElementNS","lineDash","visibleWidth","visibleHeight","setViewBox","viewBox_or_minX","viewBoxString","attrNamesToIgnore","nodeName","attrName","setAttributeNS","lastChild","removeChild","rectangle","x0","cos","y0","sin","tmpStartTest","tmpEndTest","large","sweep","getShadowStyle","sa","measureTextCache","txt","textContent","savedState","fontAttributes","RendererBackends","RendererLineEndType","TextJustification","VoltaType","measureImpl","getBBox","Renderer","elementId","backend","background","renderer","lastContext","buildContext","Backends","CANVAS","SVG","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","arg0","arg1","maybeElement","willReadFrequently","LineEndType","StringNumber","stringNumber","verticalPadding","stemPadding","leftPadding","rightPadding","shift_left","glyphLine","num_shiftR","num_width","string_number","stem_offset","dashed","leg","drawCircle","setLineEndType","setStringNumber","setLastNote","setDashed","setDrawCircle","len","pattern","drawDashedLine","Stroke","strokes","strokeList","string","getPositions","strokeShift","all_voices","addEndNote","note_end","line_space","arrow","arrow_shift_x","arrow_y","text_y","Type","BRUSH_DOWN","BRUSH_UP","ROLL_DOWN","RASQUEDO_DOWN","ROLL_UP","RASQUEDO_UP","ARPEGGIO_DIRECTIONLESS","strokeLine","Vibrato","vibratos","vibrato","harsh","vibrato_width","wave_height","wave_width","wave_girth","setVibratoWidth","setHarsh","vx","vy","renderVibrato","opts","num_waves","ModifierContext","members","formatted","member","getLeftShift","Clef","types","tab","annotationSmufl","attachment","KeySignature","cancelKeySpec","alterKeySpec","setKeySig","glyphFontScale","xPositions","paddingForced","convertToGlyph","nextAcc","accGlyphData","extraWidth","xPosition","cancelKey","convertToCancelAccList","cancel_accList","different_types","naturals","cancelled","concat","addToStave","convertAccLines","customLines","offset","alterKey","convertToAlterAccList","firstAccidentalType","cancelAccList","getEndClef","getClef","Repetition","symbol_type","setShiftX","setShiftY","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSignoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","TO_CODA","draw_coda","text_x","symbol_x","modifierWidth","getVerticalBarWidth","StaveSection","section","drawRect","shift_x","setStaveSection","textY","headroom","StaveTempo","tempo","setTempo","bpm","noteTextFont","noteTextFormatter","stem_height","flagMetrics","TextNote","GLYPHS","segno","mordent_upper","mordent_lower","p","z","coda","pedal_open","pedal_close","caesura_straight","caesura_curved","breath","superscript","subscript","smooth","justification","struct","Justification","StaveText","setStaveText","setText","getBottomLineY","Volta","volta","top_y","vert_height","BEGIN_END","TimeSignatureGlyph","timeSignature","topDigits","botDigits","topWidth","timeSigType","topGlyph","botWidth","botGlyph","topStartX","botStartX","start_x","topLine","bottomLine","TimeSignature","timeSpec","customPadding","validate_args","fontLineShift","parseTimeSpec","numbers","test","assertIsValidTimeSig","makeTimeSignatureGlyph","getInfo","setTimeSig","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","Stave","defaultPadding","end_x","measure","endClef","vertical_bar_width","num_lines","fill_style","left_bar","right_bar","spacing_between_lines_px","space_above_staff_ln","space_below_staff_ln","top_text_position","bottom_text_position","line_config","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","setDefaultLedgerLineStyle","visible","setNoteStartX","getNoteEndX","setNumLines","mod","setMeasure","getMeasure","getModifierXShift","begBarline","setRepetitionType","setVoltaType","number_t","setSection","staveSection","getLineForY","setBegBarType","setEndBarType","setClef","clefSpec","addClef","setEndClef","setKeySignature","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","items","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","getConfigForLines","setConfigForLine","line_number","setConfigForLines","lines_configuration","staves","maxX","drawBoldDoubleLine","topX","StaveConnector","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","top_stave","bottom_stave","texts","newType","content","SINGLE_RIGHT","THIN_DOUBLE","attachment_height","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","sumArray","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","paddingBetween","accumulator","stavePadding","contextGaps","gaps","gap","totalCost","toFixed","total","auto_beam","align_rests","applyAndGetBeams","formatToStave","tabstave","tabnotes","autobeam","notevoice","tabvoice","alignAllNotes","alignTuplets","currTickable","prevTickable","formatterOptions","globalSoftmax","maxIterations","justifyWidth","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","array","list","modifierContexts","lossHistory","alignRests","AlignRestsToNotes","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","tickToContextMap","integerTicks","staveTickToContextMap","newContext","makeContext","addToContext","tickList","createContexts","contextArray","getTickContexts","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","centerX","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMaxCalc","curTargetWidth","lastTickablePadding","lastTickable","tickWidth","paddingMax","paddingMin","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","current","cost","optionsParam","TupletLocation","Tuplet","LOCATION_TOP","LOCATION_BOTTOM","NESTING_OFFSET","tupletMetrics","numerator_glyphs","denom_glyphs","num_notes","beats_occupied","beatsOccupiedDeprecationWarning","notes_occupied","bracketed","ratioed","setTupletLocation","location","resolveGlyphs","attach","detach","setBracketed","setRatioed","getBeatsOccupied","setBeatsOccupied","beats","setNotesOccupied","unshift","getNestedTupletCount","maxTupletCount","countTuplets","minTupletCount","tupletCount","getYPosition","nested_tuplet_y_offset","topModifierOffset","modLines","modY","noteHeadOffset","stemOffset","lineCheck","nn","bottom_y","addGlyphWidth","notation_start_x","shiftY","colon_x","colon_radius","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_RIGHT","BEAM_BOTH","time_sig","beatTotal","beatValue","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","vf_notes","memo","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","breaksOnEachRest","beam_rests","breaksOnFirstOrLastRest","beam_middle_only","breakOnStemChange","maintain_stem_directions","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","show_stemlets","secondary_breaks","secondary_break_ticks","flat_beams","flat_beam_offset","slope","forcedPartialDirections","stem_weight","break_on_indices","max_slope","min_slope","slope_iterations","slope_cost","stemlet_extension","min_flat_beam_offset","beamCount","breakSecondaryAt","indices","setPartialBeamSideAt","side","unsetPartialBeamSideAt","getSlopeY","calculateSlope","firstNote","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","diff","idealSlope","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","getBeamYToDraw","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","crossStemExtension","totalBeamWidth","lookupBeamDirection","prev_tick","next_tick","forcedBeamDirection","lookup_duration","prev_note_gets_beam","next_note_gets_beam","note_gets_beam","getBeamLines","tick_of_duration","beam_started","beam_lines","current_beam","previous_should_break","tick_tally","should_break","next_note","beam_alone","beam_direction","last_beam","drawStems","drawBeamLines","valid_beam_durations","beamThickness","beamLines","beam_line","startBeamX","startBeamY","lastBeamX","lastBeamY","ClefNote","abs_x","Crescendo","extend_left","extend_right","decrescendo","setHeight","setDecrescendo","decresc","tick_context","next_context","begin_x","half_height","reverse","renderHairpin","CurvePosition","Curve","nearHead","NEAR_HEAD","nearTop","NEAR_TOP","from","to","position_end","invert","cps","renderCurve","first_x","first_y","last_x","last_y","cp0x","cp0y","cp_spacing","end_metric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","GhostNote","buildAndAttach","setId","commaSeparatedRegex","setClass","defaults","easyScoreHook","throwOnError","parser","ERROR_MSG","parameter","GlyphNote","ignoreTicks","setGlyph","SCALE","slash","ret","staveNoteScale","offsetScale","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","defaultStemExtention","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beam_slope","beam_angle","atan","iPointOnBeam","slash_angle","protrusion_stem_dx","protrusion_stem_dy","protrusion_beam_dx","protrusion_beam_dy","stem0X","stemY","KeySigNote","semibreve_rest","MultiMeasureRest","number_of_measures","xs","hasPaddingLeft","hasPaddingRight","hasLineThickness","hasSymbolSpacing","padding_left","padding_right","line_thickness","symbol_spacing","use_symbols","show_number","number_line","number_glyph_point","serif_thickness","semibreve_rest_glyph_scale","getXs","drawLine","spacingBetweenLines","lineThicknessHalf","serifThickness","bot","leftIndented","rightIndented","lineTop","lineBottom","drawSymbols","n4","n2","n1","get_semibreve_rest","rest_scale","rest_width","yMiddle","timeSig","drawPedalGlyph","glyph_data","PedalMarking","pedal","MIXED","setCustomText","custom_depress_text","custom_release_text","bracket_height","text_margin_right","bracket_line_width","depress","drawBracketed","prev_x","prev_y","is_pedal_depressed","next_is_same","prev_is_same","drawText","pedal_depress","pedal_release","mixed","CODES","RepeatNote","drawArrowHead","StaveLine","line_dash","rounded_end","draw_start_arrow","draw_end_arrow","arrowhead_length","arrowhead_angle","text_position_vertical","TextVerticalPosition","text_justification","applyLineStyle","applyFontStyle","drawArrowLine","pt1","pt2","both_arrows","distance","ratio","end_y","start_y","line_angle","angle1","angle2","top_x","bottom_x","start_position","end_position","first_index","last_index","upwards_slope","notehead_width","vertical_position","System","partStaves","partStaveInfos","partVoices","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","getStaves","getVoices","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","addVoices","options_details","debugNoteMetricsYs","part","lastY","formatBegModifiers","plotDebugging","plotMetrics","glyphPropsArr","positions","ghost","draw_dots","draw_stem_through_stave","setGhost","tabToGlyphProps","getStemY","stemDownLine","stemStartLine","flag_x","flag_y","drawStemThrough","stemThrough","stemLines","unused_strings","up_stem","down_stem","line_spacing","total_lines","stem_lines","strings","containsLastString","containsFirstString","line_ys","isTopBound","isBottomBound","getPartialStemLines","strings_used","stem_through","getUnusedStringGroups","drawPositions","tab_x","render_stem","TabStave","addTabGlyph","TextBracket","TextBracketPosition","Positions","PositionsString","stop","show_bracket","underline_superscript","main_measure","main_width","main_height","super_y","super_measure","super_width","super_height","line_y","TextDynamics","sequence","glyph_font_size","total_width","letter","letter_x","current_letter","TimeSigNote","timeSigInfo","VibratoBracket","bracket_data","stop_x","Factory","renderQ","systems","initRenderer","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","hJustify","vJustify","kerning","upperAccidental","lowerAccidental","numMeasures","multiMeasureRest","secondaryBeamBreaks","partialBeamDirections","curve","tie","vibratoBracket","textBracket","system","GraceTabNote","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","StaveHairpin","ppt","pixelsPerTick","l_shift_px","left_shift_ticks","r_shift_px","right_shift_ticks","hairpin_options","left_shift_px","right_shift_px","setRenderOptions","hairpin","dis","staff_height","l_shift","r_shift","CRESC","DECRESC","TabSlide","SLIDE_UP","SLIDE_DOWN","first_fret","last_fret","slide_y","Tremolo","y_spacing_scale","extra_stroke_scale","y_spacing","Tuning","names","standard","dagdad","dropd","standardBanjo","tuningString","tuningValues","setTuning","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","integerToNote","Flow","BUILD","VERSION","DATE","fontNames","fontModuleOrPath","hasKeySignature","getKeySignatures","PetalumaScriptFont","$","I","J","K","N","O","Q","U","V","Y","Z","_","l","generatedOn","RobotoSlabFont","SansFontBold","SansFont","smufl","Description","SerifFont","Vex","cmp","eq","newArr","last","canvasSelector","start_time","Date","getTime","fontModules","Bravura","Gonville","Petaluma","Leland","Custom","fetchMusicFont","fontModule","import","VexFlowFont","fontData","registerInfo","description","loadTextFonts"],"sourceRoot":""}